
Crewmate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a68  08006a68  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c58  20000080  08006af0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd8  08006af0  00021cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7c2  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002997  00000000  00000000  0002d86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00030208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00030fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd04  00000000  00000000  00031c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117f0  00000000  00000000  0005195c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bba88  00000000  00000000  0006314c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ebd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca0  00000000  00000000  0011ec24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006a30 	.word	0x08006a30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08006a30 	.word	0x08006a30

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2f>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ac:	bf24      	itt	cs
 80008ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008b6:	d90d      	bls.n	80008d4 <__aeabi_d2f+0x30>
 80008b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008d8:	d121      	bne.n	800091e <__aeabi_d2f+0x7a>
 80008da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008de:	bfbc      	itt	lt
 80008e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	4770      	bxlt	lr
 80008e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ee:	f1c2 0218 	rsb	r2, r2, #24
 80008f2:	f1c2 0c20 	rsb	ip, r2, #32
 80008f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008fa:	fa20 f002 	lsr.w	r0, r0, r2
 80008fe:	bf18      	it	ne
 8000900:	f040 0001 	orrne.w	r0, r0, #1
 8000904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800090c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000910:	ea40 000c 	orr.w	r0, r0, ip
 8000914:	fa23 f302 	lsr.w	r3, r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	e7cc      	b.n	80008b8 <__aeabi_d2f+0x14>
 800091e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000922:	d107      	bne.n	8000934 <__aeabi_d2f+0x90>
 8000924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000928:	bf1e      	ittt	ne
 800092a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800092e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000932:	4770      	bxne	lr
 8000934:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000938:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800093c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_frsub>:
 8000944:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000948:	e002      	b.n	8000950 <__addsf3>
 800094a:	bf00      	nop

0800094c <__aeabi_fsub>:
 800094c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000950 <__addsf3>:
 8000950:	0042      	lsls	r2, r0, #1
 8000952:	bf1f      	itttt	ne
 8000954:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000958:	ea92 0f03 	teqne	r2, r3
 800095c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000960:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000964:	d06a      	beq.n	8000a3c <__addsf3+0xec>
 8000966:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800096a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096e:	bfc1      	itttt	gt
 8000970:	18d2      	addgt	r2, r2, r3
 8000972:	4041      	eorgt	r1, r0
 8000974:	4048      	eorgt	r0, r1
 8000976:	4041      	eorgt	r1, r0
 8000978:	bfb8      	it	lt
 800097a:	425b      	neglt	r3, r3
 800097c:	2b19      	cmp	r3, #25
 800097e:	bf88      	it	hi
 8000980:	4770      	bxhi	lr
 8000982:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000996:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800099a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800099e:	bf18      	it	ne
 80009a0:	4249      	negne	r1, r1
 80009a2:	ea92 0f03 	teq	r2, r3
 80009a6:	d03f      	beq.n	8000a28 <__addsf3+0xd8>
 80009a8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ac:	fa41 fc03 	asr.w	ip, r1, r3
 80009b0:	eb10 000c 	adds.w	r0, r0, ip
 80009b4:	f1c3 0320 	rsb	r3, r3, #32
 80009b8:	fa01 f103 	lsl.w	r1, r1, r3
 80009bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009c0:	d502      	bpl.n	80009c8 <__addsf3+0x78>
 80009c2:	4249      	negs	r1, r1
 80009c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009cc:	d313      	bcc.n	80009f6 <__addsf3+0xa6>
 80009ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009d2:	d306      	bcc.n	80009e2 <__addsf3+0x92>
 80009d4:	0840      	lsrs	r0, r0, #1
 80009d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009da:	f102 0201 	add.w	r2, r2, #1
 80009de:	2afe      	cmp	r2, #254	; 0xfe
 80009e0:	d251      	bcs.n	8000a86 <__addsf3+0x136>
 80009e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ea:	bf08      	it	eq
 80009ec:	f020 0001 	biceq.w	r0, r0, #1
 80009f0:	ea40 0003 	orr.w	r0, r0, r3
 80009f4:	4770      	bx	lr
 80009f6:	0049      	lsls	r1, r1, #1
 80009f8:	eb40 0000 	adc.w	r0, r0, r0
 80009fc:	3a01      	subs	r2, #1
 80009fe:	bf28      	it	cs
 8000a00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a04:	d2ed      	bcs.n	80009e2 <__addsf3+0x92>
 8000a06:	fab0 fc80 	clz	ip, r0
 8000a0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a16:	bfaa      	itet	ge
 8000a18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a1c:	4252      	neglt	r2, r2
 8000a1e:	4318      	orrge	r0, r3
 8000a20:	bfbc      	itt	lt
 8000a22:	40d0      	lsrlt	r0, r2
 8000a24:	4318      	orrlt	r0, r3
 8000a26:	4770      	bx	lr
 8000a28:	f092 0f00 	teq	r2, #0
 8000a2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a30:	bf06      	itte	eq
 8000a32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a36:	3201      	addeq	r2, #1
 8000a38:	3b01      	subne	r3, #1
 8000a3a:	e7b5      	b.n	80009a8 <__addsf3+0x58>
 8000a3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a44:	bf18      	it	ne
 8000a46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4a:	d021      	beq.n	8000a90 <__addsf3+0x140>
 8000a4c:	ea92 0f03 	teq	r2, r3
 8000a50:	d004      	beq.n	8000a5c <__addsf3+0x10c>
 8000a52:	f092 0f00 	teq	r2, #0
 8000a56:	bf08      	it	eq
 8000a58:	4608      	moveq	r0, r1
 8000a5a:	4770      	bx	lr
 8000a5c:	ea90 0f01 	teq	r0, r1
 8000a60:	bf1c      	itt	ne
 8000a62:	2000      	movne	r0, #0
 8000a64:	4770      	bxne	lr
 8000a66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a6a:	d104      	bne.n	8000a76 <__addsf3+0x126>
 8000a6c:	0040      	lsls	r0, r0, #1
 8000a6e:	bf28      	it	cs
 8000a70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a74:	4770      	bx	lr
 8000a76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a7a:	bf3c      	itt	cc
 8000a7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bxcc	lr
 8000a82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8e:	4770      	bx	lr
 8000a90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a94:	bf16      	itet	ne
 8000a96:	4608      	movne	r0, r1
 8000a98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a9c:	4601      	movne	r1, r0
 8000a9e:	0242      	lsls	r2, r0, #9
 8000aa0:	bf06      	itte	eq
 8000aa2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa6:	ea90 0f01 	teqeq	r0, r1
 8000aaa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_ui2f>:
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	e004      	b.n	8000ac0 <__aeabi_i2f+0x8>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_i2f>:
 8000ab8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000abc:	bf48      	it	mi
 8000abe:	4240      	negmi	r0, r0
 8000ac0:	ea5f 0c00 	movs.w	ip, r0
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000acc:	4601      	mov	r1, r0
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	e01c      	b.n	8000b0e <__aeabi_l2f+0x2a>

08000ad4 <__aeabi_ul2f>:
 8000ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad8:	bf08      	it	eq
 8000ada:	4770      	bxeq	lr
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	e00a      	b.n	8000af8 <__aeabi_l2f+0x14>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_l2f>:
 8000ae4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae8:	bf08      	it	eq
 8000aea:	4770      	bxeq	lr
 8000aec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_l2f+0x14>
 8000af2:	4240      	negs	r0, r0
 8000af4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af8:	ea5f 0c01 	movs.w	ip, r1
 8000afc:	bf02      	ittt	eq
 8000afe:	4684      	moveq	ip, r0
 8000b00:	4601      	moveq	r1, r0
 8000b02:	2000      	moveq	r0, #0
 8000b04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b08:	bf08      	it	eq
 8000b0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b12:	fabc f28c 	clz	r2, ip
 8000b16:	3a08      	subs	r2, #8
 8000b18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b1c:	db10      	blt.n	8000b40 <__aeabi_l2f+0x5c>
 8000b1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b22:	4463      	add	r3, ip
 8000b24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b28:	f1c2 0220 	rsb	r2, r2, #32
 8000b2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b30:	fa20 f202 	lsr.w	r2, r0, r2
 8000b34:	eb43 0002 	adc.w	r0, r3, r2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f102 0220 	add.w	r2, r2, #32
 8000b44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b48:	f1c2 0220 	rsb	r2, r2, #32
 8000b4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b50:	fa21 f202 	lsr.w	r2, r1, r2
 8000b54:	eb43 0002 	adc.w	r0, r3, r2
 8000b58:	bf08      	it	eq
 8000b5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_fmul>:
 8000b60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b68:	bf1e      	ittt	ne
 8000b6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b6e:	ea92 0f0c 	teqne	r2, ip
 8000b72:	ea93 0f0c 	teqne	r3, ip
 8000b76:	d06f      	beq.n	8000c58 <__aeabi_fmul+0xf8>
 8000b78:	441a      	add	r2, r3
 8000b7a:	ea80 0c01 	eor.w	ip, r0, r1
 8000b7e:	0240      	lsls	r0, r0, #9
 8000b80:	bf18      	it	ne
 8000b82:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b86:	d01e      	beq.n	8000bc6 <__aeabi_fmul+0x66>
 8000b88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b8c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b90:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b94:	fba0 3101 	umull	r3, r1, r0, r1
 8000b98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b9c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba0:	bf3e      	ittt	cc
 8000ba2:	0049      	lslcc	r1, r1, #1
 8000ba4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba8:	005b      	lslcc	r3, r3, #1
 8000baa:	ea40 0001 	orr.w	r0, r0, r1
 8000bae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bb2:	2afd      	cmp	r2, #253	; 0xfd
 8000bb4:	d81d      	bhi.n	8000bf2 <__aeabi_fmul+0x92>
 8000bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	4770      	bx	lr
 8000bc6:	f090 0f00 	teq	r0, #0
 8000bca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bce:	bf08      	it	eq
 8000bd0:	0249      	lsleq	r1, r1, #9
 8000bd2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bd6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bda:	3a7f      	subs	r2, #127	; 0x7f
 8000bdc:	bfc2      	ittt	gt
 8000bde:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000be6:	4770      	bxgt	lr
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	3a01      	subs	r2, #1
 8000bf2:	dc5d      	bgt.n	8000cb0 <__aeabi_fmul+0x150>
 8000bf4:	f112 0f19 	cmn.w	r2, #25
 8000bf8:	bfdc      	itt	le
 8000bfa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bxle	lr
 8000c00:	f1c2 0200 	rsb	r2, r2, #0
 8000c04:	0041      	lsls	r1, r0, #1
 8000c06:	fa21 f102 	lsr.w	r1, r1, r2
 8000c0a:	f1c2 0220 	rsb	r2, r2, #32
 8000c0e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c12:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c16:	f140 0000 	adc.w	r0, r0, #0
 8000c1a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c1e:	bf08      	it	eq
 8000c20:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c24:	4770      	bx	lr
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0040      	lsleq	r0, r0, #1
 8000c32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c36:	3a01      	subeq	r2, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xce>
 8000c3a:	ea40 000c 	orr.w	r0, r0, ip
 8000c3e:	f093 0f00 	teq	r3, #0
 8000c42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c46:	bf02      	ittt	eq
 8000c48:	0049      	lsleq	r1, r1, #1
 8000c4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c4e:	3b01      	subeq	r3, #1
 8000c50:	d0f9      	beq.n	8000c46 <__aeabi_fmul+0xe6>
 8000c52:	ea41 010c 	orr.w	r1, r1, ip
 8000c56:	e78f      	b.n	8000b78 <__aeabi_fmul+0x18>
 8000c58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	bf18      	it	ne
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d00a      	beq.n	8000c7e <__aeabi_fmul+0x11e>
 8000c68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c6c:	bf18      	it	ne
 8000c6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c72:	d1d8      	bne.n	8000c26 <__aeabi_fmul+0xc6>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	bf17      	itett	ne
 8000c84:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	f091 0f00 	teqne	r1, #0
 8000c8e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c92:	d014      	beq.n	8000cbe <__aeabi_fmul+0x15e>
 8000c94:	ea92 0f0c 	teq	r2, ip
 8000c98:	d101      	bne.n	8000c9e <__aeabi_fmul+0x13e>
 8000c9a:	0242      	lsls	r2, r0, #9
 8000c9c:	d10f      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000c9e:	ea93 0f0c 	teq	r3, ip
 8000ca2:	d103      	bne.n	8000cac <__aeabi_fmul+0x14c>
 8000ca4:	024b      	lsls	r3, r1, #9
 8000ca6:	bf18      	it	ne
 8000ca8:	4608      	movne	r0, r1
 8000caa:	d108      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000cac:	ea80 0001 	eor.w	r0, r0, r1
 8000cb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fdiv>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d069      	beq.n	8000db4 <__aeabi_fdiv+0xec>
 8000ce0:	eba2 0203 	sub.w	r2, r2, r3
 8000ce4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce8:	0249      	lsls	r1, r1, #9
 8000cea:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cee:	d037      	beq.n	8000d60 <__aeabi_fdiv+0x98>
 8000cf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cf4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d00:	428b      	cmp	r3, r1
 8000d02:	bf38      	it	cc
 8000d04:	005b      	lslcc	r3, r3, #1
 8000d06:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d0a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	bf24      	itt	cs
 8000d12:	1a5b      	subcs	r3, r3, r1
 8000d14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d18:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d1c:	bf24      	itt	cs
 8000d1e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d22:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d26:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d2a:	bf24      	itt	cs
 8000d2c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d38:	bf24      	itt	cs
 8000d3a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d3e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d4a:	d1e0      	bne.n	8000d0e <__aeabi_fdiv+0x46>
 8000d4c:	2afd      	cmp	r2, #253	; 0xfd
 8000d4e:	f63f af50 	bhi.w	8000bf2 <__aeabi_fmul+0x92>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d64:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d68:	327f      	adds	r2, #127	; 0x7f
 8000d6a:	bfc2      	ittt	gt
 8000d6c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d70:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d74:	4770      	bxgt	lr
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7a:	f04f 0300 	mov.w	r3, #0
 8000d7e:	3a01      	subs	r2, #1
 8000d80:	e737      	b.n	8000bf2 <__aeabi_fmul+0x92>
 8000d82:	f092 0f00 	teq	r2, #0
 8000d86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0040      	lsleq	r0, r0, #1
 8000d8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d92:	3a01      	subeq	r2, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xc2>
 8000d96:	ea40 000c 	orr.w	r0, r0, ip
 8000d9a:	f093 0f00 	teq	r3, #0
 8000d9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0049      	lsleq	r1, r1, #1
 8000da6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000daa:	3b01      	subeq	r3, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fdiv+0xda>
 8000dae:	ea41 010c 	orr.w	r1, r1, ip
 8000db2:	e795      	b.n	8000ce0 <__aeabi_fdiv+0x18>
 8000db4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d108      	bne.n	8000dd0 <__aeabi_fdiv+0x108>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	f47f af7d 	bne.w	8000cbe <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	f47f af70 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e776      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dd0:	ea93 0f0c 	teq	r3, ip
 8000dd4:	d104      	bne.n	8000de0 <__aeabi_fdiv+0x118>
 8000dd6:	024b      	lsls	r3, r1, #9
 8000dd8:	f43f af4c 	beq.w	8000c74 <__aeabi_fmul+0x114>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e76e      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000de0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de4:	bf18      	it	ne
 8000de6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	d1ca      	bne.n	8000d82 <__aeabi_fdiv+0xba>
 8000dec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df0:	f47f af5c 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000df4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000df8:	f47f af3c 	bne.w	8000c74 <__aeabi_fmul+0x114>
 8000dfc:	e75f      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dfe:	bf00      	nop

08000e00 <__gesf2>:
 8000e00:	f04f 3cff 	mov.w	ip, #4294967295
 8000e04:	e006      	b.n	8000e14 <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__lesf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	e002      	b.n	8000e14 <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__cmpsf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e24:	bf18      	it	ne
 8000e26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e2a:	d011      	beq.n	8000e50 <__cmpsf2+0x40>
 8000e2c:	b001      	add	sp, #4
 8000e2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e32:	bf18      	it	ne
 8000e34:	ea90 0f01 	teqne	r0, r1
 8000e38:	bf58      	it	pl
 8000e3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e3e:	bf88      	it	hi
 8000e40:	17c8      	asrhi	r0, r1, #31
 8000e42:	bf38      	it	cc
 8000e44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e48:	bf18      	it	ne
 8000e4a:	f040 0001 	orrne.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e54:	d102      	bne.n	8000e5c <__cmpsf2+0x4c>
 8000e56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e5a:	d105      	bne.n	8000e68 <__cmpsf2+0x58>
 8000e5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e60:	d1e4      	bne.n	8000e2c <__cmpsf2+0x1c>
 8000e62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e66:	d0e1      	beq.n	8000e2c <__cmpsf2+0x1c>
 8000e68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <__aeabi_cfrcmple>:
 8000e70:	4684      	mov	ip, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4661      	mov	r1, ip
 8000e76:	e7ff      	b.n	8000e78 <__aeabi_cfcmpeq>

08000e78 <__aeabi_cfcmpeq>:
 8000e78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e7a:	f7ff ffc9 	bl	8000e10 <__cmpsf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	bf48      	it	mi
 8000e82:	f110 0f00 	cmnmi.w	r0, #0
 8000e86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e88 <__aeabi_fcmpeq>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff fff4 	bl	8000e78 <__aeabi_cfcmpeq>
 8000e90:	bf0c      	ite	eq
 8000e92:	2001      	moveq	r0, #1
 8000e94:	2000      	movne	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_fcmplt>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffea 	bl	8000e78 <__aeabi_cfcmpeq>
 8000ea4:	bf34      	ite	cc
 8000ea6:	2001      	movcc	r0, #1
 8000ea8:	2000      	movcs	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmple>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffe0 	bl	8000e78 <__aeabi_cfcmpeq>
 8000eb8:	bf94      	ite	ls
 8000eba:	2001      	movls	r0, #1
 8000ebc:	2000      	movhi	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmpge>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffd2 	bl	8000e70 <__aeabi_cfrcmple>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_fcmpgt>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffc8 	bl	8000e70 <__aeabi_cfrcmple>
 8000ee0:	bf34      	ite	cc
 8000ee2:	2001      	movcc	r0, #1
 8000ee4:	2000      	movcs	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_f2uiz>:
 8000eec:	0042      	lsls	r2, r0, #1
 8000eee:	d20e      	bcs.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef4:	d30b      	bcc.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d409      	bmi.n	8000f14 <__aeabi_f2uiz+0x28>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	fa23 f002 	lsr.w	r0, r3, r2
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2uiz+0x32>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d102      	bne.n	8000f24 <__aeabi_f2uiz+0x38>
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	4770      	bx	lr
 8000f24:	f04f 0000 	mov.w	r0, #0
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__aeabi_uldivmod>:
 8000f2c:	b953      	cbnz	r3, 8000f44 <__aeabi_uldivmod+0x18>
 8000f2e:	b94a      	cbnz	r2, 8000f44 <__aeabi_uldivmod+0x18>
 8000f30:	2900      	cmp	r1, #0
 8000f32:	bf08      	it	eq
 8000f34:	2800      	cmpeq	r0, #0
 8000f36:	bf1c      	itt	ne
 8000f38:	f04f 31ff 	movne.w	r1, #4294967295
 8000f3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f40:	f000 b976 	b.w	8001230 <__aeabi_idiv0>
 8000f44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4c:	f000 f806 	bl	8000f5c <__udivmoddi4>
 8000f50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f58:	b004      	add	sp, #16
 8000f5a:	4770      	bx	lr

08000f5c <__udivmoddi4>:
 8000f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f60:	9e08      	ldr	r6, [sp, #32]
 8000f62:	460d      	mov	r5, r1
 8000f64:	4604      	mov	r4, r0
 8000f66:	4688      	mov	r8, r1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d14d      	bne.n	8001008 <__udivmoddi4+0xac>
 8000f6c:	428a      	cmp	r2, r1
 8000f6e:	4694      	mov	ip, r2
 8000f70:	d968      	bls.n	8001044 <__udivmoddi4+0xe8>
 8000f72:	fab2 f282 	clz	r2, r2
 8000f76:	b152      	cbz	r2, 8000f8e <__udivmoddi4+0x32>
 8000f78:	fa01 f302 	lsl.w	r3, r1, r2
 8000f7c:	f1c2 0120 	rsb	r1, r2, #32
 8000f80:	fa20 f101 	lsr.w	r1, r0, r1
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	ea41 0803 	orr.w	r8, r1, r3
 8000f8c:	4094      	lsls	r4, r2
 8000f8e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000f92:	fbb8 f7f1 	udiv	r7, r8, r1
 8000f96:	fa1f fe8c 	uxth.w	lr, ip
 8000f9a:	fb01 8817 	mls	r8, r1, r7, r8
 8000f9e:	fb07 f00e 	mul.w	r0, r7, lr
 8000fa2:	0c23      	lsrs	r3, r4, #16
 8000fa4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa8:	4298      	cmp	r0, r3
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x66>
 8000fac:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb0:	f107 35ff 	add.w	r5, r7, #4294967295
 8000fb4:	f080 811e 	bcs.w	80011f4 <__udivmoddi4+0x298>
 8000fb8:	4298      	cmp	r0, r3
 8000fba:	f240 811b 	bls.w	80011f4 <__udivmoddi4+0x298>
 8000fbe:	3f02      	subs	r7, #2
 8000fc0:	4463      	add	r3, ip
 8000fc2:	1a1b      	subs	r3, r3, r0
 8000fc4:	fbb3 f0f1 	udiv	r0, r3, r1
 8000fc8:	fb01 3310 	mls	r3, r1, r0, r3
 8000fcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd0:	b2a4      	uxth	r4, r4
 8000fd2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd6:	45a6      	cmp	lr, r4
 8000fd8:	d90a      	bls.n	8000ff0 <__udivmoddi4+0x94>
 8000fda:	eb1c 0404 	adds.w	r4, ip, r4
 8000fde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fe2:	f080 8109 	bcs.w	80011f8 <__udivmoddi4+0x29c>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	f240 8106 	bls.w	80011f8 <__udivmoddi4+0x29c>
 8000fec:	4464      	add	r4, ip
 8000fee:	3802      	subs	r0, #2
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	eba4 040e 	sub.w	r4, r4, lr
 8000ff6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ffa:	b11e      	cbz	r6, 8001004 <__udivmoddi4+0xa8>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	40d4      	lsrs	r4, r2
 8001000:	e9c6 4300 	strd	r4, r3, [r6]
 8001004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0xc2>
 800100c:	2e00      	cmp	r6, #0
 800100e:	f000 80ee 	beq.w	80011ee <__udivmoddi4+0x292>
 8001012:	2100      	movs	r1, #0
 8001014:	e9c6 0500 	strd	r0, r5, [r6]
 8001018:	4608      	mov	r0, r1
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	fab3 f183 	clz	r1, r3
 8001022:	2900      	cmp	r1, #0
 8001024:	d14a      	bne.n	80010bc <__udivmoddi4+0x160>
 8001026:	42ab      	cmp	r3, r5
 8001028:	d302      	bcc.n	8001030 <__udivmoddi4+0xd4>
 800102a:	4282      	cmp	r2, r0
 800102c:	f200 80fc 	bhi.w	8001228 <__udivmoddi4+0x2cc>
 8001030:	1a84      	subs	r4, r0, r2
 8001032:	eb65 0303 	sbc.w	r3, r5, r3
 8001036:	2001      	movs	r0, #1
 8001038:	4698      	mov	r8, r3
 800103a:	2e00      	cmp	r6, #0
 800103c:	d0e2      	beq.n	8001004 <__udivmoddi4+0xa8>
 800103e:	e9c6 4800 	strd	r4, r8, [r6]
 8001042:	e7df      	b.n	8001004 <__udivmoddi4+0xa8>
 8001044:	b902      	cbnz	r2, 8001048 <__udivmoddi4+0xec>
 8001046:	deff      	udf	#255	; 0xff
 8001048:	fab2 f282 	clz	r2, r2
 800104c:	2a00      	cmp	r2, #0
 800104e:	f040 8091 	bne.w	8001174 <__udivmoddi4+0x218>
 8001052:	eba1 000c 	sub.w	r0, r1, ip
 8001056:	2101      	movs	r1, #1
 8001058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800105c:	fa1f fe8c 	uxth.w	lr, ip
 8001060:	fbb0 f3f7 	udiv	r3, r0, r7
 8001064:	fb07 0013 	mls	r0, r7, r3, r0
 8001068:	0c25      	lsrs	r5, r4, #16
 800106a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800106e:	fb0e f003 	mul.w	r0, lr, r3
 8001072:	42a8      	cmp	r0, r5
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x12c>
 8001076:	eb1c 0505 	adds.w	r5, ip, r5
 800107a:	f103 38ff 	add.w	r8, r3, #4294967295
 800107e:	d202      	bcs.n	8001086 <__udivmoddi4+0x12a>
 8001080:	42a8      	cmp	r0, r5
 8001082:	f200 80ce 	bhi.w	8001222 <__udivmoddi4+0x2c6>
 8001086:	4643      	mov	r3, r8
 8001088:	1a2d      	subs	r5, r5, r0
 800108a:	fbb5 f0f7 	udiv	r0, r5, r7
 800108e:	fb07 5510 	mls	r5, r7, r0, r5
 8001092:	fb0e fe00 	mul.w	lr, lr, r0
 8001096:	b2a4      	uxth	r4, r4
 8001098:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800109c:	45a6      	cmp	lr, r4
 800109e:	d908      	bls.n	80010b2 <__udivmoddi4+0x156>
 80010a0:	eb1c 0404 	adds.w	r4, ip, r4
 80010a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80010a8:	d202      	bcs.n	80010b0 <__udivmoddi4+0x154>
 80010aa:	45a6      	cmp	lr, r4
 80010ac:	f200 80b6 	bhi.w	800121c <__udivmoddi4+0x2c0>
 80010b0:	4628      	mov	r0, r5
 80010b2:	eba4 040e 	sub.w	r4, r4, lr
 80010b6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010ba:	e79e      	b.n	8000ffa <__udivmoddi4+0x9e>
 80010bc:	f1c1 0720 	rsb	r7, r1, #32
 80010c0:	408b      	lsls	r3, r1
 80010c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80010c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ca:	fa25 fa07 	lsr.w	sl, r5, r7
 80010ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010d2:	fbba f8f9 	udiv	r8, sl, r9
 80010d6:	fa20 f307 	lsr.w	r3, r0, r7
 80010da:	fb09 aa18 	mls	sl, r9, r8, sl
 80010de:	408d      	lsls	r5, r1
 80010e0:	fa1f fe8c 	uxth.w	lr, ip
 80010e4:	431d      	orrs	r5, r3
 80010e6:	fa00 f301 	lsl.w	r3, r0, r1
 80010ea:	fb08 f00e 	mul.w	r0, r8, lr
 80010ee:	0c2c      	lsrs	r4, r5, #16
 80010f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010f4:	42a0      	cmp	r0, r4
 80010f6:	fa02 f201 	lsl.w	r2, r2, r1
 80010fa:	d90b      	bls.n	8001114 <__udivmoddi4+0x1b8>
 80010fc:	eb1c 0404 	adds.w	r4, ip, r4
 8001100:	f108 3aff 	add.w	sl, r8, #4294967295
 8001104:	f080 8088 	bcs.w	8001218 <__udivmoddi4+0x2bc>
 8001108:	42a0      	cmp	r0, r4
 800110a:	f240 8085 	bls.w	8001218 <__udivmoddi4+0x2bc>
 800110e:	f1a8 0802 	sub.w	r8, r8, #2
 8001112:	4464      	add	r4, ip
 8001114:	1a24      	subs	r4, r4, r0
 8001116:	fbb4 f0f9 	udiv	r0, r4, r9
 800111a:	fb09 4410 	mls	r4, r9, r0, r4
 800111e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001122:	b2ad      	uxth	r5, r5
 8001124:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001128:	45a6      	cmp	lr, r4
 800112a:	d908      	bls.n	800113e <__udivmoddi4+0x1e2>
 800112c:	eb1c 0404 	adds.w	r4, ip, r4
 8001130:	f100 35ff 	add.w	r5, r0, #4294967295
 8001134:	d26c      	bcs.n	8001210 <__udivmoddi4+0x2b4>
 8001136:	45a6      	cmp	lr, r4
 8001138:	d96a      	bls.n	8001210 <__udivmoddi4+0x2b4>
 800113a:	3802      	subs	r0, #2
 800113c:	4464      	add	r4, ip
 800113e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001142:	fba0 9502 	umull	r9, r5, r0, r2
 8001146:	eba4 040e 	sub.w	r4, r4, lr
 800114a:	42ac      	cmp	r4, r5
 800114c:	46c8      	mov	r8, r9
 800114e:	46ae      	mov	lr, r5
 8001150:	d356      	bcc.n	8001200 <__udivmoddi4+0x2a4>
 8001152:	d053      	beq.n	80011fc <__udivmoddi4+0x2a0>
 8001154:	2e00      	cmp	r6, #0
 8001156:	d069      	beq.n	800122c <__udivmoddi4+0x2d0>
 8001158:	ebb3 0208 	subs.w	r2, r3, r8
 800115c:	eb64 040e 	sbc.w	r4, r4, lr
 8001160:	fa22 f301 	lsr.w	r3, r2, r1
 8001164:	fa04 f707 	lsl.w	r7, r4, r7
 8001168:	431f      	orrs	r7, r3
 800116a:	40cc      	lsrs	r4, r1
 800116c:	e9c6 7400 	strd	r7, r4, [r6]
 8001170:	2100      	movs	r1, #0
 8001172:	e747      	b.n	8001004 <__udivmoddi4+0xa8>
 8001174:	fa0c fc02 	lsl.w	ip, ip, r2
 8001178:	f1c2 0120 	rsb	r1, r2, #32
 800117c:	fa25 f301 	lsr.w	r3, r5, r1
 8001180:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001184:	fa20 f101 	lsr.w	r1, r0, r1
 8001188:	4095      	lsls	r5, r2
 800118a:	430d      	orrs	r5, r1
 800118c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001190:	fb07 3311 	mls	r3, r7, r1, r3
 8001194:	fa1f fe8c 	uxth.w	lr, ip
 8001198:	0c28      	lsrs	r0, r5, #16
 800119a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800119e:	fb01 f30e 	mul.w	r3, r1, lr
 80011a2:	4283      	cmp	r3, r0
 80011a4:	fa04 f402 	lsl.w	r4, r4, r2
 80011a8:	d908      	bls.n	80011bc <__udivmoddi4+0x260>
 80011aa:	eb1c 0000 	adds.w	r0, ip, r0
 80011ae:	f101 38ff 	add.w	r8, r1, #4294967295
 80011b2:	d22f      	bcs.n	8001214 <__udivmoddi4+0x2b8>
 80011b4:	4283      	cmp	r3, r0
 80011b6:	d92d      	bls.n	8001214 <__udivmoddi4+0x2b8>
 80011b8:	3902      	subs	r1, #2
 80011ba:	4460      	add	r0, ip
 80011bc:	1ac0      	subs	r0, r0, r3
 80011be:	fbb0 f3f7 	udiv	r3, r0, r7
 80011c2:	fb07 0013 	mls	r0, r7, r3, r0
 80011c6:	b2ad      	uxth	r5, r5
 80011c8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011cc:	fb03 f00e 	mul.w	r0, r3, lr
 80011d0:	42a8      	cmp	r0, r5
 80011d2:	d908      	bls.n	80011e6 <__udivmoddi4+0x28a>
 80011d4:	eb1c 0505 	adds.w	r5, ip, r5
 80011d8:	f103 38ff 	add.w	r8, r3, #4294967295
 80011dc:	d216      	bcs.n	800120c <__udivmoddi4+0x2b0>
 80011de:	42a8      	cmp	r0, r5
 80011e0:	d914      	bls.n	800120c <__udivmoddi4+0x2b0>
 80011e2:	3b02      	subs	r3, #2
 80011e4:	4465      	add	r5, ip
 80011e6:	1a28      	subs	r0, r5, r0
 80011e8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80011ec:	e738      	b.n	8001060 <__udivmoddi4+0x104>
 80011ee:	4631      	mov	r1, r6
 80011f0:	4630      	mov	r0, r6
 80011f2:	e707      	b.n	8001004 <__udivmoddi4+0xa8>
 80011f4:	462f      	mov	r7, r5
 80011f6:	e6e4      	b.n	8000fc2 <__udivmoddi4+0x66>
 80011f8:	4618      	mov	r0, r3
 80011fa:	e6f9      	b.n	8000ff0 <__udivmoddi4+0x94>
 80011fc:	454b      	cmp	r3, r9
 80011fe:	d2a9      	bcs.n	8001154 <__udivmoddi4+0x1f8>
 8001200:	ebb9 0802 	subs.w	r8, r9, r2
 8001204:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001208:	3801      	subs	r0, #1
 800120a:	e7a3      	b.n	8001154 <__udivmoddi4+0x1f8>
 800120c:	4643      	mov	r3, r8
 800120e:	e7ea      	b.n	80011e6 <__udivmoddi4+0x28a>
 8001210:	4628      	mov	r0, r5
 8001212:	e794      	b.n	800113e <__udivmoddi4+0x1e2>
 8001214:	4641      	mov	r1, r8
 8001216:	e7d1      	b.n	80011bc <__udivmoddi4+0x260>
 8001218:	46d0      	mov	r8, sl
 800121a:	e77b      	b.n	8001114 <__udivmoddi4+0x1b8>
 800121c:	4464      	add	r4, ip
 800121e:	3802      	subs	r0, #2
 8001220:	e747      	b.n	80010b2 <__udivmoddi4+0x156>
 8001222:	3b02      	subs	r3, #2
 8001224:	4465      	add	r5, ip
 8001226:	e72f      	b.n	8001088 <__udivmoddi4+0x12c>
 8001228:	4608      	mov	r0, r1
 800122a:	e706      	b.n	800103a <__udivmoddi4+0xde>
 800122c:	4631      	mov	r1, r6
 800122e:	e6e9      	b.n	8001004 <__udivmoddi4+0xa8>

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <move>:
#include <math.h>

extern int16_t goal_forward_left;
extern int16_t goal_forward_right;

void move(int8_t n) {	// Move n cells forward (with acceleration)
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]

	setState(MOVING);
 800123e:	2001      	movs	r0, #1
 8001240:	f000 fe82 	bl	8001f48 <setState>

	setPIDGoalA(0);
 8001244:	2000      	movs	r0, #0
 8001246:	f000 fe6b 	bl	8001f20 <setPIDGoalA>
	setPIDGoalD(MOVE_COUNTS*n);
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	b29b      	uxth	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	00d2      	lsls	r2, r2, #3
 8001254:	4413      	add	r3, r2
 8001256:	461a      	mov	r2, r3
 8001258:	0111      	lsls	r1, r2, #4
 800125a:	461a      	mov	r2, r3
 800125c:	460b      	mov	r3, r1
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b29b      	uxth	r3, r3
 8001264:	b21b      	sxth	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fe46 	bl	8001ef8 <setPIDGoalD>

	while(!PIDdone())
 800126c:	e013      	b.n	8001296 <move+0x62>
	{
		setIRAngle(readIR(IR_LEFT), readIR(IR_RIGHT));
 800126e:	2001      	movs	r0, #1
 8001270:	f000 f8a8 	bl	80013c4 <readIR>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fc1a 	bl	8000ab0 <__aeabi_ui2f>
 800127c:	4604      	mov	r4, r0
 800127e:	2002      	movs	r0, #2
 8001280:	f000 f8a0 	bl	80013c4 <readIR>
 8001284:	4603      	mov	r3, r0
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fc12 	bl	8000ab0 <__aeabi_ui2f>
 800128c:	4603      	mov	r3, r0
 800128e:	4619      	mov	r1, r3
 8001290:	4620      	mov	r0, r4
 8001292:	f000 fe9b 	bl	8001fcc <setIRAngle>
	while(!PIDdone())
 8001296:	f001 fc05 	bl	8002aa4 <PIDdone>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0e6      	beq.n	800126e <move+0x3a>
	}

	resetPID();
 80012a0:	f001 fc12 	bl	8002ac8 <resetPID>

}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}

080012ac <turn>:

void turn(int8_t n) {	// Make n 90 degree turns (no acceleration)
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]

	setState(TURNING);
 80012b6:	2002      	movs	r0, #2
 80012b8:	f000 fe46 	bl	8001f48 <setState>

	setPIDGoalD(0);
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 fe1b 	bl	8001ef8 <setPIDGoalD>
	setPIDGoalA(TURN_COUNTS*n);
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	00d2      	lsls	r2, r2, #3
 80012cc:	1ad2      	subs	r2, r2, r3
 80012ce:	4611      	mov	r1, r2
 80012d0:	0189      	lsls	r1, r1, #6
 80012d2:	1a8a      	subs	r2, r1, r2
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fe20 	bl	8001f20 <setPIDGoalA>

	while(!PIDdone())
 80012e0:	bf00      	nop
 80012e2:	f001 fbdf 	bl	8002aa4 <PIDdone>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0fa      	beq.n	80012e2 <turn+0x36>
	{

	}

	resetPID();
 80012ec:	f001 fbec 	bl	8002ac8 <resetPID>

}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <Delay_Init+0x38>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10e      	bne.n	8001326 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <Delay_Init+0x38>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <Delay_Init+0x38>)
 800130e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001312:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <Delay_Init+0x3c>)
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <Delay_Init+0x3c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <Delay_Init+0x3c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6013      	str	r3, [r2, #0]
    }
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000edf0 	.word	0xe000edf0
 8001334:	e0001000 	.word	0xe0001000

08001338 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <delayMicroseconds+0x30>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800134c:	bf00      	nop
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <delayMicroseconds+0x30>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f8      	bhi.n	800134e <delayMicroseconds+0x16>
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	e0001000 	.word	0xe0001000

0800136c <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <getRightEncoderCounts+0x18>)
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	b29b      	uxth	r3, r3
 8001376:	425b      	negs	r3, r3
 8001378:	b29b      	uxth	r3, r3
 800137a:	b21b      	sxth	r3, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40000400 	.word	0x40000400

08001388 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <getLeftEncoderCounts+0x18>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	b29b      	uxth	r3, r3
 8001392:	425b      	negs	r3, r3
 8001394:	b29b      	uxth	r3, r3
 8001396:	b21b      	sxth	r3, r3
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40010400 	.word	0x40010400

080013a4 <resetEncoders>:

void resetEncoders() {
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <resetEncoders+0x18>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = (int16_t) 0;
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <resetEncoders+0x1c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40000400 	.word	0x40000400
 80013c0:	40010400 	.word	0x40010400

080013c4 <readIR>:
uint8_t complete = 0;

uint32_t usDelay = 100;

uint16_t readIR(IR ir)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue;

	switch(ir)
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d869      	bhi.n	80014a8 <readIR+0xe4>
 80013d4:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <readIR+0x18>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	080013ed 	.word	0x080013ed
 80013e0:	0800141b 	.word	0x0800141b
 80013e4:	08001449 	.word	0x08001449
 80013e8:	08001477 	.word	0x08001477
	    {
	        case IR_FORWARD_LEFT:
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	4830      	ldr	r0, [pc, #192]	; (80014b4 <readIR+0xf0>)
 80013f2:	f003 ff84 	bl	80052fe <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <readIR+0xf4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff9c 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f85c 	bl	80014c0 <analogRead>
 8001408:	4603      	mov	r3, r0
 800140a:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2180      	movs	r1, #128	; 0x80
 8001410:	4828      	ldr	r0, [pc, #160]	; (80014b4 <readIR+0xf0>)
 8001412:	f003 ff74 	bl	80052fe <HAL_GPIO_WritePin>
	        	return readValue;
 8001416:	89fb      	ldrh	r3, [r7, #14]
 8001418:	e047      	b.n	80014aa <readIR+0xe6>
	            break;
	        case IR_LEFT:
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2110      	movs	r1, #16
 800141e:	4825      	ldr	r0, [pc, #148]	; (80014b4 <readIR+0xf0>)
 8001420:	f003 ff6d 	bl	80052fe <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <readIR+0xf4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff85 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f845 	bl	80014c0 <analogRead>
 8001436:	4603      	mov	r3, r0
 8001438:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2110      	movs	r1, #16
 800143e:	481d      	ldr	r0, [pc, #116]	; (80014b4 <readIR+0xf0>)
 8001440:	f003 ff5d 	bl	80052fe <HAL_GPIO_WritePin>
	        	return readValue;
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	e030      	b.n	80014aa <readIR+0xe6>
	            break;
	        case IR_RIGHT:
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	2104      	movs	r1, #4
 800144c:	4819      	ldr	r0, [pc, #100]	; (80014b4 <readIR+0xf0>)
 800144e:	f003 ff56 	bl	80052fe <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <readIR+0xf4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff6e 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f82e 	bl	80014c0 <analogRead>
 8001464:	4603      	mov	r3, r0
 8001466:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2104      	movs	r1, #4
 800146c:	4811      	ldr	r0, [pc, #68]	; (80014b4 <readIR+0xf0>)
 800146e:	f003 ff46 	bl	80052fe <HAL_GPIO_WritePin>
	        	return readValue;
 8001472:	89fb      	ldrh	r3, [r7, #14]
 8001474:	e019      	b.n	80014aa <readIR+0xe6>
	            break;
	        case IR_FORWARD_RIGHT:
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	480f      	ldr	r0, [pc, #60]	; (80014bc <readIR+0xf8>)
 800147e:	f003 ff3e 	bl	80052fe <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <readIR+0xf4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff56 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f816 	bl	80014c0 <analogRead>
 8001494:	4603      	mov	r3, r0
 8001496:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149e:	4807      	ldr	r0, [pc, #28]	; (80014bc <readIR+0xf8>)
 80014a0:	f003 ff2d 	bl	80052fe <HAL_GPIO_WritePin>
	        	return readValue;
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	e000      	b.n	80014aa <readIR+0xe6>
	            break;
	        default:
	            return 0;
 80014a8:	2300      	movs	r3, #0
	    }
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40020000 	.word	0x40020000
 80014b8:	20000000 	.word	0x20000000
 80014bc:	40020400 	.word	0x40020400

080014c0 <analogRead>:
{
	return readIR(IR_FORWARD_RIGHT);
}

uint16_t analogRead(IR ir)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 80014d8:	f000 fc48 	bl	8001d6c <Get_HADC1_Ptr>
 80014dc:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d817      	bhi.n	8001514 <analogRead+0x54>
 80014e4:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <analogRead+0x2c>)
 80014e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ea:	bf00      	nop
 80014ec:	080014fd 	.word	0x080014fd
 80014f0:	08001503 	.word	0x08001503
 80014f4:	08001509 	.word	0x08001509
 80014f8:	0800150f 	.word	0x0800150f
    {
        case IR_FORWARD_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 80014fc:	2306      	movs	r3, #6
 80014fe:	60fb      	str	r3, [r7, #12]
            break;
 8001500:	e00a      	b.n	8001518 <analogRead+0x58>
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_5;
 8001502:	2305      	movs	r3, #5
 8001504:	60fb      	str	r3, [r7, #12]
            break;
 8001506:	e007      	b.n	8001518 <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 8001508:	230b      	movs	r3, #11
 800150a:	60fb      	str	r3, [r7, #12]
            break;
 800150c:	e004      	b.n	8001518 <analogRead+0x58>
        case IR_FORWARD_RIGHT:
            sConfig.Channel = ADC_CHANNEL_10;
 800150e:	230a      	movs	r3, #10
 8001510:	60fb      	str	r3, [r7, #12]
            break;
 8001512:	e001      	b.n	8001518 <analogRead+0x58>
        default:
            return 0;
 8001514:	2300      	movs	r3, #0
 8001516:	e032      	b.n	800157e <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 8001518:	2301      	movs	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	69f8      	ldr	r0, [r7, #28]
 8001528:	f002 fda2 	bl	8004070 <HAL_ADC_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <analogRead+0x76>
    {
        return 0;
 8001532:	2300      	movs	r3, #0
 8001534:	e023      	b.n	800157e <analogRead+0xbe>
    }

    complete = 0;
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <analogRead+0xc8>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	4913      	ldr	r1, [pc, #76]	; (800158c <analogRead+0xcc>)
 8001540:	69f8      	ldr	r0, [r7, #28]
 8001542:	f002 fc53 	bl	8003dec <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 8001546:	e000      	b.n	800154a <analogRead+0x8a>
    {
        continue;
 8001548:	bf00      	nop
    while (complete == 0)
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <analogRead+0xc8>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0fa      	beq.n	8001548 <analogRead+0x88>
    }

    uint32_t sum = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 800155a:	e00a      	b.n	8001572 <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 800155c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <analogRead+0xcc>)
 8001560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001564:	461a      	mov	r2, r3
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	4413      	add	r3, r2
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
        ++measurement;
 800156c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800156e:	3301      	adds	r3, #1
 8001570:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 8001572:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001574:	2b7f      	cmp	r3, #127	; 0x7f
 8001576:	d9f1      	bls.n	800155c <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	09db      	lsrs	r3, r3, #7
 800157c:	b29b      	uxth	r3, r3
}
 800157e:	4618      	mov	r0, r3
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000019c 	.word	0x2000019c
 800158c:	2000009c 	.word	0x2000009c

08001590 <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f002 fd05 	bl	8003fa8 <HAL_ADC_Stop_DMA>
    complete = 1;
 800159e:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_ADC_ConvCpltCallback+0x1c>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2000019c 	.word	0x2000019c

080015b0 <solve>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void solve(Algorithm alg) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	Action nextMove = solver(alg);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fe19 	bl	80031f4 <solver>
 80015c2:	4603      	mov	r3, r0
 80015c4:	74fb      	strb	r3, [r7, #19]
	switch(nextMove) {
 80015c6:	7cfb      	ldrb	r3, [r7, #19]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d835      	bhi.n	8001638 <solve+0x88>
 80015cc:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <solve+0x24>)
 80015ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d2:	bf00      	nop
 80015d4:	08001625 	.word	0x08001625
 80015d8:	080015e5 	.word	0x080015e5
 80015dc:	0800162f 	.word	0x0800162f
 80015e0:	08001637 	.word	0x08001637
		case FORWARD:
//			move(1);
			if (alg == FLOODFILL)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d118      	bne.n	800161c <solve+0x6c>
			{
				int extra_moves = foresight(); // Already has curr position and heading
 80015ea:	f001 ff83 	bl	80034f4 <foresight>
 80015ee:	60f8      	str	r0, [r7, #12]
				for (int i = 0; i < extra_moves; i++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e005      	b.n	8001602 <solve+0x52>
				{
					solver(FLOODFILL);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f001 fdfc 	bl	80031f4 <solver>
				for (int i = 0; i < extra_moves; i++)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	429a      	cmp	r2, r3
 8001608:	dbf5      	blt.n	80015f6 <solve+0x46>
				}
				move(1 + extra_moves);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	3301      	adds	r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	b25b      	sxtb	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe0d 	bl	8001234 <move>
			}
			else
				move(1);
			break;
 800161a:	e00d      	b.n	8001638 <solve+0x88>
				move(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fe09 	bl	8001234 <move>
			break;
 8001622:	e009      	b.n	8001638 <solve+0x88>
		case LEFT:
			turn(-1);
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff fe40 	bl	80012ac <turn>
			break;
 800162c:	e004      	b.n	8001638 <solve+0x88>
		case RIGHT:
			turn(1);
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff fe3c 	bl	80012ac <turn>
			break;
 8001634:	e000      	b.n	8001638 <solve+0x88>
		case IDLE:
			break;
 8001636:	bf00      	nop
	}
}
 8001638:	bf00      	nop
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001644:	f002 fb20 	bl	8003c88 <HAL_Init>

  /* USER CODE BEGIN Init */

  Delay_Init();
 8001648:	f7ff fe56 	bl	80012f8 <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800164c:	f000 f8a8 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001650:	f000 faa8 	bl	8001ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001654:	f000 fa86 	bl	8001b64 <MX_DMA_Init>
  MX_ADC1_Init();
 8001658:	f000 f8de 	bl	8001818 <MX_ADC1_Init>
  MX_TIM1_Init();
 800165c:	f000 f92e 	bl	80018bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001660:	f000 f9d4 	bl	8001a0c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001664:	f000 fa26 	bl	8001ab4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001668:	213c      	movs	r1, #60	; 0x3c
 800166a:	4840      	ldr	r0, [pc, #256]	; (800176c <main+0x12c>)
 800166c:	f004 fc1e 	bl	8005eac <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001670:	213c      	movs	r1, #60	; 0x3c
 8001672:	483f      	ldr	r0, [pc, #252]	; (8001770 <main+0x130>)
 8001674:	f004 fc1a 	bl	8005eac <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001678:	2100      	movs	r1, #0
 800167a:	483e      	ldr	r0, [pc, #248]	; (8001774 <main+0x134>)
 800167c:	f004 faa8 	bl	8005bd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001680:	2104      	movs	r1, #4
 8001682:	483c      	ldr	r0, [pc, #240]	; (8001774 <main+0x134>)
 8001684:	f004 faa4 	bl	8005bd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001688:	2108      	movs	r1, #8
 800168a:	483a      	ldr	r0, [pc, #232]	; (8001774 <main+0x134>)
 800168c:	f004 faa0 	bl	8005bd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001690:	210c      	movs	r1, #12
 8001692:	4838      	ldr	r0, [pc, #224]	; (8001774 <main+0x134>)
 8001694:	f004 fa9c 	bl	8005bd0 <HAL_TIM_PWM_Start>

  HAL_Init();
 8001698:	f002 faf6 	bl	8003c88 <HAL_Init>

  HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a2:	4835      	ldr	r0, [pc, #212]	; (8001778 <main+0x138>)
 80016a4:	f003 fe2b 	bl	80052fe <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fe8b 	bl	80013c4 <readIR>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	4b32      	ldr	r3, [pc, #200]	; (800177c <main+0x13c>)
 80016b4:	801a      	strh	r2, [r3, #0]
	  leftIRvalue = readIR(IR_LEFT);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff fe84 	bl	80013c4 <readIR>
 80016bc:	4603      	mov	r3, r0
 80016be:	b21a      	sxth	r2, r3
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <main+0x140>)
 80016c2:	801a      	strh	r2, [r3, #0]
	  rightIRvalue = readIR(IR_RIGHT);
 80016c4:	2002      	movs	r0, #2
 80016c6:	f7ff fe7d 	bl	80013c4 <readIR>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <main+0x144>)
 80016d0:	801a      	strh	r2, [r3, #0]
	  forwardRightIRvalue = readIR(IR_FORWARD_RIGHT);
 80016d2:	2003      	movs	r0, #3
 80016d4:	f7ff fe76 	bl	80013c4 <readIR>
 80016d8:	4603      	mov	r3, r0
 80016da:	b21a      	sxth	r2, r3
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <main+0x148>)
 80016de:	801a      	strh	r2, [r3, #0]

	  left_counts = getLeftEncoderCounts();
 80016e0:	f7ff fe52 	bl	8001388 <getLeftEncoderCounts>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <main+0x14c>)
 80016ea:	801a      	strh	r2, [r3, #0]
	  right_counts = getRightEncoderCounts();
 80016ec:	f7ff fe3e 	bl	800136c <getRightEncoderCounts>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <main+0x150>)
 80016f6:	801a      	strh	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(LeftButton_GPIO_Port, LeftButton_Pin))
 80016f8:	2101      	movs	r1, #1
 80016fa:	4826      	ldr	r0, [pc, #152]	; (8001794 <main+0x154>)
 80016fc:	f003 fde8 	bl	80052d0 <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01b      	beq.n	800173e <main+0xfe>
	  {
		  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff fe5c 	bl	80013c4 <readIR>
 800170c:	4603      	mov	r3, r0
 800170e:	b21c      	sxth	r4, r3
 8001710:	2003      	movs	r0, #3
 8001712:	f7ff fe57 	bl	80013c4 <readIR>
 8001716:	4603      	mov	r3, r0
 8001718:	b21d      	sxth	r5, r3
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff fe52 	bl	80013c4 <readIR>
 8001720:	4603      	mov	r3, r0
 8001722:	b21e      	sxth	r6, r3
 8001724:	2002      	movs	r0, #2
 8001726:	f7ff fe4d 	bl	80013c4 <readIR>
 800172a:	4603      	mov	r3, r0
 800172c:	b21b      	sxth	r3, r3
 800172e:	4632      	mov	r2, r6
 8001730:	4629      	mov	r1, r5
 8001732:	4620      	mov	r0, r4
 8001734:	f000 fc18 	bl	8001f68 <setIRGoals>
		  irOffset_Set = 1;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <main+0x158>)
 800173a:	2201      	movs	r2, #1
 800173c:	801a      	strh	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(RightButton_GPIO_Port, RightButton_Pin))
 800173e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <main+0x138>)
 8001744:	f003 fdc4 	bl	80052d0 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <main+0x114>
	  {
//		  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
//		  frontCorrection();
		  start_pressed = 1;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <main+0x15c>)
 8001750:	2201      	movs	r2, #1
 8001752:	801a      	strh	r2, [r3, #0]
 * Zoom: we know what the maze looks like, so we can run multiple floodfill moves at once
 * 			not implemented yet
 *
 *
 */
	  if (start_pressed)
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <main+0x15c>)
 8001756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0a4      	beq.n	80016a8 <main+0x68>
	  {
		  move(0);
 800175e:	2000      	movs	r0, #0
 8001760:	f7ff fd68 	bl	8001234 <move>
//		  solve(DEAD);
		  solve(FLOODFILL);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff ff23 	bl	80015b0 <solve>
	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 800176a:	e79d      	b.n	80016a8 <main+0x68>
 800176c:	20000290 	.word	0x20000290
 8001770:	200002d8 	.word	0x200002d8
 8001774:	20000248 	.word	0x20000248
 8001778:	40020800 	.word	0x40020800
 800177c:	20000326 	.word	0x20000326
 8001780:	20000328 	.word	0x20000328
 8001784:	2000032a 	.word	0x2000032a
 8001788:	2000032c 	.word	0x2000032c
 800178c:	20000322 	.word	0x20000322
 8001790:	20000324 	.word	0x20000324
 8001794:	40020400 	.word	0x40020400
 8001798:	2000032e 	.word	0x2000032e
 800179c:	20000320 	.word	0x20000320

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b092      	sub	sp, #72	; 0x48
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	2230      	movs	r2, #48	; 0x30
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f005 f83c 	bl	800682c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c6:	2301      	movs	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ca:	2310      	movs	r3, #16
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d2:	f107 0318 	add.w	r3, r7, #24
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fdaa 	bl	8005330 <HAL_RCC_OscConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80017e2:	f000 facd 	bl	8001d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e6:	230f      	movs	r3, #15
 80017e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 ffe4 	bl	80057cc <HAL_RCC_ClockConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800180a:	f000 fab9 	bl	8001d80 <Error_Handler>
  }
}
 800180e:	bf00      	nop
 8001810:	3748      	adds	r7, #72	; 0x48
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800181e:	463b      	mov	r3, r7
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <MX_ADC1_Init+0x98>)
 800182c:	4a21      	ldr	r2, [pc, #132]	; (80018b4 <MX_ADC1_Init+0x9c>)
 800182e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <MX_ADC1_Init+0x98>)
 8001832:	2200      	movs	r2, #0
 8001834:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_ADC1_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_ADC1_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_ADC1_Init+0x98>)
 8001844:	2201      	movs	r2, #1
 8001846:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_ADC1_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_ADC1_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_ADC1_Init+0x98>)
 8001858:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <MX_ADC1_Init+0xa0>)
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_ADC1_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_ADC1_Init+0x98>)
 8001864:	2201      	movs	r2, #1
 8001866:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_ADC1_Init+0x98>)
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_ADC1_Init+0x98>)
 8001872:	2201      	movs	r2, #1
 8001874:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001876:	480e      	ldr	r0, [pc, #56]	; (80018b0 <MX_ADC1_Init+0x98>)
 8001878:	f002 fa74 	bl	8003d64 <HAL_ADC_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001882:	f000 fa7d 	bl	8001d80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001886:	2305      	movs	r3, #5
 8001888:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800188a:	2301      	movs	r3, #1
 800188c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001892:	463b      	mov	r3, r7
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <MX_ADC1_Init+0x98>)
 8001898:	f002 fbea 	bl	8004070 <HAL_ADC_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80018a2:	f000 fa6d 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001a0 	.word	0x200001a0
 80018b4:	40012000 	.word	0x40012000
 80018b8:	0f000001 	.word	0x0f000001

080018bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b092      	sub	sp, #72	; 0x48
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2220      	movs	r2, #32
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 ffa0 	bl	800682c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ec:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <MX_TIM1_Init+0x148>)
 80018ee:	4a46      	ldr	r2, [pc, #280]	; (8001a08 <MX_TIM1_Init+0x14c>)
 80018f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018f2:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <MX_TIM1_Init+0x148>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <MX_TIM1_Init+0x148>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <MX_TIM1_Init+0x148>)
 8001900:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001904:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <MX_TIM1_Init+0x148>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800190c:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <MX_TIM1_Init+0x148>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001912:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <MX_TIM1_Init+0x148>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001918:	483a      	ldr	r0, [pc, #232]	; (8001a04 <MX_TIM1_Init+0x148>)
 800191a:	f004 f909 	bl	8005b30 <HAL_TIM_PWM_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001924:	f000 fa2c 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001930:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001934:	4619      	mov	r1, r3
 8001936:	4833      	ldr	r0, [pc, #204]	; (8001a04 <MX_TIM1_Init+0x148>)
 8001938:	f004 fe72 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001942:	f000 fa1d 	bl	8001d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001946:	2360      	movs	r3, #96	; 0x60
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	4826      	ldr	r0, [pc, #152]	; (8001a04 <MX_TIM1_Init+0x148>)
 800196c:	f004 fb2c 	bl	8005fc8 <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001976:	f000 fa03 	bl	8001d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800197a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197e:	2204      	movs	r2, #4
 8001980:	4619      	mov	r1, r3
 8001982:	4820      	ldr	r0, [pc, #128]	; (8001a04 <MX_TIM1_Init+0x148>)
 8001984:	f004 fb20 	bl	8005fc8 <HAL_TIM_PWM_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800198e:	f000 f9f7 	bl	8001d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	2208      	movs	r2, #8
 8001998:	4619      	mov	r1, r3
 800199a:	481a      	ldr	r0, [pc, #104]	; (8001a04 <MX_TIM1_Init+0x148>)
 800199c:	f004 fb14 	bl	8005fc8 <HAL_TIM_PWM_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80019a6:	f000 f9eb 	bl	8001d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ae:	220c      	movs	r2, #12
 80019b0:	4619      	mov	r1, r3
 80019b2:	4814      	ldr	r0, [pc, #80]	; (8001a04 <MX_TIM1_Init+0x148>)
 80019b4:	f004 fb08 	bl	8005fc8 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80019be:	f000 f9df 	bl	8001d80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM1_Init+0x148>)
 80019e6:	f004 fe95 	bl	8006714 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80019f0:	f000 f9c6 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM1_Init+0x148>)
 80019f6:	f001 ffc5 	bl	8003984 <HAL_TIM_MspPostInit>

}
 80019fa:	bf00      	nop
 80019fc:	3748      	adds	r7, #72	; 0x48
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000248 	.word	0x20000248
 8001a08:	40010000 	.word	0x40010000

08001a0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2224      	movs	r2, #36	; 0x24
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 ff06 	bl	800682c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MX_TIM3_Init+0xa0>)
 8001a2a:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <MX_TIM3_Init+0xa4>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_TIM3_Init+0xa0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <MX_TIM3_Init+0xa0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_TIM3_Init+0xa0>)
 8001a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_TIM3_Init+0xa0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_TIM3_Init+0xa0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a56:	2301      	movs	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a66:	2301      	movs	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	4619      	mov	r1, r3
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <MX_TIM3_Init+0xa0>)
 8001a7a:	f004 f971 	bl	8005d60 <HAL_TIM_Encoder_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a84:	f000 f97c 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_TIM3_Init+0xa0>)
 8001a96:	f004 fdc3 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001aa0:	f000 f96e 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3730      	adds	r7, #48	; 0x30
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000290 	.word	0x20000290
 8001ab0:	40000400 	.word	0x40000400

08001ab4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	; 0x30
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f004 feb2 	bl	800682c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <MX_TIM8_Init+0xa8>)
 8001ad2:	4a23      	ldr	r2, [pc, #140]	; (8001b60 <MX_TIM8_Init+0xac>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <MX_TIM8_Init+0xa8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <MX_TIM8_Init+0xa8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <MX_TIM8_Init+0xa8>)
 8001ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <MX_TIM8_Init+0xa8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_TIM8_Init+0xa8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <MX_TIM8_Init+0xa8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001afc:	2303      	movs	r3, #3
 8001afe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b04:	2301      	movs	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b14:	2301      	movs	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <MX_TIM8_Init+0xa8>)
 8001b28:	f004 f91a 	bl	8005d60 <HAL_TIM_Encoder_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001b32:	f000 f925 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <MX_TIM8_Init+0xa8>)
 8001b44:	f004 fd6c 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001b4e:	f000 f917 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	3730      	adds	r7, #48	; 0x30
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200002d8 	.word	0x200002d8
 8001b60:	40010400 	.word	0x40010400

08001b64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_DMA_Init+0x3c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <MX_DMA_Init+0x3c>)
 8001b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_DMA_Init+0x3c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2038      	movs	r0, #56	; 0x38
 8001b8c:	f002 fdef 	bl	800476e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b90:	2038      	movs	r0, #56	; 0x38
 8001b92:	f002 fe08 	bl	80047a6 <HAL_NVIC_EnableIRQ>

}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a65      	ldr	r2, [pc, #404]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b5f      	ldr	r3, [pc, #380]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a5e      	ldr	r2, [pc, #376]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b5c      	ldr	r3, [pc, #368]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b58      	ldr	r3, [pc, #352]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a57      	ldr	r2, [pc, #348]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4b51      	ldr	r3, [pc, #324]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a50      	ldr	r2, [pc, #320]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b4e      	ldr	r3, [pc, #312]	; (8001d58 <MX_GPIO_Init+0x1b4>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_LED_Pin|Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001c30:	484a      	ldr	r0, [pc, #296]	; (8001d5c <MX_GPIO_Init+0x1b8>)
 8001c32:	f003 fb64 	bl	80052fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2194      	movs	r1, #148	; 0x94
 8001c3a:	4849      	ldr	r0, [pc, #292]	; (8001d60 <MX_GPIO_Init+0x1bc>)
 8001c3c:	f003 fb5f 	bl	80052fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c46:	4847      	ldr	r0, [pc, #284]	; (8001d64 <MX_GPIO_Init+0x1c0>)
 8001c48:	f003 fb59 	bl	80052fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_LED_Pin Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|Y_LED_Pin|G_LED_Pin;
 8001c4c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	483d      	ldr	r0, [pc, #244]	; (8001d5c <MX_GPIO_Init+0x1b8>)
 8001c66:	f003 f995 	bl	8004f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 8001c6a:	2394      	movs	r3, #148	; 0x94
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4837      	ldr	r0, [pc, #220]	; (8001d60 <MX_GPIO_Init+0x1bc>)
 8001c82:	f003 f987 	bl	8004f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001c86:	2308      	movs	r3, #8
 8001c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c96:	2301      	movs	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	482f      	ldr	r0, [pc, #188]	; (8001d60 <MX_GPIO_Init+0x1bc>)
 8001ca2:	f003 f977 	bl	8004f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftButton_Pin Switch3_Pin */
  GPIO_InitStruct.Pin = LeftButton_Pin|Switch3_Pin;
 8001ca6:	2309      	movs	r3, #9
 8001ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	482a      	ldr	r0, [pc, #168]	; (8001d64 <MX_GPIO_Init+0x1c0>)
 8001cba:	f003 f96b 	bl	8004f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4822      	ldr	r0, [pc, #136]	; (8001d64 <MX_GPIO_Init+0x1c0>)
 8001cdc:	f003 f95a 	bl	8004f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightButton_Pin Switch1_Pin */
  GPIO_InitStruct.Pin = RightButton_Pin|Switch1_Pin;
 8001ce0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4819      	ldr	r0, [pc, #100]	; (8001d5c <MX_GPIO_Init+0x1b8>)
 8001cf6:	f003 f94d 	bl	8004f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4816      	ldr	r0, [pc, #88]	; (8001d68 <MX_GPIO_Init+0x1c4>)
 8001d0e:	f003 f941 	bl	8004f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001d12:	23c0      	movs	r3, #192	; 0xc0
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d16:	2312      	movs	r3, #18
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d22:	2304      	movs	r3, #4
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <MX_GPIO_Init+0x1c0>)
 8001d2e:	f003 f931 	bl	8004f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8001d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4806      	ldr	r0, [pc, #24]	; (8001d64 <MX_GPIO_Init+0x1c0>)
 8001d4c:	f003 f922 	bl	8004f94 <HAL_GPIO_Init>

}
 8001d50:	bf00      	nop
 8001d52:	3728      	adds	r7, #40	; 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40020c00 	.word	0x40020c00

08001d6c <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */

ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
	return &hadc1;
 8001d70:	4b02      	ldr	r3, [pc, #8]	; (8001d7c <Get_HADC1_Ptr+0x10>)
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	200001a0 	.word	0x200001a0

08001d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d84:	b672      	cpsid	i
}
 8001d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <Error_Handler+0x8>
 8001d8a:	0000      	movs	r0, r0
 8001d8c:	0000      	movs	r0, r0
	...

08001d90 <limitPWM>:
#include "pid.h"

extern float velocity_left;
extern float velocity_right;

float limitPWM(float pwm) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7fe fca3 	bl	80006e4 <__aeabi_f2d>
 8001d9e:	a30e      	add	r3, pc, #56	; (adr r3, 8001dd8 <limitPWM+0x48>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fd74 	bl	8000890 <__aeabi_dcmpgt>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <limitPWM+0x22>
		return PWM_MAX;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <limitPWM+0x58>)
 8001db0:	e00d      	b.n	8001dce <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fc96 	bl	80006e4 <__aeabi_f2d>
 8001db8:	a309      	add	r3, pc, #36	; (adr r3, 8001de0 <limitPWM+0x50>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fd49 	bl	8000854 <__aeabi_dcmplt>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <limitPWM+0x3c>
		return -PWM_MAX;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <limitPWM+0x5c>)
 8001dca:	e000      	b.n	8001dce <limitPWM+0x3e>
	else
		return pwm;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	66666666 	.word	0x66666666
 8001ddc:	3fee6666 	.word	0x3fee6666
 8001de0:	66666666 	.word	0x66666666
 8001de4:	bfee6666 	.word	0xbfee6666
 8001de8:	3f733333 	.word	0x3f733333
 8001dec:	bf733333 	.word	0xbf733333

08001df0 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8001df8:	f04f 0100 	mov.w	r1, #0
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff f861 	bl	8000ec4 <__aeabi_fcmpge>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d012      	beq.n	8001e2e <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <setMotorLPWM+0x70>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffbe 	bl	8001d90 <limitPWM>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4913      	ldr	r1, [pc, #76]	; (8001e64 <setMotorLPWM+0x74>)
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fea1 	bl	8000b60 <__aeabi_fmul>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4c0f      	ldr	r4, [pc, #60]	; (8001e60 <setMotorLPWM+0x70>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f862 	bl	8000eec <__aeabi_f2uiz>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	63a3      	str	r3, [r4, #56]	; 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 8001e2c:	e013      	b.n	8001e56 <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <setMotorLPWM+0x70>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ffab 	bl	8001d90 <limitPWM>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4909      	ldr	r1, [pc, #36]	; (8001e64 <setMotorLPWM+0x74>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fe8e 	bl	8000b60 <__aeabi_fmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e4a:	4c05      	ldr	r4, [pc, #20]	; (8001e60 <setMotorLPWM+0x70>)
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f84d 	bl	8000eec <__aeabi_f2uiz>
 8001e52:	4603      	mov	r3, r0
 8001e54:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	4547f000 	.word	0x4547f000

08001e68 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8001e70:	f04f 0100 	mov.w	r1, #0
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff f825 	bl	8000ec4 <__aeabi_fcmpge>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d012      	beq.n	8001ea6 <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <setMotorRPWM+0x70>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ff82 	bl	8001d90 <limitPWM>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4913      	ldr	r1, [pc, #76]	; (8001edc <setMotorRPWM+0x74>)
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fe65 	bl	8000b60 <__aeabi_fmul>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4c0f      	ldr	r4, [pc, #60]	; (8001ed8 <setMotorRPWM+0x70>)
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f826 	bl	8000eec <__aeabi_f2uiz>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	63e3      	str	r3, [r4, #60]	; 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8001ea4:	e013      	b.n	8001ece <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <setMotorRPWM+0x70>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff6f 	bl	8001d90 <limitPWM>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4909      	ldr	r1, [pc, #36]	; (8001edc <setMotorRPWM+0x74>)
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fe52 	bl	8000b60 <__aeabi_fmul>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ec2:	4c05      	ldr	r4, [pc, #20]	; (8001ed8 <setMotorRPWM+0x70>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f811 	bl	8000eec <__aeabi_f2uiz>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd90      	pop	{r4, r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40010000 	.word	0x40010000
 8001edc:	4547f000 	.word	0x4547f000

08001ee0 <resetMotors>:

void resetMotors() {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 8001ee4:	f04f 0000 	mov.w	r0, #0
 8001ee8:	f7ff ff82 	bl	8001df0 <setMotorLPWM>
	setMotorRPWM(0);
 8001eec:	f04f 0000 	mov.w	r0, #0
 8001ef0:	f7ff ffba 	bl	8001e68 <setMotorRPWM>
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <setPIDGoalD>:
STATE state = REST;
float left_PWM_value = 0;
float right_PWM_value = 0;
int goal_reached_timer = 0;

void setPIDGoalD(int16_t distance) { goal_distance = distance; }
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
 8001f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fdd6 	bl	8000ab8 <__aeabi_i2f>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a03      	ldr	r2, [pc, #12]	; (8001f1c <setPIDGoalD+0x24>)
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000338 	.word	0x20000338

08001f20 <setPIDGoalA>:
void setPIDGoalA(int16_t angle) { goal_angle = angle; }
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
 8001f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fdc2 	bl	8000ab8 <__aeabi_i2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a03      	ldr	r2, [pc, #12]	; (8001f44 <setPIDGoalA+0x24>)
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000033c 	.word	0x2000033c

08001f48 <setState>:
void setState(STATE curr_state) { state = curr_state; }
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
 8001f52:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <setState+0x1c>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	7013      	strb	r3, [r2, #0]
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000414 	.word	0x20000414

08001f68 <setIRGoals>:

void setIRGoals(int16_t frontLeftGoal, int16_t frontRightGoal, int16_t leftGoal, int16_t rightGoal) {
 8001f68:	b490      	push	{r4, r7}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4604      	mov	r4, r0
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4623      	mov	r3, r4
 8001f78:	80fb      	strh	r3, [r7, #6]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80bb      	strh	r3, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	807b      	strh	r3, [r7, #2]
 8001f82:	4613      	mov	r3, r2
 8001f84:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = leftGoal - rightGoal;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	883b      	ldrh	r3, [r7, #0]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b21a      	sxth	r2, r3
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <setIRGoals+0x50>)
 8001f92:	801a      	strh	r2, [r3, #0]
	goal_forward_left = frontLeftGoal;
 8001f94:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <setIRGoals+0x54>)
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	8013      	strh	r3, [r2, #0]
	goal_forward_right = frontRightGoal;
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <setIRGoals+0x58>)
 8001f9c:	88bb      	ldrh	r3, [r7, #4]
 8001f9e:	8013      	strh	r3, [r2, #0]
	goal_left = leftGoal;
 8001fa0:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <setIRGoals+0x5c>)
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	8013      	strh	r3, [r2, #0]
	goal_right = rightGoal;
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <setIRGoals+0x60>)
 8001fa8:	883b      	ldrh	r3, [r7, #0]
 8001faa:	8013      	strh	r3, [r2, #0]

}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc90      	pop	{r4, r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000340 	.word	0x20000340
 8001fbc:	20000330 	.word	0x20000330
 8001fc0:	20000332 	.word	0x20000332
 8001fc4:	20000334 	.word	0x20000334
 8001fc8:	20000336 	.word	0x20000336

08001fcc <setIRAngle>:
	setPIDGoalD(front_kPx * ((goal_forward_left - curr_forward_left + goal_forward_right - curr_forward_left)/2));

}

// TODO: CHANGE TO USE WALL CHECK FUNCTIONS
void setIRAngle(float left, float right){
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]

	if (left > 600 && right > 600 && goal_angle == 0)
 8001fd6:	4948      	ldr	r1, [pc, #288]	; (80020f8 <setIRAngle+0x12c>)
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7fe ff7d 	bl	8000ed8 <__aeabi_fcmpgt>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d02d      	beq.n	8002040 <setIRAngle+0x74>
 8001fe4:	4944      	ldr	r1, [pc, #272]	; (80020f8 <setIRAngle+0x12c>)
 8001fe6:	6838      	ldr	r0, [r7, #0]
 8001fe8:	f7fe ff76 	bl	8000ed8 <__aeabi_fcmpgt>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d026      	beq.n	8002040 <setIRAngle+0x74>
 8001ff2:	4b42      	ldr	r3, [pc, #264]	; (80020fc <setIRAngle+0x130>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f04f 0100 	mov.w	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe ff44 	bl	8000e88 <__aeabi_fcmpeq>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01c      	beq.n	8002040 <setIRAngle+0x74>
	{
		IRadjustment = (kPir * ((left - right) - IRAngleOffset));
 8002006:	6839      	ldr	r1, [r7, #0]
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7fe fc9f 	bl	800094c <__aeabi_fsub>
 800200e:	4603      	mov	r3, r0
 8002010:	461c      	mov	r4, r3
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <setIRAngle+0x134>)
 8002014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fd4d 	bl	8000ab8 <__aeabi_i2f>
 800201e:	4603      	mov	r3, r0
 8002020:	4619      	mov	r1, r3
 8002022:	4620      	mov	r0, r4
 8002024:	f7fe fc92 	bl	800094c <__aeabi_fsub>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	4b35      	ldr	r3, [pc, #212]	; (8002104 <setIRAngle+0x138>)
 800202e:	4619      	mov	r1, r3
 8002030:	4610      	mov	r0, r2
 8002032:	f7fe fd95 	bl	8000b60 <__aeabi_fmul>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	4b33      	ldr	r3, [pc, #204]	; (8002108 <setIRAngle+0x13c>)
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e056      	b.n	80020ee <setIRAngle+0x122>
	}
	else if (left > 600 && goal_angle == 0)
 8002040:	492d      	ldr	r1, [pc, #180]	; (80020f8 <setIRAngle+0x12c>)
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe ff48 	bl	8000ed8 <__aeabi_fcmpgt>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d021      	beq.n	8002092 <setIRAngle+0xc6>
 800204e:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <setIRAngle+0x130>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe ff16 	bl	8000e88 <__aeabi_fcmpeq>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d017      	beq.n	8002092 <setIRAngle+0xc6>
	{
		IRadjustment = (kPir2 * (left - goal_left));
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <setIRAngle+0x140>)
 8002064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fd25 	bl	8000ab8 <__aeabi_i2f>
 800206e:	4603      	mov	r3, r0
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fc6a 	bl	800094c <__aeabi_fsub>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7fe fd6c 	bl	8000b60 <__aeabi_fmul>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <setIRAngle+0x13c>)
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e02d      	b.n	80020ee <setIRAngle+0x122>
	}
	else if (right > 600 && goal_angle == 0)
 8002092:	4919      	ldr	r1, [pc, #100]	; (80020f8 <setIRAngle+0x12c>)
 8002094:	6838      	ldr	r0, [r7, #0]
 8002096:	f7fe ff1f 	bl	8000ed8 <__aeabi_fcmpgt>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d021      	beq.n	80020e4 <setIRAngle+0x118>
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <setIRAngle+0x130>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f04f 0100 	mov.w	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe feed 	bl	8000e88 <__aeabi_fcmpeq>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d017      	beq.n	80020e4 <setIRAngle+0x118>
	{
		IRadjustment = (kPir2 * (goal_right - right));
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <setIRAngle+0x144>)
 80020b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fcfc 	bl	8000ab8 <__aeabi_i2f>
 80020c0:	4603      	mov	r3, r0
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fc41 	bl	800094c <__aeabi_fsub>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 80020d2:	4619      	mov	r1, r3
 80020d4:	4610      	mov	r0, r2
 80020d6:	f7fe fd43 	bl	8000b60 <__aeabi_fmul>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <setIRAngle+0x13c>)
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e004      	b.n	80020ee <setIRAngle+0x122>
	}
	else
		IRadjustment = 0;
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <setIRAngle+0x13c>)
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	44160000 	.word	0x44160000
 80020fc:	2000033c 	.word	0x2000033c
 8002100:	20000340 	.word	0x20000340
 8002104:	3d99999a 	.word	0x3d99999a
 8002108:	20000410 	.word	0x20000410
 800210c:	20000334 	.word	0x20000334
 8002110:	20000336 	.word	0x20000336

08002114 <accelerateLeftPWM>:

float accelerateLeftPWM() {
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
//	if (derivative > velocity_left * 34.0)
//		return left_PWM_value - xacceleration;
//
//	return left_PWM_value;

}
 8002118:	bf00      	nop
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <accelerateRightPWM>:

float accelerateRightPWM() {
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
//	if (derivative > velocity_right * 34.0)
//		return right_PWM_value - xacceleration;
//
//	return right_PWM_value;

}
 8002126:	bf00      	nop
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <PDController>:

void PDController() {
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0

//////////////////////////	CALCULATE DISTANCE AND ANGLE CORRECTION /////////////////////////

	if (state == TURNING)
 8002136:	4ba4      	ldr	r3, [pc, #656]	; (80023c8 <PDController+0x298>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d103      	bne.n	8002146 <PDController+0x16>
		IRadjustment = 0;
 800213e:	4ba3      	ldr	r3, [pc, #652]	; (80023cc <PDController+0x29c>)
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

	float adjustedAngle = goal_angle + IRadjustment;
 8002146:	4ba2      	ldr	r3, [pc, #648]	; (80023d0 <PDController+0x2a0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4aa0      	ldr	r2, [pc, #640]	; (80023cc <PDController+0x29c>)
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fbfd 	bl	8000950 <__addsf3>
 8002156:	4603      	mov	r3, r0
 8002158:	607b      	str	r3, [r7, #4]

	angleError = adjustedAngle - (getLeftEncoderCounts() - getRightEncoderCounts());
 800215a:	f7ff f915 	bl	8001388 <getLeftEncoderCounts>
 800215e:	4603      	mov	r3, r0
 8002160:	461c      	mov	r4, r3
 8002162:	f7ff f903 	bl	800136c <getRightEncoderCounts>
 8002166:	4603      	mov	r3, r0
 8002168:	1ae3      	subs	r3, r4, r3
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fca4 	bl	8000ab8 <__aeabi_i2f>
 8002170:	4603      	mov	r3, r0
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fe fbe9 	bl	800094c <__aeabi_fsub>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	4b95      	ldr	r3, [pc, #596]	; (80023d4 <PDController+0x2a4>)
 8002180:	601a      	str	r2, [r3, #0]
	angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 8002182:	4a95      	ldr	r2, [pc, #596]	; (80023d8 <PDController+0x2a8>)
 8002184:	4b93      	ldr	r3, [pc, #588]	; (80023d4 <PDController+0x2a4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f7fe fce8 	bl	8000b60 <__aeabi_fmul>
 8002190:	4603      	mov	r3, r0
 8002192:	461c      	mov	r4, r3
 8002194:	4b8f      	ldr	r3, [pc, #572]	; (80023d4 <PDController+0x2a4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a90      	ldr	r2, [pc, #576]	; (80023dc <PDController+0x2ac>)
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fbd4 	bl	800094c <__aeabi_fsub>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b8d      	ldr	r3, [pc, #564]	; (80023e0 <PDController+0x2b0>)
 80021aa:	4619      	mov	r1, r3
 80021ac:	4610      	mov	r0, r2
 80021ae:	f7fe fcd7 	bl	8000b60 <__aeabi_fmul>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4619      	mov	r1, r3
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7fe fbca 	bl	8000950 <__addsf3>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	4b88      	ldr	r3, [pc, #544]	; (80023e4 <PDController+0x2b4>)
 80021c2:	601a      	str	r2, [r3, #0]

	distanceError = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts())/2);
 80021c4:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <PDController+0x2b8>)
 80021c6:	681c      	ldr	r4, [r3, #0]
 80021c8:	f7ff f8de 	bl	8001388 <getLeftEncoderCounts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461d      	mov	r5, r3
 80021d0:	f7ff f8cc 	bl	800136c <getRightEncoderCounts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	442b      	add	r3, r5
 80021d8:	0fda      	lsrs	r2, r3, #31
 80021da:	4413      	add	r3, r2
 80021dc:	105b      	asrs	r3, r3, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fc6a 	bl	8000ab8 <__aeabi_i2f>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4619      	mov	r1, r3
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7fe fbaf 	bl	800094c <__aeabi_fsub>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b7e      	ldr	r3, [pc, #504]	; (80023ec <PDController+0x2bc>)
 80021f4:	601a      	str	r2, [r3, #0]

	distanceCorrection = kPx * distanceError + kDx * (distanceError - oldDistanceError);
 80021f6:	4a7e      	ldr	r2, [pc, #504]	; (80023f0 <PDController+0x2c0>)
 80021f8:	4b7c      	ldr	r3, [pc, #496]	; (80023ec <PDController+0x2bc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7fe fcae 	bl	8000b60 <__aeabi_fmul>
 8002204:	4603      	mov	r3, r0
 8002206:	461c      	mov	r4, r3
 8002208:	4b78      	ldr	r3, [pc, #480]	; (80023ec <PDController+0x2bc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a79      	ldr	r2, [pc, #484]	; (80023f4 <PDController+0x2c4>)
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fb9a 	bl	800094c <__aeabi_fsub>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	4619      	mov	r1, r3
 8002222:	4610      	mov	r0, r2
 8002224:	f7fe fc9c 	bl	8000b60 <__aeabi_fmul>
 8002228:	4603      	mov	r3, r0
 800222a:	4619      	mov	r1, r3
 800222c:	4620      	mov	r0, r4
 800222e:	f7fe fb8f 	bl	8000950 <__addsf3>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <PDController+0x2c8>)
 8002238:	601a      	str	r2, [r3, #0]

	left_distance = getLeftEncoderCounts();
 800223a:	f7ff f8a5 	bl	8001388 <getLeftEncoderCounts>
 800223e:	4603      	mov	r3, r0
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fc39 	bl	8000ab8 <__aeabi_i2f>
 8002246:	4603      	mov	r3, r0
 8002248:	4a6c      	ldr	r2, [pc, #432]	; (80023fc <PDController+0x2cc>)
 800224a:	6013      	str	r3, [r2, #0]
	right_distance = getRightEncoderCounts();
 800224c:	f7ff f88e 	bl	800136c <getRightEncoderCounts>
 8002250:	4603      	mov	r3, r0
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fc30 	bl	8000ab8 <__aeabi_i2f>
 8002258:	4603      	mov	r3, r0
 800225a:	4a69      	ldr	r2, [pc, #420]	; (8002400 <PDController+0x2d0>)
 800225c:	6013      	str	r3, [r2, #0]

	if (state == MOVING && fabs(distanceError) > 100)
 800225e:	4b5a      	ldr	r3, [pc, #360]	; (80023c8 <PDController+0x298>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d13f      	bne.n	80022e6 <PDController+0x1b6>
 8002266:	4b61      	ldr	r3, [pc, #388]	; (80023ec <PDController+0x2bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800226e:	4965      	ldr	r1, [pc, #404]	; (8002404 <PDController+0x2d4>)
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fe31 	bl	8000ed8 <__aeabi_fcmpgt>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d034      	beq.n	80022e6 <PDController+0x1b6>
	{		// If we're going straight and not at the end, apply acceleration
		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 800227c:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <PDController+0x2c8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a61      	ldr	r2, [pc, #388]	; (8002408 <PDController+0x2d8>)
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fb60 	bl	800094c <__aeabi_fsub>
 800228c:	4603      	mov	r3, r0
 800228e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002292:	4a57      	ldr	r2, [pc, #348]	; (80023f0 <PDController+0x2c0>)
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fe1e 	bl	8000ed8 <__aeabi_fcmpgt>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d021      	beq.n	80022e6 <PDController+0x1b6>
		{
			distanceCorrection = oldDistanceCorrection + (xacceleration * sign(distanceCorrection - oldDistanceCorrection));
 80022a2:	4b55      	ldr	r3, [pc, #340]	; (80023f8 <PDController+0x2c8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a58      	ldr	r2, [pc, #352]	; (8002408 <PDController+0x2d8>)
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fb4d 	bl	800094c <__aeabi_fsub>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f001 fc9f 	bl	8003bf8 <sign>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fbfb 	bl	8000ab8 <__aeabi_i2f>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4a4a      	ldr	r2, [pc, #296]	; (80023f0 <PDController+0x2c0>)
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fc49 	bl	8000b60 <__aeabi_fmul>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <PDController+0x2d8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4619      	mov	r1, r3
 80022d8:	4610      	mov	r0, r2
 80022da:	f7fe fb39 	bl	8000950 <__addsf3>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <PDController+0x2c8>)
 80022e4:	601a      	str	r2, [r3, #0]
		}
	}

////////////////////// ROUND DISTANCE OR ANGLE CORRECTION	//////////////////////////

	switch(state) {		// Apply lower limits of PWM for various states
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <PDController+0x298>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	f200 80bf 	bhi.w	8002470 <PDController+0x340>
 80022f2:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <PDController+0x1c8>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	08002335 	.word	0x08002335
 80022fc:	08002397 	.word	0x08002397
 8002300:	0800230d 	.word	0x0800230d
 8002304:	08002471 	.word	0x08002471
 8002308:	08002453 	.word	0x08002453
		case EXPLORING:
			distanceCorrection = (accelerateLeftPWM() + accelerateRightPWM())/2;
 800230c:	f7ff ff02 	bl	8002114 <accelerateLeftPWM>
 8002310:	4604      	mov	r4, r0
 8002312:	f7ff ff06 	bl	8002122 <accelerateRightPWM>
 8002316:	4603      	mov	r3, r0
 8002318:	4619      	mov	r1, r3
 800231a:	4620      	mov	r0, r4
 800231c:	f7fe fb18 	bl	8000950 <__addsf3>
 8002320:	4603      	mov	r3, r0
 8002322:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fcce 	bl	8000cc8 <__aeabi_fdiv>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	4b31      	ldr	r3, [pc, #196]	; (80023f8 <PDController+0x2c8>)
 8002332:	601a      	str	r2, [r3, #0]
		case MOVING:
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <PDController+0x2c8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f9d1 	bl	80006e4 <__aeabi_f2d>
 8002342:	a31d      	add	r3, pc, #116	; (adr r3, 80023b8 <PDController+0x288>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	f7fe faa2 	bl	8000890 <__aeabi_dcmpgt>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d100      	bne.n	8002354 <PDController+0x224>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
			break;
 8002352:	e08e      	b.n	8002472 <PDController+0x342>
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <PDController+0x2c8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800235c:	4a2b      	ldr	r2, [pc, #172]	; (800240c <PDController+0x2dc>)
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fd9b 	bl	8000e9c <__aeabi_fcmplt>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d100      	bne.n	800236e <PDController+0x23e>
			break;
 800236c:	e081      	b.n	8002472 <PDController+0x342>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
 800236e:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <PDController+0x2c8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f001 fc40 	bl	8003bf8 <sign>
 8002378:	4603      	mov	r3, r0
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fb9c 	bl	8000ab8 <__aeabi_i2f>
 8002380:	4603      	mov	r3, r0
 8002382:	4a22      	ldr	r2, [pc, #136]	; (800240c <PDController+0x2dc>)
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fbea 	bl	8000b60 <__aeabi_fmul>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <PDController+0x2c8>)
 8002392:	601a      	str	r2, [r3, #0]
			break;
 8002394:	e06d      	b.n	8002472 <PDController+0x342>
		case TURNING:
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <PDController+0x2b4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f9a0 	bl	80006e4 <__aeabi_f2d>
 80023a4:	a306      	add	r3, pc, #24	; (adr r3, 80023c0 <PDController+0x290>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe fa71 	bl	8000890 <__aeabi_dcmpgt>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d12d      	bne.n	8002410 <PDController+0x2e0>
				angleCorrection = sign(angleCorrection) * PWMMinw;
			break;
 80023b4:	e05d      	b.n	8002472 <PDController+0x342>
 80023b6:	bf00      	nop
 80023b8:	eb851eb8 	.word	0xeb851eb8
 80023bc:	3f9eb851 	.word	0x3f9eb851
 80023c0:	47ae147b 	.word	0x47ae147b
 80023c4:	3f847ae1 	.word	0x3f847ae1
 80023c8:	20000414 	.word	0x20000414
 80023cc:	20000410 	.word	0x20000410
 80023d0:	2000033c 	.word	0x2000033c
 80023d4:	20000344 	.word	0x20000344
 80023d8:	3b449ba6 	.word	0x3b449ba6
 80023dc:	20000348 	.word	0x20000348
 80023e0:	3a03126f 	.word	0x3a03126f
 80023e4:	20000374 	.word	0x20000374
 80023e8:	20000338 	.word	0x20000338
 80023ec:	20000378 	.word	0x20000378
 80023f0:	3a83126f 	.word	0x3a83126f
 80023f4:	2000037c 	.word	0x2000037c
 80023f8:	200003a8 	.word	0x200003a8
 80023fc:	200003b0 	.word	0x200003b0
 8002400:	200003e0 	.word	0x200003e0
 8002404:	42c80000 	.word	0x42c80000
 8002408:	200003ac 	.word	0x200003ac
 800240c:	3ea3d70a 	.word	0x3ea3d70a
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 8002410:	4b4e      	ldr	r3, [pc, #312]	; (800254c <PDController+0x41c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002418:	4a4d      	ldr	r2, [pc, #308]	; (8002550 <PDController+0x420>)
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fd3d 	bl	8000e9c <__aeabi_fcmplt>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d100      	bne.n	800242a <PDController+0x2fa>
			break;
 8002428:	e023      	b.n	8002472 <PDController+0x342>
				angleCorrection = sign(angleCorrection) * PWMMinw;
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <PDController+0x41c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f001 fbe2 	bl	8003bf8 <sign>
 8002434:	4603      	mov	r3, r0
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fb3e 	bl	8000ab8 <__aeabi_i2f>
 800243c:	4603      	mov	r3, r0
 800243e:	4a44      	ldr	r2, [pc, #272]	; (8002550 <PDController+0x420>)
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fb8c 	bl	8000b60 <__aeabi_fmul>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	4b3f      	ldr	r3, [pc, #252]	; (800254c <PDController+0x41c>)
 800244e:	601a      	str	r2, [r3, #0]
			break;
 8002450:	e00f      	b.n	8002472 <PDController+0x342>
		case CURVING:
			if (fabs(distanceError) < 60)
 8002452:	4b40      	ldr	r3, [pc, #256]	; (8002554 <PDController+0x424>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800245a:	493f      	ldr	r1, [pc, #252]	; (8002558 <PDController+0x428>)
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe fd1d 	bl	8000e9c <__aeabi_fcmplt>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d100      	bne.n	800246a <PDController+0x33a>
				setState(REST);
		default:
			break;
 8002468:	e002      	b.n	8002470 <PDController+0x340>
				setState(REST);
 800246a:	2000      	movs	r0, #0
 800246c:	f7ff fd6c 	bl	8001f48 <setState>
			break;
 8002470:	bf00      	nop
	}

	if (fabs(distanceCorrection) > PWMMaxx)		// Upper Limit for PWM
 8002472:	4b3a      	ldr	r3, [pc, #232]	; (800255c <PDController+0x42c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800247a:	4a39      	ldr	r2, [pc, #228]	; (8002560 <PDController+0x430>)
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fd2a 	bl	8000ed8 <__aeabi_fcmpgt>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d012      	beq.n	80024b0 <PDController+0x380>
		distanceCorrection = sign(distanceCorrection) * PWMMaxx;
 800248a:	4b34      	ldr	r3, [pc, #208]	; (800255c <PDController+0x42c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f001 fbb2 	bl	8003bf8 <sign>
 8002494:	4603      	mov	r3, r0
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fb0e 	bl	8000ab8 <__aeabi_i2f>
 800249c:	4603      	mov	r3, r0
 800249e:	4a30      	ldr	r2, [pc, #192]	; (8002560 <PDController+0x430>)
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fb5c 	bl	8000b60 <__aeabi_fmul>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <PDController+0x42c>)
 80024ae:	601a      	str	r2, [r3, #0]

	if (fabs(angleCorrection) > PWMMaxw)
 80024b0:	4b26      	ldr	r3, [pc, #152]	; (800254c <PDController+0x41c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024b8:	4a2a      	ldr	r2, [pc, #168]	; (8002564 <PDController+0x434>)
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fd0b 	bl	8000ed8 <__aeabi_fcmpgt>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d012      	beq.n	80024ee <PDController+0x3be>
		angleCorrection = sign(angleCorrection) * PWMMaxw;
 80024c8:	4b20      	ldr	r3, [pc, #128]	; (800254c <PDController+0x41c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 fb93 	bl	8003bf8 <sign>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe faef 	bl	8000ab8 <__aeabi_i2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	4a21      	ldr	r2, [pc, #132]	; (8002564 <PDController+0x434>)
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fb3d 	bl	8000b60 <__aeabi_fmul>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <PDController+0x41c>)
 80024ec:	601a      	str	r2, [r3, #0]

	if (state == ACCELERATING || state == CURVING)
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <PDController+0x438>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d003      	beq.n	80024fe <PDController+0x3ce>
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <PDController+0x438>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d10a      	bne.n	8002514 <PDController+0x3e4>
	{
		left_PWM_value = accelerateLeftPWM();
 80024fe:	f7ff fe09 	bl	8002114 <accelerateLeftPWM>
 8002502:	4603      	mov	r3, r0
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <PDController+0x43c>)
 8002506:	6013      	str	r3, [r2, #0]
		right_PWM_value = accelerateRightPWM();
 8002508:	f7ff fe0b 	bl	8002122 <accelerateRightPWM>
 800250c:	4603      	mov	r3, r0
 800250e:	4a18      	ldr	r2, [pc, #96]	; (8002570 <PDController+0x440>)
 8002510:	6013      	str	r3, [r2, #0]
		return;
 8002512:	e017      	b.n	8002544 <PDController+0x414>
	}

	left_PWM_value = (distanceCorrection + angleCorrection);
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <PDController+0x42c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0c      	ldr	r2, [pc, #48]	; (800254c <PDController+0x41c>)
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fa16 	bl	8000950 <__addsf3>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <PDController+0x43c>)
 800252a:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distanceCorrection - angleCorrection);
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <PDController+0x42c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a06      	ldr	r2, [pc, #24]	; (800254c <PDController+0x41c>)
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fa08 	bl	800094c <__aeabi_fsub>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <PDController+0x440>)
 8002542:	601a      	str	r2, [r3, #0]

}
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bdb0      	pop	{r4, r5, r7, pc}
 800254a:	bf00      	nop
 800254c:	20000374 	.word	0x20000374
 8002550:	3e99999a 	.word	0x3e99999a
 8002554:	20000378 	.word	0x20000378
 8002558:	42700000 	.word	0x42700000
 800255c:	200003a8 	.word	0x200003a8
 8002560:	3f333333 	.word	0x3f333333
 8002564:	3ea8f5c3 	.word	0x3ea8f5c3
 8002568:	20000414 	.word	0x20000414
 800256c:	20000418 	.word	0x20000418
 8002570:	2000041c 	.word	0x2000041c
 8002574:	00000000 	.word	0x00000000

08002578 <updatePID>:

void updatePID() {
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0

///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldAngleError = oldAngleErrors[9];
 8002580:	4b49      	ldr	r3, [pc, #292]	; (80026a8 <updatePID+0x130>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	4a49      	ldr	r2, [pc, #292]	; (80026ac <updatePID+0x134>)
 8002586:	6013      	str	r3, [r2, #0]
	oldDistanceError = oldDistanceErrors[9];
 8002588:	4b49      	ldr	r3, [pc, #292]	; (80026b0 <updatePID+0x138>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	4a49      	ldr	r2, [pc, #292]	; (80026b4 <updatePID+0x13c>)
 800258e:	6013      	str	r3, [r2, #0]
	old_left_distance = old_left_distances[9];
 8002590:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <updatePID+0x140>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	4a49      	ldr	r2, [pc, #292]	; (80026bc <updatePID+0x144>)
 8002596:	6013      	str	r3, [r2, #0]
	old_right_distance = old_right_distances[9];
 8002598:	4b49      	ldr	r3, [pc, #292]	; (80026c0 <updatePID+0x148>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	4a49      	ldr	r2, [pc, #292]	; (80026c4 <updatePID+0x14c>)
 800259e:	6013      	str	r3, [r2, #0]

//////////////////////	CALCULATE MOTOR PWM VALUES	/////////////////////

	PDController();
 80025a0:	f7ff fdc6 	bl	8002130 <PDController>

////////////////////	NORMALIZE LEFT AND RIGHT PWM VALUES ////////////////

	// Apply lower PWM limits for small adjustments
	if (state == REST || state == ACCELERATING || fabs(distanceError) < 60 || fabs (angleError) < 60)
 80025a4:	4b48      	ldr	r3, [pc, #288]	; (80026c8 <updatePID+0x150>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01a      	beq.n	80025e2 <updatePID+0x6a>
 80025ac:	4b46      	ldr	r3, [pc, #280]	; (80026c8 <updatePID+0x150>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d016      	beq.n	80025e2 <updatePID+0x6a>
 80025b4:	4b45      	ldr	r3, [pc, #276]	; (80026cc <updatePID+0x154>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025bc:	4944      	ldr	r1, [pc, #272]	; (80026d0 <updatePID+0x158>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fc6c 	bl	8000e9c <__aeabi_fcmplt>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <updatePID+0x6a>
 80025ca:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <updatePID+0x15c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025d2:	493f      	ldr	r1, [pc, #252]	; (80026d0 <updatePID+0x158>)
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fc61 	bl	8000e9c <__aeabi_fcmplt>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8081 	beq.w	80026e4 <updatePID+0x16c>
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <updatePID+0x160>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe f87a 	bl	80006e4 <__aeabi_f2d>
 80025f0:	a32b      	add	r3, pc, #172	; (adr r3, 80026a0 <updatePID+0x128>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fe f94b 	bl	8000890 <__aeabi_dcmpgt>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01e      	beq.n	800263e <updatePID+0xc6>
 8002600:	4b35      	ldr	r3, [pc, #212]	; (80026d8 <updatePID+0x160>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002608:	4a34      	ldr	r2, [pc, #208]	; (80026dc <updatePID+0x164>)
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fc45 	bl	8000e9c <__aeabi_fcmplt>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <updatePID+0xc6>
		{
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 8002618:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <updatePID+0x160>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f001 faeb 	bl	8003bf8 <sign>
 8002622:	4603      	mov	r3, r0
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fa47 	bl	8000ab8 <__aeabi_i2f>
 800262a:	4603      	mov	r3, r0
 800262c:	4a2b      	ldr	r2, [pc, #172]	; (80026dc <updatePID+0x164>)
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fa95 	bl	8000b60 <__aeabi_fmul>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <updatePID+0x160>)
 800263c:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 800263e:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <updatePID+0x168>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe f84c 	bl	80006e4 <__aeabi_f2d>
 800264c:	a314      	add	r3, pc, #80	; (adr r3, 80026a0 <updatePID+0x128>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f7fe f91d 	bl	8000890 <__aeabi_dcmpgt>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8113 	beq.w	8002884 <updatePID+0x30c>
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <updatePID+0x168>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002666:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <updatePID+0x164>)
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fc16 	bl	8000e9c <__aeabi_fcmplt>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d100      	bne.n	8002678 <updatePID+0x100>
 8002676:	e105      	b.n	8002884 <updatePID+0x30c>
		{
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <updatePID+0x168>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fabb 	bl	8003bf8 <sign>
 8002682:	4603      	mov	r3, r0
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fa17 	bl	8000ab8 <__aeabi_i2f>
 800268a:	4603      	mov	r3, r0
 800268c:	4a13      	ldr	r2, [pc, #76]	; (80026dc <updatePID+0x164>)
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fa65 	bl	8000b60 <__aeabi_fmul>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <updatePID+0x168>)
 800269c:	601a      	str	r2, [r3, #0]
		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 800269e:	e0f1      	b.n	8002884 <updatePID+0x30c>
 80026a0:	47ae147b 	.word	0x47ae147b
 80026a4:	3f847ae1 	.word	0x3f847ae1
 80026a8:	2000034c 	.word	0x2000034c
 80026ac:	20000348 	.word	0x20000348
 80026b0:	20000380 	.word	0x20000380
 80026b4:	2000037c 	.word	0x2000037c
 80026b8:	200003b8 	.word	0x200003b8
 80026bc:	200003b4 	.word	0x200003b4
 80026c0:	200003e8 	.word	0x200003e8
 80026c4:	200003e4 	.word	0x200003e4
 80026c8:	20000414 	.word	0x20000414
 80026cc:	20000378 	.word	0x20000378
 80026d0:	42700000 	.word	0x42700000
 80026d4:	20000344 	.word	0x20000344
 80026d8:	20000418 	.word	0x20000418
 80026dc:	3e8f5c29 	.word	0x3e8f5c29
 80026e0:	2000041c 	.word	0x2000041c
		}
	}
	else	// If under PWM limits, normalize values
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 80026e4:	4bb0      	ldr	r3, [pc, #704]	; (80029a8 <updatePID+0x430>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd fff9 	bl	80006e4 <__aeabi_f2d>
 80026f2:	a3a9      	add	r3, pc, #676	; (adr r3, 8002998 <updatePID+0x420>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fe f8ca 	bl	8000890 <__aeabi_dcmpgt>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d058      	beq.n	80027b4 <updatePID+0x23c>
 8002702:	4ba9      	ldr	r3, [pc, #676]	; (80029a8 <updatePID+0x430>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800270a:	4aa8      	ldr	r2, [pc, #672]	; (80029ac <updatePID+0x434>)
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fbc4 	bl	8000e9c <__aeabi_fcmplt>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d04c      	beq.n	80027b4 <updatePID+0x23c>
		{
			right_PWM_value = right_PWM_value - (sign(right_PWM_value) * (PWMMin - fabs(left_PWM_value)));
 800271a:	4ba5      	ldr	r3, [pc, #660]	; (80029b0 <updatePID+0x438>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd ffe0 	bl	80006e4 <__aeabi_f2d>
 8002724:	4604      	mov	r4, r0
 8002726:	460d      	mov	r5, r1
 8002728:	4ba1      	ldr	r3, [pc, #644]	; (80029b0 <updatePID+0x438>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f001 fa63 	bl	8003bf8 <sign>
 8002732:	4603      	mov	r3, r0
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd ffc3 	bl	80006c0 <__aeabi_i2d>
 800273a:	4680      	mov	r8, r0
 800273c:	4689      	mov	r9, r1
 800273e:	4b9b      	ldr	r3, [pc, #620]	; (80029ac <updatePID+0x434>)
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd ffcf 	bl	80006e4 <__aeabi_f2d>
 8002746:	4682      	mov	sl, r0
 8002748:	468b      	mov	fp, r1
 800274a:	4b97      	ldr	r3, [pc, #604]	; (80029a8 <updatePID+0x430>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd ffc6 	bl	80006e4 <__aeabi_f2d>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4650      	mov	r0, sl
 800275e:	4659      	mov	r1, fp
 8002760:	f7fd fe60 	bl	8000424 <__aeabi_dsub>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4640      	mov	r0, r8
 800276a:	4649      	mov	r1, r9
 800276c:	f7fd fd2c 	bl	80001c8 <__aeabi_dmul>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4620      	mov	r0, r4
 8002776:	4629      	mov	r1, r5
 8002778:	f7fd fe54 	bl	8000424 <__aeabi_dsub>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	f7fe f88e 	bl	80008a4 <__aeabi_d2f>
 8002788:	4603      	mov	r3, r0
 800278a:	4a89      	ldr	r2, [pc, #548]	; (80029b0 <updatePID+0x438>)
 800278c:	6013      	str	r3, [r2, #0]
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 800278e:	4b86      	ldr	r3, [pc, #536]	; (80029a8 <updatePID+0x430>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f001 fa30 	bl	8003bf8 <sign>
 8002798:	4603      	mov	r3, r0
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe f98c 	bl	8000ab8 <__aeabi_i2f>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a82      	ldr	r2, [pc, #520]	; (80029ac <updatePID+0x434>)
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe f9da 	bl	8000b60 <__aeabi_fmul>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b7d      	ldr	r3, [pc, #500]	; (80029a8 <updatePID+0x430>)
 80027b2:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 80027b4:	4b7e      	ldr	r3, [pc, #504]	; (80029b0 <updatePID+0x438>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd ff91 	bl	80006e4 <__aeabi_f2d>
 80027c2:	a375      	add	r3, pc, #468	; (adr r3, 8002998 <updatePID+0x420>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fe f862 	bl	8000890 <__aeabi_dcmpgt>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d058      	beq.n	8002884 <updatePID+0x30c>
 80027d2:	4b77      	ldr	r3, [pc, #476]	; (80029b0 <updatePID+0x438>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027da:	4a74      	ldr	r2, [pc, #464]	; (80029ac <updatePID+0x434>)
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fb5c 	bl	8000e9c <__aeabi_fcmplt>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d04c      	beq.n	8002884 <updatePID+0x30c>
		{
			left_PWM_value = left_PWM_value - (sign(left_PWM_value) * (PWMMin - fabs(right_PWM_value)));
 80027ea:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <updatePID+0x430>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd ff78 	bl	80006e4 <__aeabi_f2d>
 80027f4:	4604      	mov	r4, r0
 80027f6:	460d      	mov	r5, r1
 80027f8:	4b6b      	ldr	r3, [pc, #428]	; (80029a8 <updatePID+0x430>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f001 f9fb 	bl	8003bf8 <sign>
 8002802:	4603      	mov	r3, r0
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd ff5b 	bl	80006c0 <__aeabi_i2d>
 800280a:	4680      	mov	r8, r0
 800280c:	4689      	mov	r9, r1
 800280e:	4b67      	ldr	r3, [pc, #412]	; (80029ac <updatePID+0x434>)
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd ff67 	bl	80006e4 <__aeabi_f2d>
 8002816:	4682      	mov	sl, r0
 8002818:	468b      	mov	fp, r1
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <updatePID+0x438>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd ff5e 	bl	80006e4 <__aeabi_f2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4650      	mov	r0, sl
 800282e:	4659      	mov	r1, fp
 8002830:	f7fd fdf8 	bl	8000424 <__aeabi_dsub>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4640      	mov	r0, r8
 800283a:	4649      	mov	r1, r9
 800283c:	f7fd fcc4 	bl	80001c8 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4620      	mov	r0, r4
 8002846:	4629      	mov	r1, r5
 8002848:	f7fd fdec 	bl	8000424 <__aeabi_dsub>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f826 	bl	80008a4 <__aeabi_d2f>
 8002858:	4603      	mov	r3, r0
 800285a:	4a53      	ldr	r2, [pc, #332]	; (80029a8 <updatePID+0x430>)
 800285c:	6013      	str	r3, [r2, #0]
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 800285e:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <updatePID+0x438>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f001 f9c8 	bl	8003bf8 <sign>
 8002868:	4603      	mov	r3, r0
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe f924 	bl	8000ab8 <__aeabi_i2f>
 8002870:	4603      	mov	r3, r0
 8002872:	4a4e      	ldr	r2, [pc, #312]	; (80029ac <updatePID+0x434>)
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe f972 	bl	8000b60 <__aeabi_fmul>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <updatePID+0x438>)
 8002882:	601a      	str	r2, [r3, #0]
		}
	}

	if (fabs(left_PWM_value) > PWM_MAX)
 8002884:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <updatePID+0x430>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd ff29 	bl	80006e4 <__aeabi_f2d>
 8002892:	a343      	add	r3, pc, #268	; (adr r3, 80029a0 <updatePID+0x428>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f7fd fffa 	bl	8000890 <__aeabi_dcmpgt>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d016      	beq.n	80028d0 <updatePID+0x358>
	{
		left_PWM_value = sign(left_PWM_value) * PWM_MAX;
 80028a2:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <updatePID+0x430>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f001 f9a6 	bl	8003bf8 <sign>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd ff06 	bl	80006c0 <__aeabi_i2d>
 80028b4:	a33a      	add	r3, pc, #232	; (adr r3, 80029a0 <updatePID+0x428>)
 80028b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ba:	f7fd fc85 	bl	80001c8 <__aeabi_dmul>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4610      	mov	r0, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	f7fd ffed 	bl	80008a4 <__aeabi_d2f>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4a36      	ldr	r2, [pc, #216]	; (80029a8 <updatePID+0x430>)
 80028ce:	6013      	str	r3, [r2, #0]
	}

	if (fabs(right_PWM_value) > PWM_MAX)
 80028d0:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <updatePID+0x438>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd ff03 	bl	80006e4 <__aeabi_f2d>
 80028de:	a330      	add	r3, pc, #192	; (adr r3, 80029a0 <updatePID+0x428>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd ffd4 	bl	8000890 <__aeabi_dcmpgt>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <updatePID+0x3a4>
	{
		right_PWM_value = sign(right_PWM_value) * PWM_MAX;
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <updatePID+0x438>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 f980 	bl	8003bf8 <sign>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fee0 	bl	80006c0 <__aeabi_i2d>
 8002900:	a327      	add	r3, pc, #156	; (adr r3, 80029a0 <updatePID+0x428>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fc5f 	bl	80001c8 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f7fd ffc7 	bl	80008a4 <__aeabi_d2f>
 8002916:	4603      	mov	r3, r0
 8002918:	4a25      	ldr	r2, [pc, #148]	; (80029b0 <updatePID+0x438>)
 800291a:	6013      	str	r3, [r2, #0]



//////////////////	SET PWM VALUES AND CHECK FOR GOAL REACHED ////////////////////////

	setMotorLPWM(left_PWM_value);
 800291c:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <updatePID+0x430>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fa65 	bl	8001df0 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <updatePID+0x438>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fa9c 	bl	8001e68 <setMotorRPWM>

	if(angleError < 30 && angleError > -30 && distanceError < 30 && distanceError > -30)
 8002930:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <updatePID+0x43c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4920      	ldr	r1, [pc, #128]	; (80029b8 <updatePID+0x440>)
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fab0 	bl	8000e9c <__aeabi_fcmplt>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d020      	beq.n	8002984 <updatePID+0x40c>
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <updatePID+0x43c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	491d      	ldr	r1, [pc, #116]	; (80029bc <updatePID+0x444>)
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fac5 	bl	8000ed8 <__aeabi_fcmpgt>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d017      	beq.n	8002984 <updatePID+0x40c>
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <updatePID+0x448>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4917      	ldr	r1, [pc, #92]	; (80029b8 <updatePID+0x440>)
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fa9e 	bl	8000e9c <__aeabi_fcmplt>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00e      	beq.n	8002984 <updatePID+0x40c>
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <updatePID+0x448>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4914      	ldr	r1, [pc, #80]	; (80029bc <updatePID+0x444>)
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fab3 	bl	8000ed8 <__aeabi_fcmpgt>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <updatePID+0x40c>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <updatePID+0x44c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <updatePID+0x44c>)
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e002      	b.n	800298a <updatePID+0x412>

	else
		goal_reached_timer = 0;
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <updatePID+0x44c>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

///////////////////// UPDATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldDistanceCorrection = distanceCorrection;
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <updatePID+0x450>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <updatePID+0x454>)
 8002990:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002992:	2309      	movs	r3, #9
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e027      	b.n	80029e8 <updatePID+0x470>
 8002998:	47ae147b 	.word	0x47ae147b
 800299c:	3f847ae1 	.word	0x3f847ae1
 80029a0:	66666666 	.word	0x66666666
 80029a4:	3fee6666 	.word	0x3fee6666
 80029a8:	20000418 	.word	0x20000418
 80029ac:	3e8f5c29 	.word	0x3e8f5c29
 80029b0:	2000041c 	.word	0x2000041c
 80029b4:	20000344 	.word	0x20000344
 80029b8:	41f00000 	.word	0x41f00000
 80029bc:	c1f00000 	.word	0xc1f00000
 80029c0:	20000378 	.word	0x20000378
 80029c4:	20000420 	.word	0x20000420
 80029c8:	200003a8 	.word	0x200003a8
 80029cc:	200003ac 	.word	0x200003ac
		oldAngleErrors[i] = oldAngleErrors[i-1];	// Adds the newest angleError to array and shifts everything to the right
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	4a2b      	ldr	r2, [pc, #172]	; (8002a84 <updatePID+0x50c>)
 80029d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029da:	492a      	ldr	r1, [pc, #168]	; (8002a84 <updatePID+0x50c>)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	dcf0      	bgt.n	80029d0 <updatePID+0x458>
	oldAngleErrors[0] = angleError;
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <updatePID+0x510>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a24      	ldr	r2, [pc, #144]	; (8002a84 <updatePID+0x50c>)
 80029f4:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 80029f6:	2309      	movs	r3, #9
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	e00b      	b.n	8002a14 <updatePID+0x49c>
		oldDistanceErrors[i] = oldDistanceErrors[i-1];	// Adds the newest distanceError to array and shifts everything right
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	4a22      	ldr	r2, [pc, #136]	; (8002a8c <updatePID+0x514>)
 8002a02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a06:	4921      	ldr	r1, [pc, #132]	; (8002a8c <updatePID+0x514>)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	dcf0      	bgt.n	80029fc <updatePID+0x484>
	oldDistanceErrors[0] = distanceError;
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <updatePID+0x518>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <updatePID+0x514>)
 8002a20:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002a22:	2309      	movs	r3, #9
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	e00b      	b.n	8002a40 <updatePID+0x4c8>
		old_left_distances[i] = old_left_distances[i-1];
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <updatePID+0x51c>)
 8002a2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a32:	4918      	ldr	r1, [pc, #96]	; (8002a94 <updatePID+0x51c>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	dcf0      	bgt.n	8002a28 <updatePID+0x4b0>
	old_left_distances[0] = left_distance;
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <updatePID+0x520>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a12      	ldr	r2, [pc, #72]	; (8002a94 <updatePID+0x51c>)
 8002a4c:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002a4e:	2309      	movs	r3, #9
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	e00b      	b.n	8002a6c <updatePID+0x4f4>
		old_right_distances[i] = old_right_distances[i-1];
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	4a10      	ldr	r2, [pc, #64]	; (8002a9c <updatePID+0x524>)
 8002a5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a5e:	490f      	ldr	r1, [pc, #60]	; (8002a9c <updatePID+0x524>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	dcf0      	bgt.n	8002a54 <updatePID+0x4dc>
	old_right_distances[0] = right_distance;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <updatePID+0x528>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <updatePID+0x524>)
 8002a78:	6013      	str	r3, [r2, #0]

}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a84:	2000034c 	.word	0x2000034c
 8002a88:	20000344 	.word	0x20000344
 8002a8c:	20000380 	.word	0x20000380
 8002a90:	20000378 	.word	0x20000378
 8002a94:	200003b8 	.word	0x200003b8
 8002a98:	200003b0 	.word	0x200003b0
 8002a9c:	200003e8 	.word	0x200003e8
 8002aa0:	200003e0 	.word	0x200003e0

08002aa4 <PIDdone>:

int8_t PIDdone(){ // There is no bool type in C. True/False values are represented as 1 or 0.
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0

	if (goal_reached_timer >= 50)
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <PIDdone+0x20>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b31      	cmp	r3, #49	; 0x31
 8002aae:	dd06      	ble.n	8002abe <PIDdone+0x1a>
	{
		resetPID();
 8002ab0:	f000 f80a 	bl	8002ac8 <resetPID>
		setState(REST);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7ff fa47 	bl	8001f48 <setState>
		return 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <PIDdone+0x1c>
	}
	else
		return 0;
 8002abe:	2300      	movs	r3, #0

}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000420 	.word	0x20000420

08002ac8 <resetPID>:

void resetPID() {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0

//////////////	RESET ALL ANGLE AND DISTANCE ERRORS TO 0	////////////////
	angleError = 0;
 8002ace:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <resetPID+0x104>)
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
	oldAngleError = 0;
 8002ad6:	4b3e      	ldr	r3, [pc, #248]	; (8002bd0 <resetPID+0x108>)
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
	angleCorrection = 0;
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <resetPID+0x10c>)
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	e008      	b.n	8002afe <resetPID+0x36>
		oldAngleErrors[i] = 0;
 8002aec:	4a3a      	ldr	r2, [pc, #232]	; (8002bd8 <resetPID+0x110>)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f04f 0100 	mov.w	r1, #0
 8002af4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3301      	adds	r3, #1
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	ddf3      	ble.n	8002aec <resetPID+0x24>

	distanceError = 0;
 8002b04:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <resetPID+0x114>)
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
	oldDistanceError = 0;
 8002b0c:	4b34      	ldr	r3, [pc, #208]	; (8002be0 <resetPID+0x118>)
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
	distanceCorrection = 0;
 8002b14:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <resetPID+0x11c>)
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	e008      	b.n	8002b34 <resetPID+0x6c>
		oldDistanceErrors[i] = 0;
 8002b22:	4a31      	ldr	r2, [pc, #196]	; (8002be8 <resetPID+0x120>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f04f 0100 	mov.w	r1, #0
 8002b2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3301      	adds	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b09      	cmp	r3, #9
 8002b38:	ddf3      	ble.n	8002b22 <resetPID+0x5a>

	left_distance = 0;
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <resetPID+0x124>)
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
	old_left_distance = 0;
 8002b42:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <resetPID+0x128>)
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	e008      	b.n	8002b62 <resetPID+0x9a>
		old_left_distances[i] = 0;
 8002b50:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <resetPID+0x12c>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b09      	cmp	r3, #9
 8002b66:	ddf3      	ble.n	8002b50 <resetPID+0x88>

	right_distance = 0;
 8002b68:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <resetPID+0x130>)
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
	old_right_distance = 0;
 8002b70:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <resetPID+0x134>)
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	e008      	b.n	8002b90 <resetPID+0xc8>
		old_right_distances[i] = 0;
 8002b7e:	4a20      	ldr	r2, [pc, #128]	; (8002c00 <resetPID+0x138>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b09      	cmp	r3, #9
 8002b94:	ddf3      	ble.n	8002b7e <resetPID+0xb6>

	IRadjustment = 0;
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <resetPID+0x13c>)
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

////////////// 	RESET ALL GOALS AND ENCODER COUNTS TO 0 	///////////////////
	goal_angle = 0;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <resetPID+0x140>)
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
	goal_distance = 0;
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <resetPID+0x144>)
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
	goal_reached_timer = 0;
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <resetPID+0x148>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

	resetEncoders();
 8002bb4:	f7fe fbf6 	bl	80013a4 <resetEncoders>
	resetMotors();
 8002bb8:	f7ff f992 	bl	8001ee0 <resetMotors>

	setState(REST);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7ff f9c3 	bl	8001f48 <setState>

}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000344 	.word	0x20000344
 8002bd0:	20000348 	.word	0x20000348
 8002bd4:	20000374 	.word	0x20000374
 8002bd8:	2000034c 	.word	0x2000034c
 8002bdc:	20000378 	.word	0x20000378
 8002be0:	2000037c 	.word	0x2000037c
 8002be4:	200003a8 	.word	0x200003a8
 8002be8:	20000380 	.word	0x20000380
 8002bec:	200003b0 	.word	0x200003b0
 8002bf0:	200003b4 	.word	0x200003b4
 8002bf4:	200003b8 	.word	0x200003b8
 8002bf8:	200003e0 	.word	0x200003e0
 8002bfc:	200003e4 	.word	0x200003e4
 8002c00:	200003e8 	.word	0x200003e8
 8002c04:	20000410 	.word	0x20000410
 8002c08:	2000033c 	.word	0x2000033c
 8002c0c:	20000338 	.word	0x20000338
 8002c10:	20000420 	.word	0x20000420

08002c14 <newCell>:
//extern int16_t rightIRvalue;
//extern int16_t frontLeftIRvalue;
//extern int16_t frontRightIRvalue; // TODO: IS THIS NECESSARY?

struct Cell* newCell(int r, int c)           // Acts as a constructor for a cell cuz C is annoying
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
    struct Cell* p = malloc(sizeof(struct Cell));
 8002c1e:	2008      	movs	r0, #8
 8002c20:	f003 fdf4 	bl	800680c <malloc>
 8002c24:	4603      	mov	r3, r0
 8002c26:	60fb      	str	r3, [r7, #12]
    p->row = r;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	601a      	str	r2, [r3, #0]
    p->col = c;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	605a      	str	r2, [r3, #4]
    return p;
 8002c34:	68fb      	ldr	r3, [r7, #12]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <insertQueue>:

void insertQueue(struct Cell* input) {
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
    queue[queueEnd] = input;
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <insertQueue+0x38>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	490b      	ldr	r1, [pc, #44]	; (8002c7c <insertQueue+0x3c>)
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    queueEnd++;
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <insertQueue+0x38>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <insertQueue+0x38>)
 8002c5c:	6013      	str	r3, [r2, #0]

    if (queueEnd == 512) {
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <insertQueue+0x38>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c66:	d102      	bne.n	8002c6e <insertQueue+0x2e>
        queueEnd = 0;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <insertQueue+0x38>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	20001034 	.word	0x20001034
 8002c7c:	20000830 	.word	0x20000830

08002c80 <popQueueFront>:

void popQueueFront()
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
    free(queueFront());
 8002c84:	f000 f816 	bl	8002cb4 <queueFront>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 fdc6 	bl	800681c <free>

    queueStart++;
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <popQueueFront+0x30>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3301      	adds	r3, #1
 8002c96:	4a06      	ldr	r2, [pc, #24]	; (8002cb0 <popQueueFront+0x30>)
 8002c98:	6013      	str	r3, [r2, #0]
    if (queueStart == 512) {
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <popQueueFront+0x30>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca2:	d102      	bne.n	8002caa <popQueueFront+0x2a>
        queueStart = 0;
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <popQueueFront+0x30>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20001030 	.word	0x20001030

08002cb4 <queueFront>:

struct Cell* queueFront()
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
    return queue[queueStart];
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <queueFront+0x18>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <queueFront+0x1c>)
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20001030 	.word	0x20001030
 8002cd0:	20000830 	.word	0x20000830

08002cd4 <initElements>:

void initElements()
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
    currPos = newCell(15, 0);           // Sets current position to row 15, column 0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	200f      	movs	r0, #15
 8002cde:	f7ff ff99 	bl	8002c14 <newCell>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a2f      	ldr	r2, [pc, #188]	; (8002da4 <initElements+0xd0>)
 8002ce6:	6013      	str	r3, [r2, #0]
    currHead = NORTH;                    // Sets current heading to north
 8002ce8:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <initElements+0xd4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 17; i++) {
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e013      	b.n	8002d1c <initElements+0x48>
        for (int j = 0; j < 16; j++) {
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	e00a      	b.n	8002d10 <initElements+0x3c>
            horzWall[i][j] = 0;
 8002cfa:	492c      	ldr	r1, [pc, #176]	; (8002dac <initElements+0xd8>)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	011a      	lsls	r2, r3, #4
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	2200      	movs	r2, #0
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < 16; j++) {
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b0f      	cmp	r3, #15
 8002d14:	ddf1      	ble.n	8002cfa <initElements+0x26>
    for (int i = 0; i < 17; i++) {
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	dde8      	ble.n	8002cf4 <initElements+0x20>
        }
    }

    for (int i = 0; i < 16; i++) {
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	e015      	b.n	8002d54 <initElements+0x80>
        for (int j = 0; j < 17; j++) {
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	e00c      	b.n	8002d48 <initElements+0x74>
            vertWall[i][j] = 0;
 8002d2e:	4920      	ldr	r1, [pc, #128]	; (8002db0 <initElements+0xdc>)
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	4413      	add	r3, r2
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < 17; j++) {
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3301      	adds	r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	ddef      	ble.n	8002d2e <initElements+0x5a>
    for (int i = 0; i < 16; i++) {
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3301      	adds	r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	dde6      	ble.n	8002d28 <initElements+0x54>
        }
    }

    for (int i = 0; i < 16; i++) {
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	e013      	b.n	8002d88 <initElements+0xb4>
        for (int j = 0; j < 16; j++) {
 8002d60:	2300      	movs	r3, #0
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	e00a      	b.n	8002d7c <initElements+0xa8>
            discovered[i][j] = 0;
 8002d66:	4913      	ldr	r1, [pc, #76]	; (8002db4 <initElements+0xe0>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	011a      	lsls	r2, r3, #4
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	2200      	movs	r2, #0
 8002d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < 16; j++) {
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	ddf1      	ble.n	8002d66 <initElements+0x92>
    for (int i = 0; i < 16; i++) {
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3301      	adds	r3, #1
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b0f      	cmp	r3, #15
 8002d8c:	dde8      	ble.n	8002d60 <initElements+0x8c>
        }
    }

    queueStart = 0;
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <initElements+0xe4>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
    queueEnd = 0;
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <initElements+0xe8>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000428 	.word	0x20000428
 8002da8:	2000042c 	.word	0x2000042c
 8002dac:	20001038 	.word	0x20001038
 8002db0:	20001478 	.word	0x20001478
 8002db4:	200018b8 	.word	0x200018b8
 8002db8:	20001030 	.word	0x20001030
 8002dbc:	20001034 	.word	0x20001034

08002dc0 <setWall>:

void setWall(int dir)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    switch (dir)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d844      	bhi.n	8002e58 <setWall+0x98>
 8002dce:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <setWall+0x14>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002de5 	.word	0x08002de5
 8002dd8:	08002dff 	.word	0x08002dff
 8002ddc:	08002e1f 	.word	0x08002e1f
 8002de0:	08002e3b 	.word	0x08002e3b
    {
    case NORTH:
        horzWall[currPos->row][currPos->col] = 1;   // Sets the 2D array value to 1 to represent true (there's no bool type in C)
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <setWall+0xa4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <setWall+0xa4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	491d      	ldr	r1, [pc, #116]	; (8002e68 <setWall+0xa8>)
 8002df2:	0112      	lsls	r2, r2, #4
 8002df4:	4413      	add	r3, r2
 8002df6:	2201      	movs	r2, #1
 8002df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        break;
 8002dfc:	e02c      	b.n	8002e58 <setWall+0x98>
    case EAST:
        vertWall[currPos->row][currPos->col + 1] = 1;   // May need to check 2D array logic my head hurts lol
 8002dfe:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <setWall+0xa4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <setWall+0xa4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	1c59      	adds	r1, r3, #1
 8002e0c:	4817      	ldr	r0, [pc, #92]	; (8002e6c <setWall+0xac>)
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	4413      	add	r3, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	2201      	movs	r2, #1
 8002e18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        break;
 8002e1c:	e01c      	b.n	8002e58 <setWall+0x98>
    case SOUTH:
        horzWall[currPos->row + 1][currPos->col] = 1;
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <setWall+0xa4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <setWall+0xa4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	490e      	ldr	r1, [pc, #56]	; (8002e68 <setWall+0xa8>)
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	4413      	add	r3, r2
 8002e32:	2201      	movs	r2, #1
 8002e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        break;
 8002e38:	e00e      	b.n	8002e58 <setWall+0x98>
    case WEST:
        vertWall[currPos->row][currPos->col] = 1;
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <setWall+0xa4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <setWall+0xa4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	4809      	ldr	r0, [pc, #36]	; (8002e6c <setWall+0xac>)
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	4413      	add	r3, r2
 8002e4e:	440b      	add	r3, r1
 8002e50:	2201      	movs	r2, #1
 8002e52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        break;
 8002e56:	bf00      	nop
    }
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000428 	.word	0x20000428
 8002e68:	20001038 	.word	0x20001038
 8002e6c:	20001478 	.word	0x20001478

08002e70 <detectWalls>:

void detectWalls()
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
    switch (currHead)
 8002e74:	4b44      	ldr	r3, [pc, #272]	; (8002f88 <detectWalls+0x118>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d876      	bhi.n	8002f6a <detectWalls+0xfa>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <detectWalls+0x14>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002ec7 	.word	0x08002ec7
 8002e8c:	08002ef9 	.word	0x08002ef9
 8002e90:	08002f2b 	.word	0x08002f2b
    {
    case NORTH:
        if (frontWallCheck())
 8002e94:	f000 fe94 	bl	8003bc0 <frontWallCheck>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <detectWalls+0x34>
        {
            setWall(NORTH);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7ff ff8e 	bl	8002dc0 <setWall>
        }
        if (leftWallCheck())
 8002ea4:	f000 fe54 	bl	8003b50 <leftWallCheck>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <detectWalls+0x44>
        {
            setWall(WEST);
 8002eae:	2003      	movs	r0, #3
 8002eb0:	f7ff ff86 	bl	8002dc0 <setWall>
        }
        if (rightWallCheck())
 8002eb4:	f000 fe68 	bl	8003b88 <rightWallCheck>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d04e      	beq.n	8002f5c <detectWalls+0xec>
        {
            setWall(EAST);
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f7ff ff7e 	bl	8002dc0 <setWall>
        }
        break;
 8002ec4:	e04a      	b.n	8002f5c <detectWalls+0xec>
    case EAST:
        if (frontWallCheck())
 8002ec6:	f000 fe7b 	bl	8003bc0 <frontWallCheck>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <detectWalls+0x66>
        {
            setWall(EAST);
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f7ff ff75 	bl	8002dc0 <setWall>
        }
        if (leftWallCheck())
 8002ed6:	f000 fe3b 	bl	8003b50 <leftWallCheck>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <detectWalls+0x76>
        {
            setWall(NORTH);
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7ff ff6d 	bl	8002dc0 <setWall>
        }
        if (rightWallCheck())
 8002ee6:	f000 fe4f 	bl	8003b88 <rightWallCheck>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d037      	beq.n	8002f60 <detectWalls+0xf0>
        {
            setWall(SOUTH);
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f7ff ff65 	bl	8002dc0 <setWall>
        }
        break;
 8002ef6:	e033      	b.n	8002f60 <detectWalls+0xf0>
    case SOUTH:
        if (frontWallCheck())
 8002ef8:	f000 fe62 	bl	8003bc0 <frontWallCheck>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <detectWalls+0x98>
        {
            setWall(SOUTH);
 8002f02:	2002      	movs	r0, #2
 8002f04:	f7ff ff5c 	bl	8002dc0 <setWall>
        }
        if (leftWallCheck())
 8002f08:	f000 fe22 	bl	8003b50 <leftWallCheck>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <detectWalls+0xa8>
        {
            setWall(EAST);
 8002f12:	2001      	movs	r0, #1
 8002f14:	f7ff ff54 	bl	8002dc0 <setWall>
        }
        if (rightWallCheck())
 8002f18:	f000 fe36 	bl	8003b88 <rightWallCheck>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d020      	beq.n	8002f64 <detectWalls+0xf4>
        {
            setWall(WEST);
 8002f22:	2003      	movs	r0, #3
 8002f24:	f7ff ff4c 	bl	8002dc0 <setWall>
        }
        break;
 8002f28:	e01c      	b.n	8002f64 <detectWalls+0xf4>
    case WEST:
        if (frontWallCheck())
 8002f2a:	f000 fe49 	bl	8003bc0 <frontWallCheck>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <detectWalls+0xca>
        {
            setWall(WEST);
 8002f34:	2003      	movs	r0, #3
 8002f36:	f7ff ff43 	bl	8002dc0 <setWall>
        }
        if (leftWallCheck())
 8002f3a:	f000 fe09 	bl	8003b50 <leftWallCheck>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <detectWalls+0xda>
        {
            setWall(SOUTH);
 8002f44:	2002      	movs	r0, #2
 8002f46:	f7ff ff3b 	bl	8002dc0 <setWall>
        }
        if (rightWallCheck())
 8002f4a:	f000 fe1d 	bl	8003b88 <rightWallCheck>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <detectWalls+0xf8>
        {
            setWall(NORTH);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7ff ff33 	bl	8002dc0 <setWall>
        }
        break;
 8002f5a:	e005      	b.n	8002f68 <detectWalls+0xf8>
        break;
 8002f5c:	bf00      	nop
 8002f5e:	e004      	b.n	8002f6a <detectWalls+0xfa>
        break;
 8002f60:	bf00      	nop
 8002f62:	e002      	b.n	8002f6a <detectWalls+0xfa>
        break;
 8002f64:	bf00      	nop
 8002f66:	e000      	b.n	8002f6a <detectWalls+0xfa>
        break;
 8002f68:	bf00      	nop
    }

    discovered[currPos->row][currPos->col] = 1;		// Mark current cell as discovered
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <detectWalls+0x11c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <detectWalls+0x11c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4906      	ldr	r1, [pc, #24]	; (8002f90 <detectWalls+0x120>)
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	4413      	add	r3, r2
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	2000042c 	.word	0x2000042c
 8002f8c:	20000428 	.word	0x20000428
 8002f90:	200018b8 	.word	0x200018b8

08002f94 <recalculate>:

void recalculate()
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
    queueStart = 0;
 8002f9a:	4b90      	ldr	r3, [pc, #576]	; (80031dc <recalculate+0x248>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
    queueEnd = 0;
 8002fa0:	4b8f      	ldr	r3, [pc, #572]	; (80031e0 <recalculate+0x24c>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

    // Mark all cells as -1, meaning that they have not had their Manhattan set yet
    for (int j = 0; j < 16; j++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e014      	b.n	8002fd6 <recalculate+0x42>
    {
        for (int i = 0; i < 16; i++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	e00b      	b.n	8002fca <recalculate+0x36>
        {
            Manhattans[i][j] = -1;
 8002fb2:	498c      	ldr	r1, [pc, #560]	; (80031e4 <recalculate+0x250>)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	011a      	lsls	r2, r3, #4
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < 16; i++)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b0f      	cmp	r3, #15
 8002fce:	ddf0      	ble.n	8002fb2 <recalculate+0x1e>
    for (int j = 0; j < 16; j++)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	dde7      	ble.n	8002fac <recalculate+0x18>
        }
    }

    if(goToCenter)
 8002fdc:	4b82      	ldr	r3, [pc, #520]	; (80031e8 <recalculate+0x254>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00c      	beq.n	8002ffe <recalculate+0x6a>
//        insertQueue(newCell(7, 7));
//        insertQueue(newCell(7, 8));
//        insertQueue(newCell(8, 7));
//        insertQueue(newCell(8, 8));

    	Manhattans[10][4] = 0;
 8002fe4:	4b7f      	ldr	r3, [pc, #508]	; (80031e4 <recalculate+0x250>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    	insertQueue(newCell(10, 4));
 8002fec:	2104      	movs	r1, #4
 8002fee:	200a      	movs	r0, #10
 8002ff0:	f7ff fe10 	bl	8002c14 <newCell>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fe22 	bl	8002c40 <insertQueue>
 8002ffc:	e0e1      	b.n	80031c2 <recalculate+0x22e>
    }

    else
    {
        // Set starting cell to 0, insert starting cell into queue (set start as destination)
        Manhattans[15][0] = 0;
 8002ffe:	4b79      	ldr	r3, [pc, #484]	; (80031e4 <recalculate+0x250>)
 8003000:	2200      	movs	r2, #0
 8003002:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
        insertQueue(newCell(15, 0));
 8003006:	2100      	movs	r1, #0
 8003008:	200f      	movs	r0, #15
 800300a:	f7ff fe03 	bl	8002c14 <newCell>
 800300e:	4603      	mov	r3, r0
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fe15 	bl	8002c40 <insertQueue>
    }


    //while queue is not empty
    while (queueStart != queueEnd) {
 8003016:	e0d4      	b.n	80031c2 <recalculate+0x22e>

        struct Cell* currElement = queueFront();
 8003018:	f7ff fe4c 	bl	8002cb4 <queueFront>
 800301c:	60f8      	str	r0, [r7, #12]

        int currRow = currElement->row;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60bb      	str	r3, [r7, #8]
        int currCol = currElement->col;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	607b      	str	r3, [r7, #4]

        // For all accessable neighbors with no set Manhattan distance, add cell to queue and set Manhattan to current Manhattan + 1

        //north wall
        if (currRow > 0 && horzWall[currRow][currCol] != 1 && Manhattans[currRow - 1][currCol] == -1) {
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	dd2d      	ble.n	800308c <recalculate+0xf8>
 8003030:	496e      	ldr	r1, [pc, #440]	; (80031ec <recalculate+0x258>)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	011a      	lsls	r2, r3, #4
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d024      	beq.n	800308c <recalculate+0xf8>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	3b01      	subs	r3, #1
 8003046:	4967      	ldr	r1, [pc, #412]	; (80031e4 <recalculate+0x250>)
 8003048:	011a      	lsls	r2, r3, #4
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d119      	bne.n	800308c <recalculate+0xf8>
            Manhattans[currRow - 1][currCol] = Manhattans[currRow][currCol] + 1;
 8003058:	4962      	ldr	r1, [pc, #392]	; (80031e4 <recalculate+0x250>)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	011a      	lsls	r2, r3, #4
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3b01      	subs	r3, #1
 800306a:	3201      	adds	r2, #1
 800306c:	485d      	ldr	r0, [pc, #372]	; (80031e4 <recalculate+0x250>)
 800306e:	0119      	lsls	r1, r3, #4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	440b      	add	r3, r1
 8003074:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            insertQueue(newCell(currRow - 1, currCol));
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	3b01      	subs	r3, #1
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fdc8 	bl	8002c14 <newCell>
 8003084:	4603      	mov	r3, r0
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fdda 	bl	8002c40 <insertQueue>
        }
        //east wall
        if (currCol < 15 && vertWall[currRow][currCol + 1] != 1 && Manhattans[currRow][currCol + 1] == -1) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b0e      	cmp	r3, #14
 8003090:	dc30      	bgt.n	80030f4 <recalculate+0x160>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	1c59      	adds	r1, r3, #1
 8003096:	4856      	ldr	r0, [pc, #344]	; (80031f0 <recalculate+0x25c>)
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	4413      	add	r3, r2
 80030a0:	440b      	add	r3, r1
 80030a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d024      	beq.n	80030f4 <recalculate+0x160>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3301      	adds	r3, #1
 80030ae:	494d      	ldr	r1, [pc, #308]	; (80031e4 <recalculate+0x250>)
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	4413      	add	r3, r2
 80030b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030be:	d119      	bne.n	80030f4 <recalculate+0x160>
            Manhattans[currRow][currCol + 1] = Manhattans[currRow][currCol] + 1;
 80030c0:	4948      	ldr	r1, [pc, #288]	; (80031e4 <recalculate+0x250>)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	011a      	lsls	r2, r3, #4
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3301      	adds	r3, #1
 80030d2:	3201      	adds	r2, #1
 80030d4:	4843      	ldr	r0, [pc, #268]	; (80031e4 <recalculate+0x250>)
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	0109      	lsls	r1, r1, #4
 80030da:	440b      	add	r3, r1
 80030dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            insertQueue(newCell(currRow, currCol + 1));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3301      	adds	r3, #1
 80030e4:	4619      	mov	r1, r3
 80030e6:	68b8      	ldr	r0, [r7, #8]
 80030e8:	f7ff fd94 	bl	8002c14 <newCell>
 80030ec:	4603      	mov	r3, r0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fda6 	bl	8002c40 <insertQueue>
        }
        //south wall
        if (currRow < 15 && horzWall[currRow + 1][currCol] != 1 && Manhattans[currRow + 1][currCol] == -1) {
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b0e      	cmp	r3, #14
 80030f8:	dc2e      	bgt.n	8003158 <recalculate+0x1c4>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3301      	adds	r3, #1
 80030fe:	493b      	ldr	r1, [pc, #236]	; (80031ec <recalculate+0x258>)
 8003100:	011a      	lsls	r2, r3, #4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d024      	beq.n	8003158 <recalculate+0x1c4>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3301      	adds	r3, #1
 8003112:	4934      	ldr	r1, [pc, #208]	; (80031e4 <recalculate+0x250>)
 8003114:	011a      	lsls	r2, r3, #4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d119      	bne.n	8003158 <recalculate+0x1c4>
            Manhattans[currRow + 1][currCol] = Manhattans[currRow][currCol] + 1;
 8003124:	492f      	ldr	r1, [pc, #188]	; (80031e4 <recalculate+0x250>)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	011a      	lsls	r2, r3, #4
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3301      	adds	r3, #1
 8003136:	3201      	adds	r2, #1
 8003138:	482a      	ldr	r0, [pc, #168]	; (80031e4 <recalculate+0x250>)
 800313a:	0119      	lsls	r1, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	440b      	add	r3, r1
 8003140:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            insertQueue(newCell(currRow + 1, currCol));
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3301      	adds	r3, #1
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fd62 	bl	8002c14 <newCell>
 8003150:	4603      	mov	r3, r0
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fd74 	bl	8002c40 <insertQueue>
        }
        //west wall
        if (currCol > 0 && vertWall[currRow][currCol] != 1 && Manhattans[currRow][currCol - 1] == -1) {
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	dd2f      	ble.n	80031be <recalculate+0x22a>
 800315e:	4924      	ldr	r1, [pc, #144]	; (80031f0 <recalculate+0x25c>)
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	4413      	add	r3, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d024      	beq.n	80031be <recalculate+0x22a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	491a      	ldr	r1, [pc, #104]	; (80031e4 <recalculate+0x250>)
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	4413      	add	r3, r2
 8003180:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d119      	bne.n	80031be <recalculate+0x22a>
            Manhattans[currRow][currCol - 1] = Manhattans[currRow][currCol] + 1;
 800318a:	4916      	ldr	r1, [pc, #88]	; (80031e4 <recalculate+0x250>)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	011a      	lsls	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	3201      	adds	r2, #1
 800319e:	4811      	ldr	r0, [pc, #68]	; (80031e4 <recalculate+0x250>)
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	0109      	lsls	r1, r1, #4
 80031a4:	440b      	add	r3, r1
 80031a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            insertQueue(newCell(currRow, currCol - 1));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	4619      	mov	r1, r3
 80031b0:	68b8      	ldr	r0, [r7, #8]
 80031b2:	f7ff fd2f 	bl	8002c14 <newCell>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fd41 	bl	8002c40 <insertQueue>
        }

        // Deletes cell from queue and frees memory
        popQueueFront();
 80031be:	f7ff fd5f 	bl	8002c80 <popQueueFront>
    while (queueStart != queueEnd) {
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <recalculate+0x248>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <recalculate+0x24c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	f47f af24 	bne.w	8003018 <recalculate+0x84>
    }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20001030 	.word	0x20001030
 80031e0:	20001034 	.word	0x20001034
 80031e4:	20000430 	.word	0x20000430
 80031e8:	20000004 	.word	0x20000004
 80031ec:	20001038 	.word	0x20001038
 80031f0:	20001478 	.word	0x20001478

080031f4 <solver>:

Action solver(Algorithm alg) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]
    switch (alg)
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <solver+0x16>
 8003204:	2b01      	cmp	r3, #1
 8003206:	d004      	beq.n	8003212 <solver+0x1e>
 8003208:	e007      	b.n	800321a <solver+0x26>
    {
    case DEAD:
    	return deadReckoning();
 800320a:	f000 f80b 	bl	8003224 <deadReckoning>
 800320e:	4603      	mov	r3, r0
 8003210:	e004      	b.n	800321c <solver+0x28>
    	break;
    case FLOODFILL:
    	return floodFill();
 8003212:	f000 f81b 	bl	800324c <floodFill>
 8003216:	4603      	mov	r3, r0
 8003218:	e000      	b.n	800321c <solver+0x28>
    	break;
    default:
    	return FORWARD;
 800321a:	2301      	movs	r3, #1
    }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <deadReckoning>:

Action deadReckoning() {       // The simple left wall following algorithm that they provided
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
	if (!frontWallCheck())
 8003228:	f000 fcca 	bl	8003bc0 <frontWallCheck>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <deadReckoning+0x12>
	{
		return FORWARD;
 8003232:	2301      	movs	r3, #1
 8003234:	e007      	b.n	8003246 <deadReckoning+0x22>
	}
	else if (!rightWallCheck())
 8003236:	f000 fca7 	bl	8003b88 <rightWallCheck>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <deadReckoning+0x20>
	{
		return RIGHT;
 8003240:	2302      	movs	r3, #2
 8003242:	e000      	b.n	8003246 <deadReckoning+0x22>
	}
	else
	{
		return LEFT;
 8003244:	2300      	movs	r3, #0
	}
}
 8003246:	4618      	mov	r0, r3
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <floodFill>:

Action floodFill() {
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
    // Initializes all the elements and calculates Manhattan distances
    if (!initialized)
 8003252:	4b9a      	ldr	r3, [pc, #616]	; (80034bc <floodFill+0x270>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <floodFill+0x1c>
    {
        initElements();
 800325a:	f7ff fd3b 	bl	8002cd4 <initElements>
        recalculate();
 800325e:	f7ff fe99 	bl	8002f94 <recalculate>
        initialized = 1;
 8003262:	4b96      	ldr	r3, [pc, #600]	; (80034bc <floodFill+0x270>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]
    }

    // Lights up detected walls and adds them to the 2D wall arrays
    detectWalls();
 8003268:	f7ff fe02 	bl	8002e70 <detectWalls>

    // Display all Manhattan distances in the API dispaly

    int row = currPos->row;
 800326c:	4b94      	ldr	r3, [pc, #592]	; (80034c0 <floodFill+0x274>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	61bb      	str	r3, [r7, #24]
    int col = currPos->col;
 8003274:	4b92      	ldr	r3, [pc, #584]	; (80034c0 <floodFill+0x274>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	617b      	str	r3, [r7, #20]

    // If goal has already been reached, set new destination to either middle or starting cell
    if (Manhattans[row][col] == 0)
 800327c:	4991      	ldr	r1, [pc, #580]	; (80034c4 <floodFill+0x278>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	011a      	lsls	r2, r3, #4
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4413      	add	r3, r2
 8003286:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10e      	bne.n	80032ac <floodFill+0x60>
    {
        if (goToCenter)
 800328e:	4b8e      	ldr	r3, [pc, #568]	; (80034c8 <floodFill+0x27c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <floodFill+0x52>
            goToCenter = 0; // Destination is now Starting Cell
 8003296:	4b8c      	ldr	r3, [pc, #560]	; (80034c8 <floodFill+0x27c>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e002      	b.n	80032a4 <floodFill+0x58>
        else
            goToCenter = 1; // Destination is now middle four
 800329e:	4b8a      	ldr	r3, [pc, #552]	; (80034c8 <floodFill+0x27c>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

        recalculate();
 80032a4:	f7ff fe76 	bl	8002f94 <recalculate>
        return IDLE;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e11c      	b.n	80034e6 <floodFill+0x29a>
    }

    int northBlocked = horzWall[row][col];
 80032ac:	4987      	ldr	r1, [pc, #540]	; (80034cc <floodFill+0x280>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	011a      	lsls	r2, r3, #4
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	4413      	add	r3, r2
 80032b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032ba:	613b      	str	r3, [r7, #16]
    int eastBlocked = vertWall[row][col + 1];
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	1c59      	adds	r1, r3, #1
 80032c0:	4883      	ldr	r0, [pc, #524]	; (80034d0 <floodFill+0x284>)
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	4413      	add	r3, r2
 80032ca:	440b      	add	r3, r1
 80032cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032d0:	60fb      	str	r3, [r7, #12]
    int southBlocked = horzWall[row + 1][col];
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	3301      	adds	r3, #1
 80032d6:	497d      	ldr	r1, [pc, #500]	; (80034cc <floodFill+0x280>)
 80032d8:	011a      	lsls	r2, r3, #4
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	4413      	add	r3, r2
 80032de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032e2:	60bb      	str	r3, [r7, #8]
    int westBlocked = vertWall[row][col];
 80032e4:	497a      	ldr	r1, [pc, #488]	; (80034d0 <floodFill+0x284>)
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	4413      	add	r3, r2
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4413      	add	r3, r2
 80032f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032f6:	607b      	str	r3, [r7, #4]

    // Find next heading
    int nextHead = -1;
 80032f8:	f04f 33ff 	mov.w	r3, #4294967295
 80032fc:	61fb      	str	r3, [r7, #28]

    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d016      	beq.n	8003332 <floodFill+0xe6>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	3b01      	subs	r3, #1
 8003308:	496e      	ldr	r1, [pc, #440]	; (80034c4 <floodFill+0x278>)
 800330a:	011a      	lsls	r2, r3, #4
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	4413      	add	r3, r2
 8003310:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003314:	486b      	ldr	r0, [pc, #428]	; (80034c4 <floodFill+0x278>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	0119      	lsls	r1, r3, #4
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	440b      	add	r3, r1
 800331e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003322:	429a      	cmp	r2, r3
 8003324:	da05      	bge.n	8003332 <floodFill+0xe6>
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <floodFill+0xe6>
        nextHead = NORTH;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	e04c      	b.n	80033cc <floodFill+0x180>
    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b0f      	cmp	r3, #15
 8003336:	d016      	beq.n	8003366 <floodFill+0x11a>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3301      	adds	r3, #1
 800333c:	4961      	ldr	r1, [pc, #388]	; (80034c4 <floodFill+0x278>)
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	0112      	lsls	r2, r2, #4
 8003342:	4413      	add	r3, r2
 8003344:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003348:	485e      	ldr	r0, [pc, #376]	; (80034c4 <floodFill+0x278>)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	0119      	lsls	r1, r3, #4
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	440b      	add	r3, r1
 8003352:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003356:	429a      	cmp	r2, r3
 8003358:	da05      	bge.n	8003366 <floodFill+0x11a>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <floodFill+0x11a>
        nextHead = EAST;
 8003360:	2301      	movs	r3, #1
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	e032      	b.n	80033cc <floodFill+0x180>
    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b0f      	cmp	r3, #15
 800336a:	d016      	beq.n	800339a <floodFill+0x14e>
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	3301      	adds	r3, #1
 8003370:	4954      	ldr	r1, [pc, #336]	; (80034c4 <floodFill+0x278>)
 8003372:	011a      	lsls	r2, r3, #4
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	4413      	add	r3, r2
 8003378:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800337c:	4851      	ldr	r0, [pc, #324]	; (80034c4 <floodFill+0x278>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	0119      	lsls	r1, r3, #4
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	440b      	add	r3, r1
 8003386:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800338a:	429a      	cmp	r2, r3
 800338c:	da05      	bge.n	800339a <floodFill+0x14e>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <floodFill+0x14e>
        nextHead = SOUTH;
 8003394:	2302      	movs	r3, #2
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e018      	b.n	80033cc <floodFill+0x180>
    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d015      	beq.n	80033cc <floodFill+0x180>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	4947      	ldr	r1, [pc, #284]	; (80034c4 <floodFill+0x278>)
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	0112      	lsls	r2, r2, #4
 80033aa:	4413      	add	r3, r2
 80033ac:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80033b0:	4844      	ldr	r0, [pc, #272]	; (80034c4 <floodFill+0x278>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	0119      	lsls	r1, r3, #4
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	440b      	add	r3, r1
 80033ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80033be:	429a      	cmp	r2, r3
 80033c0:	da04      	bge.n	80033cc <floodFill+0x180>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <floodFill+0x180>
        nextHead = WEST;
 80033c8:	2303      	movs	r3, #3
 80033ca:	61fb      	str	r3, [r7, #28]

    // If no path available, then recalculta
    if (nextHead == -1)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d103      	bne.n	80033dc <floodFill+0x190>
    {
        recalculate();
 80033d4:	f7ff fdde 	bl	8002f94 <recalculate>
        return IDLE;
 80033d8:	2303      	movs	r3, #3
 80033da:	e084      	b.n	80034e6 <floodFill+0x29a>
    }

    // If next heading is in same direction, move forward
    if (nextHead == currHead)
 80033dc:	4b3d      	ldr	r3, [pc, #244]	; (80034d4 <floodFill+0x288>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d129      	bne.n	800343c <floodFill+0x1f0>
    {
        switch (currHead)
 80033e8:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <floodFill+0x288>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d823      	bhi.n	8003438 <floodFill+0x1ec>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <floodFill+0x1ac>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003415 	.word	0x08003415
 8003400:	08003421 	.word	0x08003421
 8003404:	0800342d 	.word	0x0800342d
        {
        case NORTH:
            currPos->row--;
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <floodFill+0x274>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	3a01      	subs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]
            break;
 8003412:	e011      	b.n	8003438 <floodFill+0x1ec>
        case EAST:
            currPos->col++;
 8003414:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <floodFill+0x274>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	3201      	adds	r2, #1
 800341c:	605a      	str	r2, [r3, #4]
            break;
 800341e:	e00b      	b.n	8003438 <floodFill+0x1ec>
        case SOUTH:
            currPos->row++;
 8003420:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <floodFill+0x274>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	3201      	adds	r2, #1
 8003428:	601a      	str	r2, [r3, #0]
            break;
 800342a:	e005      	b.n	8003438 <floodFill+0x1ec>
        case WEST:
            currPos->col--;
 800342c:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <floodFill+0x274>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	3a01      	subs	r2, #1
 8003434:	605a      	str	r2, [r3, #4]
            break;
 8003436:	bf00      	nop
        }
        return FORWARD;
 8003438:	2301      	movs	r3, #1
 800343a:	e054      	b.n	80034e6 <floodFill+0x29a>
    }

    // If next heading is in opposite direction, turn right
    if ((nextHead - currHead) % 2 == 0)
 800343c:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <floodFill+0x288>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <floodFill+0x222>
    {
        if (currHead == WEST)
 800344e:	4b21      	ldr	r3, [pc, #132]	; (80034d4 <floodFill+0x288>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d103      	bne.n	800345e <floodFill+0x212>
            currHead = NORTH;
 8003456:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <floodFill+0x288>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	e005      	b.n	800346a <floodFill+0x21e>
        else
            currHead++;
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <floodFill+0x288>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	3301      	adds	r3, #1
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <floodFill+0x288>)
 8003468:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 800346a:	2302      	movs	r3, #2
 800346c:	e03b      	b.n	80034e6 <floodFill+0x29a>
    }

    // If next heading is right, turn right
    if ((nextHead - currHead) == 1 || nextHead - currHead == -3)
 800346e:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <floodFill+0x288>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	2b01      	cmp	r3, #1
 800347a:	d007      	beq.n	800348c <floodFill+0x240>
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <floodFill+0x288>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	f113 0f03 	cmn.w	r3, #3
 800348a:	d10f      	bne.n	80034ac <floodFill+0x260>
    {
        if (currHead == WEST)
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <floodFill+0x288>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d103      	bne.n	800349c <floodFill+0x250>
            currHead = NORTH;
 8003494:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <floodFill+0x288>)
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	e005      	b.n	80034a8 <floodFill+0x25c>
        else
            currHead++;
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <floodFill+0x288>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <floodFill+0x288>)
 80034a6:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 80034a8:	2302      	movs	r3, #2
 80034aa:	e01c      	b.n	80034e6 <floodFill+0x29a>
    }

    // else, turn left
    if (currHead == NORTH)
 80034ac:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <floodFill+0x288>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d111      	bne.n	80034d8 <floodFill+0x28c>
        currHead = WEST;
 80034b4:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <floodFill+0x288>)
 80034b6:	2203      	movs	r2, #3
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	e013      	b.n	80034e4 <floodFill+0x298>
 80034bc:	20000424 	.word	0x20000424
 80034c0:	20000428 	.word	0x20000428
 80034c4:	20000430 	.word	0x20000430
 80034c8:	20000004 	.word	0x20000004
 80034cc:	20001038 	.word	0x20001038
 80034d0:	20001478 	.word	0x20001478
 80034d4:	2000042c 	.word	0x2000042c
    else
        currHead--;
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <floodFill+0x2a4>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	3b01      	subs	r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <floodFill+0x2a4>)
 80034e2:	701a      	strb	r2, [r3, #0]
    return LEFT;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	2000042c 	.word	0x2000042c

080034f4 <foresight>:

int foresight() {
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
	int row = currPos->row;
 80034fa:	4b70      	ldr	r3, [pc, #448]	; (80036bc <foresight+0x1c8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	61fb      	str	r3, [r7, #28]
	int col = currPos->col;
 8003502:	4b6e      	ldr	r3, [pc, #440]	; (80036bc <foresight+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	61bb      	str	r3, [r7, #24]

	int extra_moves = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]

	while(discovered[row][col] != 0)
 800350e:	e0c3      	b.n	8003698 <foresight+0x1a4>
	{
	    int northBlocked = horzWall[row][col];
 8003510:	496b      	ldr	r1, [pc, #428]	; (80036c0 <foresight+0x1cc>)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	011a      	lsls	r2, r3, #4
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	4413      	add	r3, r2
 800351a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800351e:	60fb      	str	r3, [r7, #12]
	    int eastBlocked = vertWall[row][col + 1];
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1c59      	adds	r1, r3, #1
 8003524:	4867      	ldr	r0, [pc, #412]	; (80036c4 <foresight+0x1d0>)
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	4413      	add	r3, r2
 800352e:	440b      	add	r3, r1
 8003530:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003534:	60bb      	str	r3, [r7, #8]
	    int southBlocked = horzWall[row + 1][col];
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3301      	adds	r3, #1
 800353a:	4961      	ldr	r1, [pc, #388]	; (80036c0 <foresight+0x1cc>)
 800353c:	011a      	lsls	r2, r3, #4
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	4413      	add	r3, r2
 8003542:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003546:	607b      	str	r3, [r7, #4]
	    int westBlocked = vertWall[row][col];
 8003548:	495e      	ldr	r1, [pc, #376]	; (80036c4 <foresight+0x1d0>)
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	4413      	add	r3, r2
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4413      	add	r3, r2
 8003556:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800355a:	603b      	str	r3, [r7, #0]

	    // Find next heading
	    int nextHead = -1;
 800355c:	f04f 33ff 	mov.w	r3, #4294967295
 8003560:	613b      	str	r3, [r7, #16]

	    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d016      	beq.n	8003596 <foresight+0xa2>
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	3b01      	subs	r3, #1
 800356c:	4956      	ldr	r1, [pc, #344]	; (80036c8 <foresight+0x1d4>)
 800356e:	011a      	lsls	r2, r3, #4
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	4413      	add	r3, r2
 8003574:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003578:	4853      	ldr	r0, [pc, #332]	; (80036c8 <foresight+0x1d4>)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	0119      	lsls	r1, r3, #4
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	440b      	add	r3, r1
 8003582:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003586:	429a      	cmp	r2, r3
 8003588:	da05      	bge.n	8003596 <foresight+0xa2>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <foresight+0xa2>
	        nextHead = NORTH;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e04c      	b.n	8003630 <foresight+0x13c>
	    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b0f      	cmp	r3, #15
 800359a:	d016      	beq.n	80035ca <foresight+0xd6>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	3301      	adds	r3, #1
 80035a0:	4949      	ldr	r1, [pc, #292]	; (80036c8 <foresight+0x1d4>)
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	4413      	add	r3, r2
 80035a8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80035ac:	4846      	ldr	r0, [pc, #280]	; (80036c8 <foresight+0x1d4>)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	0119      	lsls	r1, r3, #4
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	440b      	add	r3, r1
 80035b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	da05      	bge.n	80035ca <foresight+0xd6>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <foresight+0xd6>
	        nextHead = EAST;
 80035c4:	2301      	movs	r3, #1
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	e032      	b.n	8003630 <foresight+0x13c>
	    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b0f      	cmp	r3, #15
 80035ce:	d016      	beq.n	80035fe <foresight+0x10a>
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3301      	adds	r3, #1
 80035d4:	493c      	ldr	r1, [pc, #240]	; (80036c8 <foresight+0x1d4>)
 80035d6:	011a      	lsls	r2, r3, #4
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	4413      	add	r3, r2
 80035dc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80035e0:	4839      	ldr	r0, [pc, #228]	; (80036c8 <foresight+0x1d4>)
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	0119      	lsls	r1, r3, #4
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	440b      	add	r3, r1
 80035ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	da05      	bge.n	80035fe <foresight+0x10a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <foresight+0x10a>
	        nextHead = SOUTH;
 80035f8:	2302      	movs	r3, #2
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	e018      	b.n	8003630 <foresight+0x13c>
	    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <foresight+0x13c>
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	3b01      	subs	r3, #1
 8003608:	492f      	ldr	r1, [pc, #188]	; (80036c8 <foresight+0x1d4>)
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	4413      	add	r3, r2
 8003610:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003614:	482c      	ldr	r0, [pc, #176]	; (80036c8 <foresight+0x1d4>)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	0119      	lsls	r1, r3, #4
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	440b      	add	r3, r1
 800361e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003622:	429a      	cmp	r2, r3
 8003624:	da04      	bge.n	8003630 <foresight+0x13c>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <foresight+0x13c>
	        nextHead = WEST;
 800362c:	2303      	movs	r3, #3
 800362e:	613b      	str	r3, [r7, #16]

	    if (nextHead != currHead)
 8003630:	4b26      	ldr	r3, [pc, #152]	; (80036cc <foresight+0x1d8>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4293      	cmp	r3, r2
 800363a:	d138      	bne.n	80036ae <foresight+0x1ba>
	    	break;

	    extra_moves++;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	3301      	adds	r3, #1
 8003640:	617b      	str	r3, [r7, #20]

		switch (currHead)
 8003642:	4b22      	ldr	r3, [pc, #136]	; (80036cc <foresight+0x1d8>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d81a      	bhi.n	8003680 <foresight+0x18c>
 800364a:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <foresight+0x15c>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003661 	.word	0x08003661
 8003654:	08003669 	.word	0x08003669
 8003658:	08003671 	.word	0x08003671
 800365c:	08003679 	.word	0x08003679
		{
			case NORTH:
				row--;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	3b01      	subs	r3, #1
 8003664:	61fb      	str	r3, [r7, #28]
				break;
 8003666:	e00b      	b.n	8003680 <foresight+0x18c>
			case EAST:
				col++;
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	3301      	adds	r3, #1
 800366c:	61bb      	str	r3, [r7, #24]
				break;
 800366e:	e007      	b.n	8003680 <foresight+0x18c>
			case SOUTH:
				row++;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3301      	adds	r3, #1
 8003674:	61fb      	str	r3, [r7, #28]
				break;
 8003676:	e003      	b.n	8003680 <foresight+0x18c>
			case WEST:
				col--;
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	3b01      	subs	r3, #1
 800367c:	61bb      	str	r3, [r7, #24]
				break;
 800367e:	bf00      	nop
		}
		if (row < 0 || row > 15 || col < 0 || col > 15)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	db14      	blt.n	80036b0 <foresight+0x1bc>
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2b0f      	cmp	r3, #15
 800368a:	dc11      	bgt.n	80036b0 <foresight+0x1bc>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	db0e      	blt.n	80036b0 <foresight+0x1bc>
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b0f      	cmp	r3, #15
 8003696:	dc0b      	bgt.n	80036b0 <foresight+0x1bc>
	while(discovered[row][col] != 0)
 8003698:	490d      	ldr	r1, [pc, #52]	; (80036d0 <foresight+0x1dc>)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	011a      	lsls	r2, r3, #4
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f47f af32 	bne.w	8003510 <foresight+0x1c>
 80036ac:	e000      	b.n	80036b0 <foresight+0x1bc>
	    	break;
 80036ae:	bf00      	nop
			break;
	}

	return extra_moves;
 80036b0:	697b      	ldr	r3, [r7, #20]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	; 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	20000428 	.word	0x20000428
 80036c0:	20001038 	.word	0x20001038
 80036c4:	20001478 	.word	0x20001478
 80036c8:	20000430 	.word	0x20000430
 80036cc:	2000042c 	.word	0x2000042c
 80036d0:	200018b8 	.word	0x200018b8

080036d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	4b0f      	ldr	r3, [pc, #60]	; (800371c <HAL_MspInit+0x48>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	4a0e      	ldr	r2, [pc, #56]	; (800371c <HAL_MspInit+0x48>)
 80036e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_MspInit+0x48>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f2:	607b      	str	r3, [r7, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_MspInit+0x48>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4a07      	ldr	r2, [pc, #28]	; (800371c <HAL_MspInit+0x48>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003704:	6413      	str	r3, [r2, #64]	; 0x40
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_MspInit+0x48>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	40023800 	.word	0x40023800

08003720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a3c      	ldr	r2, [pc, #240]	; (8003830 <HAL_ADC_MspInit+0x110>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d171      	bne.n	8003826 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_ADC_MspInit+0x114>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	4a3a      	ldr	r2, [pc, #232]	; (8003834 <HAL_ADC_MspInit+0x114>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	6453      	str	r3, [r2, #68]	; 0x44
 8003752:	4b38      	ldr	r3, [pc, #224]	; (8003834 <HAL_ADC_MspInit+0x114>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	4b34      	ldr	r3, [pc, #208]	; (8003834 <HAL_ADC_MspInit+0x114>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	4a33      	ldr	r2, [pc, #204]	; (8003834 <HAL_ADC_MspInit+0x114>)
 8003768:	f043 0304 	orr.w	r3, r3, #4
 800376c:	6313      	str	r3, [r2, #48]	; 0x30
 800376e:	4b31      	ldr	r3, [pc, #196]	; (8003834 <HAL_ADC_MspInit+0x114>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <HAL_ADC_MspInit+0x114>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a2c      	ldr	r2, [pc, #176]	; (8003834 <HAL_ADC_MspInit+0x114>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <HAL_ADC_MspInit+0x114>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 8003796:	2303      	movs	r3, #3
 8003798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800379a:	2303      	movs	r3, #3
 800379c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a2:	f107 0314 	add.w	r3, r7, #20
 80037a6:	4619      	mov	r1, r3
 80037a8:	4823      	ldr	r0, [pc, #140]	; (8003838 <HAL_ADC_MspInit+0x118>)
 80037aa:	f001 fbf3 	bl	8004f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 80037ae:	2360      	movs	r3, #96	; 0x60
 80037b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037b2:	2303      	movs	r3, #3
 80037b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ba:	f107 0314 	add.w	r3, r7, #20
 80037be:	4619      	mov	r1, r3
 80037c0:	481e      	ldr	r0, [pc, #120]	; (800383c <HAL_ADC_MspInit+0x11c>)
 80037c2:	f001 fbe7 	bl	8004f94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80037c6:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_ADC_MspInit+0x120>)
 80037c8:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <HAL_ADC_MspInit+0x124>)
 80037ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80037cc:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <HAL_ADC_MspInit+0x120>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_ADC_MspInit+0x120>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_ADC_MspInit+0x120>)
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80037de:	4b18      	ldr	r3, [pc, #96]	; (8003840 <HAL_ADC_MspInit+0x120>)
 80037e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_ADC_MspInit+0x120>)
 80037e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037ee:	4b14      	ldr	r3, [pc, #80]	; (8003840 <HAL_ADC_MspInit+0x120>)
 80037f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_ADC_MspInit+0x120>)
 80037f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_ADC_MspInit+0x120>)
 8003800:	2200      	movs	r2, #0
 8003802:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <HAL_ADC_MspInit+0x120>)
 8003806:	2200      	movs	r2, #0
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800380a:	480d      	ldr	r0, [pc, #52]	; (8003840 <HAL_ADC_MspInit+0x120>)
 800380c:	f000 ffe6 	bl	80047dc <HAL_DMA_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003816:	f7fe fab3 	bl	8001d80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a08      	ldr	r2, [pc, #32]	; (8003840 <HAL_ADC_MspInit+0x120>)
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
 8003820:	4a07      	ldr	r2, [pc, #28]	; (8003840 <HAL_ADC_MspInit+0x120>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003826:	bf00      	nop
 8003828:	3728      	adds	r7, #40	; 0x28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40012000 	.word	0x40012000
 8003834:	40023800 	.word	0x40023800
 8003838:	40020800 	.word	0x40020800
 800383c:	40020000 	.word	0x40020000
 8003840:	200001e8 	.word	0x200001e8
 8003844:	40026410 	.word	0x40026410

08003848 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <HAL_TIM_PWM_MspInit+0x38>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d10d      	bne.n	8003876 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_TIM_PWM_MspInit+0x3c>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	4a08      	ldr	r2, [pc, #32]	; (8003884 <HAL_TIM_PWM_MspInit+0x3c>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6453      	str	r3, [r2, #68]	; 0x44
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_TIM_PWM_MspInit+0x3c>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	40010000 	.word	0x40010000
 8003884:	40023800 	.word	0x40023800

08003888 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08c      	sub	sp, #48	; 0x30
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003890:	f107 031c 	add.w	r3, r7, #28
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a32      	ldr	r2, [pc, #200]	; (8003970 <HAL_TIM_Encoder_MspInit+0xe8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d12c      	bne.n	8003904 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	4a30      	ldr	r2, [pc, #192]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 80038b4:	f043 0302 	orr.w	r3, r3, #2
 80038b8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ba:	4b2e      	ldr	r3, [pc, #184]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4a29      	ldr	r2, [pc, #164]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 80038d0:	f043 0302 	orr.w	r3, r3, #2
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30
 80038d6:	4b27      	ldr	r3, [pc, #156]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 80038e2:	2330      	movs	r3, #48	; 0x30
 80038e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038f2:	2302      	movs	r3, #2
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f6:	f107 031c 	add.w	r3, r7, #28
 80038fa:	4619      	mov	r1, r3
 80038fc:	481e      	ldr	r0, [pc, #120]	; (8003978 <HAL_TIM_Encoder_MspInit+0xf0>)
 80038fe:	f001 fb49 	bl	8004f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003902:	e030      	b.n	8003966 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1c      	ldr	r2, [pc, #112]	; (800397c <HAL_TIM_Encoder_MspInit+0xf4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d12b      	bne.n	8003966 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	4b18      	ldr	r3, [pc, #96]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	4a17      	ldr	r2, [pc, #92]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 8003918:	f043 0302 	orr.w	r3, r3, #2
 800391c:	6453      	str	r3, [r2, #68]	; 0x44
 800391e:	4b15      	ldr	r3, [pc, #84]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4a10      	ldr	r2, [pc, #64]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_TIM_Encoder_MspInit+0xec>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8003946:	23c0      	movs	r3, #192	; 0xc0
 8003948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394a:	2302      	movs	r3, #2
 800394c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	2300      	movs	r3, #0
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003952:	2300      	movs	r3, #0
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003956:	2303      	movs	r3, #3
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395a:	f107 031c 	add.w	r3, r7, #28
 800395e:	4619      	mov	r1, r3
 8003960:	4807      	ldr	r0, [pc, #28]	; (8003980 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003962:	f001 fb17 	bl	8004f94 <HAL_GPIO_Init>
}
 8003966:	bf00      	nop
 8003968:	3730      	adds	r7, #48	; 0x30
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40000400 	.word	0x40000400
 8003974:	40023800 	.word	0x40023800
 8003978:	40020400 	.word	0x40020400
 800397c:	40010400 	.word	0x40010400
 8003980:	40020800 	.word	0x40020800

08003984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 030c 	add.w	r3, r7, #12
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a12      	ldr	r2, [pc, #72]	; (80039ec <HAL_TIM_MspPostInit+0x68>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d11e      	bne.n	80039e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_TIM_MspPostInit+0x6c>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <HAL_TIM_MspPostInit+0x6c>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6313      	str	r3, [r2, #48]	; 0x30
 80039b6:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_TIM_MspPostInit+0x6c>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 80039c2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80039c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c8:	2302      	movs	r3, #2
 80039ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039d4:	2301      	movs	r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d8:	f107 030c 	add.w	r3, r7, #12
 80039dc:	4619      	mov	r1, r3
 80039de:	4805      	ldr	r0, [pc, #20]	; (80039f4 <HAL_TIM_MspPostInit+0x70>)
 80039e0:	f001 fad8 	bl	8004f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80039e4:	bf00      	nop
 80039e6:	3720      	adds	r7, #32
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40020000 	.word	0x40020000

080039f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039fc:	e7fe      	b.n	80039fc <NMI_Handler+0x4>

080039fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039fe:	b480      	push	{r7}
 8003a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a02:	e7fe      	b.n	8003a02 <HardFault_Handler+0x4>

08003a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a08:	e7fe      	b.n	8003a08 <MemManage_Handler+0x4>

08003a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a0e:	e7fe      	b.n	8003a0e <BusFault_Handler+0x4>

08003a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a14:	e7fe      	b.n	8003a14 <UsageFault_Handler+0x4>

08003a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a16:	b480      	push	{r7}
 8003a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a22:	b480      	push	{r7}
 8003a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr

08003a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a3e:	f000 f975 	bl	8003d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  SysTickFunction();
 8003a42:	f000 f849 	bl	8003ad8 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <DMA2_Stream0_IRQHandler+0x10>)
 8003a52:	f001 f839 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200001e8 	.word	0x200001e8

08003a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <_sbrk+0x5c>)
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <_sbrk+0x60>)
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <_sbrk+0x64>)
 8003a7e:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <_sbrk+0x68>)
 8003a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <_sbrk+0x64>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d207      	bcs.n	8003aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a90:	f002 fe92 	bl	80067b8 <__errno>
 8003a94:	4603      	mov	r3, r0
 8003a96:	220c      	movs	r2, #12
 8003a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	e009      	b.n	8003ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aa0:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <_sbrk+0x64>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aa6:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <_sbrk+0x64>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	4a05      	ldr	r2, [pc, #20]	; (8003ac4 <_sbrk+0x64>)
 8003ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20020000 	.word	0x20020000
 8003ac0:	00000400 	.word	0x00000400
 8003ac4:	20001cb8 	.word	0x20001cb8
 8003ac8:	20001cd8 	.word	0x20001cd8

08003acc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <SysTickFunction>:

#include "main.h"
#include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 8003ade:	f7fe fd4b 	bl	8002578 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8003ae2:	f7fd fc43 	bl	800136c <getRightEncoderCounts>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f647 1318 	movw	r3, #31000	; 0x7918
 8003aee:	429a      	cmp	r2, r3
 8003af0:	dc15      	bgt.n	8003b1e <SysTickFunction+0x46>
 8003af2:	f7fd fc49 	bl	8001388 <getLeftEncoderCounts>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461a      	mov	r2, r3
 8003afa:	f647 1318 	movw	r3, #31000	; 0x7918
 8003afe:	429a      	cmp	r2, r3
 8003b00:	dc0d      	bgt.n	8003b1e <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8003b02:	f7fd fc33 	bl	800136c <getRightEncoderCounts>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <SysTickFunction+0x74>)
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	db06      	blt.n	8003b1e <SysTickFunction+0x46>
 8003b10:	f7fd fc3a 	bl	8001388 <getLeftEncoderCounts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <SysTickFunction+0x74>)
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	da11      	bge.n	8003b42 <SysTickFunction+0x6a>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8003b1e:	f7fd fc25 	bl	800136c <getRightEncoderCounts>
 8003b22:	4603      	mov	r3, r0
 8003b24:	b29c      	uxth	r4, r3
 8003b26:	f7fd fc2f 	bl	8001388 <getLeftEncoderCounts>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	1ae3      	subs	r3, r4, r3
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 8003b34:	f7fd fc36 	bl	80013a4 <resetEncoders>
		TIM2->CNT = (int16_t) difference;
 8003b38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b40:	6253      	str	r3, [r2, #36]	; 0x24
	}
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd90      	pop	{r4, r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	ffff86e8 	.word	0xffff86e8

08003b50 <leftWallCheck>:

void setLeftWall(int wall) { left_wall_threshold = wall; }
void setRightWall(int wall) { right_wall_threshold = wall; }
void setFrontWall(int wall) { front_wall_threshold = wall; }

int16_t leftWallCheck() {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
	if (readIR(IR_LEFT) > left_wall_threshold) {
 8003b54:	2001      	movs	r0, #1
 8003b56:	f7fd fc35 	bl	80013c4 <readIR>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <leftWallCheck+0x30>)
 8003b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	dd03      	ble.n	8003b70 <leftWallCheck+0x20>
		left_wall = 1;
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <leftWallCheck+0x34>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	e002      	b.n	8003b76 <leftWallCheck+0x26>
	}
	else {
		left_wall = 0;
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <leftWallCheck+0x34>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	801a      	strh	r2, [r3, #0]
	}
	return left_wall;
 8003b76:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <leftWallCheck+0x34>)
 8003b78:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	2000000c 	.word	0x2000000c
 8003b84:	20001cbc 	.word	0x20001cbc

08003b88 <rightWallCheck>:

int16_t rightWallCheck() {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	if (readIR(IR_RIGHT) > right_wall_threshold) {
 8003b8c:	2002      	movs	r0, #2
 8003b8e:	f7fd fc19 	bl	80013c4 <readIR>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <rightWallCheck+0x30>)
 8003b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	dd03      	ble.n	8003ba8 <rightWallCheck+0x20>
		right_wall = 1;
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <rightWallCheck+0x34>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	e002      	b.n	8003bae <rightWallCheck+0x26>
	}
	else {
		right_wall = 0;
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <rightWallCheck+0x34>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	801a      	strh	r2, [r3, #0]
	}
	return right_wall;
 8003bae:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <rightWallCheck+0x34>)
 8003bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	2000000e 	.word	0x2000000e
 8003bbc:	20001cbe 	.word	0x20001cbe

08003bc0 <frontWallCheck>:

int16_t frontWallCheck() {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
	if (readIR(IR_FORWARD_LEFT) > front_wall_threshold) {
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	f7fd fbfd 	bl	80013c4 <readIR>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <frontWallCheck+0x30>)
 8003bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	dd03      	ble.n	8003be0 <frontWallCheck+0x20>
		front_wall = 1;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <frontWallCheck+0x34>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	e002      	b.n	8003be6 <frontWallCheck+0x26>
	}
	else {
		front_wall = 0;
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <frontWallCheck+0x34>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	801a      	strh	r2, [r3, #0]
	}
	return front_wall;
 8003be6:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <frontWallCheck+0x34>)
 8003be8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20000010 	.word	0x20000010
 8003bf4:	20001cc0 	.word	0x20001cc0

08003bf8 <sign>:

int16_t sign(float x) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	if (x > 0)
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7fd f967 	bl	8000ed8 <__aeabi_fcmpgt>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <sign+0x1c>
	{
		return 1;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e00b      	b.n	8003c2c <sign+0x34>
	}
	else if (x < 0)
 8003c14:	f04f 0100 	mov.w	r1, #0
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7fd f93f 	bl	8000e9c <__aeabi_fcmplt>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <sign+0x32>
	{
		return -1;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e000      	b.n	8003c2c <sign+0x34>
	}
	else
	{
		return 0;
 8003c2a:	2300      	movs	r3, #0
	}
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c38:	480d      	ldr	r0, [pc, #52]	; (8003c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c3a:	490e      	ldr	r1, [pc, #56]	; (8003c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c3c:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c40:	e002      	b.n	8003c48 <LoopCopyDataInit>

08003c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c46:	3304      	adds	r3, #4

08003c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c4c:	d3f9      	bcc.n	8003c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c4e:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c50:	4c0b      	ldr	r4, [pc, #44]	; (8003c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c54:	e001      	b.n	8003c5a <LoopFillZerobss>

08003c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c58:	3204      	adds	r2, #4

08003c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c5c:	d3fb      	bcc.n	8003c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c5e:	f7ff ff35 	bl	8003acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c62:	f002 fdaf 	bl	80067c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c66:	f7fd fceb 	bl	8001640 <main>
  bx  lr    
 8003c6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c74:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003c78:	08006a70 	.word	0x08006a70
  ldr r2, =_sbss
 8003c7c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003c80:	20001cd8 	.word	0x20001cd8

08003c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c84:	e7fe      	b.n	8003c84 <ADC_IRQHandler>
	...

08003c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <HAL_Init+0x40>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0d      	ldr	r2, [pc, #52]	; (8003cc8 <HAL_Init+0x40>)
 8003c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_Init+0x40>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <HAL_Init+0x40>)
 8003c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <HAL_Init+0x40>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <HAL_Init+0x40>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb0:	2003      	movs	r0, #3
 8003cb2:	f000 fd51 	bl	8004758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cb6:	200f      	movs	r0, #15
 8003cb8:	f000 f808 	bl	8003ccc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003cbc:	f7ff fd0a 	bl	80036d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023c00 	.word	0x40023c00

08003ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_InitTick+0x54>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_InitTick+0x58>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fd69 	bl	80047c2 <HAL_SYSTICK_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e00e      	b.n	8003d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b0f      	cmp	r3, #15
 8003cfe:	d80a      	bhi.n	8003d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d00:	2200      	movs	r2, #0
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	f000 fd31 	bl	800476e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d0c:	4a06      	ldr	r2, [pc, #24]	; (8003d28 <HAL_InitTick+0x5c>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000008 	.word	0x20000008
 8003d24:	20000018 	.word	0x20000018
 8003d28:	20000014 	.word	0x20000014

08003d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_IncTick+0x1c>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_IncTick+0x20>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a03      	ldr	r2, [pc, #12]	; (8003d4c <HAL_IncTick+0x20>)
 8003d3e:	6013      	str	r3, [r2, #0]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	20000018 	.word	0x20000018
 8003d4c:	20001cc4 	.word	0x20001cc4

08003d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return uwTick;
 8003d54:	4b02      	ldr	r3, [pc, #8]	; (8003d60 <HAL_GetTick+0x10>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	20001cc4 	.word	0x20001cc4

08003d64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e033      	b.n	8003de2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fccc 	bl	8003720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d118      	bne.n	8003dd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003daa:	f023 0302 	bic.w	r3, r3, #2
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa7a 	bl	80042b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	f043 0201 	orr.w	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8003dd2:	e001      	b.n	8003dd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_Start_DMA+0x1e>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e0bc      	b.n	8003f84 <HAL_ADC_Start_DMA+0x198>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d018      	beq.n	8003e52 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e30:	4b56      	ldr	r3, [pc, #344]	; (8003f8c <HAL_ADC_Start_DMA+0x1a0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a56      	ldr	r2, [pc, #344]	; (8003f90 <HAL_ADC_Start_DMA+0x1a4>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0c9a      	lsrs	r2, r3, #18
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003e44:	e002      	b.n	8003e4c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f9      	bne.n	8003e46 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f040 8084 	bne.w	8003f6a <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea0:	d106      	bne.n	8003eb0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f023 0206 	bic.w	r2, r3, #6
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
 8003eae:	e002      	b.n	8003eb6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	4a34      	ldr	r2, [pc, #208]	; (8003f94 <HAL_ADC_Start_DMA+0x1a8>)
 8003ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	4a33      	ldr	r2, [pc, #204]	; (8003f98 <HAL_ADC_Start_DMA+0x1ac>)
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	4a32      	ldr	r2, [pc, #200]	; (8003f9c <HAL_ADC_Start_DMA+0x1b0>)
 8003ed4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ede:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003eee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003efe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	334c      	adds	r3, #76	; 0x4c
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f000 fd12 	bl	8004938 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003f14:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <HAL_ADC_Start_DMA+0x1b4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10f      	bne.n	8003f40 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d129      	bne.n	8003f82 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	e020      	b.n	8003f82 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_ADC_Start_DMA+0x1b8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d11b      	bne.n	8003f82 <HAL_ADC_Start_DMA+0x196>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d114      	bne.n	8003f82 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	e00b      	b.n	8003f82 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f043 0210 	orr.w	r2, r3, #16
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000008 	.word	0x20000008
 8003f90:	431bde83 	.word	0x431bde83
 8003f94:	080044bd 	.word	0x080044bd
 8003f98:	08004577 	.word	0x08004577
 8003f9c:	08004593 	.word	0x08004593
 8003fa0:	40012300 	.word	0x40012300
 8003fa4:	40012000 	.word	0x40012000

08003fa8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_ADC_Stop_DMA+0x1a>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e03f      	b.n	8004042 <HAL_ADC_Stop_DMA+0x9a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d127      	bne.n	8004038 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ff6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d118      	bne.n	8004038 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fcec 	bl	80049e8 <HAL_DMA_Abort>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004022:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	f043 0201 	orr.w	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004040:	7bfb      	ldrb	r3, [r7, #15]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
	...

08004070 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_ADC_ConfigChannel+0x1c>
 8004088:	2302      	movs	r3, #2
 800408a:	e103      	b.n	8004294 <HAL_ADC_ConfigChannel+0x224>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b09      	cmp	r3, #9
 800409a:	d925      	bls.n	80040e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68d9      	ldr	r1, [r3, #12]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	4613      	mov	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4413      	add	r3, r2
 80040b0:	3b1e      	subs	r3, #30
 80040b2:	2207      	movs	r2, #7
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	43da      	mvns	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	400a      	ands	r2, r1
 80040c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68d9      	ldr	r1, [r3, #12]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	4618      	mov	r0, r3
 80040d4:	4603      	mov	r3, r0
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	4403      	add	r3, r0
 80040da:	3b1e      	subs	r3, #30
 80040dc:	409a      	lsls	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	e022      	b.n	800412e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6919      	ldr	r1, [r3, #16]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	4613      	mov	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	4413      	add	r3, r2
 80040fc:	2207      	movs	r2, #7
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43da      	mvns	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	400a      	ands	r2, r1
 800410a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6919      	ldr	r1, [r3, #16]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	4618      	mov	r0, r3
 800411e:	4603      	mov	r3, r0
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4403      	add	r3, r0
 8004124:	409a      	lsls	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b06      	cmp	r3, #6
 8004134:	d824      	bhi.n	8004180 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	3b05      	subs	r3, #5
 8004148:	221f      	movs	r2, #31
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43da      	mvns	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	400a      	ands	r2, r1
 8004156:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	4618      	mov	r0, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	3b05      	subs	r3, #5
 8004172:	fa00 f203 	lsl.w	r2, r0, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	635a      	str	r2, [r3, #52]	; 0x34
 800417e:	e04c      	b.n	800421a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b0c      	cmp	r3, #12
 8004186:	d824      	bhi.n	80041d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	3b23      	subs	r3, #35	; 0x23
 800419a:	221f      	movs	r2, #31
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43da      	mvns	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	400a      	ands	r2, r1
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	4618      	mov	r0, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	3b23      	subs	r3, #35	; 0x23
 80041c4:	fa00 f203 	lsl.w	r2, r0, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
 80041d0:	e023      	b.n	800421a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	3b41      	subs	r3, #65	; 0x41
 80041e4:	221f      	movs	r2, #31
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43da      	mvns	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	400a      	ands	r2, r1
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	4618      	mov	r0, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	3b41      	subs	r3, #65	; 0x41
 800420e:	fa00 f203 	lsl.w	r2, r0, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a20      	ldr	r2, [pc, #128]	; (80042a0 <HAL_ADC_ConfigChannel+0x230>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d109      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x1c8>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b12      	cmp	r3, #18
 800422a:	d105      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_ADC_ConfigChannel+0x234>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <HAL_ADC_ConfigChannel+0x234>)
 8004232:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004236:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_ADC_ConfigChannel+0x230>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d123      	bne.n	800428a <HAL_ADC_ConfigChannel+0x21a>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b10      	cmp	r3, #16
 8004248:	d003      	beq.n	8004252 <HAL_ADC_ConfigChannel+0x1e2>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b11      	cmp	r3, #17
 8004250:	d11b      	bne.n	800428a <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004252:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <HAL_ADC_ConfigChannel+0x234>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <HAL_ADC_ConfigChannel+0x234>)
 8004258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800425c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b10      	cmp	r3, #16
 8004264:	d111      	bne.n	800428a <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <HAL_ADC_ConfigChannel+0x238>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a10      	ldr	r2, [pc, #64]	; (80042ac <HAL_ADC_ConfigChannel+0x23c>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	0c9a      	lsrs	r2, r3, #18
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800427c:	e002      	b.n	8004284 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b01      	subs	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f9      	bne.n	800427e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40012000 	.word	0x40012000
 80042a4:	40012300 	.word	0x40012300
 80042a8:	20000008 	.word	0x20000008
 80042ac:	431bde83 	.word	0x431bde83

080042b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80042b8:	4b7e      	ldr	r3, [pc, #504]	; (80044b4 <ADC_Init+0x204>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a7d      	ldr	r2, [pc, #500]	; (80044b4 <ADC_Init+0x204>)
 80042be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80042c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80042c4:	4b7b      	ldr	r3, [pc, #492]	; (80044b4 <ADC_Init+0x204>)
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4979      	ldr	r1, [pc, #484]	; (80044b4 <ADC_Init+0x204>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	021a      	lsls	r2, r3, #8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6899      	ldr	r1, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	4a5e      	ldr	r2, [pc, #376]	; (80044b8 <ADC_Init+0x208>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6899      	ldr	r1, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	e00f      	b.n	80043aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0202 	bic.w	r2, r2, #2
 80043b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6899      	ldr	r1, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	7e1b      	ldrb	r3, [r3, #24]
 80043c4:	005a      	lsls	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d027      	beq.n	8004428 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	3b01      	subs	r3, #1
 80043fe:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004402:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	fa92 f2a2 	rbit	r2, r2
 800440a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	fab2 f282 	clz	r2, r2
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	fa03 f102 	lsl.w	r1, r3, r2
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	e007      	b.n	8004438 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004436:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	3b01      	subs	r3, #1
 8004454:	051a      	lsls	r2, r3, #20
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800446c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6899      	ldr	r1, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800447a:	025a      	lsls	r2, r3, #9
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6899      	ldr	r1, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	029a      	lsls	r2, r3, #10
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40012300 	.word	0x40012300
 80044b8:	0f000001 	.word	0x0f000001

080044bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d13c      	bne.n	8004550 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d12b      	bne.n	8004548 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d127      	bne.n	8004548 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004510:	2b00      	cmp	r3, #0
 8004512:	d119      	bne.n	8004548 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0220 	bic.w	r2, r2, #32
 8004522:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7fd f821 	bl	8001590 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800454e:	e00e      	b.n	800456e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff fd7d 	bl	800405c <HAL_ADC_ErrorCallback>
}
 8004562:	e004      	b.n	800456e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	4798      	blx	r3
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7ff fd60 	bl	800404a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2240      	movs	r2, #64	; 0x40
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	f043 0204 	orr.w	r2, r3, #4
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff fd52 	bl	800405c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <__NVIC_SetPriorityGrouping+0x44>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045dc:	4013      	ands	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045f2:	4a04      	ldr	r2, [pc, #16]	; (8004604 <__NVIC_SetPriorityGrouping+0x44>)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	60d3      	str	r3, [r2, #12]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800460c:	4b04      	ldr	r3, [pc, #16]	; (8004620 <__NVIC_GetPriorityGrouping+0x18>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	f003 0307 	and.w	r3, r3, #7
}
 8004616:	4618      	mov	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	2b00      	cmp	r3, #0
 8004634:	db0b      	blt.n	800464e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	f003 021f 	and.w	r2, r3, #31
 800463c:	4906      	ldr	r1, [pc, #24]	; (8004658 <__NVIC_EnableIRQ+0x34>)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	2001      	movs	r0, #1
 8004646:	fa00 f202 	lsl.w	r2, r0, r2
 800464a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	e000e100 	.word	0xe000e100

0800465c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	6039      	str	r1, [r7, #0]
 8004666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466c:	2b00      	cmp	r3, #0
 800466e:	db0a      	blt.n	8004686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	b2da      	uxtb	r2, r3
 8004674:	490c      	ldr	r1, [pc, #48]	; (80046a8 <__NVIC_SetPriority+0x4c>)
 8004676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467a:	0112      	lsls	r2, r2, #4
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	440b      	add	r3, r1
 8004680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004684:	e00a      	b.n	800469c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	4908      	ldr	r1, [pc, #32]	; (80046ac <__NVIC_SetPriority+0x50>)
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	3b04      	subs	r3, #4
 8004694:	0112      	lsls	r2, r2, #4
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	440b      	add	r3, r1
 800469a:	761a      	strb	r2, [r3, #24]
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	e000e100 	.word	0xe000e100
 80046ac:	e000ed00 	.word	0xe000ed00

080046b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f1c3 0307 	rsb	r3, r3, #7
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	bf28      	it	cs
 80046ce:	2304      	movcs	r3, #4
 80046d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3304      	adds	r3, #4
 80046d6:	2b06      	cmp	r3, #6
 80046d8:	d902      	bls.n	80046e0 <NVIC_EncodePriority+0x30>
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	3b03      	subs	r3, #3
 80046de:	e000      	b.n	80046e2 <NVIC_EncodePriority+0x32>
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e4:	f04f 32ff 	mov.w	r2, #4294967295
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43da      	mvns	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	401a      	ands	r2, r3
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046f8:	f04f 31ff 	mov.w	r1, #4294967295
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004702:	43d9      	mvns	r1, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004708:	4313      	orrs	r3, r2
         );
}
 800470a:	4618      	mov	r0, r3
 800470c:	3724      	adds	r7, #36	; 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr

08004714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3b01      	subs	r3, #1
 8004720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004724:	d301      	bcc.n	800472a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004726:	2301      	movs	r3, #1
 8004728:	e00f      	b.n	800474a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800472a:	4a0a      	ldr	r2, [pc, #40]	; (8004754 <SysTick_Config+0x40>)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3b01      	subs	r3, #1
 8004730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004732:	210f      	movs	r1, #15
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	f7ff ff90 	bl	800465c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <SysTick_Config+0x40>)
 800473e:	2200      	movs	r2, #0
 8004740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004742:	4b04      	ldr	r3, [pc, #16]	; (8004754 <SysTick_Config+0x40>)
 8004744:	2207      	movs	r2, #7
 8004746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	e000e010 	.word	0xe000e010

08004758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ff2d 	bl	80045c0 <__NVIC_SetPriorityGrouping>
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800476e:	b580      	push	{r7, lr}
 8004770:	b086      	sub	sp, #24
 8004772:	af00      	add	r7, sp, #0
 8004774:	4603      	mov	r3, r0
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004780:	f7ff ff42 	bl	8004608 <__NVIC_GetPriorityGrouping>
 8004784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	6978      	ldr	r0, [r7, #20]
 800478c:	f7ff ff90 	bl	80046b0 <NVIC_EncodePriority>
 8004790:	4602      	mov	r2, r0
 8004792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004796:	4611      	mov	r1, r2
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff ff5f 	bl	800465c <__NVIC_SetPriority>
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	4603      	mov	r3, r0
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff ff35 	bl	8004624 <__NVIC_EnableIRQ>
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff ffa2 	bl	8004714 <SysTick_Config>
 80047d0:	4603      	mov	r3, r0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047e8:	f7ff fab2 	bl	8003d50 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e099      	b.n	800492c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004818:	e00f      	b.n	800483a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800481a:	f7ff fa99 	bl	8003d50 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b05      	cmp	r3, #5
 8004826:	d908      	bls.n	800483a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2203      	movs	r2, #3
 8004832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e078      	b.n	800492c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e8      	bne.n	800481a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4b38      	ldr	r3, [pc, #224]	; (8004934 <HAL_DMA_Init+0x158>)
 8004854:	4013      	ands	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004866:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800487e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	2b04      	cmp	r3, #4
 8004892:	d107      	bne.n	80048a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	4313      	orrs	r3, r2
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 0307 	bic.w	r3, r3, #7
 80048ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d117      	bne.n	80048fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00e      	beq.n	80048fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fadd 	bl	8004ea0 <DMA_CheckFifoParam>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2240      	movs	r2, #64	; 0x40
 80048f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048fa:	2301      	movs	r3, #1
 80048fc:	e016      	b.n	800492c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fa96 	bl	8004e38 <DMA_CalcBaseAndBitshift>
 800490c:	4603      	mov	r3, r0
 800490e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004914:	223f      	movs	r2, #63	; 0x3f
 8004916:	409a      	lsls	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	f010803f 	.word	0xf010803f

08004938 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_DMA_Start_IT+0x26>
 800495a:	2302      	movs	r3, #2
 800495c:	e040      	b.n	80049e0 <HAL_DMA_Start_IT+0xa8>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d12f      	bne.n	80049d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2202      	movs	r2, #2
 8004976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fa28 	bl	8004ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004990:	223f      	movs	r2, #63	; 0x3f
 8004992:	409a      	lsls	r2, r3
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0216 	orr.w	r2, r2, #22
 80049a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0208 	orr.w	r2, r2, #8
 80049be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	e005      	b.n	80049de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049da:	2302      	movs	r3, #2
 80049dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049de:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049f6:	f7ff f9ab 	bl	8003d50 <HAL_GetTick>
 80049fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d008      	beq.n	8004a1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2280      	movs	r2, #128	; 0x80
 8004a0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e052      	b.n	8004ac0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0216 	bic.w	r2, r2, #22
 8004a28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695a      	ldr	r2, [r3, #20]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d103      	bne.n	8004a4a <HAL_DMA_Abort+0x62>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0208 	bic.w	r2, r2, #8
 8004a58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0201 	bic.w	r2, r2, #1
 8004a68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a6a:	e013      	b.n	8004a94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a6c:	f7ff f970 	bl	8003d50 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b05      	cmp	r3, #5
 8004a78:	d90c      	bls.n	8004a94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2203      	movs	r2, #3
 8004a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e015      	b.n	8004ac0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e4      	bne.n	8004a6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa6:	223f      	movs	r2, #63	; 0x3f
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ad4:	4b8e      	ldr	r3, [pc, #568]	; (8004d10 <HAL_DMA_IRQHandler+0x248>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a8e      	ldr	r2, [pc, #568]	; (8004d14 <HAL_DMA_IRQHandler+0x24c>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0a9b      	lsrs	r3, r3, #10
 8004ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af2:	2208      	movs	r2, #8
 8004af4:	409a      	lsls	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01a      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0204 	bic.w	r2, r2, #4
 8004b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	2208      	movs	r2, #8
 8004b22:	409a      	lsls	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	f043 0201 	orr.w	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	2201      	movs	r2, #1
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d012      	beq.n	8004b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	2201      	movs	r2, #1
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b62:	f043 0202 	orr.w	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	2204      	movs	r2, #4
 8004b70:	409a      	lsls	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d012      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00b      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f043 0204 	orr.w	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d043      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d03c      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d018      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d024      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
 8004bf6:	e01f      	b.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01b      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
 8004c08:	e016      	b.n	8004c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d107      	bne.n	8004c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0208 	bic.w	r2, r2, #8
 8004c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 808f 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8087 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	2220      	movs	r2, #32
 8004c60:	409a      	lsls	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b05      	cmp	r3, #5
 8004c70:	d136      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0216 	bic.w	r2, r2, #22
 8004c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <HAL_DMA_IRQHandler+0x1da>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0208 	bic.w	r2, r2, #8
 8004cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	223f      	movs	r2, #63	; 0x3f
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d07e      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
        }
        return;
 8004cde:	e079      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01d      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d031      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
 8004d0c:	e02c      	b.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
 8004d0e:	bf00      	nop
 8004d10:	20000008 	.word	0x20000008
 8004d14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d023      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
 8004d28:	e01e      	b.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10f      	bne.n	8004d58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0210 	bic.w	r2, r2, #16
 8004d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d032      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d022      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d307      	bcc.n	8004db0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f2      	bne.n	8004d94 <HAL_DMA_IRQHandler+0x2cc>
 8004dae:	e000      	b.n	8004db2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004db0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
 8004dd2:	e000      	b.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dd4:	bf00      	nop
    }
  }
}
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d108      	bne.n	8004e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e1a:	e007      	b.n	8004e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr
	...

08004e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	3b10      	subs	r3, #16
 8004e48:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <DMA_CalcBaseAndBitshift+0x60>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e52:	4a12      	ldr	r2, [pc, #72]	; (8004e9c <DMA_CalcBaseAndBitshift+0x64>)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d909      	bls.n	8004e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	1d1a      	adds	r2, r3, #4
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	659a      	str	r2, [r3, #88]	; 0x58
 8004e78:	e007      	b.n	8004e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr
 8004e98:	aaaaaaab 	.word	0xaaaaaaab
 8004e9c:	08006a58 	.word	0x08006a58

08004ea0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d11f      	bne.n	8004efa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d856      	bhi.n	8004f6e <DMA_CheckFifoParam+0xce>
 8004ec0:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <DMA_CheckFifoParam+0x28>)
 8004ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec6:	bf00      	nop
 8004ec8:	08004ed9 	.word	0x08004ed9
 8004ecc:	08004eeb 	.word	0x08004eeb
 8004ed0:	08004ed9 	.word	0x08004ed9
 8004ed4:	08004f6f 	.word	0x08004f6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d046      	beq.n	8004f72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee8:	e043      	b.n	8004f72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ef2:	d140      	bne.n	8004f76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef8:	e03d      	b.n	8004f76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f02:	d121      	bne.n	8004f48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d837      	bhi.n	8004f7a <DMA_CheckFifoParam+0xda>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <DMA_CheckFifoParam+0x70>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f21 	.word	0x08004f21
 8004f14:	08004f27 	.word	0x08004f27
 8004f18:	08004f21 	.word	0x08004f21
 8004f1c:	08004f39 	.word	0x08004f39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
      break;
 8004f24:	e030      	b.n	8004f88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d025      	beq.n	8004f7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f36:	e022      	b.n	8004f7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f40:	d11f      	bne.n	8004f82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f46:	e01c      	b.n	8004f82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d903      	bls.n	8004f56 <DMA_CheckFifoParam+0xb6>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d003      	beq.n	8004f5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f54:	e018      	b.n	8004f88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5a:	e015      	b.n	8004f88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00e      	beq.n	8004f86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6c:	e00b      	b.n	8004f86 <DMA_CheckFifoParam+0xe6>
      break;
 8004f6e:	bf00      	nop
 8004f70:	e00a      	b.n	8004f88 <DMA_CheckFifoParam+0xe8>
      break;
 8004f72:	bf00      	nop
 8004f74:	e008      	b.n	8004f88 <DMA_CheckFifoParam+0xe8>
      break;
 8004f76:	bf00      	nop
 8004f78:	e006      	b.n	8004f88 <DMA_CheckFifoParam+0xe8>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e004      	b.n	8004f88 <DMA_CheckFifoParam+0xe8>
      break;
 8004f7e:	bf00      	nop
 8004f80:	e002      	b.n	8004f88 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f82:	bf00      	nop
 8004f84:	e000      	b.n	8004f88 <DMA_CheckFifoParam+0xe8>
      break;
 8004f86:	bf00      	nop
    }
  } 
  
  return status; 
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fa2:	e16f      	b.n	8005284 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	2101      	movs	r1, #1
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8161 	beq.w	800527e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d005      	beq.n	8004fd4 <HAL_GPIO_Init+0x40>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d130      	bne.n	8005036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	2203      	movs	r2, #3
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800500a:	2201      	movs	r2, #1
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4013      	ands	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	091b      	lsrs	r3, r3, #4
 8005020:	f003 0201 	and.w	r2, r3, #1
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b03      	cmp	r3, #3
 8005040:	d017      	beq.n	8005072 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	2203      	movs	r2, #3
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43db      	mvns	r3, r3
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4013      	ands	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d123      	bne.n	80050c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	08da      	lsrs	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3208      	adds	r2, #8
 8005086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800508a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	220f      	movs	r2, #15
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4013      	ands	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	691a      	ldr	r2, [r3, #16]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	08da      	lsrs	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3208      	adds	r2, #8
 80050c0:	6939      	ldr	r1, [r7, #16]
 80050c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	2203      	movs	r2, #3
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4013      	ands	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 0203 	and.w	r2, r3, #3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 80bb 	beq.w	800527e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005108:	2300      	movs	r3, #0
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	4b64      	ldr	r3, [pc, #400]	; (80052a0 <HAL_GPIO_Init+0x30c>)
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	4a63      	ldr	r2, [pc, #396]	; (80052a0 <HAL_GPIO_Init+0x30c>)
 8005112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005116:	6453      	str	r3, [r2, #68]	; 0x44
 8005118:	4b61      	ldr	r3, [pc, #388]	; (80052a0 <HAL_GPIO_Init+0x30c>)
 800511a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005124:	4a5f      	ldr	r2, [pc, #380]	; (80052a4 <HAL_GPIO_Init+0x310>)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	089b      	lsrs	r3, r3, #2
 800512a:	3302      	adds	r3, #2
 800512c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005130:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	220f      	movs	r2, #15
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a57      	ldr	r2, [pc, #348]	; (80052a8 <HAL_GPIO_Init+0x314>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d031      	beq.n	80051b4 <HAL_GPIO_Init+0x220>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a56      	ldr	r2, [pc, #344]	; (80052ac <HAL_GPIO_Init+0x318>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d02b      	beq.n	80051b0 <HAL_GPIO_Init+0x21c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a55      	ldr	r2, [pc, #340]	; (80052b0 <HAL_GPIO_Init+0x31c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d025      	beq.n	80051ac <HAL_GPIO_Init+0x218>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a54      	ldr	r2, [pc, #336]	; (80052b4 <HAL_GPIO_Init+0x320>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d01f      	beq.n	80051a8 <HAL_GPIO_Init+0x214>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a53      	ldr	r2, [pc, #332]	; (80052b8 <HAL_GPIO_Init+0x324>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d019      	beq.n	80051a4 <HAL_GPIO_Init+0x210>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a52      	ldr	r2, [pc, #328]	; (80052bc <HAL_GPIO_Init+0x328>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_GPIO_Init+0x20c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a51      	ldr	r2, [pc, #324]	; (80052c0 <HAL_GPIO_Init+0x32c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00d      	beq.n	800519c <HAL_GPIO_Init+0x208>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a50      	ldr	r2, [pc, #320]	; (80052c4 <HAL_GPIO_Init+0x330>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <HAL_GPIO_Init+0x204>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a4f      	ldr	r2, [pc, #316]	; (80052c8 <HAL_GPIO_Init+0x334>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d101      	bne.n	8005194 <HAL_GPIO_Init+0x200>
 8005190:	2308      	movs	r3, #8
 8005192:	e010      	b.n	80051b6 <HAL_GPIO_Init+0x222>
 8005194:	2309      	movs	r3, #9
 8005196:	e00e      	b.n	80051b6 <HAL_GPIO_Init+0x222>
 8005198:	2307      	movs	r3, #7
 800519a:	e00c      	b.n	80051b6 <HAL_GPIO_Init+0x222>
 800519c:	2306      	movs	r3, #6
 800519e:	e00a      	b.n	80051b6 <HAL_GPIO_Init+0x222>
 80051a0:	2305      	movs	r3, #5
 80051a2:	e008      	b.n	80051b6 <HAL_GPIO_Init+0x222>
 80051a4:	2304      	movs	r3, #4
 80051a6:	e006      	b.n	80051b6 <HAL_GPIO_Init+0x222>
 80051a8:	2303      	movs	r3, #3
 80051aa:	e004      	b.n	80051b6 <HAL_GPIO_Init+0x222>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e002      	b.n	80051b6 <HAL_GPIO_Init+0x222>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <HAL_GPIO_Init+0x222>
 80051b4:	2300      	movs	r3, #0
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	f002 0203 	and.w	r2, r2, #3
 80051bc:	0092      	lsls	r2, r2, #2
 80051be:	4093      	lsls	r3, r2
 80051c0:	461a      	mov	r2, r3
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80051c8:	4936      	ldr	r1, [pc, #216]	; (80052a4 <HAL_GPIO_Init+0x310>)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	3302      	adds	r3, #2
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051d6:	4b3d      	ldr	r3, [pc, #244]	; (80052cc <HAL_GPIO_Init+0x338>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	43db      	mvns	r3, r3
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4013      	ands	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80051fa:	4a34      	ldr	r2, [pc, #208]	; (80052cc <HAL_GPIO_Init+0x338>)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005200:	4b32      	ldr	r3, [pc, #200]	; (80052cc <HAL_GPIO_Init+0x338>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	43db      	mvns	r3, r3
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4013      	ands	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005224:	4a29      	ldr	r2, [pc, #164]	; (80052cc <HAL_GPIO_Init+0x338>)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800522a:	4b28      	ldr	r3, [pc, #160]	; (80052cc <HAL_GPIO_Init+0x338>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	43db      	mvns	r3, r3
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4013      	ands	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800524e:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <HAL_GPIO_Init+0x338>)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <HAL_GPIO_Init+0x338>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	43db      	mvns	r3, r3
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4013      	ands	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005278:	4a14      	ldr	r2, [pc, #80]	; (80052cc <HAL_GPIO_Init+0x338>)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	3301      	adds	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	fa22 f303 	lsr.w	r3, r2, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	f47f ae88 	bne.w	8004fa4 <HAL_GPIO_Init+0x10>
  }
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40013800 	.word	0x40013800
 80052a8:	40020000 	.word	0x40020000
 80052ac:	40020400 	.word	0x40020400
 80052b0:	40020800 	.word	0x40020800
 80052b4:	40020c00 	.word	0x40020c00
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40021400 	.word	0x40021400
 80052c0:	40021800 	.word	0x40021800
 80052c4:	40021c00 	.word	0x40021c00
 80052c8:	40022000 	.word	0x40022000
 80052cc:	40013c00 	.word	0x40013c00

080052d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	887b      	ldrh	r3, [r7, #2]
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
 80052ec:	e001      	b.n	80052f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr

080052fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	807b      	strh	r3, [r7, #2]
 800530a:	4613      	mov	r3, r2
 800530c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800530e:	787b      	ldrb	r3, [r7, #1]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005314:	887a      	ldrh	r2, [r7, #2]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800531a:	e003      	b.n	8005324 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800531c:	887b      	ldrh	r3, [r7, #2]
 800531e:	041a      	lsls	r2, r3, #16
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	619a      	str	r2, [r3, #24]
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
	...

08005330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e236      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d050      	beq.n	80053f0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800534e:	4b9e      	ldr	r3, [pc, #632]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	2b04      	cmp	r3, #4
 8005358:	d00c      	beq.n	8005374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800535a:	4b9b      	ldr	r3, [pc, #620]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005362:	2b08      	cmp	r3, #8
 8005364:	d112      	bne.n	800538c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005366:	4b98      	ldr	r3, [pc, #608]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005372:	d10b      	bne.n	800538c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005374:	4b94      	ldr	r3, [pc, #592]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d036      	beq.n	80053ee <HAL_RCC_OscConfig+0xbe>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d132      	bne.n	80053ee <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e211      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	4b8e      	ldr	r3, [pc, #568]	; (80055cc <HAL_RCC_OscConfig+0x29c>)
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d013      	beq.n	80053c6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539e:	f7fe fcd7 	bl	8003d50 <HAL_GetTick>
 80053a2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a6:	f7fe fcd3 	bl	8003d50 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b64      	cmp	r3, #100	; 0x64
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e1fb      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b8:	4b83      	ldr	r3, [pc, #524]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f0      	beq.n	80053a6 <HAL_RCC_OscConfig+0x76>
 80053c4:	e014      	b.n	80053f0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c6:	f7fe fcc3 	bl	8003d50 <HAL_GetTick>
 80053ca:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ce:	f7fe fcbf 	bl	8003d50 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b64      	cmp	r3, #100	; 0x64
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e1e7      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053e0:	4b79      	ldr	r3, [pc, #484]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f0      	bne.n	80053ce <HAL_RCC_OscConfig+0x9e>
 80053ec:	e000      	b.n	80053f0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d077      	beq.n	80054ec <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053fc:	4b72      	ldr	r3, [pc, #456]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 030c 	and.w	r3, r3, #12
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00b      	beq.n	8005420 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005408:	4b6f      	ldr	r3, [pc, #444]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005410:	2b08      	cmp	r3, #8
 8005412:	d126      	bne.n	8005462 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005414:	4b6c      	ldr	r3, [pc, #432]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d120      	bne.n	8005462 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005420:	4b69      	ldr	r3, [pc, #420]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_OscConfig+0x108>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d001      	beq.n	8005438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e1bb      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005438:	4b63      	ldr	r3, [pc, #396]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	21f8      	movs	r1, #248	; 0xf8
 8005446:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005448:	69b9      	ldr	r1, [r7, #24]
 800544a:	fa91 f1a1 	rbit	r1, r1
 800544e:	6179      	str	r1, [r7, #20]
  return result;
 8005450:	6979      	ldr	r1, [r7, #20]
 8005452:	fab1 f181 	clz	r1, r1
 8005456:	b2c9      	uxtb	r1, r1
 8005458:	408b      	lsls	r3, r1
 800545a:	495b      	ldr	r1, [pc, #364]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005460:	e044      	b.n	80054ec <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d02a      	beq.n	80054c0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800546a:	4b59      	ldr	r3, [pc, #356]	; (80055d0 <HAL_RCC_OscConfig+0x2a0>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7fe fc6e 	bl	8003d50 <HAL_GetTick>
 8005474:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005478:	f7fe fc6a 	bl	8003d50 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e192      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548a:	4b4f      	ldr	r3, [pc, #316]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005496:	4b4c      	ldr	r3, [pc, #304]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	21f8      	movs	r1, #248	; 0xf8
 80054a4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	6939      	ldr	r1, [r7, #16]
 80054a8:	fa91 f1a1 	rbit	r1, r1
 80054ac:	60f9      	str	r1, [r7, #12]
  return result;
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	fab1 f181 	clz	r1, r1
 80054b4:	b2c9      	uxtb	r1, r1
 80054b6:	408b      	lsls	r3, r1
 80054b8:	4943      	ldr	r1, [pc, #268]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]
 80054be:	e015      	b.n	80054ec <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054c0:	4b43      	ldr	r3, [pc, #268]	; (80055d0 <HAL_RCC_OscConfig+0x2a0>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c6:	f7fe fc43 	bl	8003d50 <HAL_GetTick>
 80054ca:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ce:	f7fe fc3f 	bl	8003d50 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e167      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054e0:	4b39      	ldr	r3, [pc, #228]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f0      	bne.n	80054ce <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d030      	beq.n	800555a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d016      	beq.n	800552e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005500:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <HAL_RCC_OscConfig+0x2a4>)
 8005502:	2201      	movs	r2, #1
 8005504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005506:	f7fe fc23 	bl	8003d50 <HAL_GetTick>
 800550a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800550e:	f7fe fc1f 	bl	8003d50 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e147      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005520:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 8005522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <HAL_RCC_OscConfig+0x1de>
 800552c:	e015      	b.n	800555a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800552e:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <HAL_RCC_OscConfig+0x2a4>)
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005534:	f7fe fc0c 	bl	8003d50 <HAL_GetTick>
 8005538:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800553c:	f7fe fc08 	bl	8003d50 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e130      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554e:	4b1e      	ldr	r3, [pc, #120]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 8005550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f0      	bne.n	800553c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8087 	beq.w	8005676 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005568:	2300      	movs	r3, #0
 800556a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800556e:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d110      	bne.n	800559c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	4a11      	ldr	r2, [pc, #68]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 8005584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005588:	6413      	str	r3, [r2, #64]	; 0x40
 800558a:	4b0f      	ldr	r3, [pc, #60]	; (80055c8 <HAL_RCC_OscConfig+0x298>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005592:	60bb      	str	r3, [r7, #8]
 8005594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <HAL_RCC_OscConfig+0x2a8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a0d      	ldr	r2, [pc, #52]	; (80055d8 <HAL_RCC_OscConfig+0x2a8>)
 80055a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCC_OscConfig+0x2a8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d122      	bne.n	80055fa <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <HAL_RCC_OscConfig+0x2a8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a07      	ldr	r2, [pc, #28]	; (80055d8 <HAL_RCC_OscConfig+0x2a8>)
 80055ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055c0:	f7fe fbc6 	bl	8003d50 <HAL_GetTick>
 80055c4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c6:	e012      	b.n	80055ee <HAL_RCC_OscConfig+0x2be>
 80055c8:	40023800 	.word	0x40023800
 80055cc:	40023802 	.word	0x40023802
 80055d0:	42470000 	.word	0x42470000
 80055d4:	42470e80 	.word	0x42470e80
 80055d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055dc:	f7fe fbb8 	bl	8003d50 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e0e0      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ee:	4b72      	ldr	r3, [pc, #456]	; (80057b8 <HAL_RCC_OscConfig+0x488>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	4b6f      	ldr	r3, [pc, #444]	; (80057bc <HAL_RCC_OscConfig+0x48c>)
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d015      	beq.n	8005638 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560c:	f7fe fba0 	bl	8003d50 <HAL_GetTick>
 8005610:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005612:	e00a      	b.n	800562a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005614:	f7fe fb9c 	bl	8003d50 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e0c2      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800562a:	4b65      	ldr	r3, [pc, #404]	; (80057c0 <HAL_RCC_OscConfig+0x490>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0ee      	beq.n	8005614 <HAL_RCC_OscConfig+0x2e4>
 8005636:	e014      	b.n	8005662 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005638:	f7fe fb8a 	bl	8003d50 <HAL_GetTick>
 800563c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800563e:	e00a      	b.n	8005656 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005640:	f7fe fb86 	bl	8003d50 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	f241 3288 	movw	r2, #5000	; 0x1388
 800564e:	4293      	cmp	r3, r2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e0ac      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005656:	4b5a      	ldr	r3, [pc, #360]	; (80057c0 <HAL_RCC_OscConfig+0x490>)
 8005658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1ee      	bne.n	8005640 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005666:	2b01      	cmp	r3, #1
 8005668:	d105      	bne.n	8005676 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800566a:	4b55      	ldr	r3, [pc, #340]	; (80057c0 <HAL_RCC_OscConfig+0x490>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	4a54      	ldr	r2, [pc, #336]	; (80057c0 <HAL_RCC_OscConfig+0x490>)
 8005670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005674:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8097 	beq.w	80057ae <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005680:	4b4f      	ldr	r3, [pc, #316]	; (80057c0 <HAL_RCC_OscConfig+0x490>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 030c 	and.w	r3, r3, #12
 8005688:	2b08      	cmp	r3, #8
 800568a:	d061      	beq.n	8005750 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d146      	bne.n	8005722 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005694:	4b4b      	ldr	r3, [pc, #300]	; (80057c4 <HAL_RCC_OscConfig+0x494>)
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569a:	f7fe fb59 	bl	8003d50 <HAL_GetTick>
 800569e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a2:	f7fe fb55 	bl	8003d50 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b64      	cmp	r3, #100	; 0x64
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e07d      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b4:	4b42      	ldr	r3, [pc, #264]	; (80057c0 <HAL_RCC_OscConfig+0x490>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f0      	bne.n	80056a2 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056c0:	4b3f      	ldr	r3, [pc, #252]	; (80057c0 <HAL_RCC_OscConfig+0x490>)
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	4b40      	ldr	r3, [pc, #256]	; (80057c8 <HAL_RCC_OscConfig+0x498>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	69d1      	ldr	r1, [r2, #28]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6a12      	ldr	r2, [r2, #32]
 80056d0:	4311      	orrs	r1, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056d6:	0192      	lsls	r2, r2, #6
 80056d8:	4311      	orrs	r1, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056de:	0612      	lsls	r2, r2, #24
 80056e0:	4311      	orrs	r1, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80056e6:	0852      	lsrs	r2, r2, #1
 80056e8:	3a01      	subs	r2, #1
 80056ea:	0412      	lsls	r2, r2, #16
 80056ec:	430a      	orrs	r2, r1
 80056ee:	4934      	ldr	r1, [pc, #208]	; (80057c0 <HAL_RCC_OscConfig+0x490>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056f4:	4b33      	ldr	r3, [pc, #204]	; (80057c4 <HAL_RCC_OscConfig+0x494>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056fa:	f7fe fb29 	bl	8003d50 <HAL_GetTick>
 80056fe:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005702:	f7fe fb25 	bl	8003d50 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b64      	cmp	r3, #100	; 0x64
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e04d      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005714:	4b2a      	ldr	r3, [pc, #168]	; (80057c0 <HAL_RCC_OscConfig+0x490>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f0      	beq.n	8005702 <HAL_RCC_OscConfig+0x3d2>
 8005720:	e045      	b.n	80057ae <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005722:	4b28      	ldr	r3, [pc, #160]	; (80057c4 <HAL_RCC_OscConfig+0x494>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005728:	f7fe fb12 	bl	8003d50 <HAL_GetTick>
 800572c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005730:	f7fe fb0e 	bl	8003d50 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	; 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e036      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005742:	4b1f      	ldr	r3, [pc, #124]	; (80057c0 <HAL_RCC_OscConfig+0x490>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f0      	bne.n	8005730 <HAL_RCC_OscConfig+0x400>
 800574e:	e02e      	b.n	80057ae <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e029      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800575c:	4b18      	ldr	r3, [pc, #96]	; (80057c0 <HAL_RCC_OscConfig+0x490>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	429a      	cmp	r2, r3
 800576e:	d11c      	bne.n	80057aa <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577a:	429a      	cmp	r2, r3
 800577c:	d115      	bne.n	80057aa <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	099b      	lsrs	r3, r3, #6
 8005782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800578a:	429a      	cmp	r2, r3
 800578c:	d10d      	bne.n	80057aa <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005798:	429a      	cmp	r2, r3
 800579a:	d106      	bne.n	80057aa <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d001      	beq.n	80057ae <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3728      	adds	r7, #40	; 0x28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40007000 	.word	0x40007000
 80057bc:	40023870 	.word	0x40023870
 80057c0:	40023800 	.word	0x40023800
 80057c4:	42470060 	.word	0x42470060
 80057c8:	f0bc8000 	.word	0xf0bc8000

080057cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0d2      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057e0:	4b6b      	ldr	r3, [pc, #428]	; (8005990 <HAL_RCC_ClockConfig+0x1c4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d90c      	bls.n	8005808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ee:	4b68      	ldr	r3, [pc, #416]	; (8005990 <HAL_RCC_ClockConfig+0x1c4>)
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f6:	4b66      	ldr	r3, [pc, #408]	; (8005990 <HAL_RCC_ClockConfig+0x1c4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d001      	beq.n	8005808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e0be      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d020      	beq.n	8005856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005820:	4b5c      	ldr	r3, [pc, #368]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	4a5b      	ldr	r2, [pc, #364]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 8005826:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800582a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005838:	4b56      	ldr	r3, [pc, #344]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	4a55      	ldr	r2, [pc, #340]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 800583e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005842:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005844:	4b53      	ldr	r3, [pc, #332]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	4950      	ldr	r1, [pc, #320]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 8005852:	4313      	orrs	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d040      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d107      	bne.n	800587a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586a:	4b4a      	ldr	r3, [pc, #296]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d115      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e085      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d107      	bne.n	8005892 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005882:	4b44      	ldr	r3, [pc, #272]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e079      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005892:	4b40      	ldr	r3, [pc, #256]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e071      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058a2:	4b3c      	ldr	r3, [pc, #240]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f023 0203 	bic.w	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4939      	ldr	r1, [pc, #228]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b4:	f7fe fa4c 	bl	8003d50 <HAL_GetTick>
 80058b8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	e00a      	b.n	80058d2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058bc:	f7fe fa48 	bl	8003d50 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e059      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d2:	4b30      	ldr	r3, [pc, #192]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 020c 	and.w	r2, r3, #12
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d1eb      	bne.n	80058bc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058e4:	4b2a      	ldr	r3, [pc, #168]	; (8005990 <HAL_RCC_ClockConfig+0x1c4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d20c      	bcs.n	800590c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f2:	4b27      	ldr	r3, [pc, #156]	; (8005990 <HAL_RCC_ClockConfig+0x1c4>)
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fa:	4b25      	ldr	r3, [pc, #148]	; (8005990 <HAL_RCC_ClockConfig+0x1c4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d001      	beq.n	800590c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e03c      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005918:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	491b      	ldr	r1, [pc, #108]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005936:	4b17      	ldr	r3, [pc, #92]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	4913      	ldr	r1, [pc, #76]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 8005946:	4313      	orrs	r3, r2
 8005948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800594a:	f000 f82b 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 800594e:	4601      	mov	r1, r0
 8005950:	4b10      	ldr	r3, [pc, #64]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005958:	22f0      	movs	r2, #240	; 0xf0
 800595a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	fa92 f2a2 	rbit	r2, r2
 8005962:	60fa      	str	r2, [r7, #12]
  return result;
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	fab2 f282 	clz	r2, r2
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	40d3      	lsrs	r3, r2
 800596e:	4a0a      	ldr	r2, [pc, #40]	; (8005998 <HAL_RCC_ClockConfig+0x1cc>)
 8005970:	5cd3      	ldrb	r3, [r2, r3]
 8005972:	fa21 f303 	lsr.w	r3, r1, r3
 8005976:	4a09      	ldr	r2, [pc, #36]	; (800599c <HAL_RCC_ClockConfig+0x1d0>)
 8005978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800597a:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <HAL_RCC_ClockConfig+0x1d4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe f9a4 	bl	8003ccc <HAL_InitTick>

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40023c00 	.word	0x40023c00
 8005994:	40023800 	.word	0x40023800
 8005998:	08006a48 	.word	0x08006a48
 800599c:	20000008 	.word	0x20000008
 80059a0:	20000014 	.word	0x20000014

080059a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a8:	b090      	sub	sp, #64	; 0x40
 80059aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	637b      	str	r3, [r7, #52]	; 0x34
 80059b0:	2300      	movs	r3, #0
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b4:	2300      	movs	r3, #0
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059bc:	4b59      	ldr	r3, [pc, #356]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 030c 	and.w	r3, r3, #12
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d00d      	beq.n	80059e4 <HAL_RCC_GetSysClockFreq+0x40>
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	f200 80a2 	bhi.w	8005b12 <HAL_RCC_GetSysClockFreq+0x16e>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x34>
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d003      	beq.n	80059de <HAL_RCC_GetSysClockFreq+0x3a>
 80059d6:	e09c      	b.n	8005b12 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059d8:	4b53      	ldr	r3, [pc, #332]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x184>)
 80059da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80059dc:	e09c      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059de:	4b53      	ldr	r3, [pc, #332]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x188>)
 80059e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059e2:	e099      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059e4:	4b4f      	ldr	r3, [pc, #316]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ee:	4b4d      	ldr	r3, [pc, #308]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d027      	beq.n	8005a4a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059fa:	4b4a      	ldr	r3, [pc, #296]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	099b      	lsrs	r3, r3, #6
 8005a00:	2200      	movs	r2, #0
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	627a      	str	r2, [r7, #36]	; 0x24
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4b47      	ldr	r3, [pc, #284]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a10:	fb03 f201 	mul.w	r2, r3, r1
 8005a14:	2300      	movs	r3, #0
 8005a16:	fb00 f303 	mul.w	r3, r0, r3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	4a43      	ldr	r2, [pc, #268]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a1e:	fba0 2102 	umull	r2, r1, r0, r2
 8005a22:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a24:	62ba      	str	r2, [r7, #40]	; 0x28
 8005a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a28:	4413      	add	r3, r2
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	2200      	movs	r2, #0
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	61fa      	str	r2, [r7, #28]
 8005a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a3c:	f7fb fa76 	bl	8000f2c <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4613      	mov	r3, r2
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a48:	e055      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4a:	4b36      	ldr	r3, [pc, #216]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	2200      	movs	r2, #0
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	617a      	str	r2, [r7, #20]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a5c:	f04f 0b00 	mov.w	fp, #0
 8005a60:	4652      	mov	r2, sl
 8005a62:	465b      	mov	r3, fp
 8005a64:	f04f 0000 	mov.w	r0, #0
 8005a68:	f04f 0100 	mov.w	r1, #0
 8005a6c:	0159      	lsls	r1, r3, #5
 8005a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a72:	0150      	lsls	r0, r2, #5
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	ebb2 080a 	subs.w	r8, r2, sl
 8005a7c:	eb63 090b 	sbc.w	r9, r3, fp
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a8c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a90:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a94:	ebb2 0408 	subs.w	r4, r2, r8
 8005a98:	eb63 0509 	sbc.w	r5, r3, r9
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	00eb      	lsls	r3, r5, #3
 8005aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aaa:	00e2      	lsls	r2, r4, #3
 8005aac:	4614      	mov	r4, r2
 8005aae:	461d      	mov	r5, r3
 8005ab0:	eb14 030a 	adds.w	r3, r4, sl
 8005ab4:	603b      	str	r3, [r7, #0]
 8005ab6:	eb45 030b 	adc.w	r3, r5, fp
 8005aba:	607b      	str	r3, [r7, #4]
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ac8:	4629      	mov	r1, r5
 8005aca:	028b      	lsls	r3, r1, #10
 8005acc:	4620      	mov	r0, r4
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005ad6:	4601      	mov	r1, r0
 8005ad8:	028a      	lsls	r2, r1, #10
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	60bb      	str	r3, [r7, #8]
 8005ae4:	60fa      	str	r2, [r7, #12]
 8005ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aea:	f7fb fa1f 	bl	8000f2c <__aeabi_uldivmod>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4613      	mov	r3, r2
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005af6:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	0c1b      	lsrs	r3, r3, #16
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	3301      	adds	r3, #1
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005b06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b10:	e002      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3740      	adds	r7, #64	; 0x40
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b24:	40023800 	.word	0x40023800
 8005b28:	00f42400 	.word	0x00f42400
 8005b2c:	017d7840 	.word	0x017d7840

08005b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e041      	b.n	8005bc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fd fe76 	bl	8003848 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f000 fae8 	bl	8006144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <HAL_TIM_PWM_Start+0x24>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	bf14      	ite	ne
 8005bec:	2301      	movne	r3, #1
 8005bee:	2300      	moveq	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	e022      	b.n	8005c3a <HAL_TIM_PWM_Start+0x6a>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d109      	bne.n	8005c0e <HAL_TIM_PWM_Start+0x3e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	bf14      	ite	ne
 8005c06:	2301      	movne	r3, #1
 8005c08:	2300      	moveq	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	e015      	b.n	8005c3a <HAL_TIM_PWM_Start+0x6a>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d109      	bne.n	8005c28 <HAL_TIM_PWM_Start+0x58>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	e008      	b.n	8005c3a <HAL_TIM_PWM_Start+0x6a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	bf14      	ite	ne
 8005c34:	2301      	movne	r3, #1
 8005c36:	2300      	moveq	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e07c      	b.n	8005d3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_PWM_Start+0x82>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c50:	e013      	b.n	8005c7a <HAL_TIM_PWM_Start+0xaa>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_PWM_Start+0x92>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c60:	e00b      	b.n	8005c7a <HAL_TIM_PWM_Start+0xaa>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d104      	bne.n	8005c72 <HAL_TIM_PWM_Start+0xa2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c70:	e003      	b.n	8005c7a <HAL_TIM_PWM_Start+0xaa>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fca8 	bl	80065d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a2d      	ldr	r2, [pc, #180]	; (8005d44 <HAL_TIM_PWM_Start+0x174>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d004      	beq.n	8005c9c <HAL_TIM_PWM_Start+0xcc>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2c      	ldr	r2, [pc, #176]	; (8005d48 <HAL_TIM_PWM_Start+0x178>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d101      	bne.n	8005ca0 <HAL_TIM_PWM_Start+0xd0>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <HAL_TIM_PWM_Start+0xd2>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a22      	ldr	r2, [pc, #136]	; (8005d44 <HAL_TIM_PWM_Start+0x174>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x136>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d01d      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x136>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1f      	ldr	r2, [pc, #124]	; (8005d4c <HAL_TIM_PWM_Start+0x17c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x136>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1d      	ldr	r2, [pc, #116]	; (8005d50 <HAL_TIM_PWM_Start+0x180>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x136>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1c      	ldr	r2, [pc, #112]	; (8005d54 <HAL_TIM_PWM_Start+0x184>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x136>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a16      	ldr	r2, [pc, #88]	; (8005d48 <HAL_TIM_PWM_Start+0x178>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x136>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a18      	ldr	r2, [pc, #96]	; (8005d58 <HAL_TIM_PWM_Start+0x188>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x136>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <HAL_TIM_PWM_Start+0x18c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d111      	bne.n	8005d2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b06      	cmp	r3, #6
 8005d16:	d010      	beq.n	8005d3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d28:	e007      	b.n	8005d3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0201 	orr.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40010000 	.word	0x40010000
 8005d48:	40010400 	.word	0x40010400
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40000c00 	.word	0x40000c00
 8005d58:	40014000 	.word	0x40014000
 8005d5c:	40001800 	.word	0x40001800

08005d60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e097      	b.n	8005ea4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d106      	bne.n	8005d8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fd fd7d 	bl	8003888 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da4:	f023 0307 	bic.w	r3, r3, #7
 8005da8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3304      	adds	r3, #4
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f000 f9c5 	bl	8006144 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	4313      	orrs	r3, r2
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e00:	f023 030c 	bic.w	r3, r3, #12
 8005e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	011a      	lsls	r2, r3, #4
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	031b      	lsls	r3, r3, #12
 8005e30:	4313      	orrs	r3, r2
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005e3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005e46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	4313      	orrs	r3, r2
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ebc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ec4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ecc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ed4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d110      	bne.n	8005efe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d102      	bne.n	8005ee8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ee2:	7b7b      	ldrb	r3, [r7, #13]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d001      	beq.n	8005eec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e069      	b.n	8005fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005efc:	e031      	b.n	8005f62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d110      	bne.n	8005f26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d102      	bne.n	8005f10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f0a:	7b3b      	ldrb	r3, [r7, #12]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d001      	beq.n	8005f14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e055      	b.n	8005fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f24:	e01d      	b.n	8005f62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d108      	bne.n	8005f3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f2c:	7bbb      	ldrb	r3, [r7, #14]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d105      	bne.n	8005f3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f32:	7b7b      	ldrb	r3, [r7, #13]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d102      	bne.n	8005f3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f38:	7b3b      	ldrb	r3, [r7, #12]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d001      	beq.n	8005f42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e03e      	b.n	8005fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_TIM_Encoder_Start+0xc4>
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d008      	beq.n	8005f80 <HAL_TIM_Encoder_Start+0xd4>
 8005f6e:	e00f      	b.n	8005f90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2201      	movs	r2, #1
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fb2d 	bl	80065d8 <TIM_CCxChannelCmd>
      break;
 8005f7e:	e016      	b.n	8005fae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2201      	movs	r2, #1
 8005f86:	2104      	movs	r1, #4
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fb25 	bl	80065d8 <TIM_CCxChannelCmd>
      break;
 8005f8e:	e00e      	b.n	8005fae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2201      	movs	r2, #1
 8005f96:	2100      	movs	r1, #0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 fb1d 	bl	80065d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	2104      	movs	r1, #4
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fb16 	bl	80065d8 <TIM_CCxChannelCmd>
      break;
 8005fac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0201 	orr.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e0ac      	b.n	800613c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b0c      	cmp	r3, #12
 8005fee:	f200 809f 	bhi.w	8006130 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	0800602d 	.word	0x0800602d
 8005ffc:	08006131 	.word	0x08006131
 8006000:	08006131 	.word	0x08006131
 8006004:	08006131 	.word	0x08006131
 8006008:	0800606d 	.word	0x0800606d
 800600c:	08006131 	.word	0x08006131
 8006010:	08006131 	.word	0x08006131
 8006014:	08006131 	.word	0x08006131
 8006018:	080060af 	.word	0x080060af
 800601c:	08006131 	.word	0x08006131
 8006020:	08006131 	.word	0x08006131
 8006024:	08006131 	.word	0x08006131
 8006028:	080060ef 	.word	0x080060ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f924 	bl	8006280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699a      	ldr	r2, [r3, #24]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0208 	orr.w	r2, r2, #8
 8006046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0204 	bic.w	r2, r2, #4
 8006056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6999      	ldr	r1, [r3, #24]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	619a      	str	r2, [r3, #24]
      break;
 800606a:	e062      	b.n	8006132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f974 	bl	8006360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6999      	ldr	r1, [r3, #24]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	021a      	lsls	r2, r3, #8
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	619a      	str	r2, [r3, #24]
      break;
 80060ac:	e041      	b.n	8006132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 f9c7 	bl	8006448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69da      	ldr	r2, [r3, #28]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0208 	orr.w	r2, r2, #8
 80060c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0204 	bic.w	r2, r2, #4
 80060d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69d9      	ldr	r1, [r3, #28]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	61da      	str	r2, [r3, #28]
      break;
 80060ec:	e021      	b.n	8006132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fa1b 	bl	8006530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69da      	ldr	r2, [r3, #28]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69d9      	ldr	r1, [r3, #28]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	021a      	lsls	r2, r3, #8
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	61da      	str	r2, [r3, #28]
      break;
 800612e:	e000      	b.n	8006132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006130:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a3f      	ldr	r2, [pc, #252]	; (8006254 <TIM_Base_SetConfig+0x110>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d013      	beq.n	8006184 <TIM_Base_SetConfig+0x40>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006162:	d00f      	beq.n	8006184 <TIM_Base_SetConfig+0x40>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a3c      	ldr	r2, [pc, #240]	; (8006258 <TIM_Base_SetConfig+0x114>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00b      	beq.n	8006184 <TIM_Base_SetConfig+0x40>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a3b      	ldr	r2, [pc, #236]	; (800625c <TIM_Base_SetConfig+0x118>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d007      	beq.n	8006184 <TIM_Base_SetConfig+0x40>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a3a      	ldr	r2, [pc, #232]	; (8006260 <TIM_Base_SetConfig+0x11c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_Base_SetConfig+0x40>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a39      	ldr	r2, [pc, #228]	; (8006264 <TIM_Base_SetConfig+0x120>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d108      	bne.n	8006196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a2e      	ldr	r2, [pc, #184]	; (8006254 <TIM_Base_SetConfig+0x110>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d02b      	beq.n	80061f6 <TIM_Base_SetConfig+0xb2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a4:	d027      	beq.n	80061f6 <TIM_Base_SetConfig+0xb2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a2b      	ldr	r2, [pc, #172]	; (8006258 <TIM_Base_SetConfig+0x114>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d023      	beq.n	80061f6 <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a2a      	ldr	r2, [pc, #168]	; (800625c <TIM_Base_SetConfig+0x118>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d01f      	beq.n	80061f6 <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a29      	ldr	r2, [pc, #164]	; (8006260 <TIM_Base_SetConfig+0x11c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01b      	beq.n	80061f6 <TIM_Base_SetConfig+0xb2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a28      	ldr	r2, [pc, #160]	; (8006264 <TIM_Base_SetConfig+0x120>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d017      	beq.n	80061f6 <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a27      	ldr	r2, [pc, #156]	; (8006268 <TIM_Base_SetConfig+0x124>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d013      	beq.n	80061f6 <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a26      	ldr	r2, [pc, #152]	; (800626c <TIM_Base_SetConfig+0x128>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d00f      	beq.n	80061f6 <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a25      	ldr	r2, [pc, #148]	; (8006270 <TIM_Base_SetConfig+0x12c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00b      	beq.n	80061f6 <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a24      	ldr	r2, [pc, #144]	; (8006274 <TIM_Base_SetConfig+0x130>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d007      	beq.n	80061f6 <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a23      	ldr	r2, [pc, #140]	; (8006278 <TIM_Base_SetConfig+0x134>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d003      	beq.n	80061f6 <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a22      	ldr	r2, [pc, #136]	; (800627c <TIM_Base_SetConfig+0x138>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d108      	bne.n	8006208 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <TIM_Base_SetConfig+0x110>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <TIM_Base_SetConfig+0xf8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a0b      	ldr	r2, [pc, #44]	; (8006264 <TIM_Base_SetConfig+0x120>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d103      	bne.n	8006244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	615a      	str	r2, [r3, #20]
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr
 8006254:	40010000 	.word	0x40010000
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	40010400 	.word	0x40010400
 8006268:	40014000 	.word	0x40014000
 800626c:	40014400 	.word	0x40014400
 8006270:	40014800 	.word	0x40014800
 8006274:	40001800 	.word	0x40001800
 8006278:	40001c00 	.word	0x40001c00
 800627c:	40002000 	.word	0x40002000

08006280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f023 0302 	bic.w	r3, r3, #2
 80062c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a20      	ldr	r2, [pc, #128]	; (8006358 <TIM_OC1_SetConfig+0xd8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC1_SetConfig+0x64>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a1f      	ldr	r2, [pc, #124]	; (800635c <TIM_OC1_SetConfig+0xdc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d10c      	bne.n	80062fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0308 	bic.w	r3, r3, #8
 80062ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 0304 	bic.w	r3, r3, #4
 80062fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <TIM_OC1_SetConfig+0xd8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_OC1_SetConfig+0x8e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a14      	ldr	r2, [pc, #80]	; (800635c <TIM_OC1_SetConfig+0xdc>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d111      	bne.n	8006332 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800631c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	621a      	str	r2, [r3, #32]
}
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40010000 	.word	0x40010000
 800635c:	40010400 	.word	0x40010400

08006360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f023 0210 	bic.w	r2, r3, #16
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	021b      	lsls	r3, r3, #8
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f023 0320 	bic.w	r3, r3, #32
 80063aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a21      	ldr	r2, [pc, #132]	; (8006440 <TIM_OC2_SetConfig+0xe0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_OC2_SetConfig+0x68>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a20      	ldr	r2, [pc, #128]	; (8006444 <TIM_OC2_SetConfig+0xe4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d10d      	bne.n	80063e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a16      	ldr	r2, [pc, #88]	; (8006440 <TIM_OC2_SetConfig+0xe0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_OC2_SetConfig+0x94>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a15      	ldr	r2, [pc, #84]	; (8006444 <TIM_OC2_SetConfig+0xe4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d113      	bne.n	800641c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr
 8006440:	40010000 	.word	0x40010000
 8006444:	40010400 	.word	0x40010400

08006448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0303 	bic.w	r3, r3, #3
 800647e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a21      	ldr	r2, [pc, #132]	; (8006528 <TIM_OC3_SetConfig+0xe0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_OC3_SetConfig+0x66>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a20      	ldr	r2, [pc, #128]	; (800652c <TIM_OC3_SetConfig+0xe4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d10d      	bne.n	80064ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a16      	ldr	r2, [pc, #88]	; (8006528 <TIM_OC3_SetConfig+0xe0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d003      	beq.n	80064da <TIM_OC3_SetConfig+0x92>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a15      	ldr	r2, [pc, #84]	; (800652c <TIM_OC3_SetConfig+0xe4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d113      	bne.n	8006502 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	011b      	lsls	r3, r3, #4
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4313      	orrs	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	621a      	str	r2, [r3, #32]
}
 800651c:	bf00      	nop
 800651e:	371c      	adds	r7, #28
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40010000 	.word	0x40010000
 800652c:	40010400 	.word	0x40010400

08006530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800655e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800657a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	031b      	lsls	r3, r3, #12
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	4313      	orrs	r3, r2
 8006586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a11      	ldr	r2, [pc, #68]	; (80065d0 <TIM_OC4_SetConfig+0xa0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_OC4_SetConfig+0x68>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a10      	ldr	r2, [pc, #64]	; (80065d4 <TIM_OC4_SetConfig+0xa4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d109      	bne.n	80065ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800659e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	019b      	lsls	r3, r3, #6
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40010400 	.word	0x40010400

080065d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	2201      	movs	r2, #1
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1a      	ldr	r2, [r3, #32]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	43db      	mvns	r3, r3
 80065fa:	401a      	ands	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	fa01 f303 	lsl.w	r3, r1, r3
 8006610:	431a      	orrs	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006634:	2302      	movs	r3, #2
 8006636:	e05a      	b.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a20      	ldr	r2, [pc, #128]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d022      	beq.n	80066c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006684:	d01d      	beq.n	80066c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1c      	ldr	r2, [pc, #112]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d018      	beq.n	80066c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1a      	ldr	r2, [pc, #104]	; (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a19      	ldr	r2, [pc, #100]	; (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00e      	beq.n	80066c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a17      	ldr	r2, [pc, #92]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d009      	beq.n	80066c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a16      	ldr	r2, [pc, #88]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d004      	beq.n	80066c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a14      	ldr	r2, [pc, #80]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d10c      	bne.n	80066dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr
 80066f8:	40010000 	.word	0x40010000
 80066fc:	40000400 	.word	0x40000400
 8006700:	40000800 	.word	0x40000800
 8006704:	40000c00 	.word	0x40000c00
 8006708:	40010400 	.word	0x40010400
 800670c:	40014000 	.word	0x40014000
 8006710:	40001800 	.word	0x40001800

08006714 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800672c:	2302      	movs	r3, #2
 800672e:	e03d      	b.n	80067ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4313      	orrs	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr
	...

080067b8 <__errno>:
 80067b8:	4b01      	ldr	r3, [pc, #4]	; (80067c0 <__errno+0x8>)
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	2000001c 	.word	0x2000001c

080067c4 <__libc_init_array>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	2600      	movs	r6, #0
 80067c8:	4d0c      	ldr	r5, [pc, #48]	; (80067fc <__libc_init_array+0x38>)
 80067ca:	4c0d      	ldr	r4, [pc, #52]	; (8006800 <__libc_init_array+0x3c>)
 80067cc:	1b64      	subs	r4, r4, r5
 80067ce:	10a4      	asrs	r4, r4, #2
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	d109      	bne.n	80067e8 <__libc_init_array+0x24>
 80067d4:	f000 f92c 	bl	8006a30 <_init>
 80067d8:	2600      	movs	r6, #0
 80067da:	4d0a      	ldr	r5, [pc, #40]	; (8006804 <__libc_init_array+0x40>)
 80067dc:	4c0a      	ldr	r4, [pc, #40]	; (8006808 <__libc_init_array+0x44>)
 80067de:	1b64      	subs	r4, r4, r5
 80067e0:	10a4      	asrs	r4, r4, #2
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	d105      	bne.n	80067f2 <__libc_init_array+0x2e>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ec:	4798      	blx	r3
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7ee      	b.n	80067d0 <__libc_init_array+0xc>
 80067f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f6:	4798      	blx	r3
 80067f8:	3601      	adds	r6, #1
 80067fa:	e7f2      	b.n	80067e2 <__libc_init_array+0x1e>
 80067fc:	08006a68 	.word	0x08006a68
 8006800:	08006a68 	.word	0x08006a68
 8006804:	08006a68 	.word	0x08006a68
 8006808:	08006a6c 	.word	0x08006a6c

0800680c <malloc>:
 800680c:	4b02      	ldr	r3, [pc, #8]	; (8006818 <malloc+0xc>)
 800680e:	4601      	mov	r1, r0
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	f000 b87b 	b.w	800690c <_malloc_r>
 8006816:	bf00      	nop
 8006818:	2000001c 	.word	0x2000001c

0800681c <free>:
 800681c:	4b02      	ldr	r3, [pc, #8]	; (8006828 <free+0xc>)
 800681e:	4601      	mov	r1, r0
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	f000 b80b 	b.w	800683c <_free_r>
 8006826:	bf00      	nop
 8006828:	2000001c 	.word	0x2000001c

0800682c <memset>:
 800682c:	4603      	mov	r3, r0
 800682e:	4402      	add	r2, r0
 8006830:	4293      	cmp	r3, r2
 8006832:	d100      	bne.n	8006836 <memset+0xa>
 8006834:	4770      	bx	lr
 8006836:	f803 1b01 	strb.w	r1, [r3], #1
 800683a:	e7f9      	b.n	8006830 <memset+0x4>

0800683c <_free_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4605      	mov	r5, r0
 8006840:	2900      	cmp	r1, #0
 8006842:	d040      	beq.n	80068c6 <_free_r+0x8a>
 8006844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006848:	1f0c      	subs	r4, r1, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	bfb8      	it	lt
 800684e:	18e4      	addlt	r4, r4, r3
 8006850:	f000 f8e0 	bl	8006a14 <__malloc_lock>
 8006854:	4a1c      	ldr	r2, [pc, #112]	; (80068c8 <_free_r+0x8c>)
 8006856:	6813      	ldr	r3, [r2, #0]
 8006858:	b933      	cbnz	r3, 8006868 <_free_r+0x2c>
 800685a:	6063      	str	r3, [r4, #4]
 800685c:	6014      	str	r4, [r2, #0]
 800685e:	4628      	mov	r0, r5
 8006860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006864:	f000 b8dc 	b.w	8006a20 <__malloc_unlock>
 8006868:	42a3      	cmp	r3, r4
 800686a:	d908      	bls.n	800687e <_free_r+0x42>
 800686c:	6820      	ldr	r0, [r4, #0]
 800686e:	1821      	adds	r1, r4, r0
 8006870:	428b      	cmp	r3, r1
 8006872:	bf01      	itttt	eq
 8006874:	6819      	ldreq	r1, [r3, #0]
 8006876:	685b      	ldreq	r3, [r3, #4]
 8006878:	1809      	addeq	r1, r1, r0
 800687a:	6021      	streq	r1, [r4, #0]
 800687c:	e7ed      	b.n	800685a <_free_r+0x1e>
 800687e:	461a      	mov	r2, r3
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	b10b      	cbz	r3, 8006888 <_free_r+0x4c>
 8006884:	42a3      	cmp	r3, r4
 8006886:	d9fa      	bls.n	800687e <_free_r+0x42>
 8006888:	6811      	ldr	r1, [r2, #0]
 800688a:	1850      	adds	r0, r2, r1
 800688c:	42a0      	cmp	r0, r4
 800688e:	d10b      	bne.n	80068a8 <_free_r+0x6c>
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	4401      	add	r1, r0
 8006894:	1850      	adds	r0, r2, r1
 8006896:	4283      	cmp	r3, r0
 8006898:	6011      	str	r1, [r2, #0]
 800689a:	d1e0      	bne.n	800685e <_free_r+0x22>
 800689c:	6818      	ldr	r0, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	4401      	add	r1, r0
 80068a2:	6011      	str	r1, [r2, #0]
 80068a4:	6053      	str	r3, [r2, #4]
 80068a6:	e7da      	b.n	800685e <_free_r+0x22>
 80068a8:	d902      	bls.n	80068b0 <_free_r+0x74>
 80068aa:	230c      	movs	r3, #12
 80068ac:	602b      	str	r3, [r5, #0]
 80068ae:	e7d6      	b.n	800685e <_free_r+0x22>
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	1821      	adds	r1, r4, r0
 80068b4:	428b      	cmp	r3, r1
 80068b6:	bf01      	itttt	eq
 80068b8:	6819      	ldreq	r1, [r3, #0]
 80068ba:	685b      	ldreq	r3, [r3, #4]
 80068bc:	1809      	addeq	r1, r1, r0
 80068be:	6021      	streq	r1, [r4, #0]
 80068c0:	6063      	str	r3, [r4, #4]
 80068c2:	6054      	str	r4, [r2, #4]
 80068c4:	e7cb      	b.n	800685e <_free_r+0x22>
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	20001cc8 	.word	0x20001cc8

080068cc <sbrk_aligned>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	4e0e      	ldr	r6, [pc, #56]	; (8006908 <sbrk_aligned+0x3c>)
 80068d0:	460c      	mov	r4, r1
 80068d2:	6831      	ldr	r1, [r6, #0]
 80068d4:	4605      	mov	r5, r0
 80068d6:	b911      	cbnz	r1, 80068de <sbrk_aligned+0x12>
 80068d8:	f000 f88c 	bl	80069f4 <_sbrk_r>
 80068dc:	6030      	str	r0, [r6, #0]
 80068de:	4621      	mov	r1, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 f887 	bl	80069f4 <_sbrk_r>
 80068e6:	1c43      	adds	r3, r0, #1
 80068e8:	d00a      	beq.n	8006900 <sbrk_aligned+0x34>
 80068ea:	1cc4      	adds	r4, r0, #3
 80068ec:	f024 0403 	bic.w	r4, r4, #3
 80068f0:	42a0      	cmp	r0, r4
 80068f2:	d007      	beq.n	8006904 <sbrk_aligned+0x38>
 80068f4:	1a21      	subs	r1, r4, r0
 80068f6:	4628      	mov	r0, r5
 80068f8:	f000 f87c 	bl	80069f4 <_sbrk_r>
 80068fc:	3001      	adds	r0, #1
 80068fe:	d101      	bne.n	8006904 <sbrk_aligned+0x38>
 8006900:	f04f 34ff 	mov.w	r4, #4294967295
 8006904:	4620      	mov	r0, r4
 8006906:	bd70      	pop	{r4, r5, r6, pc}
 8006908:	20001ccc 	.word	0x20001ccc

0800690c <_malloc_r>:
 800690c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006910:	1ccd      	adds	r5, r1, #3
 8006912:	f025 0503 	bic.w	r5, r5, #3
 8006916:	3508      	adds	r5, #8
 8006918:	2d0c      	cmp	r5, #12
 800691a:	bf38      	it	cc
 800691c:	250c      	movcc	r5, #12
 800691e:	2d00      	cmp	r5, #0
 8006920:	4607      	mov	r7, r0
 8006922:	db01      	blt.n	8006928 <_malloc_r+0x1c>
 8006924:	42a9      	cmp	r1, r5
 8006926:	d905      	bls.n	8006934 <_malloc_r+0x28>
 8006928:	230c      	movs	r3, #12
 800692a:	2600      	movs	r6, #0
 800692c:	603b      	str	r3, [r7, #0]
 800692e:	4630      	mov	r0, r6
 8006930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006934:	4e2e      	ldr	r6, [pc, #184]	; (80069f0 <_malloc_r+0xe4>)
 8006936:	f000 f86d 	bl	8006a14 <__malloc_lock>
 800693a:	6833      	ldr	r3, [r6, #0]
 800693c:	461c      	mov	r4, r3
 800693e:	bb34      	cbnz	r4, 800698e <_malloc_r+0x82>
 8006940:	4629      	mov	r1, r5
 8006942:	4638      	mov	r0, r7
 8006944:	f7ff ffc2 	bl	80068cc <sbrk_aligned>
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	4604      	mov	r4, r0
 800694c:	d14d      	bne.n	80069ea <_malloc_r+0xde>
 800694e:	6834      	ldr	r4, [r6, #0]
 8006950:	4626      	mov	r6, r4
 8006952:	2e00      	cmp	r6, #0
 8006954:	d140      	bne.n	80069d8 <_malloc_r+0xcc>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	4631      	mov	r1, r6
 800695a:	4638      	mov	r0, r7
 800695c:	eb04 0803 	add.w	r8, r4, r3
 8006960:	f000 f848 	bl	80069f4 <_sbrk_r>
 8006964:	4580      	cmp	r8, r0
 8006966:	d13a      	bne.n	80069de <_malloc_r+0xd2>
 8006968:	6821      	ldr	r1, [r4, #0]
 800696a:	3503      	adds	r5, #3
 800696c:	1a6d      	subs	r5, r5, r1
 800696e:	f025 0503 	bic.w	r5, r5, #3
 8006972:	3508      	adds	r5, #8
 8006974:	2d0c      	cmp	r5, #12
 8006976:	bf38      	it	cc
 8006978:	250c      	movcc	r5, #12
 800697a:	4638      	mov	r0, r7
 800697c:	4629      	mov	r1, r5
 800697e:	f7ff ffa5 	bl	80068cc <sbrk_aligned>
 8006982:	3001      	adds	r0, #1
 8006984:	d02b      	beq.n	80069de <_malloc_r+0xd2>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	442b      	add	r3, r5
 800698a:	6023      	str	r3, [r4, #0]
 800698c:	e00e      	b.n	80069ac <_malloc_r+0xa0>
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	1b52      	subs	r2, r2, r5
 8006992:	d41e      	bmi.n	80069d2 <_malloc_r+0xc6>
 8006994:	2a0b      	cmp	r2, #11
 8006996:	d916      	bls.n	80069c6 <_malloc_r+0xba>
 8006998:	1961      	adds	r1, r4, r5
 800699a:	42a3      	cmp	r3, r4
 800699c:	6025      	str	r5, [r4, #0]
 800699e:	bf18      	it	ne
 80069a0:	6059      	strne	r1, [r3, #4]
 80069a2:	6863      	ldr	r3, [r4, #4]
 80069a4:	bf08      	it	eq
 80069a6:	6031      	streq	r1, [r6, #0]
 80069a8:	5162      	str	r2, [r4, r5]
 80069aa:	604b      	str	r3, [r1, #4]
 80069ac:	4638      	mov	r0, r7
 80069ae:	f104 060b 	add.w	r6, r4, #11
 80069b2:	f000 f835 	bl	8006a20 <__malloc_unlock>
 80069b6:	f026 0607 	bic.w	r6, r6, #7
 80069ba:	1d23      	adds	r3, r4, #4
 80069bc:	1af2      	subs	r2, r6, r3
 80069be:	d0b6      	beq.n	800692e <_malloc_r+0x22>
 80069c0:	1b9b      	subs	r3, r3, r6
 80069c2:	50a3      	str	r3, [r4, r2]
 80069c4:	e7b3      	b.n	800692e <_malloc_r+0x22>
 80069c6:	6862      	ldr	r2, [r4, #4]
 80069c8:	42a3      	cmp	r3, r4
 80069ca:	bf0c      	ite	eq
 80069cc:	6032      	streq	r2, [r6, #0]
 80069ce:	605a      	strne	r2, [r3, #4]
 80069d0:	e7ec      	b.n	80069ac <_malloc_r+0xa0>
 80069d2:	4623      	mov	r3, r4
 80069d4:	6864      	ldr	r4, [r4, #4]
 80069d6:	e7b2      	b.n	800693e <_malloc_r+0x32>
 80069d8:	4634      	mov	r4, r6
 80069da:	6876      	ldr	r6, [r6, #4]
 80069dc:	e7b9      	b.n	8006952 <_malloc_r+0x46>
 80069de:	230c      	movs	r3, #12
 80069e0:	4638      	mov	r0, r7
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	f000 f81c 	bl	8006a20 <__malloc_unlock>
 80069e8:	e7a1      	b.n	800692e <_malloc_r+0x22>
 80069ea:	6025      	str	r5, [r4, #0]
 80069ec:	e7de      	b.n	80069ac <_malloc_r+0xa0>
 80069ee:	bf00      	nop
 80069f0:	20001cc8 	.word	0x20001cc8

080069f4 <_sbrk_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	2300      	movs	r3, #0
 80069f8:	4d05      	ldr	r5, [pc, #20]	; (8006a10 <_sbrk_r+0x1c>)
 80069fa:	4604      	mov	r4, r0
 80069fc:	4608      	mov	r0, r1
 80069fe:	602b      	str	r3, [r5, #0]
 8006a00:	f7fd f82e 	bl	8003a60 <_sbrk>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_sbrk_r+0x1a>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_sbrk_r+0x1a>
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	20001cd0 	.word	0x20001cd0

08006a14 <__malloc_lock>:
 8006a14:	4801      	ldr	r0, [pc, #4]	; (8006a1c <__malloc_lock+0x8>)
 8006a16:	f000 b809 	b.w	8006a2c <__retarget_lock_acquire_recursive>
 8006a1a:	bf00      	nop
 8006a1c:	20001cd4 	.word	0x20001cd4

08006a20 <__malloc_unlock>:
 8006a20:	4801      	ldr	r0, [pc, #4]	; (8006a28 <__malloc_unlock+0x8>)
 8006a22:	f000 b804 	b.w	8006a2e <__retarget_lock_release_recursive>
 8006a26:	bf00      	nop
 8006a28:	20001cd4 	.word	0x20001cd4

08006a2c <__retarget_lock_acquire_recursive>:
 8006a2c:	4770      	bx	lr

08006a2e <__retarget_lock_release_recursive>:
 8006a2e:	4770      	bx	lr

08006a30 <_init>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	bf00      	nop
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr

08006a3c <_fini>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	bf00      	nop
 8006a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a42:	bc08      	pop	{r3}
 8006a44:	469e      	mov	lr, r3
 8006a46:	4770      	bx	lr
