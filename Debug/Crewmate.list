
Crewmate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008850  08008850  00018850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008870  08008870  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008878  08008878  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800887c  0800887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014ac  20000084  08008904  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001530  08008904  00021530  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011802  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000338f  00000000  00000000  000318af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00034c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00035e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002088c  00000000  00000000  00036f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001735d  00000000  00000000  000577b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be7f9  00000000  00000000  0006eb11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d30a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb8  00000000  00000000  0012d35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008838 	.word	0x08008838

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08008838 	.word	0x08008838

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	; 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fmul>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d06f      	beq.n	8000e28 <__aeabi_fmul+0xf8>
 8000d48:	441a      	add	r2, r3
 8000d4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d56:	d01e      	beq.n	8000d96 <__aeabi_fmul+0x66>
 8000d58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d64:	fba0 3101 	umull	r3, r1, r0, r1
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d6c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d70:	bf3e      	ittt	cc
 8000d72:	0049      	lslcc	r1, r1, #1
 8000d74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	ea40 0001 	orr.w	r0, r0, r1
 8000d7e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d82:	2afd      	cmp	r2, #253	; 0xfd
 8000d84:	d81d      	bhi.n	8000dc2 <__aeabi_fmul+0x92>
 8000d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	0249      	lsleq	r1, r1, #9
 8000da2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000daa:	3a7f      	subs	r2, #127	; 0x7f
 8000dac:	bfc2      	ittt	gt
 8000dae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db6:	4770      	bxgt	lr
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	dc5d      	bgt.n	8000e80 <__aeabi_fmul+0x150>
 8000dc4:	f112 0f19 	cmn.w	r2, #25
 8000dc8:	bfdc      	itt	le
 8000dca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dce:	4770      	bxle	lr
 8000dd0:	f1c2 0200 	rsb	r2, r2, #0
 8000dd4:	0041      	lsls	r1, r0, #1
 8000dd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dda:	f1c2 0220 	rsb	r2, r2, #32
 8000dde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de6:	f140 0000 	adc.w	r0, r0, #0
 8000dea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dee:	bf08      	it	eq
 8000df0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df4:	4770      	bx	lr
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xce>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xe6>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fmul+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	bf18      	it	ne
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d00a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1d8      	bne.n	8000df6 <__aeabi_fmul+0xc6>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	bf17      	itett	ne
 8000e54:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e58:	4608      	moveq	r0, r1
 8000e5a:	f091 0f00 	teqne	r1, #0
 8000e5e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e62:	d014      	beq.n	8000e8e <__aeabi_fmul+0x15e>
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	d101      	bne.n	8000e6e <__aeabi_fmul+0x13e>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d10f      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e6e:	ea93 0f0c 	teq	r3, ip
 8000e72:	d103      	bne.n	8000e7c <__aeabi_fmul+0x14c>
 8000e74:	024b      	lsls	r3, r1, #9
 8000e76:	bf18      	it	ne
 8000e78:	4608      	movne	r0, r1
 8000e7a:	d108      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e8c:	4770      	bx	lr
 8000e8e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e92:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fdiv>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d069      	beq.n	8000f84 <__aeabi_fdiv+0xec>
 8000eb0:	eba2 0203 	sub.w	r2, r2, r3
 8000eb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ebe:	d037      	beq.n	8000f30 <__aeabi_fdiv+0x98>
 8000ec0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ecc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf38      	it	cc
 8000ed4:	005b      	lslcc	r3, r3, #1
 8000ed6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eda:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	bf24      	itt	cs
 8000ee2:	1a5b      	subcs	r3, r3, r1
 8000ee4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efa:	bf24      	itt	cs
 8000efc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	bf18      	it	ne
 8000f16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1a:	d1e0      	bne.n	8000ede <__aeabi_fdiv+0x46>
 8000f1c:	2afd      	cmp	r2, #253	; 0xfd
 8000f1e:	f63f af50 	bhi.w	8000dc2 <__aeabi_fmul+0x92>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f28:	bf08      	it	eq
 8000f2a:	f020 0001 	biceq.w	r0, r0, #1
 8000f2e:	4770      	bx	lr
 8000f30:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f38:	327f      	adds	r2, #127	; 0x7f
 8000f3a:	bfc2      	ittt	gt
 8000f3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f44:	4770      	bxgt	lr
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	e737      	b.n	8000dc2 <__aeabi_fmul+0x92>
 8000f52:	f092 0f00 	teq	r2, #0
 8000f56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0040      	lsleq	r0, r0, #1
 8000f5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f62:	3a01      	subeq	r2, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xc2>
 8000f66:	ea40 000c 	orr.w	r0, r0, ip
 8000f6a:	f093 0f00 	teq	r3, #0
 8000f6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0049      	lsleq	r1, r1, #1
 8000f76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7a:	3b01      	subeq	r3, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xda>
 8000f7e:	ea41 010c 	orr.w	r1, r1, ip
 8000f82:	e795      	b.n	8000eb0 <__aeabi_fdiv+0x18>
 8000f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d108      	bne.n	8000fa0 <__aeabi_fdiv+0x108>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	f47f af7d 	bne.w	8000e8e <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	f47f af70 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e776      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	d104      	bne.n	8000fb0 <__aeabi_fdiv+0x118>
 8000fa6:	024b      	lsls	r3, r1, #9
 8000fa8:	f43f af4c 	beq.w	8000e44 <__aeabi_fmul+0x114>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e76e      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb4:	bf18      	it	ne
 8000fb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fba:	d1ca      	bne.n	8000f52 <__aeabi_fdiv+0xba>
 8000fbc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc0:	f47f af5c 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000fc4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fc8:	f47f af3c 	bne.w	8000e44 <__aeabi_fmul+0x114>
 8000fcc:	e75f      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fce:	bf00      	nop

08000fd0 <__gesf2>:
 8000fd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd4:	e006      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fd6:	bf00      	nop

08000fd8 <__lesf2>:
 8000fd8:	f04f 0c01 	mov.w	ip, #1
 8000fdc:	e002      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__cmpsf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff4:	bf18      	it	ne
 8000ff6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffa:	d011      	beq.n	8001020 <__cmpsf2+0x40>
 8000ffc:	b001      	add	sp, #4
 8000ffe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001002:	bf18      	it	ne
 8001004:	ea90 0f01 	teqne	r0, r1
 8001008:	bf58      	it	pl
 800100a:	ebb2 0003 	subspl.w	r0, r2, r3
 800100e:	bf88      	it	hi
 8001010:	17c8      	asrhi	r0, r1, #31
 8001012:	bf38      	it	cc
 8001014:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001018:	bf18      	it	ne
 800101a:	f040 0001 	orrne.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001024:	d102      	bne.n	800102c <__cmpsf2+0x4c>
 8001026:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102a:	d105      	bne.n	8001038 <__cmpsf2+0x58>
 800102c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001030:	d1e4      	bne.n	8000ffc <__cmpsf2+0x1c>
 8001032:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001036:	d0e1      	beq.n	8000ffc <__cmpsf2+0x1c>
 8001038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__aeabi_cfrcmple>:
 8001040:	4684      	mov	ip, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4661      	mov	r1, ip
 8001046:	e7ff      	b.n	8001048 <__aeabi_cfcmpeq>

08001048 <__aeabi_cfcmpeq>:
 8001048:	b50f      	push	{r0, r1, r2, r3, lr}
 800104a:	f7ff ffc9 	bl	8000fe0 <__cmpsf2>
 800104e:	2800      	cmp	r0, #0
 8001050:	bf48      	it	mi
 8001052:	f110 0f00 	cmnmi.w	r0, #0
 8001056:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001058 <__aeabi_fcmpeq>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff fff4 	bl	8001048 <__aeabi_cfcmpeq>
 8001060:	bf0c      	ite	eq
 8001062:	2001      	moveq	r0, #1
 8001064:	2000      	movne	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmplt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffea 	bl	8001048 <__aeabi_cfcmpeq>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmple>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffe0 	bl	8001048 <__aeabi_cfcmpeq>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpge>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffd2 	bl	8001040 <__aeabi_cfrcmple>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpgt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffc8 	bl	8001040 <__aeabi_cfrcmple>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <__aeabi_uldivmod>:
 80010fc:	b953      	cbnz	r3, 8001114 <__aeabi_uldivmod+0x18>
 80010fe:	b94a      	cbnz	r2, 8001114 <__aeabi_uldivmod+0x18>
 8001100:	2900      	cmp	r1, #0
 8001102:	bf08      	it	eq
 8001104:	2800      	cmpeq	r0, #0
 8001106:	bf1c      	itt	ne
 8001108:	f04f 31ff 	movne.w	r1, #4294967295
 800110c:	f04f 30ff 	movne.w	r0, #4294967295
 8001110:	f000 b976 	b.w	8001400 <__aeabi_idiv0>
 8001114:	f1ad 0c08 	sub.w	ip, sp, #8
 8001118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800111c:	f000 f806 	bl	800112c <__udivmoddi4>
 8001120:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001128:	b004      	add	sp, #16
 800112a:	4770      	bx	lr

0800112c <__udivmoddi4>:
 800112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001130:	9e08      	ldr	r6, [sp, #32]
 8001132:	460d      	mov	r5, r1
 8001134:	4604      	mov	r4, r0
 8001136:	4688      	mov	r8, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d14d      	bne.n	80011d8 <__udivmoddi4+0xac>
 800113c:	428a      	cmp	r2, r1
 800113e:	4694      	mov	ip, r2
 8001140:	d968      	bls.n	8001214 <__udivmoddi4+0xe8>
 8001142:	fab2 f282 	clz	r2, r2
 8001146:	b152      	cbz	r2, 800115e <__udivmoddi4+0x32>
 8001148:	fa01 f302 	lsl.w	r3, r1, r2
 800114c:	f1c2 0120 	rsb	r1, r2, #32
 8001150:	fa20 f101 	lsr.w	r1, r0, r1
 8001154:	fa0c fc02 	lsl.w	ip, ip, r2
 8001158:	ea41 0803 	orr.w	r8, r1, r3
 800115c:	4094      	lsls	r4, r2
 800115e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001162:	fbb8 f7f1 	udiv	r7, r8, r1
 8001166:	fa1f fe8c 	uxth.w	lr, ip
 800116a:	fb01 8817 	mls	r8, r1, r7, r8
 800116e:	fb07 f00e 	mul.w	r0, r7, lr
 8001172:	0c23      	lsrs	r3, r4, #16
 8001174:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001178:	4298      	cmp	r0, r3
 800117a:	d90a      	bls.n	8001192 <__udivmoddi4+0x66>
 800117c:	eb1c 0303 	adds.w	r3, ip, r3
 8001180:	f107 35ff 	add.w	r5, r7, #4294967295
 8001184:	f080 811e 	bcs.w	80013c4 <__udivmoddi4+0x298>
 8001188:	4298      	cmp	r0, r3
 800118a:	f240 811b 	bls.w	80013c4 <__udivmoddi4+0x298>
 800118e:	3f02      	subs	r7, #2
 8001190:	4463      	add	r3, ip
 8001192:	1a1b      	subs	r3, r3, r0
 8001194:	fbb3 f0f1 	udiv	r0, r3, r1
 8001198:	fb01 3310 	mls	r3, r1, r0, r3
 800119c:	fb00 fe0e 	mul.w	lr, r0, lr
 80011a0:	b2a4      	uxth	r4, r4
 80011a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011a6:	45a6      	cmp	lr, r4
 80011a8:	d90a      	bls.n	80011c0 <__udivmoddi4+0x94>
 80011aa:	eb1c 0404 	adds.w	r4, ip, r4
 80011ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80011b2:	f080 8109 	bcs.w	80013c8 <__udivmoddi4+0x29c>
 80011b6:	45a6      	cmp	lr, r4
 80011b8:	f240 8106 	bls.w	80013c8 <__udivmoddi4+0x29c>
 80011bc:	4464      	add	r4, ip
 80011be:	3802      	subs	r0, #2
 80011c0:	2100      	movs	r1, #0
 80011c2:	eba4 040e 	sub.w	r4, r4, lr
 80011c6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011ca:	b11e      	cbz	r6, 80011d4 <__udivmoddi4+0xa8>
 80011cc:	2300      	movs	r3, #0
 80011ce:	40d4      	lsrs	r4, r2
 80011d0:	e9c6 4300 	strd	r4, r3, [r6]
 80011d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d8:	428b      	cmp	r3, r1
 80011da:	d908      	bls.n	80011ee <__udivmoddi4+0xc2>
 80011dc:	2e00      	cmp	r6, #0
 80011de:	f000 80ee 	beq.w	80013be <__udivmoddi4+0x292>
 80011e2:	2100      	movs	r1, #0
 80011e4:	e9c6 0500 	strd	r0, r5, [r6]
 80011e8:	4608      	mov	r0, r1
 80011ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ee:	fab3 f183 	clz	r1, r3
 80011f2:	2900      	cmp	r1, #0
 80011f4:	d14a      	bne.n	800128c <__udivmoddi4+0x160>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d302      	bcc.n	8001200 <__udivmoddi4+0xd4>
 80011fa:	4282      	cmp	r2, r0
 80011fc:	f200 80fc 	bhi.w	80013f8 <__udivmoddi4+0x2cc>
 8001200:	1a84      	subs	r4, r0, r2
 8001202:	eb65 0303 	sbc.w	r3, r5, r3
 8001206:	2001      	movs	r0, #1
 8001208:	4698      	mov	r8, r3
 800120a:	2e00      	cmp	r6, #0
 800120c:	d0e2      	beq.n	80011d4 <__udivmoddi4+0xa8>
 800120e:	e9c6 4800 	strd	r4, r8, [r6]
 8001212:	e7df      	b.n	80011d4 <__udivmoddi4+0xa8>
 8001214:	b902      	cbnz	r2, 8001218 <__udivmoddi4+0xec>
 8001216:	deff      	udf	#255	; 0xff
 8001218:	fab2 f282 	clz	r2, r2
 800121c:	2a00      	cmp	r2, #0
 800121e:	f040 8091 	bne.w	8001344 <__udivmoddi4+0x218>
 8001222:	eba1 000c 	sub.w	r0, r1, ip
 8001226:	2101      	movs	r1, #1
 8001228:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800122c:	fa1f fe8c 	uxth.w	lr, ip
 8001230:	fbb0 f3f7 	udiv	r3, r0, r7
 8001234:	fb07 0013 	mls	r0, r7, r3, r0
 8001238:	0c25      	lsrs	r5, r4, #16
 800123a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800123e:	fb0e f003 	mul.w	r0, lr, r3
 8001242:	42a8      	cmp	r0, r5
 8001244:	d908      	bls.n	8001258 <__udivmoddi4+0x12c>
 8001246:	eb1c 0505 	adds.w	r5, ip, r5
 800124a:	f103 38ff 	add.w	r8, r3, #4294967295
 800124e:	d202      	bcs.n	8001256 <__udivmoddi4+0x12a>
 8001250:	42a8      	cmp	r0, r5
 8001252:	f200 80ce 	bhi.w	80013f2 <__udivmoddi4+0x2c6>
 8001256:	4643      	mov	r3, r8
 8001258:	1a2d      	subs	r5, r5, r0
 800125a:	fbb5 f0f7 	udiv	r0, r5, r7
 800125e:	fb07 5510 	mls	r5, r7, r0, r5
 8001262:	fb0e fe00 	mul.w	lr, lr, r0
 8001266:	b2a4      	uxth	r4, r4
 8001268:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800126c:	45a6      	cmp	lr, r4
 800126e:	d908      	bls.n	8001282 <__udivmoddi4+0x156>
 8001270:	eb1c 0404 	adds.w	r4, ip, r4
 8001274:	f100 35ff 	add.w	r5, r0, #4294967295
 8001278:	d202      	bcs.n	8001280 <__udivmoddi4+0x154>
 800127a:	45a6      	cmp	lr, r4
 800127c:	f200 80b6 	bhi.w	80013ec <__udivmoddi4+0x2c0>
 8001280:	4628      	mov	r0, r5
 8001282:	eba4 040e 	sub.w	r4, r4, lr
 8001286:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800128a:	e79e      	b.n	80011ca <__udivmoddi4+0x9e>
 800128c:	f1c1 0720 	rsb	r7, r1, #32
 8001290:	408b      	lsls	r3, r1
 8001292:	fa22 fc07 	lsr.w	ip, r2, r7
 8001296:	ea4c 0c03 	orr.w	ip, ip, r3
 800129a:	fa25 fa07 	lsr.w	sl, r5, r7
 800129e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012a2:	fbba f8f9 	udiv	r8, sl, r9
 80012a6:	fa20 f307 	lsr.w	r3, r0, r7
 80012aa:	fb09 aa18 	mls	sl, r9, r8, sl
 80012ae:	408d      	lsls	r5, r1
 80012b0:	fa1f fe8c 	uxth.w	lr, ip
 80012b4:	431d      	orrs	r5, r3
 80012b6:	fa00 f301 	lsl.w	r3, r0, r1
 80012ba:	fb08 f00e 	mul.w	r0, r8, lr
 80012be:	0c2c      	lsrs	r4, r5, #16
 80012c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012c4:	42a0      	cmp	r0, r4
 80012c6:	fa02 f201 	lsl.w	r2, r2, r1
 80012ca:	d90b      	bls.n	80012e4 <__udivmoddi4+0x1b8>
 80012cc:	eb1c 0404 	adds.w	r4, ip, r4
 80012d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80012d4:	f080 8088 	bcs.w	80013e8 <__udivmoddi4+0x2bc>
 80012d8:	42a0      	cmp	r0, r4
 80012da:	f240 8085 	bls.w	80013e8 <__udivmoddi4+0x2bc>
 80012de:	f1a8 0802 	sub.w	r8, r8, #2
 80012e2:	4464      	add	r4, ip
 80012e4:	1a24      	subs	r4, r4, r0
 80012e6:	fbb4 f0f9 	udiv	r0, r4, r9
 80012ea:	fb09 4410 	mls	r4, r9, r0, r4
 80012ee:	fb00 fe0e 	mul.w	lr, r0, lr
 80012f2:	b2ad      	uxth	r5, r5
 80012f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012f8:	45a6      	cmp	lr, r4
 80012fa:	d908      	bls.n	800130e <__udivmoddi4+0x1e2>
 80012fc:	eb1c 0404 	adds.w	r4, ip, r4
 8001300:	f100 35ff 	add.w	r5, r0, #4294967295
 8001304:	d26c      	bcs.n	80013e0 <__udivmoddi4+0x2b4>
 8001306:	45a6      	cmp	lr, r4
 8001308:	d96a      	bls.n	80013e0 <__udivmoddi4+0x2b4>
 800130a:	3802      	subs	r0, #2
 800130c:	4464      	add	r4, ip
 800130e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001312:	fba0 9502 	umull	r9, r5, r0, r2
 8001316:	eba4 040e 	sub.w	r4, r4, lr
 800131a:	42ac      	cmp	r4, r5
 800131c:	46c8      	mov	r8, r9
 800131e:	46ae      	mov	lr, r5
 8001320:	d356      	bcc.n	80013d0 <__udivmoddi4+0x2a4>
 8001322:	d053      	beq.n	80013cc <__udivmoddi4+0x2a0>
 8001324:	2e00      	cmp	r6, #0
 8001326:	d069      	beq.n	80013fc <__udivmoddi4+0x2d0>
 8001328:	ebb3 0208 	subs.w	r2, r3, r8
 800132c:	eb64 040e 	sbc.w	r4, r4, lr
 8001330:	fa22 f301 	lsr.w	r3, r2, r1
 8001334:	fa04 f707 	lsl.w	r7, r4, r7
 8001338:	431f      	orrs	r7, r3
 800133a:	40cc      	lsrs	r4, r1
 800133c:	e9c6 7400 	strd	r7, r4, [r6]
 8001340:	2100      	movs	r1, #0
 8001342:	e747      	b.n	80011d4 <__udivmoddi4+0xa8>
 8001344:	fa0c fc02 	lsl.w	ip, ip, r2
 8001348:	f1c2 0120 	rsb	r1, r2, #32
 800134c:	fa25 f301 	lsr.w	r3, r5, r1
 8001350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001354:	fa20 f101 	lsr.w	r1, r0, r1
 8001358:	4095      	lsls	r5, r2
 800135a:	430d      	orrs	r5, r1
 800135c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001360:	fb07 3311 	mls	r3, r7, r1, r3
 8001364:	fa1f fe8c 	uxth.w	lr, ip
 8001368:	0c28      	lsrs	r0, r5, #16
 800136a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800136e:	fb01 f30e 	mul.w	r3, r1, lr
 8001372:	4283      	cmp	r3, r0
 8001374:	fa04 f402 	lsl.w	r4, r4, r2
 8001378:	d908      	bls.n	800138c <__udivmoddi4+0x260>
 800137a:	eb1c 0000 	adds.w	r0, ip, r0
 800137e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001382:	d22f      	bcs.n	80013e4 <__udivmoddi4+0x2b8>
 8001384:	4283      	cmp	r3, r0
 8001386:	d92d      	bls.n	80013e4 <__udivmoddi4+0x2b8>
 8001388:	3902      	subs	r1, #2
 800138a:	4460      	add	r0, ip
 800138c:	1ac0      	subs	r0, r0, r3
 800138e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001392:	fb07 0013 	mls	r0, r7, r3, r0
 8001396:	b2ad      	uxth	r5, r5
 8001398:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800139c:	fb03 f00e 	mul.w	r0, r3, lr
 80013a0:	42a8      	cmp	r0, r5
 80013a2:	d908      	bls.n	80013b6 <__udivmoddi4+0x28a>
 80013a4:	eb1c 0505 	adds.w	r5, ip, r5
 80013a8:	f103 38ff 	add.w	r8, r3, #4294967295
 80013ac:	d216      	bcs.n	80013dc <__udivmoddi4+0x2b0>
 80013ae:	42a8      	cmp	r0, r5
 80013b0:	d914      	bls.n	80013dc <__udivmoddi4+0x2b0>
 80013b2:	3b02      	subs	r3, #2
 80013b4:	4465      	add	r5, ip
 80013b6:	1a28      	subs	r0, r5, r0
 80013b8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013bc:	e738      	b.n	8001230 <__udivmoddi4+0x104>
 80013be:	4631      	mov	r1, r6
 80013c0:	4630      	mov	r0, r6
 80013c2:	e707      	b.n	80011d4 <__udivmoddi4+0xa8>
 80013c4:	462f      	mov	r7, r5
 80013c6:	e6e4      	b.n	8001192 <__udivmoddi4+0x66>
 80013c8:	4618      	mov	r0, r3
 80013ca:	e6f9      	b.n	80011c0 <__udivmoddi4+0x94>
 80013cc:	454b      	cmp	r3, r9
 80013ce:	d2a9      	bcs.n	8001324 <__udivmoddi4+0x1f8>
 80013d0:	ebb9 0802 	subs.w	r8, r9, r2
 80013d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013d8:	3801      	subs	r0, #1
 80013da:	e7a3      	b.n	8001324 <__udivmoddi4+0x1f8>
 80013dc:	4643      	mov	r3, r8
 80013de:	e7ea      	b.n	80013b6 <__udivmoddi4+0x28a>
 80013e0:	4628      	mov	r0, r5
 80013e2:	e794      	b.n	800130e <__udivmoddi4+0x1e2>
 80013e4:	4641      	mov	r1, r8
 80013e6:	e7d1      	b.n	800138c <__udivmoddi4+0x260>
 80013e8:	46d0      	mov	r8, sl
 80013ea:	e77b      	b.n	80012e4 <__udivmoddi4+0x1b8>
 80013ec:	4464      	add	r4, ip
 80013ee:	3802      	subs	r0, #2
 80013f0:	e747      	b.n	8001282 <__udivmoddi4+0x156>
 80013f2:	3b02      	subs	r3, #2
 80013f4:	4465      	add	r5, ip
 80013f6:	e72f      	b.n	8001258 <__udivmoddi4+0x12c>
 80013f8:	4608      	mov	r0, r1
 80013fa:	e706      	b.n	800120a <__udivmoddi4+0xde>
 80013fc:	4631      	mov	r1, r6
 80013fe:	e6e9      	b.n	80011d4 <__udivmoddi4+0xa8>

08001400 <__aeabi_idiv0>:
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop

08001404 <move>:
#include <math.h>

extern int16_t goal_forward_left;
extern int16_t goal_forward_right;

void move(int8_t n) {	// Move n cells forward (with acceleration)
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]

	setState(MOVING);
 800140e:	2001      	movs	r0, #1
 8001410:	f001 f9ca 	bl	80027a8 <setState>

	setPIDGoalA(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f001 f9b3 	bl	8002780 <setPIDGoalA>
	setPIDGoalD(MOVE_COUNTS*n);
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	b29b      	uxth	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	00d2      	lsls	r2, r2, #3
 8001424:	4413      	add	r3, r2
 8001426:	461a      	mov	r2, r3
 8001428:	0111      	lsls	r1, r2, #4
 800142a:	461a      	mov	r2, r3
 800142c:	460b      	mov	r3, r1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	b29b      	uxth	r3, r3
 8001434:	b21b      	sxth	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f001 f98e 	bl	8002758 <setPIDGoalD>

	while(!PIDdone())
 800143c:	e013      	b.n	8001466 <move+0x62>
	{
		setIRAngle(readIR(IR_LEFT), readIR(IR_RIGHT));
 800143e:	2001      	movs	r0, #1
 8001440:	f000 f9d4 	bl	80017ec <readIR>
 8001444:	4603      	mov	r3, r0
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fc1a 	bl	8000c80 <__aeabi_ui2f>
 800144c:	4604      	mov	r4, r0
 800144e:	2002      	movs	r0, #2
 8001450:	f000 f9cc 	bl	80017ec <readIR>
 8001454:	4603      	mov	r3, r0
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fc12 	bl	8000c80 <__aeabi_ui2f>
 800145c:	4603      	mov	r3, r0
 800145e:	4619      	mov	r1, r3
 8001460:	4620      	mov	r0, r4
 8001462:	f001 f9e3 	bl	800282c <setIRAngle>
	while(!PIDdone())
 8001466:	f001 ff49 	bl	80032fc <PIDdone>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0e6      	beq.n	800143e <move+0x3a>
	}

	resetPID();
 8001470:	f001 ff56 	bl	8003320 <resetPID>

}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}

0800147c <turn>:

void turn(int8_t n) {	// Make n 90 degree turns (no acceleration)
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]

	setState(TURNING);
 8001486:	2002      	movs	r0, #2
 8001488:	f001 f98e 	bl	80027a8 <setState>

	setPIDGoalD(0);
 800148c:	2000      	movs	r0, #0
 800148e:	f001 f963 	bl	8002758 <setPIDGoalD>
	setPIDGoalA(TURN_COUNTS*n);
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	1ad2      	subs	r2, r2, r3
 800149e:	00d2      	lsls	r2, r2, #3
 80014a0:	441a      	add	r2, r3
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 f967 	bl	8002780 <setPIDGoalA>

	while(!PIDdone())
 80014b2:	bf00      	nop
 80014b4:	f001 ff22 	bl	80032fc <PIDdone>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0fa      	beq.n	80014b4 <turn+0x38>
	{

	}

	resetPID();
 80014be:	f001 ff2f 	bl	8003320 <resetPID>

}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <Delay_Init+0x38>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10e      	bne.n	80014fa <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <Delay_Init+0x38>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4a08      	ldr	r2, [pc, #32]	; (8001504 <Delay_Init+0x38>)
 80014e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e6:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <Delay_Init+0x3c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <Delay_Init+0x3c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <Delay_Init+0x3c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6013      	str	r3, [r2, #0]
    }
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000edf0 	.word	0xe000edf0
 8001508:	e0001000 	.word	0xe0001000

0800150c <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <delayMicroseconds+0x30>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001520:	bf00      	nop
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <delayMicroseconds+0x30>)
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f8      	bhi.n	8001522 <delayMicroseconds+0x16>
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	e0001000 	.word	0xe0001000

08001540 <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <getRightEncoderCounts+0x18>)
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	b29b      	uxth	r3, r3
 800154a:	425b      	negs	r3, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	b21b      	sxth	r3, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40000400 	.word	0x40000400

0800155c <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <getLeftEncoderCounts+0x18>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	b29b      	uxth	r3, r3
 8001566:	425b      	negs	r3, r3
 8001568:	b29b      	uxth	r3, r3
 800156a:	b21b      	sxth	r3, r3
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40010400 	.word	0x40010400

08001578 <resetEncoders>:

void resetEncoders() {
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <resetEncoders+0x18>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = (int16_t) 0;
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <resetEncoders+0x1c>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40000400 	.word	0x40000400
 8001594:	40010400 	.word	0x40010400

08001598 <writeFlash>:
#include "stm32f2xx.h"

uint32_t startAddress = 0x080E0000;

void writeFlash(int16_t horzWall[][16], int16_t vertWall[][17], int16_t discovered[][16])
{
 8001598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800159c:	b088      	sub	sp, #32
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
	uint32_t i, j;
	HAL_FLASH_Unlock();
 80015a6:	f004 fa47 	bl	8005a38 <HAL_FLASH_Unlock>

	/* Clear All Pending Flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80015aa:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <writeFlash+0x140>)
 80015ac:	22f3      	movs	r2, #243	; 0xf3
 80015ae:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 80015b0:	2102      	movs	r1, #2
 80015b2:	200b      	movs	r0, #11
 80015b4:	f004 fb9e 	bl	8005cf4 <FLASH_Erase_Sector>

	for (i = 0; i < 16; i++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	e023      	b.n	8001606 <writeFlash+0x6e>
		for (j = 0; j < 16; j++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	e01a      	b.n	80015fa <writeFlash+0x62>
	 	 	HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (i*16+j)*4), discovered[i][j]);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	011a      	lsls	r2, r3, #4
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	4413      	add	r3, r2
 80015cc:	009a      	lsls	r2, r3, #2
 80015ce:	4b43      	ldr	r3, [pc, #268]	; (80016dc <writeFlash+0x144>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	18d1      	adds	r1, r2, r3
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	17da      	asrs	r2, r3, #31
 80015e6:	469a      	mov	sl, r3
 80015e8:	4693      	mov	fp, r2
 80015ea:	4652      	mov	r2, sl
 80015ec:	465b      	mov	r3, fp
 80015ee:	2001      	movs	r0, #1
 80015f0:	f004 f9ce 	bl	8005990 <HAL_FLASH_Program>
		for (j = 0; j < 16; j++) {
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	3301      	adds	r3, #1
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d9e1      	bls.n	80015c4 <writeFlash+0x2c>
	for (i = 0; i < 16; i++) {
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	3301      	adds	r3, #1
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d9d8      	bls.n	80015be <writeFlash+0x26>
		}
	}

	for (int i = 0; i < 16; i++) {
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e02c      	b.n	800166c <writeFlash+0xd4>
        for (int j = 0; j < 17; j++) {
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	e023      	b.n	8001660 <writeFlash+0xc8>
            HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (16*16*4) + (i*17+j)*4), vertWall[i][j]);
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	4613      	mov	r3, r2
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	441a      	add	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	461a      	mov	r2, r3
 8001628:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <writeFlash+0x144>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4413      	add	r3, r2
 800162e:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4613      	mov	r3, r2
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	4413      	add	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	461a      	mov	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001648:	b21b      	sxth	r3, r3
 800164a:	17da      	asrs	r2, r3, #31
 800164c:	4698      	mov	r8, r3
 800164e:	4691      	mov	r9, r2
 8001650:	4642      	mov	r2, r8
 8001652:	464b      	mov	r3, r9
 8001654:	2001      	movs	r0, #1
 8001656:	f004 f99b 	bl	8005990 <HAL_FLASH_Program>
        for (int j = 0; j < 17; j++) {
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	3301      	adds	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	2b10      	cmp	r3, #16
 8001664:	ddd8      	ble.n	8001618 <writeFlash+0x80>
	for (int i = 0; i < 16; i++) {
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	ddcf      	ble.n	8001612 <writeFlash+0x7a>
        }
	}

    for (i = 0; i < 17; i++) {
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	e025      	b.n	80016c4 <writeFlash+0x12c>
        for (j = 0; j < 16; j++) {
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	e01c      	b.n	80016b8 <writeFlash+0x120>
            HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (16*16*4) + (16*17*4) + (i*16+j)*4), horzWall[i][j]);
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	011a      	lsls	r2, r3, #4
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4413      	add	r3, r2
 8001686:	009a      	lsls	r2, r3, #2
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <writeFlash+0x144>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4413      	add	r3, r2
 800168e:	f503 6104 	add.w	r1, r3, #2112	; 0x840
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	015b      	lsls	r3, r3, #5
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	17da      	asrs	r2, r3, #31
 80016a4:	461c      	mov	r4, r3
 80016a6:	4615      	mov	r5, r2
 80016a8:	4622      	mov	r2, r4
 80016aa:	462b      	mov	r3, r5
 80016ac:	2001      	movs	r0, #1
 80016ae:	f004 f96f 	bl	8005990 <HAL_FLASH_Program>
        for (j = 0; j < 16; j++) {
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	3301      	adds	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b0f      	cmp	r3, #15
 80016bc:	d9df      	bls.n	800167e <writeFlash+0xe6>
    for (i = 0; i < 17; i++) {
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3301      	adds	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d9d6      	bls.n	8001678 <writeFlash+0xe0>
        }
    }

	HAL_FLASH_Lock();
 80016ca:	f004 f9d7 	bl	8005a7c <HAL_FLASH_Lock>
}
 80016ce:	bf00      	nop
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016d8:	40023c00 	.word	0x40023c00
 80016dc:	20000000 	.word	0x20000000

080016e0 <readFlash>:

void readFlash(int16_t horzWall[][16], int16_t vertWall[][17], int16_t discovered[][16])
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	uint32_t i, j;

	for (i = 0; i < 16; i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	e01d      	b.n	800172e <readFlash+0x4e>
		for(j = 0; j < 16; j++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	e014      	b.n	8001722 <readFlash+0x42>
			discovered[i][j] = *(int16_t *)(startAddress + (i*16+j)*4);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	011a      	lsls	r2, r3, #4
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	4413      	add	r3, r2
 8001700:	009a      	lsls	r2, r3, #2
 8001702:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <readFlash+0x108>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4619      	mov	r1, r3
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	015b      	lsls	r3, r3, #5
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(j = 0; j < 16; j++) {
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	3301      	adds	r3, #1
 8001720:	61bb      	str	r3, [r7, #24]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d9e7      	bls.n	80016f8 <readFlash+0x18>
	for (i = 0; i < 16; i++) {
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	3301      	adds	r3, #1
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d9de      	bls.n	80016f2 <readFlash+0x12>
		}
	}

    for (int i = 0; i < 16; i++) {
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e026      	b.n	8001788 <readFlash+0xa8>
        for (int j = 0; j < 17; j++) {
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	e01d      	b.n	800177c <readFlash+0x9c>
            vertWall[i][j] = *(int16_t *)(startAddress + (16*16*4) + (i*17+j)*4);
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	4613      	mov	r3, r2
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	441a      	add	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	461a      	mov	r2, r3
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <readFlash+0x108>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4413      	add	r3, r2
 8001756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800175a:	4619      	mov	r1, r3
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4613      	mov	r3, r2
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	4413      	add	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	461a      	mov	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4413      	add	r3, r2
 800176c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int j = 0; j < 17; j++) {
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3301      	adds	r3, #1
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2b10      	cmp	r3, #16
 8001780:	ddde      	ble.n	8001740 <readFlash+0x60>
    for (int i = 0; i < 16; i++) {
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b0f      	cmp	r3, #15
 800178c:	ddd5      	ble.n	800173a <readFlash+0x5a>
        }
    }

	for (i = 0; i < 17; i++) {
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	e01f      	b.n	80017d4 <readFlash+0xf4>
		for (j = 0; j < 16; j++) {
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	e016      	b.n	80017c8 <readFlash+0xe8>
			horzWall[i][j] = *(int16_t *)(startAddress + (16*16*4) + (16*17*4) + (i*16+j)*4);
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	011a      	lsls	r2, r3, #4
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4413      	add	r3, r2
 80017a2:	009a      	lsls	r2, r3, #2
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <readFlash+0x108>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 80017ae:	4619      	mov	r1, r3
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	015b      	lsls	r3, r3, #5
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (j = 0; j < 16; j++) {
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	d9e5      	bls.n	800179a <readFlash+0xba>
	for (i = 0; i < 17; i++) {
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3301      	adds	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b10      	cmp	r3, #16
 80017d8:	d9dc      	bls.n	8001794 <readFlash+0xb4>
		}
	}
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3724      	adds	r7, #36	; 0x24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000000 	.word	0x20000000

080017ec <readIR>:
uint8_t complete = 0;

uint32_t usDelay = 100;

uint16_t readIR(IR ir)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue;

	switch(ir)
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d869      	bhi.n	80018d0 <readIR+0xe4>
 80017fc:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <readIR+0x18>)
 80017fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	08001815 	.word	0x08001815
 8001808:	08001843 	.word	0x08001843
 800180c:	08001871 	.word	0x08001871
 8001810:	0800189f 	.word	0x0800189f
	    {
	        case IR_FORWARD_LEFT:
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	4830      	ldr	r0, [pc, #192]	; (80018dc <readIR+0xf0>)
 800181a:	f004 fc72 	bl	8006102 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 800181e:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <readIR+0xf4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fe72 	bl	800150c <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f85c 	bl	80018e8 <analogRead>
 8001830:	4603      	mov	r3, r0
 8001832:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	4828      	ldr	r0, [pc, #160]	; (80018dc <readIR+0xf0>)
 800183a:	f004 fc62 	bl	8006102 <HAL_GPIO_WritePin>
	        	return readValue;
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	e047      	b.n	80018d2 <readIR+0xe6>
	            break;
	        case IR_LEFT:
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	2110      	movs	r1, #16
 8001846:	4825      	ldr	r0, [pc, #148]	; (80018dc <readIR+0xf0>)
 8001848:	f004 fc5b 	bl	8006102 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <readIR+0xf4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fe5b 	bl	800150c <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f845 	bl	80018e8 <analogRead>
 800185e:	4603      	mov	r3, r0
 8001860:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2110      	movs	r1, #16
 8001866:	481d      	ldr	r0, [pc, #116]	; (80018dc <readIR+0xf0>)
 8001868:	f004 fc4b 	bl	8006102 <HAL_GPIO_WritePin>
	        	return readValue;
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	e030      	b.n	80018d2 <readIR+0xe6>
	            break;
	        case IR_RIGHT:
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	2104      	movs	r1, #4
 8001874:	4819      	ldr	r0, [pc, #100]	; (80018dc <readIR+0xf0>)
 8001876:	f004 fc44 	bl	8006102 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <readIR+0xf4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fe44 	bl	800150c <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f82e 	bl	80018e8 <analogRead>
 800188c:	4603      	mov	r3, r0
 800188e:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2104      	movs	r1, #4
 8001894:	4811      	ldr	r0, [pc, #68]	; (80018dc <readIR+0xf0>)
 8001896:	f004 fc34 	bl	8006102 <HAL_GPIO_WritePin>
	        	return readValue;
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	e019      	b.n	80018d2 <readIR+0xe6>
	            break;
	        case IR_FORWARD_RIGHT:
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a4:	480f      	ldr	r0, [pc, #60]	; (80018e4 <readIR+0xf8>)
 80018a6:	f004 fc2c 	bl	8006102 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <readIR+0xf4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fe2c 	bl	800150c <delayMicroseconds>
	        	readValue = analogRead(ir);
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f816 	bl	80018e8 <analogRead>
 80018bc:	4603      	mov	r3, r0
 80018be:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <readIR+0xf8>)
 80018c8:	f004 fc1b 	bl	8006102 <HAL_GPIO_WritePin>
	        	return readValue;
 80018cc:	89fb      	ldrh	r3, [r7, #14]
 80018ce:	e000      	b.n	80018d2 <readIR+0xe6>
	            break;
	        default:
	            return 0;
 80018d0:	2300      	movs	r3, #0
	    }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020000 	.word	0x40020000
 80018e0:	20000004 	.word	0x20000004
 80018e4:	40020400 	.word	0x40020400

080018e8 <analogRead>:
{
	return readIR(IR_FORWARD_RIGHT);
}

uint16_t analogRead(IR ir)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 8001900:	f000 fe26 	bl	8002550 <Get_HADC1_Ptr>
 8001904:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d817      	bhi.n	800193c <analogRead+0x54>
 800190c:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <analogRead+0x2c>)
 800190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001912:	bf00      	nop
 8001914:	08001925 	.word	0x08001925
 8001918:	0800192b 	.word	0x0800192b
 800191c:	08001931 	.word	0x08001931
 8001920:	08001937 	.word	0x08001937
    {
        case IR_FORWARD_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 8001924:	2306      	movs	r3, #6
 8001926:	60fb      	str	r3, [r7, #12]
            break;
 8001928:	e00a      	b.n	8001940 <analogRead+0x58>
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_5;
 800192a:	2305      	movs	r3, #5
 800192c:	60fb      	str	r3, [r7, #12]
            break;
 800192e:	e007      	b.n	8001940 <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 8001930:	230b      	movs	r3, #11
 8001932:	60fb      	str	r3, [r7, #12]
            break;
 8001934:	e004      	b.n	8001940 <analogRead+0x58>
        case IR_FORWARD_RIGHT:
            sConfig.Channel = ADC_CHANNEL_10;
 8001936:	230a      	movs	r3, #10
 8001938:	60fb      	str	r3, [r7, #12]
            break;
 800193a:	e001      	b.n	8001940 <analogRead+0x58>
        default:
            return 0;
 800193c:	2300      	movs	r3, #0
 800193e:	e032      	b.n	80019a6 <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 8001940:	2301      	movs	r3, #1
 8001942:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	4619      	mov	r1, r3
 800194e:	69f8      	ldr	r0, [r7, #28]
 8001950:	f003 f88c 	bl	8004a6c <HAL_ADC_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <analogRead+0x76>
    {
        return 0;
 800195a:	2300      	movs	r3, #0
 800195c:	e023      	b.n	80019a6 <analogRead+0xbe>
    }

    complete = 0;
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <analogRead+0xc8>)
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	4913      	ldr	r1, [pc, #76]	; (80019b4 <analogRead+0xcc>)
 8001968:	69f8      	ldr	r0, [r7, #28]
 800196a:	f002 ff3d 	bl	80047e8 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 800196e:	e000      	b.n	8001972 <analogRead+0x8a>
    {
        continue;
 8001970:	bf00      	nop
    while (complete == 0)
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <analogRead+0xc8>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0fa      	beq.n	8001970 <analogRead+0x88>
    }

    uint32_t sum = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 8001982:	e00a      	b.n	800199a <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 8001984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001986:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <analogRead+0xcc>)
 8001988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800198c:	461a      	mov	r2, r3
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	4413      	add	r3, r2
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
        ++measurement;
 8001994:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001996:	3301      	adds	r3, #1
 8001998:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 800199a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800199c:	2b7f      	cmp	r3, #127	; 0x7f
 800199e:	d9f1      	bls.n	8001984 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	09db      	lsrs	r3, r3, #7
 80019a4:	b29b      	uxth	r3, r3
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200001a0 	.word	0x200001a0
 80019b4:	200000a0 	.word	0x200000a0

080019b8 <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f002 ffef 	bl	80049a4 <HAL_ADC_Stop_DMA>
    complete = 1;
 80019c6:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200001a0 	.word	0x200001a0

080019d8 <MPU6050_Init>:
int16_t Gyro_Z_RAW = 0;

float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init (void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	2301      	movs	r3, #1
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2301      	movs	r3, #1
 80019ee:	2275      	movs	r2, #117	; 0x75
 80019f0:	21d0      	movs	r1, #208	; 0xd0
 80019f2:	4823      	ldr	r0, [pc, #140]	; (8001a80 <MPU6050_Init+0xa8>)
 80019f4:	f004 fdf4 	bl	80065e0 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b68      	cmp	r3, #104	; 0x68
 80019fc:	d13b      	bne.n	8001a76 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	1dbb      	adds	r3, r7, #6
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2301      	movs	r3, #1
 8001a12:	226b      	movs	r2, #107	; 0x6b
 8001a14:	21d0      	movs	r1, #208	; 0xd0
 8001a16:	481a      	ldr	r0, [pc, #104]	; (8001a80 <MPU6050_Init+0xa8>)
 8001a18:	f004 fce8 	bl	80063ec <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2301      	movs	r3, #1
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	1dbb      	adds	r3, r7, #6
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2219      	movs	r2, #25
 8001a32:	21d0      	movs	r1, #208	; 0xd0
 8001a34:	4812      	ldr	r0, [pc, #72]	; (8001a80 <MPU6050_Init+0xa8>)
 8001a36:	f004 fcd9 	bl	80063ec <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	2301      	movs	r3, #1
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	1dbb      	adds	r3, r7, #6
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	221c      	movs	r2, #28
 8001a50:	21d0      	movs	r1, #208	; 0xd0
 8001a52:	480b      	ldr	r0, [pc, #44]	; (8001a80 <MPU6050_Init+0xa8>)
 8001a54:	f004 fcca 	bl	80063ec <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a60:	9302      	str	r3, [sp, #8]
 8001a62:	2301      	movs	r3, #1
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	1dbb      	adds	r3, r7, #6
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	221b      	movs	r2, #27
 8001a6e:	21d0      	movs	r1, #208	; 0xd0
 8001a70:	4803      	ldr	r0, [pc, #12]	; (8001a80 <MPU6050_Init+0xa8>)
 8001a72:	f004 fcbb 	bl	80063ec <HAL_I2C_Mem_Write>
	}

}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000024c 	.word	0x2000024c

08001a84 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	2306      	movs	r3, #6
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	463b      	mov	r3, r7
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2301      	movs	r3, #1
 8001a9a:	223b      	movs	r2, #59	; 0x3b
 8001a9c:	21d0      	movs	r1, #208	; 0xd0
 8001a9e:	482f      	ldr	r0, [pc, #188]	; (8001b5c <MPU6050_Read_Accel+0xd8>)
 8001aa0:	f004 fd9e 	bl	80065e0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001aa4:	783b      	ldrb	r3, [r7, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	787b      	ldrb	r3, [r7, #1]
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <MPU6050_Read_Accel+0xdc>)
 8001ab4:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001ab6:	78bb      	ldrb	r3, [r7, #2]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <MPU6050_Read_Accel+0xe0>)
 8001ac6:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001ac8:	793b      	ldrb	r3, [r7, #4]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	797b      	ldrb	r3, [r7, #5]
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <MPU6050_Read_Accel+0xe4>)
 8001ad8:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <MPU6050_Read_Accel+0xdc>)
 8001adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fcc3 	bl	800046c <__aeabi_i2d>
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <MPU6050_Read_Accel+0xe8>)
 8001aec:	f7fe fe52 	bl	8000794 <__aeabi_ddiv>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7fe ffbc 	bl	8000a74 <__aeabi_d2f>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <MPU6050_Read_Accel+0xec>)
 8001b00:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <MPU6050_Read_Accel+0xe0>)
 8001b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fcaf 	bl	800046c <__aeabi_i2d>
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MPU6050_Read_Accel+0xe8>)
 8001b14:	f7fe fe3e 	bl	8000794 <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f7fe ffa8 	bl	8000a74 <__aeabi_d2f>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <MPU6050_Read_Accel+0xf0>)
 8001b28:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MPU6050_Read_Accel+0xe4>)
 8001b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fc9b 	bl	800046c <__aeabi_i2d>
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MPU6050_Read_Accel+0xe8>)
 8001b3c:	f7fe fe2a 	bl	8000794 <__aeabi_ddiv>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7fe ff94 	bl	8000a74 <__aeabi_d2f>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <MPU6050_Read_Accel+0xf4>)
 8001b50:	6013      	str	r3, [r2, #0]
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000024c 	.word	0x2000024c
 8001b60:	20000390 	.word	0x20000390
 8001b64:	20000392 	.word	0x20000392
 8001b68:	20000394 	.word	0x20000394
 8001b6c:	40d00000 	.word	0x40d00000
 8001b70:	2000039c 	.word	0x2000039c
 8001b74:	200003a0 	.word	0x200003a0
 8001b78:	200003a4 	.word	0x200003a4
 8001b7c:	00000000 	.word	0x00000000

08001b80 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2306      	movs	r3, #6
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	463b      	mov	r3, r7
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	2243      	movs	r2, #67	; 0x43
 8001b98:	21d0      	movs	r1, #208	; 0xd0
 8001b9a:	4831      	ldr	r0, [pc, #196]	; (8001c60 <MPU6050_Read_Gyro+0xe0>)
 8001b9c:	f004 fd20 	bl	80065e0 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001ba0:	783b      	ldrb	r3, [r7, #0]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	787b      	ldrb	r3, [r7, #1]
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <MPU6050_Read_Gyro+0xe4>)
 8001bb0:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001bb2:	78bb      	ldrb	r3, [r7, #2]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <MPU6050_Read_Gyro+0xe8>)
 8001bc2:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001bc4:	793b      	ldrb	r3, [r7, #4]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	797b      	ldrb	r3, [r7, #5]
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <MPU6050_Read_Gyro+0xec>)
 8001bd4:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8001bd6:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <MPU6050_Read_Gyro+0xe4>)
 8001bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fc45 	bl	800046c <__aeabi_i2d>
 8001be2:	a31d      	add	r3, pc, #116	; (adr r3, 8001c58 <MPU6050_Read_Gyro+0xd8>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fdd4 	bl	8000794 <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe ff3e 	bl	8000a74 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <MPU6050_Read_Gyro+0xf0>)
 8001bfc:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MPU6050_Read_Gyro+0xe8>)
 8001c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fc31 	bl	800046c <__aeabi_i2d>
 8001c0a:	a313      	add	r3, pc, #76	; (adr r3, 8001c58 <MPU6050_Read_Gyro+0xd8>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe fdc0 	bl	8000794 <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe ff2a 	bl	8000a74 <__aeabi_d2f>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <MPU6050_Read_Gyro+0xf4>)
 8001c24:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MPU6050_Read_Gyro+0xec>)
 8001c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc1d 	bl	800046c <__aeabi_i2d>
 8001c32:	a309      	add	r3, pc, #36	; (adr r3, 8001c58 <MPU6050_Read_Gyro+0xd8>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	f7fe fdac 	bl	8000794 <__aeabi_ddiv>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	f7fe ff16 	bl	8000a74 <__aeabi_d2f>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <MPU6050_Read_Gyro+0xf8>)
 8001c4c:	6013      	str	r3, [r2, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40606000 	.word	0x40606000
 8001c60:	2000024c 	.word	0x2000024c
 8001c64:	20000396 	.word	0x20000396
 8001c68:	20000398 	.word	0x20000398
 8001c6c:	2000039a 	.word	0x2000039a
 8001c70:	200003a8 	.word	0x200003a8
 8001c74:	200003ac 	.word	0x200003ac
 8001c78:	200003b0 	.word	0x200003b0

08001c7c <solve>:

void solve(Algorithm alg) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
	Action nextMove = solver(alg);
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 ff2f 	bl	8003aec <solver>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	74fb      	strb	r3, [r7, #19]
	switch(nextMove) {
 8001c92:	7cfb      	ldrb	r3, [r7, #19]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d835      	bhi.n	8001d04 <solve+0x88>
 8001c98:	a201      	add	r2, pc, #4	; (adr r2, 8001ca0 <solve+0x24>)
 8001c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9e:	bf00      	nop
 8001ca0:	08001cf1 	.word	0x08001cf1
 8001ca4:	08001cb1 	.word	0x08001cb1
 8001ca8:	08001cfb 	.word	0x08001cfb
 8001cac:	08001d03 	.word	0x08001d03
		case FORWARD:
//			move(1);
			if (alg == FLOODFILL)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d118      	bne.n	8001ce8 <solve+0x6c>
			{
				int extra_moves = foresight(); // Already has curr position and heading
 8001cb6:	f002 f8a5 	bl	8003e04 <foresight>
 8001cba:	60f8      	str	r0, [r7, #12]
				for (int i = 0; i < extra_moves; i++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e005      	b.n	8001cce <solve+0x52>
				{
					solver(FLOODFILL);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f001 ff12 	bl	8003aec <solver>
				for (int i = 0; i < extra_moves; i++)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	dbf5      	blt.n	8001cc2 <solve+0x46>
				}
				move(1 + extra_moves);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fb8f 	bl	8001404 <move>
			}
			else
				move(1);
			break;
 8001ce6:	e00d      	b.n	8001d04 <solve+0x88>
				move(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff fb8b 	bl	8001404 <move>
			break;
 8001cee:	e009      	b.n	8001d04 <solve+0x88>
		case LEFT:
			turn(-1);
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff fbc2 	bl	800147c <turn>
			break;
 8001cf8:	e004      	b.n	8001d04 <solve+0x88>
		case RIGHT:
			turn(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7ff fbbe 	bl	800147c <turn>
			break;
 8001d00:	e000      	b.n	8001d04 <solve+0x88>
		case IDLE:
			break;
 8001d02:	bf00      	nop
	}
}
 8001d04:	bf00      	nop
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d10:	f002 fcb8 	bl	8004684 <HAL_Init>

  /* USER CODE BEGIN Init */

  Delay_Init();
 8001d14:	f7ff fbda 	bl	80014cc <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d18:	f000 f8f6 	bl	8001f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d1c:	f000 fb24 	bl	8002368 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d20:	f000 fb02 	bl	8002328 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d24:	f000 f92c 	bl	8001f80 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001d28:	f000 f9aa 	bl	8002080 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001d2c:	f000 fa50 	bl	80021d0 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001d30:	f000 faa2 	bl	8002278 <MX_TIM8_Init>
  MX_I2C1_Init();
 8001d34:	f000 f976 	bl	8002024 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8001d38:	f7ff fe4e 	bl	80019d8 <MPU6050_Init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001d3c:	213c      	movs	r1, #60	; 0x3c
 8001d3e:	4864      	ldr	r0, [pc, #400]	; (8001ed0 <main+0x1c4>)
 8001d40:	f005 ffb8 	bl	8007cb4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001d44:	213c      	movs	r1, #60	; 0x3c
 8001d46:	4863      	ldr	r0, [pc, #396]	; (8001ed4 <main+0x1c8>)
 8001d48:	f005 ffb4 	bl	8007cb4 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4862      	ldr	r0, [pc, #392]	; (8001ed8 <main+0x1cc>)
 8001d50:	f005 fe42 	bl	80079d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d54:	2104      	movs	r1, #4
 8001d56:	4860      	ldr	r0, [pc, #384]	; (8001ed8 <main+0x1cc>)
 8001d58:	f005 fe3e 	bl	80079d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001d5c:	2108      	movs	r1, #8
 8001d5e:	485e      	ldr	r0, [pc, #376]	; (8001ed8 <main+0x1cc>)
 8001d60:	f005 fe3a 	bl	80079d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001d64:	210c      	movs	r1, #12
 8001d66:	485c      	ldr	r0, [pc, #368]	; (8001ed8 <main+0x1cc>)
 8001d68:	f005 fe36 	bl	80079d8 <HAL_TIM_PWM_Start>

  HAL_Init();
 8001d6c:	f002 fc8a 	bl	8004684 <HAL_Init>

	if (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin) == GPIO_PIN_SET)	// Read maze on start
 8001d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d74:	4859      	ldr	r0, [pc, #356]	; (8001edc <main+0x1d0>)
 8001d76:	f004 f9ad 	bl	80060d4 <HAL_GPIO_ReadPin>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d106      	bne.n	8001d8e <main+0x82>
		HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d86:	4855      	ldr	r0, [pc, #340]	; (8001edc <main+0x1d0>)
 8001d88:	f004 f9bb 	bl	8006102 <HAL_GPIO_WritePin>
 8001d8c:	e005      	b.n	8001d9a <main+0x8e>
	else
		HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d94:	4851      	ldr	r0, [pc, #324]	; (8001edc <main+0x1d0>)
 8001d96:	f004 f9b4 	bl	8006102 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin) == GPIO_PIN_SET)	// Save maze on finish
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	4850      	ldr	r0, [pc, #320]	; (8001ee0 <main+0x1d4>)
 8001d9e:	f004 f999 	bl	80060d4 <HAL_GPIO_ReadPin>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d106      	bne.n	8001db6 <main+0xaa>
		HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dae:	484b      	ldr	r0, [pc, #300]	; (8001edc <main+0x1d0>)
 8001db0:	f004 f9a7 	bl	8006102 <HAL_GPIO_WritePin>
 8001db4:	e005      	b.n	8001dc2 <main+0xb6>
	else
		HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dbc:	4847      	ldr	r0, [pc, #284]	; (8001edc <main+0x1d0>)
 8001dbe:	f004 f9a0 	bl	8006102 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin) == GPIO_PIN_SET)	// Do Floodfill
 8001dc2:	2108      	movs	r1, #8
 8001dc4:	4847      	ldr	r0, [pc, #284]	; (8001ee4 <main+0x1d8>)
 8001dc6:	f004 f985 	bl	80060d4 <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d106      	bne.n	8001dde <main+0xd2>
		HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dd6:	4841      	ldr	r0, [pc, #260]	; (8001edc <main+0x1d0>)
 8001dd8:	f004 f993 	bl	8006102 <HAL_GPIO_WritePin>
 8001ddc:	e005      	b.n	8001dea <main+0xde>
	else
		HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001de4:	483d      	ldr	r0, [pc, #244]	; (8001edc <main+0x1d0>)
 8001de6:	f004 f98c 	bl	8006102 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  MPU6050_Read_Gyro();
 8001dea:	f7ff fec9 	bl	8001b80 <MPU6050_Read_Gyro>
	  MPU6050_Read_Accel();
 8001dee:	f7ff fe49 	bl	8001a84 <MPU6050_Read_Accel>

	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff fcfa 	bl	80017ec <readIR>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <main+0x1dc>)
 8001dfe:	801a      	strh	r2, [r3, #0]
	  leftIRvalue = readIR(IR_LEFT);
 8001e00:	2001      	movs	r0, #1
 8001e02:	f7ff fcf3 	bl	80017ec <readIR>
 8001e06:	4603      	mov	r3, r0
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	4b38      	ldr	r3, [pc, #224]	; (8001eec <main+0x1e0>)
 8001e0c:	801a      	strh	r2, [r3, #0]
	  rightIRvalue = readIR(IR_RIGHT);
 8001e0e:	2002      	movs	r0, #2
 8001e10:	f7ff fcec 	bl	80017ec <readIR>
 8001e14:	4603      	mov	r3, r0
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <main+0x1e4>)
 8001e1a:	801a      	strh	r2, [r3, #0]
	  forwardRightIRvalue = readIR(IR_FORWARD_RIGHT);
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f7ff fce5 	bl	80017ec <readIR>
 8001e22:	4603      	mov	r3, r0
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <main+0x1e8>)
 8001e28:	801a      	strh	r2, [r3, #0]

	  left_counts = getLeftEncoderCounts();
 8001e2a:	f7ff fb97 	bl	800155c <getLeftEncoderCounts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <main+0x1ec>)
 8001e34:	801a      	strh	r2, [r3, #0]
	  right_counts = getRightEncoderCounts();
 8001e36:	f7ff fb83 	bl	8001540 <getRightEncoderCounts>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <main+0x1f0>)
 8001e40:	801a      	strh	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(LeftButton_GPIO_Port, LeftButton_Pin))
 8001e42:	2101      	movs	r1, #1
 8001e44:	4827      	ldr	r0, [pc, #156]	; (8001ee4 <main+0x1d8>)
 8001e46:	f004 f945 	bl	80060d4 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01d      	beq.n	8001e8c <main+0x180>
	  {
		  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff fccb 	bl	80017ec <readIR>
 8001e56:	4603      	mov	r3, r0
 8001e58:	b21c      	sxth	r4, r3
 8001e5a:	2003      	movs	r0, #3
 8001e5c:	f7ff fcc6 	bl	80017ec <readIR>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b21d      	sxth	r5, r3
 8001e64:	2001      	movs	r0, #1
 8001e66:	f7ff fcc1 	bl	80017ec <readIR>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b21e      	sxth	r6, r3
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f7ff fcbc 	bl	80017ec <readIR>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	4632      	mov	r2, r6
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f000 fca3 	bl	80027c8 <setIRGoals>
		  irOffset_Set = 1;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <main+0x1f4>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	801a      	strh	r2, [r3, #0]
		  loadMaze();
 8001e88:	f002 f8bc 	bl	8004004 <loadMaze>
	  }

	  if (HAL_GPIO_ReadPin(RightButton_GPIO_Port, RightButton_Pin))
 8001e8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e90:	4812      	ldr	r0, [pc, #72]	; (8001edc <main+0x1d0>)
 8001e92:	f004 f91f 	bl	80060d4 <HAL_GPIO_ReadPin>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <main+0x196>
	  {
		  start_pressed = 1;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <main+0x1f8>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	801a      	strh	r2, [r3, #0]
 * Zoom: we know what the maze looks like, so we can run multiple floodfill moves at once
 * 			not implemented yet
 *
 *
 */
	  if (start_pressed)
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <main+0x1f8>)
 8001ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d09e      	beq.n	8001dea <main+0xde>
	  {
		  move(0);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff faa9 	bl	8001404 <move>

		  if (HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin) == GPIO_PIN_SET)
 8001eb2:	2108      	movs	r1, #8
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <main+0x1d8>)
 8001eb6:	f004 f90d 	bl	80060d4 <HAL_GPIO_ReadPin>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d103      	bne.n	8001ec8 <main+0x1bc>
			  solve(FLOODFILL);
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f7ff fedb 	bl	8001c7c <solve>
 8001ec6:	e790      	b.n	8001dea <main+0xde>
		  else
			  solve(DEAD);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff fed7 	bl	8001c7c <solve>
	  MPU6050_Read_Gyro();
 8001ece:	e78c      	b.n	8001dea <main+0xde>
 8001ed0:	200002e8 	.word	0x200002e8
 8001ed4:	20000330 	.word	0x20000330
 8001ed8:	200002a0 	.word	0x200002a0
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	2000037e 	.word	0x2000037e
 8001eec:	20000380 	.word	0x20000380
 8001ef0:	20000382 	.word	0x20000382
 8001ef4:	20000384 	.word	0x20000384
 8001ef8:	2000037a 	.word	0x2000037a
 8001efc:	2000037c 	.word	0x2000037c
 8001f00:	20000386 	.word	0x20000386
 8001f04:	20000378 	.word	0x20000378

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b092      	sub	sp, #72	; 0x48
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	2230      	movs	r2, #48	; 0x30
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f006 fb8c 	bl	8008634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f32:	2310      	movs	r3, #16
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f3a:	f107 0318 	add.w	r3, r7, #24
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f005 f8ce 	bl	80070e0 <HAL_RCC_OscConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001f4a:	f000 fb49 	bl	80025e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f4e:	230f      	movs	r3, #15
 8001f50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f005 fb08 	bl	800757c <HAL_RCC_ClockConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001f72:	f000 fb35 	bl	80025e0 <Error_Handler>
  }
}
 8001f76:	bf00      	nop
 8001f78:	3748      	adds	r7, #72	; 0x48
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f86:	463b      	mov	r3, r7
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <MX_ADC1_Init+0x98>)
 8001f94:	4a21      	ldr	r2, [pc, #132]	; (800201c <MX_ADC1_Init+0x9c>)
 8001f96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f98:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <MX_ADC1_Init+0x98>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <MX_ADC1_Init+0x98>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <MX_ADC1_Init+0x98>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <MX_ADC1_Init+0x98>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <MX_ADC1_Init+0x98>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <MX_ADC1_Init+0x98>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <MX_ADC1_Init+0x98>)
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <MX_ADC1_Init+0xa0>)
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_ADC1_Init+0x98>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <MX_ADC1_Init+0x98>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_ADC1_Init+0x98>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <MX_ADC1_Init+0x98>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fde:	480e      	ldr	r0, [pc, #56]	; (8002018 <MX_ADC1_Init+0x98>)
 8001fe0:	f002 fbbe 	bl	8004760 <HAL_ADC_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001fea:	f000 faf9 	bl	80025e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001fee:	2305      	movs	r3, #5
 8001ff0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <MX_ADC1_Init+0x98>)
 8002000:	f002 fd34 	bl	8004a6c <HAL_ADC_ConfigChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800200a:	f000 fae9 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200001a4 	.word	0x200001a4
 800201c:	40012000 	.word	0x40012000
 8002020:	0f000001 	.word	0x0f000001

08002024 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <MX_I2C1_Init+0x50>)
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <MX_I2C1_Init+0x54>)
 800202c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_I2C1_Init+0x50>)
 8002030:	4a12      	ldr	r2, [pc, #72]	; (800207c <MX_I2C1_Init+0x58>)
 8002032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_I2C1_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_I2C1_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_I2C1_Init+0x50>)
 8002042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <MX_I2C1_Init+0x50>)
 800204a:	2200      	movs	r2, #0
 800204c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_I2C1_Init+0x50>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <MX_I2C1_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_I2C1_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	; (8002074 <MX_I2C1_Init+0x50>)
 8002062:	f004 f87f 	bl	8006164 <HAL_I2C_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800206c:	f000 fab8 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	2000024c 	.word	0x2000024c
 8002078:	40005400 	.word	0x40005400
 800207c:	00061a80 	.word	0x00061a80

08002080 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b092      	sub	sp, #72	; 0x48
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002086:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
 80020a0:	615a      	str	r2, [r3, #20]
 80020a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2220      	movs	r2, #32
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f006 fac2 	bl	8008634 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020b0:	4b45      	ldr	r3, [pc, #276]	; (80021c8 <MX_TIM1_Init+0x148>)
 80020b2:	4a46      	ldr	r2, [pc, #280]	; (80021cc <MX_TIM1_Init+0x14c>)
 80020b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020b6:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <MX_TIM1_Init+0x148>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020bc:	4b42      	ldr	r3, [pc, #264]	; (80021c8 <MX_TIM1_Init+0x148>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <MX_TIM1_Init+0x148>)
 80020c4:	f640 427f 	movw	r2, #3199	; 0xc7f
 80020c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ca:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <MX_TIM1_Init+0x148>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020d0:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <MX_TIM1_Init+0x148>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d6:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <MX_TIM1_Init+0x148>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020dc:	483a      	ldr	r0, [pc, #232]	; (80021c8 <MX_TIM1_Init+0x148>)
 80020de:	f005 fc2b 	bl	8007938 <HAL_TIM_PWM_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80020e8:	f000 fa7a 	bl	80025e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020f8:	4619      	mov	r1, r3
 80020fa:	4833      	ldr	r0, [pc, #204]	; (80021c8 <MX_TIM1_Init+0x148>)
 80020fc:	f006 f994 	bl	8008428 <HAL_TIMEx_MasterConfigSynchronization>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002106:	f000 fa6b 	bl	80025e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210a:	2360      	movs	r3, #96	; 0x60
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002112:	2300      	movs	r3, #0
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002116:	2300      	movs	r3, #0
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	4826      	ldr	r0, [pc, #152]	; (80021c8 <MX_TIM1_Init+0x148>)
 8002130:	f005 fe4e 	bl	8007dd0 <HAL_TIM_PWM_ConfigChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800213a:	f000 fa51 	bl	80025e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800213e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002142:	2204      	movs	r2, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4820      	ldr	r0, [pc, #128]	; (80021c8 <MX_TIM1_Init+0x148>)
 8002148:	f005 fe42 	bl	8007dd0 <HAL_TIM_PWM_ConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002152:	f000 fa45 	bl	80025e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215a:	2208      	movs	r2, #8
 800215c:	4619      	mov	r1, r3
 800215e:	481a      	ldr	r0, [pc, #104]	; (80021c8 <MX_TIM1_Init+0x148>)
 8002160:	f005 fe36 	bl	8007dd0 <HAL_TIM_PWM_ConfigChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800216a:	f000 fa39 	bl	80025e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800216e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002172:	220c      	movs	r2, #12
 8002174:	4619      	mov	r1, r3
 8002176:	4814      	ldr	r0, [pc, #80]	; (80021c8 <MX_TIM1_Init+0x148>)
 8002178:	f005 fe2a 	bl	8007dd0 <HAL_TIM_PWM_ConfigChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002182:	f000 fa2d 	bl	80025e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800219a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4807      	ldr	r0, [pc, #28]	; (80021c8 <MX_TIM1_Init+0x148>)
 80021aa:	f006 f9b7 	bl	800851c <HAL_TIMEx_ConfigBreakDeadTime>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80021b4:	f000 fa14 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <MX_TIM1_Init+0x148>)
 80021ba:	f002 f8d3 	bl	8004364 <HAL_TIM_MspPostInit>

}
 80021be:	bf00      	nop
 80021c0:	3748      	adds	r7, #72	; 0x48
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200002a0 	.word	0x200002a0
 80021cc:	40010000 	.word	0x40010000

080021d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	2224      	movs	r2, #36	; 0x24
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f006 fa28 	bl	8008634 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021ec:	4b20      	ldr	r3, [pc, #128]	; (8002270 <MX_TIM3_Init+0xa0>)
 80021ee:	4a21      	ldr	r2, [pc, #132]	; (8002274 <MX_TIM3_Init+0xa4>)
 80021f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021f2:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <MX_TIM3_Init+0xa0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <MX_TIM3_Init+0xa0>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <MX_TIM3_Init+0xa0>)
 8002200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002204:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <MX_TIM3_Init+0xa0>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <MX_TIM3_Init+0xa0>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002212:	2303      	movs	r3, #3
 8002214:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800221a:	2301      	movs	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800222a:	2301      	movs	r3, #1
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800222e:	2300      	movs	r3, #0
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4619      	mov	r1, r3
 800223c:	480c      	ldr	r0, [pc, #48]	; (8002270 <MX_TIM3_Init+0xa0>)
 800223e:	f005 fc93 	bl	8007b68 <HAL_TIM_Encoder_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002248:	f000 f9ca 	bl	80025e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	4619      	mov	r1, r3
 8002258:	4805      	ldr	r0, [pc, #20]	; (8002270 <MX_TIM3_Init+0xa0>)
 800225a:	f006 f8e5 	bl	8008428 <HAL_TIMEx_MasterConfigSynchronization>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002264:	f000 f9bc 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002268:	bf00      	nop
 800226a:	3730      	adds	r7, #48	; 0x30
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200002e8 	.word	0x200002e8
 8002274:	40000400 	.word	0x40000400

08002278 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800227e:	f107 030c 	add.w	r3, r7, #12
 8002282:	2224      	movs	r2, #36	; 0x24
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f006 f9d4 	bl	8008634 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002294:	4b22      	ldr	r3, [pc, #136]	; (8002320 <MX_TIM8_Init+0xa8>)
 8002296:	4a23      	ldr	r2, [pc, #140]	; (8002324 <MX_TIM8_Init+0xac>)
 8002298:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <MX_TIM8_Init+0xa8>)
 800229c:	2200      	movs	r2, #0
 800229e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <MX_TIM8_Init+0xa8>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <MX_TIM8_Init+0xa8>)
 80022a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <MX_TIM8_Init+0xa8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <MX_TIM8_Init+0xa8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <MX_TIM8_Init+0xa8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022c0:	2303      	movs	r3, #3
 80022c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022c8:	2301      	movs	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022d8:	2301      	movs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	480d      	ldr	r0, [pc, #52]	; (8002320 <MX_TIM8_Init+0xa8>)
 80022ec:	f005 fc3c 	bl	8007b68 <HAL_TIM_Encoder_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80022f6:	f000 f973 	bl	80025e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4806      	ldr	r0, [pc, #24]	; (8002320 <MX_TIM8_Init+0xa8>)
 8002308:	f006 f88e 	bl	8008428 <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002312:	f000 f965 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	3730      	adds	r7, #48	; 0x30
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000330 	.word	0x20000330
 8002324:	40010400 	.word	0x40010400

08002328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <MX_DMA_Init+0x3c>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <MX_DMA_Init+0x3c>)
 8002338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <MX_DMA_Init+0x3c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2038      	movs	r0, #56	; 0x38
 8002350:	f002 ff0b 	bl	800516a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002354:	2038      	movs	r0, #56	; 0x38
 8002356:	f002 ff24 	bl	80051a2 <HAL_NVIC_EnableIRQ>

}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800

08002368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
 800237c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	4b6e      	ldr	r3, [pc, #440]	; (800253c <MX_GPIO_Init+0x1d4>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a6d      	ldr	r2, [pc, #436]	; (800253c <MX_GPIO_Init+0x1d4>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b6b      	ldr	r3, [pc, #428]	; (800253c <MX_GPIO_Init+0x1d4>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b67      	ldr	r3, [pc, #412]	; (800253c <MX_GPIO_Init+0x1d4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a66      	ldr	r2, [pc, #408]	; (800253c <MX_GPIO_Init+0x1d4>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b64      	ldr	r3, [pc, #400]	; (800253c <MX_GPIO_Init+0x1d4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	4b60      	ldr	r3, [pc, #384]	; (800253c <MX_GPIO_Init+0x1d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a5f      	ldr	r2, [pc, #380]	; (800253c <MX_GPIO_Init+0x1d4>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b5d      	ldr	r3, [pc, #372]	; (800253c <MX_GPIO_Init+0x1d4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	4b59      	ldr	r3, [pc, #356]	; (800253c <MX_GPIO_Init+0x1d4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a58      	ldr	r2, [pc, #352]	; (800253c <MX_GPIO_Init+0x1d4>)
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b56      	ldr	r3, [pc, #344]	; (800253c <MX_GPIO_Init+0x1d4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_LED_Pin|Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80023f4:	4852      	ldr	r0, [pc, #328]	; (8002540 <MX_GPIO_Init+0x1d8>)
 80023f6:	f003 fe84 	bl	8006102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2194      	movs	r1, #148	; 0x94
 80023fe:	4851      	ldr	r0, [pc, #324]	; (8002544 <MX_GPIO_Init+0x1dc>)
 8002400:	f003 fe7f 	bl	8006102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800240a:	484f      	ldr	r0, [pc, #316]	; (8002548 <MX_GPIO_Init+0x1e0>)
 800240c:	f003 fe79 	bl	8006102 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_LED_Pin Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|Y_LED_Pin|G_LED_Pin;
 8002410:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002416:	2301      	movs	r3, #1
 8002418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	4845      	ldr	r0, [pc, #276]	; (8002540 <MX_GPIO_Init+0x1d8>)
 800242a:	f003 fcb5 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 800242e:	2394      	movs	r3, #148	; 0x94
 8002430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002432:	2301      	movs	r3, #1
 8002434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	4619      	mov	r1, r3
 8002444:	483f      	ldr	r0, [pc, #252]	; (8002544 <MX_GPIO_Init+0x1dc>)
 8002446:	f003 fca7 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 800244a:	2308      	movs	r3, #8
 800244c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800245a:	2301      	movs	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4837      	ldr	r0, [pc, #220]	; (8002544 <MX_GPIO_Init+0x1dc>)
 8002466:	f003 fc97 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftButton_Pin Switch3_Pin */
  GPIO_InitStruct.Pin = LeftButton_Pin|Switch3_Pin;
 800246a:	2309      	movs	r3, #9
 800246c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002472:	2302      	movs	r3, #2
 8002474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4832      	ldr	r0, [pc, #200]	; (8002548 <MX_GPIO_Init+0x1e0>)
 800247e:	f003 fc8b 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002482:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002490:	2303      	movs	r3, #3
 8002492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002494:	2307      	movs	r3, #7
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4619      	mov	r1, r3
 800249e:	482a      	ldr	r0, [pc, #168]	; (8002548 <MX_GPIO_Init+0x1e0>)
 80024a0:	f003 fc7a 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : RightButton_Pin */
  GPIO_InitStruct.Pin = RightButton_Pin;
 80024a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024ae:	2302      	movs	r3, #2
 80024b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightButton_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	4821      	ldr	r0, [pc, #132]	; (8002540 <MX_GPIO_Init+0x1d8>)
 80024ba:	f003 fc6d 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch1_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin;
 80024be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80024c4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80024c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch1_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	4619      	mov	r1, r3
 80024d4:	481a      	ldr	r0, [pc, #104]	; (8002540 <MX_GPIO_Init+0x1d8>)
 80024d6:	f003 fc5f 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 80024da:	2304      	movs	r3, #4
 80024dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80024de:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80024e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024e4:	2302      	movs	r3, #2
 80024e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	4619      	mov	r1, r3
 80024ee:	4817      	ldr	r0, [pc, #92]	; (800254c <MX_GPIO_Init+0x1e4>)
 80024f0:	f003 fc52 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 80024f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	480e      	ldr	r0, [pc, #56]	; (8002548 <MX_GPIO_Init+0x1e0>)
 800250e:	f003 fc43 	bl	8005d98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	2008      	movs	r0, #8
 8002518:	f002 fe27 	bl	800516a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800251c:	2008      	movs	r0, #8
 800251e:	f002 fe40 	bl	80051a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2028      	movs	r0, #40	; 0x28
 8002528:	f002 fe1f 	bl	800516a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800252c:	2028      	movs	r0, #40	; 0x28
 800252e:	f002 fe38 	bl	80051a2 <HAL_NVIC_EnableIRQ>

}
 8002532:	bf00      	nop
 8002534:	3728      	adds	r7, #40	; 0x28
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	40020800 	.word	0x40020800
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40020c00 	.word	0x40020c00

08002550 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */

ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
	return &hadc1;
 8002554:	4b02      	ldr	r3, [pc, #8]	; (8002560 <Get_HADC1_Ptr+0x10>)
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	200001a4 	.word	0x200001a4

08002564 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == Switch1_Pin)
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002574:	d114      	bne.n	80025a0 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		if (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin) == GPIO_PIN_SET)
 8002576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800257a:	4817      	ldr	r0, [pc, #92]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x74>)
 800257c:	f003 fdaa 	bl	80060d4 <HAL_GPIO_ReadPin>
 8002580:	4603      	mov	r3, r0
 8002582:	2b01      	cmp	r3, #1
 8002584:	d106      	bne.n	8002594 <HAL_GPIO_EXTI_Callback+0x30>
			HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
 8002588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800258c:	4812      	ldr	r0, [pc, #72]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x74>)
 800258e:	f003 fdb8 	bl	8006102 <HAL_GPIO_WritePin>
 8002592:	e005      	b.n	80025a0 <HAL_GPIO_EXTI_Callback+0x3c>
		else
			HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800259a:	480f      	ldr	r0, [pc, #60]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x74>)
 800259c:	f003 fdb1 	bl	8006102 <HAL_GPIO_WritePin>
	}
	if (GPIO_PIN == Switch2_Pin)
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d113      	bne.n	80025ce <HAL_GPIO_EXTI_Callback+0x6a>
	{
		if (HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin) == GPIO_PIN_SET)
 80025a6:	2104      	movs	r1, #4
 80025a8:	480c      	ldr	r0, [pc, #48]	; (80025dc <HAL_GPIO_EXTI_Callback+0x78>)
 80025aa:	f003 fd93 	bl	80060d4 <HAL_GPIO_ReadPin>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d106      	bne.n	80025c2 <HAL_GPIO_EXTI_Callback+0x5e>
			HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
 80025b4:	2201      	movs	r2, #1
 80025b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025ba:	4807      	ldr	r0, [pc, #28]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x74>)
 80025bc:	f003 fda1 	bl	8006102 <HAL_GPIO_WritePin>
		else
			HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_RESET);
	}
}
 80025c0:	e005      	b.n	80025ce <HAL_GPIO_EXTI_Callback+0x6a>
			HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_RESET);
 80025c2:	2200      	movs	r2, #0
 80025c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025c8:	4803      	ldr	r0, [pc, #12]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x74>)
 80025ca:	f003 fd9a 	bl	8006102 <HAL_GPIO_WritePin>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00

080025e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <Error_Handler+0x8>
 80025ea:	0000      	movs	r0, r0
 80025ec:	0000      	movs	r0, r0
	...

080025f0 <limitPWM>:
#include "pid.h"

extern float velocity_left;
extern float velocity_right;

float limitPWM(float pwm) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7fd ff49 	bl	8000490 <__aeabi_f2d>
 80025fe:	a30e      	add	r3, pc, #56	; (adr r3, 8002638 <limitPWM+0x48>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe fa2c 	bl	8000a60 <__aeabi_dcmpgt>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <limitPWM+0x22>
		return PWM_MAX;
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <limitPWM+0x58>)
 8002610:	e00d      	b.n	800262e <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fd ff3c 	bl	8000490 <__aeabi_f2d>
 8002618:	a309      	add	r3, pc, #36	; (adr r3, 8002640 <limitPWM+0x50>)
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	f7fe fa01 	bl	8000a24 <__aeabi_dcmplt>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <limitPWM+0x3c>
		return -PWM_MAX;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <limitPWM+0x5c>)
 800262a:	e000      	b.n	800262e <limitPWM+0x3e>
	else
		return pwm;
 800262c:	687b      	ldr	r3, [r7, #4]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	66666666 	.word	0x66666666
 800263c:	3fee6666 	.word	0x3fee6666
 8002640:	66666666 	.word	0x66666666
 8002644:	bfee6666 	.word	0xbfee6666
 8002648:	3f733333 	.word	0x3f733333
 800264c:	bf733333 	.word	0xbf733333

08002650 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fe fd19 	bl	8001094 <__aeabi_fcmpge>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d012      	beq.n	800268e <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <setMotorLPWM+0x70>)
 800266a:	2200      	movs	r2, #0
 800266c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ffbe 	bl	80025f0 <limitPWM>
 8002674:	4603      	mov	r3, r0
 8002676:	4913      	ldr	r1, [pc, #76]	; (80026c4 <setMotorLPWM+0x74>)
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fb59 	bl	8000d30 <__aeabi_fmul>
 800267e:	4603      	mov	r3, r0
 8002680:	4c0f      	ldr	r4, [pc, #60]	; (80026c0 <setMotorLPWM+0x70>)
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fd1a 	bl	80010bc <__aeabi_f2uiz>
 8002688:	4603      	mov	r3, r0
 800268a:	63a3      	str	r3, [r4, #56]	; 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 800268c:	e013      	b.n	80026b6 <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <setMotorLPWM+0x70>)
 8002690:	2200      	movs	r2, #0
 8002692:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ffab 	bl	80025f0 <limitPWM>
 800269a:	4603      	mov	r3, r0
 800269c:	4909      	ldr	r1, [pc, #36]	; (80026c4 <setMotorLPWM+0x74>)
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fb46 	bl	8000d30 <__aeabi_fmul>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026aa:	4c05      	ldr	r4, [pc, #20]	; (80026c0 <setMotorLPWM+0x70>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fd05 	bl	80010bc <__aeabi_f2uiz>
 80026b2:	4603      	mov	r3, r0
 80026b4:	6363      	str	r3, [r4, #52]	; 0x34
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd90      	pop	{r4, r7, pc}
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000
 80026c4:	4547f000 	.word	0x4547f000

080026c8 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 80026d0:	f04f 0100 	mov.w	r1, #0
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7fe fcdd 	bl	8001094 <__aeabi_fcmpge>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d012      	beq.n	8002706 <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <setMotorRPWM+0x70>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ff82 	bl	80025f0 <limitPWM>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4913      	ldr	r1, [pc, #76]	; (800273c <setMotorRPWM+0x74>)
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fb1d 	bl	8000d30 <__aeabi_fmul>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4c0f      	ldr	r4, [pc, #60]	; (8002738 <setMotorRPWM+0x70>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fcde 	bl	80010bc <__aeabi_f2uiz>
 8002700:	4603      	mov	r3, r0
 8002702:	63e3      	str	r3, [r4, #60]	; 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8002704:	e013      	b.n	800272e <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <setMotorRPWM+0x70>)
 8002708:	2200      	movs	r2, #0
 800270a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ff6f 	bl	80025f0 <limitPWM>
 8002712:	4603      	mov	r3, r0
 8002714:	4909      	ldr	r1, [pc, #36]	; (800273c <setMotorRPWM+0x74>)
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fb0a 	bl	8000d30 <__aeabi_fmul>
 800271c:	4603      	mov	r3, r0
 800271e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002722:	4c05      	ldr	r4, [pc, #20]	; (8002738 <setMotorRPWM+0x70>)
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fcc9 	bl	80010bc <__aeabi_f2uiz>
 800272a:	4603      	mov	r3, r0
 800272c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bd90      	pop	{r4, r7, pc}
 8002736:	bf00      	nop
 8002738:	40010000 	.word	0x40010000
 800273c:	4547f000 	.word	0x4547f000

08002740 <resetMotors>:

void resetMotors() {
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 8002744:	f04f 0000 	mov.w	r0, #0
 8002748:	f7ff ff82 	bl	8002650 <setMotorLPWM>
	setMotorRPWM(0);
 800274c:	f04f 0000 	mov.w	r0, #0
 8002750:	f7ff ffba 	bl	80026c8 <setMotorRPWM>
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}

08002758 <setPIDGoalD>:
STATE state = REST;
float left_PWM_value = 0;
float right_PWM_value = 0;
int goal_reached_timer = 0;

void setPIDGoalD(int16_t distance) { goal_distance = distance; }
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	80fb      	strh	r3, [r7, #6]
 8002762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fa8e 	bl	8000c88 <__aeabi_i2f>
 800276c:	4603      	mov	r3, r0
 800276e:	4a03      	ldr	r2, [pc, #12]	; (800277c <setPIDGoalD+0x24>)
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200003b4 	.word	0x200003b4

08002780 <setPIDGoalA>:
void setPIDGoalA(int16_t angle) { goal_angle = angle; }
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
 800278a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fa7a 	bl	8000c88 <__aeabi_i2f>
 8002794:	4603      	mov	r3, r0
 8002796:	4a03      	ldr	r2, [pc, #12]	; (80027a4 <setPIDGoalA+0x24>)
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200003b8 	.word	0x200003b8

080027a8 <setState>:
void setState(STATE curr_state) { state = curr_state; }
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
 80027b2:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <setState+0x1c>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	7013      	strb	r3, [r2, #0]
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000490 	.word	0x20000490

080027c8 <setIRGoals>:

void setIRGoals(int16_t frontLeftGoal, int16_t frontRightGoal, int16_t leftGoal, int16_t rightGoal) {
 80027c8:	b490      	push	{r4, r7}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4604      	mov	r4, r0
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	461a      	mov	r2, r3
 80027d6:	4623      	mov	r3, r4
 80027d8:	80fb      	strh	r3, [r7, #6]
 80027da:	4603      	mov	r3, r0
 80027dc:	80bb      	strh	r3, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	807b      	strh	r3, [r7, #2]
 80027e2:	4613      	mov	r3, r2
 80027e4:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = leftGoal - rightGoal;
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	883b      	ldrh	r3, [r7, #0]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <setIRGoals+0x50>)
 80027f2:	801a      	strh	r2, [r3, #0]
	goal_forward_left = frontLeftGoal;
 80027f4:	4a09      	ldr	r2, [pc, #36]	; (800281c <setIRGoals+0x54>)
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	8013      	strh	r3, [r2, #0]
	goal_forward_right = frontRightGoal;
 80027fa:	4a09      	ldr	r2, [pc, #36]	; (8002820 <setIRGoals+0x58>)
 80027fc:	88bb      	ldrh	r3, [r7, #4]
 80027fe:	8013      	strh	r3, [r2, #0]
	goal_left = leftGoal;
 8002800:	4a08      	ldr	r2, [pc, #32]	; (8002824 <setIRGoals+0x5c>)
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	8013      	strh	r3, [r2, #0]
	goal_right = rightGoal;
 8002806:	4a08      	ldr	r2, [pc, #32]	; (8002828 <setIRGoals+0x60>)
 8002808:	883b      	ldrh	r3, [r7, #0]
 800280a:	8013      	strh	r3, [r2, #0]

}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bc90      	pop	{r4, r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	200003bc 	.word	0x200003bc
 800281c:	20000388 	.word	0x20000388
 8002820:	2000038a 	.word	0x2000038a
 8002824:	2000038c 	.word	0x2000038c
 8002828:	2000038e 	.word	0x2000038e

0800282c <setIRAngle>:
	setPIDGoalD(front_kPx * ((goal_forward_left - curr_forward_left + goal_forward_right - curr_forward_left)/2));

}

// TODO: CHANGE TO USE WALL CHECK FUNCTIONS
void setIRAngle(float left, float right){
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]

	if (left > 600 && right > 600 && goal_angle == 0)
 8002836:	4947      	ldr	r1, [pc, #284]	; (8002954 <setIRAngle+0x128>)
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7fe fc35 	bl	80010a8 <__aeabi_fcmpgt>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d02d      	beq.n	80028a0 <setIRAngle+0x74>
 8002844:	4943      	ldr	r1, [pc, #268]	; (8002954 <setIRAngle+0x128>)
 8002846:	6838      	ldr	r0, [r7, #0]
 8002848:	f7fe fc2e 	bl	80010a8 <__aeabi_fcmpgt>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d026      	beq.n	80028a0 <setIRAngle+0x74>
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <setIRAngle+0x12c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fbfc 	bl	8001058 <__aeabi_fcmpeq>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01c      	beq.n	80028a0 <setIRAngle+0x74>
	{
		IRadjustment = (kPir * ((left - right) - IRAngleOffset));
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7fe f957 	bl	8000b1c <__aeabi_fsub>
 800286e:	4603      	mov	r3, r0
 8002870:	461c      	mov	r4, r3
 8002872:	4b3a      	ldr	r3, [pc, #232]	; (800295c <setIRAngle+0x130>)
 8002874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fa05 	bl	8000c88 <__aeabi_i2f>
 800287e:	4603      	mov	r3, r0
 8002880:	4619      	mov	r1, r3
 8002882:	4620      	mov	r0, r4
 8002884:	f7fe f94a 	bl	8000b1c <__aeabi_fsub>
 8002888:	4603      	mov	r3, r0
 800288a:	461a      	mov	r2, r3
 800288c:	4b34      	ldr	r3, [pc, #208]	; (8002960 <setIRAngle+0x134>)
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f7fe fa4d 	bl	8000d30 <__aeabi_fmul>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	4b32      	ldr	r3, [pc, #200]	; (8002964 <setIRAngle+0x138>)
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e054      	b.n	800294a <setIRAngle+0x11e>
	}
	else if (left > 600 && goal_angle == 0)
 80028a0:	492c      	ldr	r1, [pc, #176]	; (8002954 <setIRAngle+0x128>)
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fc00 	bl	80010a8 <__aeabi_fcmpgt>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d020      	beq.n	80028f0 <setIRAngle+0xc4>
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <setIRAngle+0x12c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f04f 0100 	mov.w	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fbce 	bl	8001058 <__aeabi_fcmpeq>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <setIRAngle+0xc4>
	{
		IRadjustment = (kPir2 * (left - goal_left));
 80028c2:	4b29      	ldr	r3, [pc, #164]	; (8002968 <setIRAngle+0x13c>)
 80028c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe f9dd 	bl	8000c88 <__aeabi_i2f>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe f922 	bl	8000b1c <__aeabi_fsub>
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	4b23      	ldr	r3, [pc, #140]	; (800296c <setIRAngle+0x140>)
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f7fe fa25 	bl	8000d30 <__aeabi_fmul>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <setIRAngle+0x138>)
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e02c      	b.n	800294a <setIRAngle+0x11e>
	}
	else if (right > 600 && goal_angle == 0)
 80028f0:	4918      	ldr	r1, [pc, #96]	; (8002954 <setIRAngle+0x128>)
 80028f2:	6838      	ldr	r0, [r7, #0]
 80028f4:	f7fe fbd8 	bl	80010a8 <__aeabi_fcmpgt>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <setIRAngle+0x114>
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <setIRAngle+0x12c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fba6 	bl	8001058 <__aeabi_fcmpeq>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <setIRAngle+0x114>
	{
		IRadjustment = (kPir2 * (goal_right - right));
 8002912:	4b17      	ldr	r3, [pc, #92]	; (8002970 <setIRAngle+0x144>)
 8002914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe f9b5 	bl	8000c88 <__aeabi_i2f>
 800291e:	4603      	mov	r3, r0
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe f8fa 	bl	8000b1c <__aeabi_fsub>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <setIRAngle+0x140>)
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f7fe f9fd 	bl	8000d30 <__aeabi_fmul>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <setIRAngle+0x138>)
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e004      	b.n	800294a <setIRAngle+0x11e>
	}
	else
		IRadjustment = 0;
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <setIRAngle+0x138>)
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bd90      	pop	{r4, r7, pc}
 8002952:	bf00      	nop
 8002954:	44160000 	.word	0x44160000
 8002958:	200003b8 	.word	0x200003b8
 800295c:	200003bc 	.word	0x200003bc
 8002960:	3d75c28f 	.word	0x3d75c28f
 8002964:	2000048c 	.word	0x2000048c
 8002968:	2000038c 	.word	0x2000038c
 800296c:	3d4ccccd 	.word	0x3d4ccccd
 8002970:	2000038e 	.word	0x2000038e

08002974 <accelerateLeftPWM>:

float accelerateLeftPWM() {
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
//	if (derivative > velocity_left * 34.0)
//		return left_PWM_value - xacceleration;
//
//	return left_PWM_value;

}
 8002978:	bf00      	nop
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <accelerateRightPWM>:

float accelerateRightPWM() {
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
//	if (derivative > velocity_right * 34.0)
//		return right_PWM_value - xacceleration;
//
//	return right_PWM_value;

}
 8002986:	bf00      	nop
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <PDController>:

void PDController() {
 8002990:	b5b0      	push	{r4, r5, r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0

//////////////////////////	CALCULATE DISTANCE AND ANGLE CORRECTION /////////////////////////

	if (state == TURNING)
 8002996:	4ba4      	ldr	r3, [pc, #656]	; (8002c28 <PDController+0x298>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d103      	bne.n	80029a6 <PDController+0x16>
		IRadjustment = 0;
 800299e:	4ba3      	ldr	r3, [pc, #652]	; (8002c2c <PDController+0x29c>)
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]

	float adjustedAngle = goal_angle + IRadjustment;
 80029a6:	4ba2      	ldr	r3, [pc, #648]	; (8002c30 <PDController+0x2a0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4aa0      	ldr	r2, [pc, #640]	; (8002c2c <PDController+0x29c>)
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe f8b5 	bl	8000b20 <__addsf3>
 80029b6:	4603      	mov	r3, r0
 80029b8:	607b      	str	r3, [r7, #4]

	angleError = adjustedAngle - (getLeftEncoderCounts() - getRightEncoderCounts());
 80029ba:	f7fe fdcf 	bl	800155c <getLeftEncoderCounts>
 80029be:	4603      	mov	r3, r0
 80029c0:	461c      	mov	r4, r3
 80029c2:	f7fe fdbd 	bl	8001540 <getRightEncoderCounts>
 80029c6:	4603      	mov	r3, r0
 80029c8:	1ae3      	subs	r3, r4, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe f95c 	bl	8000c88 <__aeabi_i2f>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4619      	mov	r1, r3
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7fe f8a1 	bl	8000b1c <__aeabi_fsub>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	4b95      	ldr	r3, [pc, #596]	; (8002c34 <PDController+0x2a4>)
 80029e0:	601a      	str	r2, [r3, #0]
	angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 80029e2:	4a95      	ldr	r2, [pc, #596]	; (8002c38 <PDController+0x2a8>)
 80029e4:	4b93      	ldr	r3, [pc, #588]	; (8002c34 <PDController+0x2a4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4619      	mov	r1, r3
 80029ea:	4610      	mov	r0, r2
 80029ec:	f7fe f9a0 	bl	8000d30 <__aeabi_fmul>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461c      	mov	r4, r3
 80029f4:	4b8f      	ldr	r3, [pc, #572]	; (8002c34 <PDController+0x2a4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a90      	ldr	r2, [pc, #576]	; (8002c3c <PDController+0x2ac>)
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe f88c 	bl	8000b1c <__aeabi_fsub>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b8d      	ldr	r3, [pc, #564]	; (8002c40 <PDController+0x2b0>)
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	f7fe f98f 	bl	8000d30 <__aeabi_fmul>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4619      	mov	r1, r3
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7fe f882 	bl	8000b20 <__addsf3>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <PDController+0x2b4>)
 8002a22:	601a      	str	r2, [r3, #0]

	distanceError = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts())/2);
 8002a24:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <PDController+0x2b8>)
 8002a26:	681c      	ldr	r4, [r3, #0]
 8002a28:	f7fe fd98 	bl	800155c <getLeftEncoderCounts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461d      	mov	r5, r3
 8002a30:	f7fe fd86 	bl	8001540 <getRightEncoderCounts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	442b      	add	r3, r5
 8002a38:	0fda      	lsrs	r2, r3, #31
 8002a3a:	4413      	add	r3, r2
 8002a3c:	105b      	asrs	r3, r3, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe f922 	bl	8000c88 <__aeabi_i2f>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4619      	mov	r1, r3
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7fe f867 	bl	8000b1c <__aeabi_fsub>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b7e      	ldr	r3, [pc, #504]	; (8002c4c <PDController+0x2bc>)
 8002a54:	601a      	str	r2, [r3, #0]

	distanceCorrection = kPx * distanceError + kDx * (distanceError - oldDistanceError);
 8002a56:	4a7e      	ldr	r2, [pc, #504]	; (8002c50 <PDController+0x2c0>)
 8002a58:	4b7c      	ldr	r3, [pc, #496]	; (8002c4c <PDController+0x2bc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f7fe f966 	bl	8000d30 <__aeabi_fmul>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461c      	mov	r4, r3
 8002a68:	4b78      	ldr	r3, [pc, #480]	; (8002c4c <PDController+0x2bc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a79      	ldr	r2, [pc, #484]	; (8002c54 <PDController+0x2c4>)
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe f852 	bl	8000b1c <__aeabi_fsub>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f7fe f954 	bl	8000d30 <__aeabi_fmul>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f7fe f847 	bl	8000b20 <__addsf3>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b70      	ldr	r3, [pc, #448]	; (8002c58 <PDController+0x2c8>)
 8002a98:	601a      	str	r2, [r3, #0]

	left_distance = getLeftEncoderCounts();
 8002a9a:	f7fe fd5f 	bl	800155c <getLeftEncoderCounts>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe f8f1 	bl	8000c88 <__aeabi_i2f>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4a6c      	ldr	r2, [pc, #432]	; (8002c5c <PDController+0x2cc>)
 8002aaa:	6013      	str	r3, [r2, #0]
	right_distance = getRightEncoderCounts();
 8002aac:	f7fe fd48 	bl	8001540 <getRightEncoderCounts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe f8e8 	bl	8000c88 <__aeabi_i2f>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a69      	ldr	r2, [pc, #420]	; (8002c60 <PDController+0x2d0>)
 8002abc:	6013      	str	r3, [r2, #0]

	if (state == MOVING && fabs(distanceError) > 100)
 8002abe:	4b5a      	ldr	r3, [pc, #360]	; (8002c28 <PDController+0x298>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d13f      	bne.n	8002b46 <PDController+0x1b6>
 8002ac6:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <PDController+0x2bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ace:	4965      	ldr	r1, [pc, #404]	; (8002c64 <PDController+0x2d4>)
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe fae9 	bl	80010a8 <__aeabi_fcmpgt>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d034      	beq.n	8002b46 <PDController+0x1b6>
	{		// If we're going straight and not at the end, apply acceleration
		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 8002adc:	4b5e      	ldr	r3, [pc, #376]	; (8002c58 <PDController+0x2c8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a61      	ldr	r2, [pc, #388]	; (8002c68 <PDController+0x2d8>)
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe f818 	bl	8000b1c <__aeabi_fsub>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002af2:	4a57      	ldr	r2, [pc, #348]	; (8002c50 <PDController+0x2c0>)
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fad6 	bl	80010a8 <__aeabi_fcmpgt>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d021      	beq.n	8002b46 <PDController+0x1b6>
		{
			distanceCorrection = oldDistanceCorrection + (xacceleration * sign(distanceCorrection - oldDistanceCorrection));
 8002b02:	4b55      	ldr	r3, [pc, #340]	; (8002c58 <PDController+0x2c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <PDController+0x2d8>)
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe f805 	bl	8000b1c <__aeabi_fsub>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f001 fd6d 	bl	80045f4 <sign>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe f8b3 	bl	8000c88 <__aeabi_i2f>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4a4a      	ldr	r2, [pc, #296]	; (8002c50 <PDController+0x2c0>)
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe f901 	bl	8000d30 <__aeabi_fmul>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b4d      	ldr	r3, [pc, #308]	; (8002c68 <PDController+0x2d8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4619      	mov	r1, r3
 8002b38:	4610      	mov	r0, r2
 8002b3a:	f7fd fff1 	bl	8000b20 <__addsf3>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b45      	ldr	r3, [pc, #276]	; (8002c58 <PDController+0x2c8>)
 8002b44:	601a      	str	r2, [r3, #0]
		}
	}

////////////////////// ROUND DISTANCE OR ANGLE CORRECTION	//////////////////////////

	switch(state) {		// Apply lower limits of PWM for various states
 8002b46:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <PDController+0x298>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	f200 80bf 	bhi.w	8002cd0 <PDController+0x340>
 8002b52:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <PDController+0x1c8>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002b95 	.word	0x08002b95
 8002b5c:	08002bf7 	.word	0x08002bf7
 8002b60:	08002b6d 	.word	0x08002b6d
 8002b64:	08002cd1 	.word	0x08002cd1
 8002b68:	08002cb3 	.word	0x08002cb3
		case EXPLORING:
			distanceCorrection = (accelerateLeftPWM() + accelerateRightPWM())/2;
 8002b6c:	f7ff ff02 	bl	8002974 <accelerateLeftPWM>
 8002b70:	4604      	mov	r4, r0
 8002b72:	f7ff ff06 	bl	8002982 <accelerateRightPWM>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7fd ffd0 	bl	8000b20 <__addsf3>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe f986 	bl	8000e98 <__aeabi_fdiv>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <PDController+0x2c8>)
 8002b92:	601a      	str	r2, [r3, #0]
		case MOVING:
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 8002b94:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <PDController+0x2c8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fc77 	bl	8000490 <__aeabi_f2d>
 8002ba2:	a31d      	add	r3, pc, #116	; (adr r3, 8002c18 <PDController+0x288>)
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f7fd ff5a 	bl	8000a60 <__aeabi_dcmpgt>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d100      	bne.n	8002bb4 <PDController+0x224>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
			break;
 8002bb2:	e08e      	b.n	8002cd2 <PDController+0x342>
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <PDController+0x2c8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bbc:	4a2b      	ldr	r2, [pc, #172]	; (8002c6c <PDController+0x2dc>)
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe fa53 	bl	800106c <__aeabi_fcmplt>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d100      	bne.n	8002bce <PDController+0x23e>
			break;
 8002bcc:	e081      	b.n	8002cd2 <PDController+0x342>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <PDController+0x2c8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 fd0e 	bl	80045f4 <sign>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe f854 	bl	8000c88 <__aeabi_i2f>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <PDController+0x2dc>)
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe f8a2 	bl	8000d30 <__aeabi_fmul>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <PDController+0x2c8>)
 8002bf2:	601a      	str	r2, [r3, #0]
			break;
 8002bf4:	e06d      	b.n	8002cd2 <PDController+0x342>
		case TURNING:
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <PDController+0x2b4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fc46 	bl	8000490 <__aeabi_f2d>
 8002c04:	a306      	add	r3, pc, #24	; (adr r3, 8002c20 <PDController+0x290>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	f7fd ff29 	bl	8000a60 <__aeabi_dcmpgt>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d12d      	bne.n	8002c70 <PDController+0x2e0>
				angleCorrection = sign(angleCorrection) * PWMMinw;
			break;
 8002c14:	e05d      	b.n	8002cd2 <PDController+0x342>
 8002c16:	bf00      	nop
 8002c18:	eb851eb8 	.word	0xeb851eb8
 8002c1c:	3f9eb851 	.word	0x3f9eb851
 8002c20:	47ae147b 	.word	0x47ae147b
 8002c24:	3f847ae1 	.word	0x3f847ae1
 8002c28:	20000490 	.word	0x20000490
 8002c2c:	2000048c 	.word	0x2000048c
 8002c30:	200003b8 	.word	0x200003b8
 8002c34:	200003c0 	.word	0x200003c0
 8002c38:	3b23d70a 	.word	0x3b23d70a
 8002c3c:	200003c4 	.word	0x200003c4
 8002c40:	3b656042 	.word	0x3b656042
 8002c44:	200003f0 	.word	0x200003f0
 8002c48:	200003b4 	.word	0x200003b4
 8002c4c:	200003f4 	.word	0x200003f4
 8002c50:	3a83126f 	.word	0x3a83126f
 8002c54:	200003f8 	.word	0x200003f8
 8002c58:	20000424 	.word	0x20000424
 8002c5c:	2000042c 	.word	0x2000042c
 8002c60:	2000045c 	.word	0x2000045c
 8002c64:	42c80000 	.word	0x42c80000
 8002c68:	20000428 	.word	0x20000428
 8002c6c:	3ea3d70a 	.word	0x3ea3d70a
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 8002c70:	4b4e      	ldr	r3, [pc, #312]	; (8002dac <PDController+0x41c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c78:	4a4d      	ldr	r2, [pc, #308]	; (8002db0 <PDController+0x420>)
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe f9f5 	bl	800106c <__aeabi_fcmplt>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d100      	bne.n	8002c8a <PDController+0x2fa>
			break;
 8002c88:	e023      	b.n	8002cd2 <PDController+0x342>
				angleCorrection = sign(angleCorrection) * PWMMinw;
 8002c8a:	4b48      	ldr	r3, [pc, #288]	; (8002dac <PDController+0x41c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 fcb0 	bl	80045f4 <sign>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fff6 	bl	8000c88 <__aeabi_i2f>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4a44      	ldr	r2, [pc, #272]	; (8002db0 <PDController+0x420>)
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe f844 	bl	8000d30 <__aeabi_fmul>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b3f      	ldr	r3, [pc, #252]	; (8002dac <PDController+0x41c>)
 8002cae:	601a      	str	r2, [r3, #0]
			break;
 8002cb0:	e00f      	b.n	8002cd2 <PDController+0x342>
		case CURVING:
			if (fabs(distanceError) < 60)
 8002cb2:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <PDController+0x424>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cba:	493f      	ldr	r1, [pc, #252]	; (8002db8 <PDController+0x428>)
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe f9d5 	bl	800106c <__aeabi_fcmplt>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d100      	bne.n	8002cca <PDController+0x33a>
				setState(REST);
		default:
			break;
 8002cc8:	e002      	b.n	8002cd0 <PDController+0x340>
				setState(REST);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7ff fd6c 	bl	80027a8 <setState>
			break;
 8002cd0:	bf00      	nop
	}

	if (fabs(distanceCorrection) > PWMMaxx)		// Upper Limit for PWM
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <PDController+0x42c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cda:	4a39      	ldr	r2, [pc, #228]	; (8002dc0 <PDController+0x430>)
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe f9e2 	bl	80010a8 <__aeabi_fcmpgt>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d012      	beq.n	8002d10 <PDController+0x380>
		distanceCorrection = sign(distanceCorrection) * PWMMaxx;
 8002cea:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <PDController+0x42c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fc80 	bl	80045f4 <sign>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd ffc6 	bl	8000c88 <__aeabi_i2f>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4a30      	ldr	r2, [pc, #192]	; (8002dc0 <PDController+0x430>)
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe f814 	bl	8000d30 <__aeabi_fmul>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <PDController+0x42c>)
 8002d0e:	601a      	str	r2, [r3, #0]

	if (fabs(angleCorrection) > PWMMaxw)
 8002d10:	4b26      	ldr	r3, [pc, #152]	; (8002dac <PDController+0x41c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d18:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <PDController+0x420>)
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe f9c3 	bl	80010a8 <__aeabi_fcmpgt>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <PDController+0x3be>
		angleCorrection = sign(angleCorrection) * PWMMaxw;
 8002d28:	4b20      	ldr	r3, [pc, #128]	; (8002dac <PDController+0x41c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f001 fc61 	bl	80045f4 <sign>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd ffa7 	bl	8000c88 <__aeabi_i2f>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a1c      	ldr	r2, [pc, #112]	; (8002db0 <PDController+0x420>)
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fff5 	bl	8000d30 <__aeabi_fmul>
 8002d46:	4603      	mov	r3, r0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <PDController+0x41c>)
 8002d4c:	601a      	str	r2, [r3, #0]

	if (state == ACCELERATING || state == CURVING)
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <PDController+0x434>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d003      	beq.n	8002d5e <PDController+0x3ce>
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <PDController+0x434>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b05      	cmp	r3, #5
 8002d5c:	d10a      	bne.n	8002d74 <PDController+0x3e4>
	{
		left_PWM_value = accelerateLeftPWM();
 8002d5e:	f7ff fe09 	bl	8002974 <accelerateLeftPWM>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <PDController+0x438>)
 8002d66:	6013      	str	r3, [r2, #0]
		right_PWM_value = accelerateRightPWM();
 8002d68:	f7ff fe0b 	bl	8002982 <accelerateRightPWM>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <PDController+0x43c>)
 8002d70:	6013      	str	r3, [r2, #0]
		return;
 8002d72:	e017      	b.n	8002da4 <PDController+0x414>
	}

	left_PWM_value = (distanceCorrection + angleCorrection);
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <PDController+0x42c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <PDController+0x41c>)
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fece 	bl	8000b20 <__addsf3>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <PDController+0x438>)
 8002d8a:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distanceCorrection - angleCorrection);
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <PDController+0x42c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a06      	ldr	r2, [pc, #24]	; (8002dac <PDController+0x41c>)
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fec0 	bl	8000b1c <__aeabi_fsub>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <PDController+0x43c>)
 8002da2:	601a      	str	r2, [r3, #0]

}
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bdb0      	pop	{r4, r5, r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200003f0 	.word	0x200003f0
 8002db0:	3ea3d70a 	.word	0x3ea3d70a
 8002db4:	200003f4 	.word	0x200003f4
 8002db8:	42700000 	.word	0x42700000
 8002dbc:	20000424 	.word	0x20000424
 8002dc0:	3f266666 	.word	0x3f266666
 8002dc4:	20000490 	.word	0x20000490
 8002dc8:	20000494 	.word	0x20000494
 8002dcc:	20000498 	.word	0x20000498

08002dd0 <updatePID>:

void updatePID() {
 8002dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0

///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldAngleError = oldAngleErrors[9];
 8002dd8:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <updatePID+0x130>)
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	4a49      	ldr	r2, [pc, #292]	; (8002f04 <updatePID+0x134>)
 8002dde:	6013      	str	r3, [r2, #0]
	oldDistanceError = oldDistanceErrors[9];
 8002de0:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <updatePID+0x138>)
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	4a49      	ldr	r2, [pc, #292]	; (8002f0c <updatePID+0x13c>)
 8002de6:	6013      	str	r3, [r2, #0]
	old_left_distance = old_left_distances[9];
 8002de8:	4b49      	ldr	r3, [pc, #292]	; (8002f10 <updatePID+0x140>)
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	4a49      	ldr	r2, [pc, #292]	; (8002f14 <updatePID+0x144>)
 8002dee:	6013      	str	r3, [r2, #0]
	old_right_distance = old_right_distances[9];
 8002df0:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <updatePID+0x148>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	4a49      	ldr	r2, [pc, #292]	; (8002f1c <updatePID+0x14c>)
 8002df6:	6013      	str	r3, [r2, #0]

//////////////////////	CALCULATE MOTOR PWM VALUES	/////////////////////

	PDController();
 8002df8:	f7ff fdca 	bl	8002990 <PDController>

////////////////////	NORMALIZE LEFT AND RIGHT PWM VALUES ////////////////

	// Apply lower PWM limits for small adjustments
	if (state == REST || state == ACCELERATING || fabs(distanceError) < 60 || fabs (angleError) < 60)
 8002dfc:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <updatePID+0x150>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01a      	beq.n	8002e3a <updatePID+0x6a>
 8002e04:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <updatePID+0x150>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d016      	beq.n	8002e3a <updatePID+0x6a>
 8002e0c:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <updatePID+0x154>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e14:	4944      	ldr	r1, [pc, #272]	; (8002f28 <updatePID+0x158>)
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f928 	bl	800106c <__aeabi_fcmplt>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <updatePID+0x6a>
 8002e22:	4b42      	ldr	r3, [pc, #264]	; (8002f2c <updatePID+0x15c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e2a:	493f      	ldr	r1, [pc, #252]	; (8002f28 <updatePID+0x158>)
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe f91d 	bl	800106c <__aeabi_fcmplt>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8081 	beq.w	8002f3c <updatePID+0x16c>
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 8002e3a:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <updatePID+0x160>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd fb24 	bl	8000490 <__aeabi_f2d>
 8002e48:	a32b      	add	r3, pc, #172	; (adr r3, 8002ef8 <updatePID+0x128>)
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	f7fd fe07 	bl	8000a60 <__aeabi_dcmpgt>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01e      	beq.n	8002e96 <updatePID+0xc6>
 8002e58:	4b35      	ldr	r3, [pc, #212]	; (8002f30 <updatePID+0x160>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e60:	4a34      	ldr	r2, [pc, #208]	; (8002f34 <updatePID+0x164>)
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe f901 	bl	800106c <__aeabi_fcmplt>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d012      	beq.n	8002e96 <updatePID+0xc6>
		{
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 8002e70:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <updatePID+0x160>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 fbbd 	bl	80045f4 <sign>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd ff03 	bl	8000c88 <__aeabi_i2f>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4a2b      	ldr	r2, [pc, #172]	; (8002f34 <updatePID+0x164>)
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd ff51 	bl	8000d30 <__aeabi_fmul>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <updatePID+0x160>)
 8002e94:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 8002e96:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <updatePID+0x168>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd faf6 	bl	8000490 <__aeabi_f2d>
 8002ea4:	a314      	add	r3, pc, #80	; (adr r3, 8002ef8 <updatePID+0x128>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fdd9 	bl	8000a60 <__aeabi_dcmpgt>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8113 	beq.w	80030dc <updatePID+0x30c>
 8002eb6:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <updatePID+0x168>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <updatePID+0x164>)
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe f8d2 	bl	800106c <__aeabi_fcmplt>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d100      	bne.n	8002ed0 <updatePID+0x100>
 8002ece:	e105      	b.n	80030dc <updatePID+0x30c>
		{
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <updatePID+0x168>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 fb8d 	bl	80045f4 <sign>
 8002eda:	4603      	mov	r3, r0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fed3 	bl	8000c88 <__aeabi_i2f>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <updatePID+0x164>)
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd ff21 	bl	8000d30 <__aeabi_fmul>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <updatePID+0x168>)
 8002ef4:	601a      	str	r2, [r3, #0]
		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 8002ef6:	e0f1      	b.n	80030dc <updatePID+0x30c>
 8002ef8:	47ae147b 	.word	0x47ae147b
 8002efc:	3f847ae1 	.word	0x3f847ae1
 8002f00:	200003c8 	.word	0x200003c8
 8002f04:	200003c4 	.word	0x200003c4
 8002f08:	200003fc 	.word	0x200003fc
 8002f0c:	200003f8 	.word	0x200003f8
 8002f10:	20000434 	.word	0x20000434
 8002f14:	20000430 	.word	0x20000430
 8002f18:	20000464 	.word	0x20000464
 8002f1c:	20000460 	.word	0x20000460
 8002f20:	20000490 	.word	0x20000490
 8002f24:	200003f4 	.word	0x200003f4
 8002f28:	42700000 	.word	0x42700000
 8002f2c:	200003c0 	.word	0x200003c0
 8002f30:	20000494 	.word	0x20000494
 8002f34:	3e99999a 	.word	0x3e99999a
 8002f38:	20000498 	.word	0x20000498
		}
	}
	else	// If under PWM limits, normalize values
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 8002f3c:	4bb0      	ldr	r3, [pc, #704]	; (8003200 <updatePID+0x430>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd faa3 	bl	8000490 <__aeabi_f2d>
 8002f4a:	a3a9      	add	r3, pc, #676	; (adr r3, 80031f0 <updatePID+0x420>)
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f7fd fd86 	bl	8000a60 <__aeabi_dcmpgt>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d058      	beq.n	800300c <updatePID+0x23c>
 8002f5a:	4ba9      	ldr	r3, [pc, #676]	; (8003200 <updatePID+0x430>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f62:	4aa8      	ldr	r2, [pc, #672]	; (8003204 <updatePID+0x434>)
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe f880 	bl	800106c <__aeabi_fcmplt>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d04c      	beq.n	800300c <updatePID+0x23c>
		{
			right_PWM_value = right_PWM_value - (sign(right_PWM_value) * (PWMMin - fabs(left_PWM_value)));
 8002f72:	4ba5      	ldr	r3, [pc, #660]	; (8003208 <updatePID+0x438>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fa8a 	bl	8000490 <__aeabi_f2d>
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	460d      	mov	r5, r1
 8002f80:	4ba1      	ldr	r3, [pc, #644]	; (8003208 <updatePID+0x438>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 fb35 	bl	80045f4 <sign>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fa6d 	bl	800046c <__aeabi_i2d>
 8002f92:	4680      	mov	r8, r0
 8002f94:	4689      	mov	r9, r1
 8002f96:	4b9b      	ldr	r3, [pc, #620]	; (8003204 <updatePID+0x434>)
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fa79 	bl	8000490 <__aeabi_f2d>
 8002f9e:	4682      	mov	sl, r0
 8002fa0:	468b      	mov	fp, r1
 8002fa2:	4b97      	ldr	r3, [pc, #604]	; (8003200 <updatePID+0x430>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fa70 	bl	8000490 <__aeabi_f2d>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4650      	mov	r0, sl
 8002fb6:	4659      	mov	r1, fp
 8002fb8:	f7fd f90a 	bl	80001d0 <__aeabi_dsub>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4640      	mov	r0, r8
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	f7fd fabc 	bl	8000540 <__aeabi_dmul>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4620      	mov	r0, r4
 8002fce:	4629      	mov	r1, r5
 8002fd0:	f7fd f8fe 	bl	80001d0 <__aeabi_dsub>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f7fd fd4a 	bl	8000a74 <__aeabi_d2f>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4a89      	ldr	r2, [pc, #548]	; (8003208 <updatePID+0x438>)
 8002fe4:	6013      	str	r3, [r2, #0]
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 8002fe6:	4b86      	ldr	r3, [pc, #536]	; (8003200 <updatePID+0x430>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 fb02 	bl	80045f4 <sign>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fe48 	bl	8000c88 <__aeabi_i2f>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4a82      	ldr	r2, [pc, #520]	; (8003204 <updatePID+0x434>)
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fe96 	bl	8000d30 <__aeabi_fmul>
 8003004:	4603      	mov	r3, r0
 8003006:	461a      	mov	r2, r3
 8003008:	4b7d      	ldr	r3, [pc, #500]	; (8003200 <updatePID+0x430>)
 800300a:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 800300c:	4b7e      	ldr	r3, [pc, #504]	; (8003208 <updatePID+0x438>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd fa3b 	bl	8000490 <__aeabi_f2d>
 800301a:	a375      	add	r3, pc, #468	; (adr r3, 80031f0 <updatePID+0x420>)
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	f7fd fd1e 	bl	8000a60 <__aeabi_dcmpgt>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d058      	beq.n	80030dc <updatePID+0x30c>
 800302a:	4b77      	ldr	r3, [pc, #476]	; (8003208 <updatePID+0x438>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003032:	4a74      	ldr	r2, [pc, #464]	; (8003204 <updatePID+0x434>)
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe f818 	bl	800106c <__aeabi_fcmplt>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d04c      	beq.n	80030dc <updatePID+0x30c>
		{
			left_PWM_value = left_PWM_value - (sign(left_PWM_value) * (PWMMin - fabs(right_PWM_value)));
 8003042:	4b6f      	ldr	r3, [pc, #444]	; (8003200 <updatePID+0x430>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fa22 	bl	8000490 <__aeabi_f2d>
 800304c:	4604      	mov	r4, r0
 800304e:	460d      	mov	r5, r1
 8003050:	4b6b      	ldr	r3, [pc, #428]	; (8003200 <updatePID+0x430>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f001 facd 	bl	80045f4 <sign>
 800305a:	4603      	mov	r3, r0
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa05 	bl	800046c <__aeabi_i2d>
 8003062:	4680      	mov	r8, r0
 8003064:	4689      	mov	r9, r1
 8003066:	4b67      	ldr	r3, [pc, #412]	; (8003204 <updatePID+0x434>)
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa11 	bl	8000490 <__aeabi_f2d>
 800306e:	4682      	mov	sl, r0
 8003070:	468b      	mov	fp, r1
 8003072:	4b65      	ldr	r3, [pc, #404]	; (8003208 <updatePID+0x438>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fa08 	bl	8000490 <__aeabi_f2d>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4650      	mov	r0, sl
 8003086:	4659      	mov	r1, fp
 8003088:	f7fd f8a2 	bl	80001d0 <__aeabi_dsub>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4640      	mov	r0, r8
 8003092:	4649      	mov	r1, r9
 8003094:	f7fd fa54 	bl	8000540 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4620      	mov	r0, r4
 800309e:	4629      	mov	r1, r5
 80030a0:	f7fd f896 	bl	80001d0 <__aeabi_dsub>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	f7fd fce2 	bl	8000a74 <__aeabi_d2f>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4a53      	ldr	r2, [pc, #332]	; (8003200 <updatePID+0x430>)
 80030b4:	6013      	str	r3, [r2, #0]
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 80030b6:	4b54      	ldr	r3, [pc, #336]	; (8003208 <updatePID+0x438>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 fa9a 	bl	80045f4 <sign>
 80030c0:	4603      	mov	r3, r0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fde0 	bl	8000c88 <__aeabi_i2f>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4a4e      	ldr	r2, [pc, #312]	; (8003204 <updatePID+0x434>)
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fe2e 	bl	8000d30 <__aeabi_fmul>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <updatePID+0x438>)
 80030da:	601a      	str	r2, [r3, #0]
		}
	}

	if (fabs(left_PWM_value) > PWM_MAX)
 80030dc:	4b48      	ldr	r3, [pc, #288]	; (8003200 <updatePID+0x430>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd f9d3 	bl	8000490 <__aeabi_f2d>
 80030ea:	a343      	add	r3, pc, #268	; (adr r3, 80031f8 <updatePID+0x428>)
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f7fd fcb6 	bl	8000a60 <__aeabi_dcmpgt>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <updatePID+0x358>
	{
		left_PWM_value = sign(left_PWM_value) * PWM_MAX;
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <updatePID+0x430>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 fa78 	bl	80045f4 <sign>
 8003104:	4603      	mov	r3, r0
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd f9b0 	bl	800046c <__aeabi_i2d>
 800310c:	a33a      	add	r3, pc, #232	; (adr r3, 80031f8 <updatePID+0x428>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd fa15 	bl	8000540 <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	f7fd fca9 	bl	8000a74 <__aeabi_d2f>
 8003122:	4603      	mov	r3, r0
 8003124:	4a36      	ldr	r2, [pc, #216]	; (8003200 <updatePID+0x430>)
 8003126:	6013      	str	r3, [r2, #0]
	}

	if (fabs(right_PWM_value) > PWM_MAX)
 8003128:	4b37      	ldr	r3, [pc, #220]	; (8003208 <updatePID+0x438>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd f9ad 	bl	8000490 <__aeabi_f2d>
 8003136:	a330      	add	r3, pc, #192	; (adr r3, 80031f8 <updatePID+0x428>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd fc90 	bl	8000a60 <__aeabi_dcmpgt>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d016      	beq.n	8003174 <updatePID+0x3a4>
	{
		right_PWM_value = sign(right_PWM_value) * PWM_MAX;
 8003146:	4b30      	ldr	r3, [pc, #192]	; (8003208 <updatePID+0x438>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f001 fa52 	bl	80045f4 <sign>
 8003150:	4603      	mov	r3, r0
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f98a 	bl	800046c <__aeabi_i2d>
 8003158:	a327      	add	r3, pc, #156	; (adr r3, 80031f8 <updatePID+0x428>)
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	f7fd f9ef 	bl	8000540 <__aeabi_dmul>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	f7fd fc83 	bl	8000a74 <__aeabi_d2f>
 800316e:	4603      	mov	r3, r0
 8003170:	4a25      	ldr	r2, [pc, #148]	; (8003208 <updatePID+0x438>)
 8003172:	6013      	str	r3, [r2, #0]



//////////////////	SET PWM VALUES AND CHECK FOR GOAL REACHED ////////////////////////

	setMotorLPWM(left_PWM_value);
 8003174:	4b22      	ldr	r3, [pc, #136]	; (8003200 <updatePID+0x430>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fa69 	bl	8002650 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 800317e:	4b22      	ldr	r3, [pc, #136]	; (8003208 <updatePID+0x438>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff faa0 	bl	80026c8 <setMotorRPWM>

	if(angleError < 30 && angleError > -30 && distanceError < 30 && distanceError > -30)
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <updatePID+0x43c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4920      	ldr	r1, [pc, #128]	; (8003210 <updatePID+0x440>)
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd ff6c 	bl	800106c <__aeabi_fcmplt>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d020      	beq.n	80031dc <updatePID+0x40c>
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <updatePID+0x43c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	491d      	ldr	r1, [pc, #116]	; (8003214 <updatePID+0x444>)
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd ff81 	bl	80010a8 <__aeabi_fcmpgt>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d017      	beq.n	80031dc <updatePID+0x40c>
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <updatePID+0x448>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4917      	ldr	r1, [pc, #92]	; (8003210 <updatePID+0x440>)
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd ff5a 	bl	800106c <__aeabi_fcmplt>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00e      	beq.n	80031dc <updatePID+0x40c>
 80031be:	4b16      	ldr	r3, [pc, #88]	; (8003218 <updatePID+0x448>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4914      	ldr	r1, [pc, #80]	; (8003214 <updatePID+0x444>)
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd ff6f 	bl	80010a8 <__aeabi_fcmpgt>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <updatePID+0x40c>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <updatePID+0x44c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	4a11      	ldr	r2, [pc, #68]	; (800321c <updatePID+0x44c>)
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e002      	b.n	80031e2 <updatePID+0x412>

	else
		goal_reached_timer = 0;
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <updatePID+0x44c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]

///////////////////// UPDATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldDistanceCorrection = distanceCorrection;
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <updatePID+0x450>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a0f      	ldr	r2, [pc, #60]	; (8003224 <updatePID+0x454>)
 80031e8:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 80031ea:	2309      	movs	r3, #9
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	e027      	b.n	8003240 <updatePID+0x470>
 80031f0:	47ae147b 	.word	0x47ae147b
 80031f4:	3f847ae1 	.word	0x3f847ae1
 80031f8:	66666666 	.word	0x66666666
 80031fc:	3fee6666 	.word	0x3fee6666
 8003200:	20000494 	.word	0x20000494
 8003204:	3e99999a 	.word	0x3e99999a
 8003208:	20000498 	.word	0x20000498
 800320c:	200003c0 	.word	0x200003c0
 8003210:	41f00000 	.word	0x41f00000
 8003214:	c1f00000 	.word	0xc1f00000
 8003218:	200003f4 	.word	0x200003f4
 800321c:	2000049c 	.word	0x2000049c
 8003220:	20000424 	.word	0x20000424
 8003224:	20000428 	.word	0x20000428
		oldAngleErrors[i] = oldAngleErrors[i-1];	// Adds the newest angleError to array and shifts everything to the right
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3b01      	subs	r3, #1
 800322c:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <updatePID+0x50c>)
 800322e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003232:	492a      	ldr	r1, [pc, #168]	; (80032dc <updatePID+0x50c>)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3b01      	subs	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	dcf0      	bgt.n	8003228 <updatePID+0x458>
	oldAngleErrors[0] = angleError;
 8003246:	4b26      	ldr	r3, [pc, #152]	; (80032e0 <updatePID+0x510>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a24      	ldr	r2, [pc, #144]	; (80032dc <updatePID+0x50c>)
 800324c:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 800324e:	2309      	movs	r3, #9
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	e00b      	b.n	800326c <updatePID+0x49c>
		oldDistanceErrors[i] = oldDistanceErrors[i-1];	// Adds the newest distanceError to array and shifts everything right
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3b01      	subs	r3, #1
 8003258:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <updatePID+0x514>)
 800325a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800325e:	4921      	ldr	r1, [pc, #132]	; (80032e4 <updatePID+0x514>)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3b01      	subs	r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	dcf0      	bgt.n	8003254 <updatePID+0x484>
	oldDistanceErrors[0] = distanceError;
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <updatePID+0x518>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <updatePID+0x514>)
 8003278:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 800327a:	2309      	movs	r3, #9
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	e00b      	b.n	8003298 <updatePID+0x4c8>
		old_left_distances[i] = old_left_distances[i-1];
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	4a19      	ldr	r2, [pc, #100]	; (80032ec <updatePID+0x51c>)
 8003286:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800328a:	4918      	ldr	r1, [pc, #96]	; (80032ec <updatePID+0x51c>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3b01      	subs	r3, #1
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	dcf0      	bgt.n	8003280 <updatePID+0x4b0>
	old_left_distances[0] = left_distance;
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <updatePID+0x520>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <updatePID+0x51c>)
 80032a4:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 80032a6:	2309      	movs	r3, #9
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	e00b      	b.n	80032c4 <updatePID+0x4f4>
		old_right_distances[i] = old_right_distances[i-1];
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <updatePID+0x524>)
 80032b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032b6:	490f      	ldr	r1, [pc, #60]	; (80032f4 <updatePID+0x524>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	dcf0      	bgt.n	80032ac <updatePID+0x4dc>
	old_right_distances[0] = right_distance;
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <updatePID+0x528>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <updatePID+0x524>)
 80032d0:	6013      	str	r3, [r2, #0]

}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032dc:	200003c8 	.word	0x200003c8
 80032e0:	200003c0 	.word	0x200003c0
 80032e4:	200003fc 	.word	0x200003fc
 80032e8:	200003f4 	.word	0x200003f4
 80032ec:	20000434 	.word	0x20000434
 80032f0:	2000042c 	.word	0x2000042c
 80032f4:	20000464 	.word	0x20000464
 80032f8:	2000045c 	.word	0x2000045c

080032fc <PIDdone>:

int8_t PIDdone(){ // There is no bool type in C. True/False values are represented as 1 or 0.
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0

	if (goal_reached_timer >= 50)
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <PIDdone+0x20>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b31      	cmp	r3, #49	; 0x31
 8003306:	dd06      	ble.n	8003316 <PIDdone+0x1a>
	{
		resetPID();
 8003308:	f000 f80a 	bl	8003320 <resetPID>
		setState(REST);
 800330c:	2000      	movs	r0, #0
 800330e:	f7ff fa4b 	bl	80027a8 <setState>
		return 1;
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <PIDdone+0x1c>
	}
	else
		return 0;
 8003316:	2300      	movs	r3, #0

}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	2000049c 	.word	0x2000049c

08003320 <resetPID>:

void resetPID() {
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0

//////////////	RESET ALL ANGLE AND DISTANCE ERRORS TO 0	////////////////
	angleError = 0;
 8003326:	4b3f      	ldr	r3, [pc, #252]	; (8003424 <resetPID+0x104>)
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
	oldAngleError = 0;
 800332e:	4b3e      	ldr	r3, [pc, #248]	; (8003428 <resetPID+0x108>)
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
	angleCorrection = 0;
 8003336:	4b3d      	ldr	r3, [pc, #244]	; (800342c <resetPID+0x10c>)
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	e008      	b.n	8003356 <resetPID+0x36>
		oldAngleErrors[i] = 0;
 8003344:	4a3a      	ldr	r2, [pc, #232]	; (8003430 <resetPID+0x110>)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f04f 0100 	mov.w	r1, #0
 800334c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3301      	adds	r3, #1
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b09      	cmp	r3, #9
 800335a:	ddf3      	ble.n	8003344 <resetPID+0x24>

	distanceError = 0;
 800335c:	4b35      	ldr	r3, [pc, #212]	; (8003434 <resetPID+0x114>)
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
	oldDistanceError = 0;
 8003364:	4b34      	ldr	r3, [pc, #208]	; (8003438 <resetPID+0x118>)
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
	distanceCorrection = 0;
 800336c:	4b33      	ldr	r3, [pc, #204]	; (800343c <resetPID+0x11c>)
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	e008      	b.n	800338c <resetPID+0x6c>
		oldDistanceErrors[i] = 0;
 800337a:	4a31      	ldr	r2, [pc, #196]	; (8003440 <resetPID+0x120>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3301      	adds	r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b09      	cmp	r3, #9
 8003390:	ddf3      	ble.n	800337a <resetPID+0x5a>

	left_distance = 0;
 8003392:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <resetPID+0x124>)
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
	old_left_distance = 0;
 800339a:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <resetPID+0x128>)
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	e008      	b.n	80033ba <resetPID+0x9a>
		old_left_distances[i] = 0;
 80033a8:	4a28      	ldr	r2, [pc, #160]	; (800344c <resetPID+0x12c>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f04f 0100 	mov.w	r1, #0
 80033b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3301      	adds	r3, #1
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b09      	cmp	r3, #9
 80033be:	ddf3      	ble.n	80033a8 <resetPID+0x88>

	right_distance = 0;
 80033c0:	4b23      	ldr	r3, [pc, #140]	; (8003450 <resetPID+0x130>)
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
	old_right_distance = 0;
 80033c8:	4b22      	ldr	r3, [pc, #136]	; (8003454 <resetPID+0x134>)
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 80033d0:	2300      	movs	r3, #0
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	e008      	b.n	80033e8 <resetPID+0xc8>
		old_right_distances[i] = 0;
 80033d6:	4a20      	ldr	r2, [pc, #128]	; (8003458 <resetPID+0x138>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	3301      	adds	r3, #1
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b09      	cmp	r3, #9
 80033ec:	ddf3      	ble.n	80033d6 <resetPID+0xb6>

	IRadjustment = 0;
 80033ee:	4b1b      	ldr	r3, [pc, #108]	; (800345c <resetPID+0x13c>)
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

////////////// 	RESET ALL GOALS AND ENCODER COUNTS TO 0 	///////////////////
	goal_angle = 0;
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <resetPID+0x140>)
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
	goal_distance = 0;
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <resetPID+0x144>)
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
	goal_reached_timer = 0;
 8003406:	4b18      	ldr	r3, [pc, #96]	; (8003468 <resetPID+0x148>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

	resetEncoders();
 800340c:	f7fe f8b4 	bl	8001578 <resetEncoders>
	resetMotors();
 8003410:	f7ff f996 	bl	8002740 <resetMotors>

	setState(REST);
 8003414:	2000      	movs	r0, #0
 8003416:	f7ff f9c7 	bl	80027a8 <setState>

}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200003c0 	.word	0x200003c0
 8003428:	200003c4 	.word	0x200003c4
 800342c:	200003f0 	.word	0x200003f0
 8003430:	200003c8 	.word	0x200003c8
 8003434:	200003f4 	.word	0x200003f4
 8003438:	200003f8 	.word	0x200003f8
 800343c:	20000424 	.word	0x20000424
 8003440:	200003fc 	.word	0x200003fc
 8003444:	2000042c 	.word	0x2000042c
 8003448:	20000430 	.word	0x20000430
 800344c:	20000434 	.word	0x20000434
 8003450:	2000045c 	.word	0x2000045c
 8003454:	20000460 	.word	0x20000460
 8003458:	20000464 	.word	0x20000464
 800345c:	2000048c 	.word	0x2000048c
 8003460:	200003b8 	.word	0x200003b8
 8003464:	200003b4 	.word	0x200003b4
 8003468:	2000049c 	.word	0x2000049c

0800346c <newCell>:
int16_t vertWall[16][17];

int16_t discovered[16][16];

struct Cell* newCell(int r, int c)           // Acts as a constructor for a cell cuz C is annoying
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
    struct Cell* p = malloc(sizeof(struct Cell));
 8003476:	2008      	movs	r0, #8
 8003478:	f005 f8cc 	bl	8008614 <malloc>
 800347c:	4603      	mov	r3, r0
 800347e:	60fb      	str	r3, [r7, #12]
    p->row = r;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	601a      	str	r2, [r3, #0]
    p->col = c;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	605a      	str	r2, [r3, #4]
    return p;
 800348c:	68fb      	ldr	r3, [r7, #12]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <insertQueue>:

void insertQueue(struct Cell* input) {
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
    queue[queueEnd] = input;
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <insertQueue+0x48>)
 80034a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a6:	4619      	mov	r1, r3
 80034a8:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <insertQueue+0x4c>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    queueEnd++;
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <insertQueue+0x48>)
 80034b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	b21a      	sxth	r2, r3
 80034be:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <insertQueue+0x48>)
 80034c0:	801a      	strh	r2, [r3, #0]

    if (queueEnd == 512) {
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <insertQueue+0x48>)
 80034c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034cc:	d102      	bne.n	80034d4 <insertQueue+0x3c>
        queueEnd = 0;
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <insertQueue+0x48>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	20000eae 	.word	0x20000eae
 80034e4:	200006ac 	.word	0x200006ac

080034e8 <popQueueFront>:

void popQueueFront()
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
    free(queueFront());
 80034ec:	f000 f81a 	bl	8003524 <queueFront>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f005 f896 	bl	8008624 <free>

    queueStart++;
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <popQueueFront+0x38>)
 80034fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	b29b      	uxth	r3, r3
 8003504:	b21a      	sxth	r2, r3
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <popQueueFront+0x38>)
 8003508:	801a      	strh	r2, [r3, #0]
    if (queueStart == 512) {
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <popQueueFront+0x38>)
 800350c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003514:	d102      	bne.n	800351c <popQueueFront+0x34>
        queueStart = 0;
 8003516:	4b02      	ldr	r3, [pc, #8]	; (8003520 <popQueueFront+0x38>)
 8003518:	2200      	movs	r2, #0
 800351a:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 800351c:	bf00      	nop
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000eac 	.word	0x20000eac

08003524 <queueFront>:

struct Cell* queueFront()
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
    return queue[queueStart];
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <queueFront+0x1c>)
 800352a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800352e:	461a      	mov	r2, r3
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <queueFront+0x20>)
 8003532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000eac 	.word	0x20000eac
 8003544:	200006ac 	.word	0x200006ac

08003548 <initElements>:

void initElements()
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
    currPos = newCell(15, 0);           // Sets current position to row 15, column 0
 800354e:	2100      	movs	r1, #0
 8003550:	200f      	movs	r0, #15
 8003552:	f7ff ff8b 	bl	800346c <newCell>
 8003556:	4603      	mov	r3, r0
 8003558:	4a34      	ldr	r2, [pc, #208]	; (800362c <initElements+0xe4>)
 800355a:	6013      	str	r3, [r2, #0]
    currHead = NORTH;                    // Sets current heading to north
 800355c:	4b34      	ldr	r3, [pc, #208]	; (8003630 <initElements+0xe8>)
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin) == GPIO_PIN_SET)	// This is not the first run and we want to load maze
 8003562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003566:	4833      	ldr	r0, [pc, #204]	; (8003634 <initElements+0xec>)
 8003568:	f002 fdb4 	bl	80060d4 <HAL_GPIO_ReadPin>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d102      	bne.n	8003578 <initElements+0x30>
    {
    	loadMaze();
 8003572:	f000 fd47 	bl	8004004 <loadMaze>
 8003576:	e04f      	b.n	8003618 <initElements+0xd0>
    }
    else																	// We don't want to load maze from memory
    {
        for (int i = 0; i < 17; i++) {
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e013      	b.n	80035a6 <initElements+0x5e>
            for (int j = 0; j < 16; j++) {
 800357e:	2300      	movs	r3, #0
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	e00a      	b.n	800359a <initElements+0x52>
                horzWall[i][j] = 0;
 8003584:	492c      	ldr	r1, [pc, #176]	; (8003638 <initElements+0xf0>)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	011a      	lsls	r2, r3, #4
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	2200      	movs	r2, #0
 8003590:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 16; j++) {
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	3301      	adds	r3, #1
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	ddf1      	ble.n	8003584 <initElements+0x3c>
        for (int i = 0; i < 17; i++) {
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3301      	adds	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	dde8      	ble.n	800357e <initElements+0x36>
            }
        }
        for (int i = 0; i < 16; i++) {
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e015      	b.n	80035de <initElements+0x96>
            for (int j = 0; j < 17; j++) {
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	e00c      	b.n	80035d2 <initElements+0x8a>
                vertWall[i][j] = 0;
 80035b8:	4920      	ldr	r1, [pc, #128]	; (800363c <initElements+0xf4>)
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	4413      	add	r3, r2
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	4413      	add	r3, r2
 80035c6:	2200      	movs	r2, #0
 80035c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 17; j++) {
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	3301      	adds	r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	ddef      	ble.n	80035b8 <initElements+0x70>
        for (int i = 0; i < 16; i++) {
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b0f      	cmp	r3, #15
 80035e2:	dde6      	ble.n	80035b2 <initElements+0x6a>
            }
        }
		for (int i = 0; i < 16; i++) {
 80035e4:	2300      	movs	r3, #0
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	e013      	b.n	8003612 <initElements+0xca>
			for (int j = 0; j < 16; j++) {
 80035ea:	2300      	movs	r3, #0
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	e00a      	b.n	8003606 <initElements+0xbe>
				discovered[i][j] = 0;
 80035f0:	4913      	ldr	r1, [pc, #76]	; (8003640 <initElements+0xf8>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	011a      	lsls	r2, r3, #4
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	4413      	add	r3, r2
 80035fa:	2200      	movs	r2, #0
 80035fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int j = 0; j < 16; j++) {
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	3301      	adds	r3, #1
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b0f      	cmp	r3, #15
 800360a:	ddf1      	ble.n	80035f0 <initElements+0xa8>
		for (int i = 0; i < 16; i++) {
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3301      	adds	r3, #1
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b0f      	cmp	r3, #15
 8003616:	dde8      	ble.n	80035ea <initElements+0xa2>
			}
		}
    }

    queueStart = 0;
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <initElements+0xfc>)
 800361a:	2200      	movs	r2, #0
 800361c:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <initElements+0x100>)
 8003620:	2200      	movs	r2, #0
 8003622:	801a      	strh	r2, [r3, #0]
}
 8003624:	bf00      	nop
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200004a4 	.word	0x200004a4
 8003630:	200004a8 	.word	0x200004a8
 8003634:	40020800 	.word	0x40020800
 8003638:	20000eb0 	.word	0x20000eb0
 800363c:	200010d0 	.word	0x200010d0
 8003640:	200012f0 	.word	0x200012f0
 8003644:	20000eac 	.word	0x20000eac
 8003648:	20000eae 	.word	0x20000eae

0800364c <setWall>:

void setWall(int dir)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
    switch (dir)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d844      	bhi.n	80036e4 <setWall+0x98>
 800365a:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <setWall+0x14>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	08003671 	.word	0x08003671
 8003664:	0800368b 	.word	0x0800368b
 8003668:	080036ab 	.word	0x080036ab
 800366c:	080036c7 	.word	0x080036c7
    {
    case NORTH:
        horzWall[currPos->row][currPos->col] = 1;   // Sets the 2D array value to 1 to represent true (there's no bool type in C)
 8003670:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <setWall+0xa4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <setWall+0xa4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	491d      	ldr	r1, [pc, #116]	; (80036f4 <setWall+0xa8>)
 800367e:	0112      	lsls	r2, r2, #4
 8003680:	4413      	add	r3, r2
 8003682:	2201      	movs	r2, #1
 8003684:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 8003688:	e02c      	b.n	80036e4 <setWall+0x98>
    case EAST:
        vertWall[currPos->row][currPos->col + 1] = 1;   // May need to check 2D array logic my head hurts lol
 800368a:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <setWall+0xa4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <setWall+0xa4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	1c59      	adds	r1, r3, #1
 8003698:	4817      	ldr	r0, [pc, #92]	; (80036f8 <setWall+0xac>)
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	4413      	add	r3, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	2201      	movs	r2, #1
 80036a4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 80036a8:	e01c      	b.n	80036e4 <setWall+0x98>
    case SOUTH:
        horzWall[currPos->row + 1][currPos->col] = 1;
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <setWall+0xa4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <setWall+0xa4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	490e      	ldr	r1, [pc, #56]	; (80036f4 <setWall+0xa8>)
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	4413      	add	r3, r2
 80036be:	2201      	movs	r2, #1
 80036c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 80036c4:	e00e      	b.n	80036e4 <setWall+0x98>
    case WEST:
        vertWall[currPos->row][currPos->col] = 1;
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <setWall+0xa4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <setWall+0xa4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6859      	ldr	r1, [r3, #4]
 80036d2:	4809      	ldr	r0, [pc, #36]	; (80036f8 <setWall+0xac>)
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	4413      	add	r3, r2
 80036da:	440b      	add	r3, r1
 80036dc:	2201      	movs	r2, #1
 80036de:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 80036e2:	bf00      	nop
    }
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	200004a4 	.word	0x200004a4
 80036f4:	20000eb0 	.word	0x20000eb0
 80036f8:	200010d0 	.word	0x200010d0

080036fc <detectWalls>:

void detectWalls()
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
    switch (currHead)
 8003700:	4b44      	ldr	r3, [pc, #272]	; (8003814 <detectWalls+0x118>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d876      	bhi.n	80037f6 <detectWalls+0xfa>
 8003708:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <detectWalls+0x14>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003721 	.word	0x08003721
 8003714:	08003753 	.word	0x08003753
 8003718:	08003785 	.word	0x08003785
 800371c:	080037b7 	.word	0x080037b7
    {
    case NORTH:
        if (frontWallCheck())
 8003720:	f000 ff4c 	bl	80045bc <frontWallCheck>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <detectWalls+0x34>
        {
            setWall(NORTH);
 800372a:	2000      	movs	r0, #0
 800372c:	f7ff ff8e 	bl	800364c <setWall>
        }
        if (leftWallCheck())
 8003730:	f000 ff0c 	bl	800454c <leftWallCheck>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <detectWalls+0x44>
        {
            setWall(WEST);
 800373a:	2003      	movs	r0, #3
 800373c:	f7ff ff86 	bl	800364c <setWall>
        }
        if (rightWallCheck())
 8003740:	f000 ff20 	bl	8004584 <rightWallCheck>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d04e      	beq.n	80037e8 <detectWalls+0xec>
        {
            setWall(EAST);
 800374a:	2001      	movs	r0, #1
 800374c:	f7ff ff7e 	bl	800364c <setWall>
        }
        break;
 8003750:	e04a      	b.n	80037e8 <detectWalls+0xec>
    case EAST:
        if (frontWallCheck())
 8003752:	f000 ff33 	bl	80045bc <frontWallCheck>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <detectWalls+0x66>
        {
            setWall(EAST);
 800375c:	2001      	movs	r0, #1
 800375e:	f7ff ff75 	bl	800364c <setWall>
        }
        if (leftWallCheck())
 8003762:	f000 fef3 	bl	800454c <leftWallCheck>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <detectWalls+0x76>
        {
            setWall(NORTH);
 800376c:	2000      	movs	r0, #0
 800376e:	f7ff ff6d 	bl	800364c <setWall>
        }
        if (rightWallCheck())
 8003772:	f000 ff07 	bl	8004584 <rightWallCheck>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d037      	beq.n	80037ec <detectWalls+0xf0>
        {
            setWall(SOUTH);
 800377c:	2002      	movs	r0, #2
 800377e:	f7ff ff65 	bl	800364c <setWall>
        }
        break;
 8003782:	e033      	b.n	80037ec <detectWalls+0xf0>
    case SOUTH:
        if (frontWallCheck())
 8003784:	f000 ff1a 	bl	80045bc <frontWallCheck>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <detectWalls+0x98>
        {
            setWall(SOUTH);
 800378e:	2002      	movs	r0, #2
 8003790:	f7ff ff5c 	bl	800364c <setWall>
        }
        if (leftWallCheck())
 8003794:	f000 feda 	bl	800454c <leftWallCheck>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <detectWalls+0xa8>
        {
            setWall(EAST);
 800379e:	2001      	movs	r0, #1
 80037a0:	f7ff ff54 	bl	800364c <setWall>
        }
        if (rightWallCheck())
 80037a4:	f000 feee 	bl	8004584 <rightWallCheck>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d020      	beq.n	80037f0 <detectWalls+0xf4>
        {
            setWall(WEST);
 80037ae:	2003      	movs	r0, #3
 80037b0:	f7ff ff4c 	bl	800364c <setWall>
        }
        break;
 80037b4:	e01c      	b.n	80037f0 <detectWalls+0xf4>
    case WEST:
        if (frontWallCheck())
 80037b6:	f000 ff01 	bl	80045bc <frontWallCheck>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <detectWalls+0xca>
        {
            setWall(WEST);
 80037c0:	2003      	movs	r0, #3
 80037c2:	f7ff ff43 	bl	800364c <setWall>
        }
        if (leftWallCheck())
 80037c6:	f000 fec1 	bl	800454c <leftWallCheck>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <detectWalls+0xda>
        {
            setWall(SOUTH);
 80037d0:	2002      	movs	r0, #2
 80037d2:	f7ff ff3b 	bl	800364c <setWall>
        }
        if (rightWallCheck())
 80037d6:	f000 fed5 	bl	8004584 <rightWallCheck>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d009      	beq.n	80037f4 <detectWalls+0xf8>
        {
            setWall(NORTH);
 80037e0:	2000      	movs	r0, #0
 80037e2:	f7ff ff33 	bl	800364c <setWall>
        }
        break;
 80037e6:	e005      	b.n	80037f4 <detectWalls+0xf8>
        break;
 80037e8:	bf00      	nop
 80037ea:	e004      	b.n	80037f6 <detectWalls+0xfa>
        break;
 80037ec:	bf00      	nop
 80037ee:	e002      	b.n	80037f6 <detectWalls+0xfa>
        break;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <detectWalls+0xfa>
        break;
 80037f4:	bf00      	nop
    }

    discovered[currPos->row][currPos->col] = 1;		// Mark current cell as discovered
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <detectWalls+0x11c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <detectWalls+0x11c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4906      	ldr	r1, [pc, #24]	; (800381c <detectWalls+0x120>)
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	4413      	add	r3, r2
 8003808:	2201      	movs	r2, #1
 800380a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200004a8 	.word	0x200004a8
 8003818:	200004a4 	.word	0x200004a4
 800381c:	200012f0 	.word	0x200012f0

08003820 <recalculate>:

void recalculate()
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
    queueStart = 0;
 8003826:	4bab      	ldr	r3, [pc, #684]	; (8003ad4 <recalculate+0x2b4>)
 8003828:	2200      	movs	r2, #0
 800382a:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 800382c:	4baa      	ldr	r3, [pc, #680]	; (8003ad8 <recalculate+0x2b8>)
 800382e:	2200      	movs	r2, #0
 8003830:	801a      	strh	r2, [r3, #0]

    // Mark all cells as -1, meaning that they have not had their Manhattan set yet
    for (int j = 0; j < 16; j++)
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e014      	b.n	8003862 <recalculate+0x42>
    {
        for (int i = 0; i < 16; i++)
 8003838:	2300      	movs	r3, #0
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	e00b      	b.n	8003856 <recalculate+0x36>
        {
            Manhattans[i][j] = -1;
 800383e:	49a7      	ldr	r1, [pc, #668]	; (8003adc <recalculate+0x2bc>)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	011a      	lsls	r2, r3, #4
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	4413      	add	r3, r2
 8003848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800384c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int i = 0; i < 16; i++)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	3301      	adds	r3, #1
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b0f      	cmp	r3, #15
 800385a:	ddf0      	ble.n	800383e <recalculate+0x1e>
    for (int j = 0; j < 16; j++)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3301      	adds	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b0f      	cmp	r3, #15
 8003866:	dde7      	ble.n	8003838 <recalculate+0x18>
        }
    }

    if(goToCenter)
 8003868:	4b9d      	ldr	r3, [pc, #628]	; (8003ae0 <recalculate+0x2c0>)
 800386a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d030      	beq.n	80038d4 <recalculate+0xb4>
    {
        // Set middle four manhattan distances to 0, and insert all 4 into queue (set middle as destination)
        Manhattans[7][7] = 0;
 8003872:	4b9a      	ldr	r3, [pc, #616]	; (8003adc <recalculate+0x2bc>)
 8003874:	2200      	movs	r2, #0
 8003876:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
        Manhattans[7][8] = 0;
 800387a:	4b98      	ldr	r3, [pc, #608]	; (8003adc <recalculate+0x2bc>)
 800387c:	2200      	movs	r2, #0
 800387e:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
        Manhattans[8][7] = 0;
 8003882:	4b96      	ldr	r3, [pc, #600]	; (8003adc <recalculate+0x2bc>)
 8003884:	2200      	movs	r2, #0
 8003886:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
        Manhattans[8][8] = 0;
 800388a:	4b94      	ldr	r3, [pc, #592]	; (8003adc <recalculate+0x2bc>)
 800388c:	2200      	movs	r2, #0
 800388e:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
        insertQueue(newCell(7, 7));
 8003892:	2107      	movs	r1, #7
 8003894:	2007      	movs	r0, #7
 8003896:	f7ff fde9 	bl	800346c <newCell>
 800389a:	4603      	mov	r3, r0
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fdfb 	bl	8003498 <insertQueue>
        insertQueue(newCell(7, 8));
 80038a2:	2108      	movs	r1, #8
 80038a4:	2007      	movs	r0, #7
 80038a6:	f7ff fde1 	bl	800346c <newCell>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fdf3 	bl	8003498 <insertQueue>
        insertQueue(newCell(8, 7));
 80038b2:	2107      	movs	r1, #7
 80038b4:	2008      	movs	r0, #8
 80038b6:	f7ff fdd9 	bl	800346c <newCell>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fdeb 	bl	8003498 <insertQueue>
        insertQueue(newCell(8, 8));
 80038c2:	2108      	movs	r1, #8
 80038c4:	2008      	movs	r0, #8
 80038c6:	f7ff fdd1 	bl	800346c <newCell>
 80038ca:	4603      	mov	r3, r0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fde3 	bl	8003498 <insertQueue>
 80038d2:	e0f1      	b.n	8003ab8 <recalculate+0x298>
    }

    else
    {
        // Set starting cell to 0, insert starting cell into queue (set start as destination)
        Manhattans[15][0] = 0;
 80038d4:	4b81      	ldr	r3, [pc, #516]	; (8003adc <recalculate+0x2bc>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8a3 21e0 	strh.w	r2, [r3, #480]	; 0x1e0
        insertQueue(newCell(15, 0));
 80038dc:	2100      	movs	r1, #0
 80038de:	200f      	movs	r0, #15
 80038e0:	f7ff fdc4 	bl	800346c <newCell>
 80038e4:	4603      	mov	r3, r0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fdd6 	bl	8003498 <insertQueue>
    }


    //while queue is not empty
    while (queueStart != queueEnd) {
 80038ec:	e0e4      	b.n	8003ab8 <recalculate+0x298>

        struct Cell* currElement = queueFront();
 80038ee:	f7ff fe19 	bl	8003524 <queueFront>
 80038f2:	60f8      	str	r0, [r7, #12]

        int currRow = currElement->row;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60bb      	str	r3, [r7, #8]
        int currCol = currElement->col;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	607b      	str	r3, [r7, #4]

        // For all accessable neighbors with no set Manhattan distance, add cell to queue and set Manhattan to current Manhattan + 1

        //north wall
        if (currRow > 0 && horzWall[currRow][currCol] != 1 && Manhattans[currRow - 1][currCol] == -1) {
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	dd31      	ble.n	800396a <recalculate+0x14a>
 8003906:	4977      	ldr	r1, [pc, #476]	; (8003ae4 <recalculate+0x2c4>)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	011a      	lsls	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d028      	beq.n	800396a <recalculate+0x14a>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	3b01      	subs	r3, #1
 800391c:	496f      	ldr	r1, [pc, #444]	; (8003adc <recalculate+0x2bc>)
 800391e:	011a      	lsls	r2, r3, #4
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d11d      	bne.n	800396a <recalculate+0x14a>
            Manhattans[currRow - 1][currCol] = Manhattans[currRow][currCol] + 1;
 800392e:	496b      	ldr	r1, [pc, #428]	; (8003adc <recalculate+0x2bc>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	011a      	lsls	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800393c:	b29b      	uxth	r3, r3
 800393e:	3301      	adds	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	3b01      	subs	r3, #1
 8003946:	b210      	sxth	r0, r2
 8003948:	4964      	ldr	r1, [pc, #400]	; (8003adc <recalculate+0x2bc>)
 800394a:	011a      	lsls	r2, r3, #4
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	4602      	mov	r2, r0
 8003952:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow - 1, currCol));
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	3b01      	subs	r3, #1
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fd85 	bl	800346c <newCell>
 8003962:	4603      	mov	r3, r0
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fd97 	bl	8003498 <insertQueue>
        }
        //east wall
        if (currCol < 15 && vertWall[currRow][currCol + 1] != 1 && Manhattans[currRow][currCol + 1] == -1) {
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b0e      	cmp	r3, #14
 800396e:	dc34      	bgt.n	80039da <recalculate+0x1ba>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	1c59      	adds	r1, r3, #1
 8003974:	485c      	ldr	r0, [pc, #368]	; (8003ae8 <recalculate+0x2c8>)
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4413      	add	r3, r2
 800397e:	440b      	add	r3, r1
 8003980:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d028      	beq.n	80039da <recalculate+0x1ba>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3301      	adds	r3, #1
 800398c:	4953      	ldr	r1, [pc, #332]	; (8003adc <recalculate+0x2bc>)
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	4413      	add	r3, r2
 8003994:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d11d      	bne.n	80039da <recalculate+0x1ba>
            Manhattans[currRow][currCol + 1] = Manhattans[currRow][currCol] + 1;
 800399e:	494f      	ldr	r1, [pc, #316]	; (8003adc <recalculate+0x2bc>)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	011a      	lsls	r2, r3, #4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3301      	adds	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3301      	adds	r3, #1
 80039b6:	b210      	sxth	r0, r2
 80039b8:	4948      	ldr	r1, [pc, #288]	; (8003adc <recalculate+0x2bc>)
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	4413      	add	r3, r2
 80039c0:	4602      	mov	r2, r0
 80039c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol + 1));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3301      	adds	r3, #1
 80039ca:	4619      	mov	r1, r3
 80039cc:	68b8      	ldr	r0, [r7, #8]
 80039ce:	f7ff fd4d 	bl	800346c <newCell>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fd5f 	bl	8003498 <insertQueue>
        }
        //south wall
        if (currRow < 15 && horzWall[currRow + 1][currCol] != 1 && Manhattans[currRow + 1][currCol] == -1) {
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b0e      	cmp	r3, #14
 80039de:	dc32      	bgt.n	8003a46 <recalculate+0x226>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	3301      	adds	r3, #1
 80039e4:	493f      	ldr	r1, [pc, #252]	; (8003ae4 <recalculate+0x2c4>)
 80039e6:	011a      	lsls	r2, r3, #4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d028      	beq.n	8003a46 <recalculate+0x226>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	3301      	adds	r3, #1
 80039f8:	4938      	ldr	r1, [pc, #224]	; (8003adc <recalculate+0x2bc>)
 80039fa:	011a      	lsls	r2, r3, #4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d11d      	bne.n	8003a46 <recalculate+0x226>
            Manhattans[currRow + 1][currCol] = Manhattans[currRow][currCol] + 1;
 8003a0a:	4934      	ldr	r1, [pc, #208]	; (8003adc <recalculate+0x2bc>)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	011a      	lsls	r2, r3, #4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	3301      	adds	r3, #1
 8003a22:	b210      	sxth	r0, r2
 8003a24:	492d      	ldr	r1, [pc, #180]	; (8003adc <recalculate+0x2bc>)
 8003a26:	011a      	lsls	r2, r3, #4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow + 1, currCol));
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3301      	adds	r3, #1
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fd17 	bl	800346c <newCell>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fd29 	bl	8003498 <insertQueue>
        }
        //west wall
        if (currCol > 0 && vertWall[currRow][currCol] != 1 && Manhattans[currRow][currCol - 1] == -1) {
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	dd33      	ble.n	8003ab4 <recalculate+0x294>
 8003a4c:	4926      	ldr	r1, [pc, #152]	; (8003ae8 <recalculate+0x2c8>)
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	4413      	add	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d028      	beq.n	8003ab4 <recalculate+0x294>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	491d      	ldr	r1, [pc, #116]	; (8003adc <recalculate+0x2bc>)
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	0112      	lsls	r2, r2, #4
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d11d      	bne.n	8003ab4 <recalculate+0x294>
            Manhattans[currRow][currCol - 1] = Manhattans[currRow][currCol] + 1;
 8003a78:	4918      	ldr	r1, [pc, #96]	; (8003adc <recalculate+0x2bc>)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	011a      	lsls	r2, r3, #4
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b210      	sxth	r0, r2
 8003a92:	4912      	ldr	r1, [pc, #72]	; (8003adc <recalculate+0x2bc>)
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	0112      	lsls	r2, r2, #4
 8003a98:	4413      	add	r3, r2
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol - 1));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	68b8      	ldr	r0, [r7, #8]
 8003aa8:	f7ff fce0 	bl	800346c <newCell>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fcf2 	bl	8003498 <insertQueue>
        }

        // Deletes cell from queue and frees memory
        popQueueFront();
 8003ab4:	f7ff fd18 	bl	80034e8 <popQueueFront>
    while (queueStart != queueEnd) {
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <recalculate+0x2b4>)
 8003aba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <recalculate+0x2b8>)
 8003ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	f47f af12 	bne.w	80038ee <recalculate+0xce>
    }
}
 8003aca:	bf00      	nop
 8003acc:	bf00      	nop
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000eac 	.word	0x20000eac
 8003ad8:	20000eae 	.word	0x20000eae
 8003adc:	200004ac 	.word	0x200004ac
 8003ae0:	20000008 	.word	0x20000008
 8003ae4:	20000eb0 	.word	0x20000eb0
 8003ae8:	200010d0 	.word	0x200010d0

08003aec <solver>:

Action solver(Algorithm alg) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	71fb      	strb	r3, [r7, #7]
    switch (alg)
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <solver+0x16>
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d004      	beq.n	8003b0a <solver+0x1e>
 8003b00:	e007      	b.n	8003b12 <solver+0x26>
    {
    case DEAD:
    	return deadReckoning();
 8003b02:	f000 f80b 	bl	8003b1c <deadReckoning>
 8003b06:	4603      	mov	r3, r0
 8003b08:	e004      	b.n	8003b14 <solver+0x28>
    	break;
    case FLOODFILL:
    	return floodFill();
 8003b0a:	f000 f81b 	bl	8003b44 <floodFill>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	e000      	b.n	8003b14 <solver+0x28>
    	break;
    default:
    	return FORWARD;
 8003b12:	2301      	movs	r3, #1
    }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <deadReckoning>:

Action deadReckoning() {       // The simple left wall following algorithm that they provided
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
	if (!frontWallCheck())
 8003b20:	f000 fd4c 	bl	80045bc <frontWallCheck>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <deadReckoning+0x12>
	{
		return FORWARD;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e007      	b.n	8003b3e <deadReckoning+0x22>
	}
	else if (!rightWallCheck())
 8003b2e:	f000 fd29 	bl	8004584 <rightWallCheck>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <deadReckoning+0x20>
	{
		return RIGHT;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e000      	b.n	8003b3e <deadReckoning+0x22>
	}
	else
	{
		return LEFT;
 8003b3c:	2300      	movs	r3, #0
	}
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <floodFill>:

Action floodFill() {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
    // Initializes all the elements and calculates Manhattan distances
    if (!initialized)
 8003b4a:	4b9f      	ldr	r3, [pc, #636]	; (8003dc8 <floodFill+0x284>)
 8003b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <floodFill+0x1e>
    {
        initElements();
 8003b54:	f7ff fcf8 	bl	8003548 <initElements>
        recalculate();
 8003b58:	f7ff fe62 	bl	8003820 <recalculate>
        initialized = 1;
 8003b5c:	4b9a      	ldr	r3, [pc, #616]	; (8003dc8 <floodFill+0x284>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	801a      	strh	r2, [r3, #0]
    }

    // Lights up detected walls and adds them to the 2D wall arrays
    detectWalls();
 8003b62:	f7ff fdcb 	bl	80036fc <detectWalls>

    // Display all Manhattan distances in the API dispaly

    int row = currPos->row;
 8003b66:	4b99      	ldr	r3, [pc, #612]	; (8003dcc <floodFill+0x288>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	61bb      	str	r3, [r7, #24]
    int col = currPos->col;
 8003b6e:	4b97      	ldr	r3, [pc, #604]	; (8003dcc <floodFill+0x288>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	617b      	str	r3, [r7, #20]

    // If goal has already been reached, set new destination to either middle or starting cell
    if (Manhattans[row][col] == 0)
 8003b76:	4996      	ldr	r1, [pc, #600]	; (8003dd0 <floodFill+0x28c>)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	011a      	lsls	r2, r3, #4
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d118      	bne.n	8003bba <floodFill+0x76>
    {
    	if (HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin) == GPIO_PIN_SET)	// I want to save the finished maze on this run
 8003b88:	2104      	movs	r1, #4
 8003b8a:	4892      	ldr	r0, [pc, #584]	; (8003dd4 <floodFill+0x290>)
 8003b8c:	f002 faa2 	bl	80060d4 <HAL_GPIO_ReadPin>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <floodFill+0x56>
		{
			saveMaze();
 8003b96:	f000 fa25 	bl	8003fe4 <saveMaze>
		}

        if (goToCenter)
 8003b9a:	4b8f      	ldr	r3, [pc, #572]	; (8003dd8 <floodFill+0x294>)
 8003b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <floodFill+0x68>
            goToCenter = 0; // Destination is now Starting Cell
 8003ba4:	4b8c      	ldr	r3, [pc, #560]	; (8003dd8 <floodFill+0x294>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	e002      	b.n	8003bb2 <floodFill+0x6e>
        else
            goToCenter = 1; // Destination is now middle four
 8003bac:	4b8a      	ldr	r3, [pc, #552]	; (8003dd8 <floodFill+0x294>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	801a      	strh	r2, [r3, #0]

        recalculate();
 8003bb2:	f7ff fe35 	bl	8003820 <recalculate>
        return IDLE;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e11d      	b.n	8003df6 <floodFill+0x2b2>
    }

    int northBlocked = horzWall[row][col];
 8003bba:	4988      	ldr	r1, [pc, #544]	; (8003ddc <floodFill+0x298>)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	011a      	lsls	r2, r3, #4
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003bc8:	613b      	str	r3, [r7, #16]
    int eastBlocked = vertWall[row][col + 1];
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	1c59      	adds	r1, r3, #1
 8003bce:	4884      	ldr	r0, [pc, #528]	; (8003de0 <floodFill+0x29c>)
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	4413      	add	r3, r2
 8003bd8:	440b      	add	r3, r1
 8003bda:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003bde:	60fb      	str	r3, [r7, #12]
    int southBlocked = horzWall[row + 1][col];
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	3301      	adds	r3, #1
 8003be4:	497d      	ldr	r1, [pc, #500]	; (8003ddc <floodFill+0x298>)
 8003be6:	011a      	lsls	r2, r3, #4
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4413      	add	r3, r2
 8003bec:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003bf0:	60bb      	str	r3, [r7, #8]
    int westBlocked = vertWall[row][col];
 8003bf2:	497b      	ldr	r1, [pc, #492]	; (8003de0 <floodFill+0x29c>)
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	4413      	add	r3, r2
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003c04:	607b      	str	r3, [r7, #4]

    // Find next heading
    int nextHead = -1;
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0a:	61fb      	str	r3, [r7, #28]

    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <floodFill+0xfc>
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	496e      	ldr	r1, [pc, #440]	; (8003dd0 <floodFill+0x28c>)
 8003c18:	011a      	lsls	r2, r3, #4
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003c22:	486b      	ldr	r0, [pc, #428]	; (8003dd0 <floodFill+0x28c>)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	0119      	lsls	r1, r3, #4
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	da05      	bge.n	8003c40 <floodFill+0xfc>
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <floodFill+0xfc>
        nextHead = NORTH;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	e04c      	b.n	8003cda <floodFill+0x196>
    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	d016      	beq.n	8003c74 <floodFill+0x130>
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	4961      	ldr	r1, [pc, #388]	; (8003dd0 <floodFill+0x28c>)
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	0112      	lsls	r2, r2, #4
 8003c50:	4413      	add	r3, r2
 8003c52:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003c56:	485e      	ldr	r0, [pc, #376]	; (8003dd0 <floodFill+0x28c>)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	0119      	lsls	r1, r3, #4
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	440b      	add	r3, r1
 8003c60:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	da05      	bge.n	8003c74 <floodFill+0x130>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <floodFill+0x130>
        nextHead = EAST;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e032      	b.n	8003cda <floodFill+0x196>
    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	d016      	beq.n	8003ca8 <floodFill+0x164>
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	4954      	ldr	r1, [pc, #336]	; (8003dd0 <floodFill+0x28c>)
 8003c80:	011a      	lsls	r2, r3, #4
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4413      	add	r3, r2
 8003c86:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003c8a:	4851      	ldr	r0, [pc, #324]	; (8003dd0 <floodFill+0x28c>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	0119      	lsls	r1, r3, #4
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	440b      	add	r3, r1
 8003c94:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	da05      	bge.n	8003ca8 <floodFill+0x164>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <floodFill+0x164>
        nextHead = SOUTH;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	e018      	b.n	8003cda <floodFill+0x196>
    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d015      	beq.n	8003cda <floodFill+0x196>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	4947      	ldr	r1, [pc, #284]	; (8003dd0 <floodFill+0x28c>)
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	0112      	lsls	r2, r2, #4
 8003cb8:	4413      	add	r3, r2
 8003cba:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003cbe:	4844      	ldr	r0, [pc, #272]	; (8003dd0 <floodFill+0x28c>)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	0119      	lsls	r1, r3, #4
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	da04      	bge.n	8003cda <floodFill+0x196>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <floodFill+0x196>
        nextHead = WEST;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	61fb      	str	r3, [r7, #28]

    // If no path available, then recalculta
    if (nextHead == -1)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d103      	bne.n	8003cea <floodFill+0x1a6>
    {
        recalculate();
 8003ce2:	f7ff fd9d 	bl	8003820 <recalculate>
        return IDLE;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e085      	b.n	8003df6 <floodFill+0x2b2>
    }

    // If next heading is in same direction, move forward
    if (nextHead == currHead)
 8003cea:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <floodFill+0x2a0>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d128      	bne.n	8003d48 <floodFill+0x204>
    {
        switch (currHead)
 8003cf6:	4b3b      	ldr	r3, [pc, #236]	; (8003de4 <floodFill+0x2a0>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d822      	bhi.n	8003d44 <floodFill+0x200>
 8003cfe:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <floodFill+0x1c0>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d21 	.word	0x08003d21
 8003d0c:	08003d2d 	.word	0x08003d2d
 8003d10:	08003d39 	.word	0x08003d39
        {
        case NORTH:
            currPos->row--;
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <floodFill+0x288>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	3a01      	subs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
            break;
 8003d1e:	e011      	b.n	8003d44 <floodFill+0x200>
        case EAST:
            currPos->col++;
 8003d20:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <floodFill+0x288>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	3201      	adds	r2, #1
 8003d28:	605a      	str	r2, [r3, #4]
            break;
 8003d2a:	e00b      	b.n	8003d44 <floodFill+0x200>
        case SOUTH:
            currPos->row++;
 8003d2c:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <floodFill+0x288>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	3201      	adds	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
            break;
 8003d36:	e005      	b.n	8003d44 <floodFill+0x200>
        case WEST:
            currPos->col--;
 8003d38:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <floodFill+0x288>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	3a01      	subs	r2, #1
 8003d40:	605a      	str	r2, [r3, #4]
            break;
 8003d42:	bf00      	nop
        }
        return FORWARD;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e056      	b.n	8003df6 <floodFill+0x2b2>
    }

    // If next heading is in opposite direction, turn right
    if ((nextHead - currHead) % 2 == 0)
 8003d48:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <floodFill+0x2a0>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <floodFill+0x236>
    {
        if (currHead == WEST)
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <floodFill+0x2a0>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d103      	bne.n	8003d6a <floodFill+0x226>
            currHead = NORTH;
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <floodFill+0x2a0>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	e005      	b.n	8003d76 <floodFill+0x232>
        else
            currHead++;
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <floodFill+0x2a0>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <floodFill+0x2a0>)
 8003d74:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 8003d76:	2302      	movs	r3, #2
 8003d78:	e03d      	b.n	8003df6 <floodFill+0x2b2>
    }

    // If next heading is right, turn right
    if ((nextHead - currHead) == 1 || nextHead - currHead == -3)
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <floodFill+0x2a0>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d007      	beq.n	8003d98 <floodFill+0x254>
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <floodFill+0x2a0>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	f113 0f03 	cmn.w	r3, #3
 8003d96:	d10f      	bne.n	8003db8 <floodFill+0x274>
    {
        if (currHead == WEST)
 8003d98:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <floodFill+0x2a0>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d103      	bne.n	8003da8 <floodFill+0x264>
            currHead = NORTH;
 8003da0:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <floodFill+0x2a0>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e005      	b.n	8003db4 <floodFill+0x270>
        else
            currHead++;
 8003da8:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <floodFill+0x2a0>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <floodFill+0x2a0>)
 8003db2:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 8003db4:	2302      	movs	r3, #2
 8003db6:	e01e      	b.n	8003df6 <floodFill+0x2b2>
    }

    // else, turn left
    if (currHead == NORTH)
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <floodFill+0x2a0>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d113      	bne.n	8003de8 <floodFill+0x2a4>
        currHead = WEST;
 8003dc0:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <floodFill+0x2a0>)
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e015      	b.n	8003df4 <floodFill+0x2b0>
 8003dc8:	200004a0 	.word	0x200004a0
 8003dcc:	200004a4 	.word	0x200004a4
 8003dd0:	200004ac 	.word	0x200004ac
 8003dd4:	40020c00 	.word	0x40020c00
 8003dd8:	20000008 	.word	0x20000008
 8003ddc:	20000eb0 	.word	0x20000eb0
 8003de0:	200010d0 	.word	0x200010d0
 8003de4:	200004a8 	.word	0x200004a8
    else
        currHead--;
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <floodFill+0x2bc>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <floodFill+0x2bc>)
 8003df2:	701a      	strb	r2, [r3, #0]
    return LEFT;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3720      	adds	r7, #32
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	200004a8 	.word	0x200004a8

08003e04 <foresight>:

int foresight() {
 8003e04:	b480      	push	{r7}
 8003e06:	b089      	sub	sp, #36	; 0x24
 8003e08:	af00      	add	r7, sp, #0
	int row = currPos->row;
 8003e0a:	4b70      	ldr	r3, [pc, #448]	; (8003fcc <foresight+0x1c8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61fb      	str	r3, [r7, #28]
	int col = currPos->col;
 8003e12:	4b6e      	ldr	r3, [pc, #440]	; (8003fcc <foresight+0x1c8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	61bb      	str	r3, [r7, #24]

	int extra_moves = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]

	while(discovered[row][col] != 0)
 8003e1e:	e0c3      	b.n	8003fa8 <foresight+0x1a4>
	{
	    int northBlocked = horzWall[row][col];
 8003e20:	496b      	ldr	r1, [pc, #428]	; (8003fd0 <foresight+0x1cc>)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	011a      	lsls	r2, r3, #4
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003e2e:	60fb      	str	r3, [r7, #12]
	    int eastBlocked = vertWall[row][col + 1];
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	1c59      	adds	r1, r3, #1
 8003e34:	4867      	ldr	r0, [pc, #412]	; (8003fd4 <foresight+0x1d0>)
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	4413      	add	r3, r2
 8003e3e:	440b      	add	r3, r1
 8003e40:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003e44:	60bb      	str	r3, [r7, #8]
	    int southBlocked = horzWall[row + 1][col];
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	4961      	ldr	r1, [pc, #388]	; (8003fd0 <foresight+0x1cc>)
 8003e4c:	011a      	lsls	r2, r3, #4
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	4413      	add	r3, r2
 8003e52:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003e56:	607b      	str	r3, [r7, #4]
	    int westBlocked = vertWall[row][col];
 8003e58:	495e      	ldr	r1, [pc, #376]	; (8003fd4 <foresight+0x1d0>)
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	4413      	add	r3, r2
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4413      	add	r3, r2
 8003e66:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003e6a:	603b      	str	r3, [r7, #0]

	    // Find next heading
	    int nextHead = -1;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	613b      	str	r3, [r7, #16]

	    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d016      	beq.n	8003ea6 <foresight+0xa2>
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	4956      	ldr	r1, [pc, #344]	; (8003fd8 <foresight+0x1d4>)
 8003e7e:	011a      	lsls	r2, r3, #4
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	4413      	add	r3, r2
 8003e84:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003e88:	4853      	ldr	r0, [pc, #332]	; (8003fd8 <foresight+0x1d4>)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	0119      	lsls	r1, r3, #4
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	440b      	add	r3, r1
 8003e92:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	da05      	bge.n	8003ea6 <foresight+0xa2>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <foresight+0xa2>
	        nextHead = NORTH;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	e04c      	b.n	8003f40 <foresight+0x13c>
	    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b0f      	cmp	r3, #15
 8003eaa:	d016      	beq.n	8003eda <foresight+0xd6>
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	4949      	ldr	r1, [pc, #292]	; (8003fd8 <foresight+0x1d4>)
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	0112      	lsls	r2, r2, #4
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003ebc:	4846      	ldr	r0, [pc, #280]	; (8003fd8 <foresight+0x1d4>)
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	0119      	lsls	r1, r3, #4
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	440b      	add	r3, r1
 8003ec6:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	da05      	bge.n	8003eda <foresight+0xd6>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <foresight+0xd6>
	        nextHead = EAST;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	e032      	b.n	8003f40 <foresight+0x13c>
	    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	2b0f      	cmp	r3, #15
 8003ede:	d016      	beq.n	8003f0e <foresight+0x10a>
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	493c      	ldr	r1, [pc, #240]	; (8003fd8 <foresight+0x1d4>)
 8003ee6:	011a      	lsls	r2, r3, #4
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	4413      	add	r3, r2
 8003eec:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003ef0:	4839      	ldr	r0, [pc, #228]	; (8003fd8 <foresight+0x1d4>)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	0119      	lsls	r1, r3, #4
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	440b      	add	r3, r1
 8003efa:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	da05      	bge.n	8003f0e <foresight+0x10a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <foresight+0x10a>
	        nextHead = SOUTH;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	e018      	b.n	8003f40 <foresight+0x13c>
	    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d015      	beq.n	8003f40 <foresight+0x13c>
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	492f      	ldr	r1, [pc, #188]	; (8003fd8 <foresight+0x1d4>)
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	0112      	lsls	r2, r2, #4
 8003f1e:	4413      	add	r3, r2
 8003f20:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003f24:	482c      	ldr	r0, [pc, #176]	; (8003fd8 <foresight+0x1d4>)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	0119      	lsls	r1, r3, #4
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	440b      	add	r3, r1
 8003f2e:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	da04      	bge.n	8003f40 <foresight+0x13c>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <foresight+0x13c>
	        nextHead = WEST;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	613b      	str	r3, [r7, #16]

	    if (nextHead != currHead)
 8003f40:	4b26      	ldr	r3, [pc, #152]	; (8003fdc <foresight+0x1d8>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d138      	bne.n	8003fbe <foresight+0x1ba>
	    	break;

	    extra_moves++;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]

		switch (currHead)
 8003f52:	4b22      	ldr	r3, [pc, #136]	; (8003fdc <foresight+0x1d8>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d81a      	bhi.n	8003f90 <foresight+0x18c>
 8003f5a:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <foresight+0x15c>)
 8003f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f79 	.word	0x08003f79
 8003f68:	08003f81 	.word	0x08003f81
 8003f6c:	08003f89 	.word	0x08003f89
		{
			case NORTH:
				row--;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
				break;
 8003f76:	e00b      	b.n	8003f90 <foresight+0x18c>
			case EAST:
				col++;
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	61bb      	str	r3, [r7, #24]
				break;
 8003f7e:	e007      	b.n	8003f90 <foresight+0x18c>
			case SOUTH:
				row++;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	3301      	adds	r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
				break;
 8003f86:	e003      	b.n	8003f90 <foresight+0x18c>
			case WEST:
				col--;
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
				break;
 8003f8e:	bf00      	nop
		}
		if (row < 0 || row > 15 || col < 0 || col > 15)
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	db14      	blt.n	8003fc0 <foresight+0x1bc>
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	2b0f      	cmp	r3, #15
 8003f9a:	dc11      	bgt.n	8003fc0 <foresight+0x1bc>
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	db0e      	blt.n	8003fc0 <foresight+0x1bc>
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b0f      	cmp	r3, #15
 8003fa6:	dc0b      	bgt.n	8003fc0 <foresight+0x1bc>
	while(discovered[row][col] != 0)
 8003fa8:	490d      	ldr	r1, [pc, #52]	; (8003fe0 <foresight+0x1dc>)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	011a      	lsls	r2, r3, #4
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f47f af32 	bne.w	8003e20 <foresight+0x1c>
 8003fbc:	e000      	b.n	8003fc0 <foresight+0x1bc>
	    	break;
 8003fbe:	bf00      	nop
			break;
	}

	return extra_moves;
 8003fc0:	697b      	ldr	r3, [r7, #20]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3724      	adds	r7, #36	; 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr
 8003fcc:	200004a4 	.word	0x200004a4
 8003fd0:	20000eb0 	.word	0x20000eb0
 8003fd4:	200010d0 	.word	0x200010d0
 8003fd8:	200004ac 	.word	0x200004ac
 8003fdc:	200004a8 	.word	0x200004a8
 8003fe0:	200012f0 	.word	0x200012f0

08003fe4 <saveMaze>:

void saveMaze() {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0

	writeFlash(horzWall, vertWall, discovered);
 8003fe8:	4a03      	ldr	r2, [pc, #12]	; (8003ff8 <saveMaze+0x14>)
 8003fea:	4904      	ldr	r1, [pc, #16]	; (8003ffc <saveMaze+0x18>)
 8003fec:	4804      	ldr	r0, [pc, #16]	; (8004000 <saveMaze+0x1c>)
 8003fee:	f7fd fad3 	bl	8001598 <writeFlash>

}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200012f0 	.word	0x200012f0
 8003ffc:	200010d0 	.word	0x200010d0
 8004000:	20000eb0 	.word	0x20000eb0

08004004 <loadMaze>:
void loadMaze() {
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0

	readFlash(horzWall, vertWall, discovered);
 8004008:	4a03      	ldr	r2, [pc, #12]	; (8004018 <loadMaze+0x14>)
 800400a:	4904      	ldr	r1, [pc, #16]	; (800401c <loadMaze+0x18>)
 800400c:	4804      	ldr	r0, [pc, #16]	; (8004020 <loadMaze+0x1c>)
 800400e:	f7fd fb67 	bl	80016e0 <readFlash>

}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	200012f0 	.word	0x200012f0
 800401c:	200010d0 	.word	0x200010d0
 8004020:	20000eb0 	.word	0x20000eb0

08004024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <HAL_MspInit+0x48>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <HAL_MspInit+0x48>)
 8004034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004038:	6453      	str	r3, [r2, #68]	; 0x44
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <HAL_MspInit+0x48>)
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004042:	607b      	str	r3, [r7, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	4b08      	ldr	r3, [pc, #32]	; (800406c <HAL_MspInit+0x48>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	4a07      	ldr	r2, [pc, #28]	; (800406c <HAL_MspInit+0x48>)
 8004050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004054:	6413      	str	r3, [r2, #64]	; 0x40
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_MspInit+0x48>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	40023800 	.word	0x40023800

08004070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a3c      	ldr	r2, [pc, #240]	; (8004180 <HAL_ADC_MspInit+0x110>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d171      	bne.n	8004176 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_ADC_MspInit+0x114>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	4a3a      	ldr	r2, [pc, #232]	; (8004184 <HAL_ADC_MspInit+0x114>)
 800409c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a0:	6453      	str	r3, [r2, #68]	; 0x44
 80040a2:	4b38      	ldr	r3, [pc, #224]	; (8004184 <HAL_ADC_MspInit+0x114>)
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	4b34      	ldr	r3, [pc, #208]	; (8004184 <HAL_ADC_MspInit+0x114>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	4a33      	ldr	r2, [pc, #204]	; (8004184 <HAL_ADC_MspInit+0x114>)
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	6313      	str	r3, [r2, #48]	; 0x30
 80040be:	4b31      	ldr	r3, [pc, #196]	; (8004184 <HAL_ADC_MspInit+0x114>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <HAL_ADC_MspInit+0x114>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	4a2c      	ldr	r2, [pc, #176]	; (8004184 <HAL_ADC_MspInit+0x114>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6313      	str	r3, [r2, #48]	; 0x30
 80040da:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <HAL_ADC_MspInit+0x114>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 80040e6:	2303      	movs	r3, #3
 80040e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040ea:	2303      	movs	r3, #3
 80040ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f2:	f107 0314 	add.w	r3, r7, #20
 80040f6:	4619      	mov	r1, r3
 80040f8:	4823      	ldr	r0, [pc, #140]	; (8004188 <HAL_ADC_MspInit+0x118>)
 80040fa:	f001 fe4d 	bl	8005d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 80040fe:	2360      	movs	r3, #96	; 0x60
 8004100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004102:	2303      	movs	r3, #3
 8004104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410a:	f107 0314 	add.w	r3, r7, #20
 800410e:	4619      	mov	r1, r3
 8004110:	481e      	ldr	r0, [pc, #120]	; (800418c <HAL_ADC_MspInit+0x11c>)
 8004112:	f001 fe41 	bl	8005d98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004116:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <HAL_ADC_MspInit+0x120>)
 8004118:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <HAL_ADC_MspInit+0x124>)
 800411a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800411c:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <HAL_ADC_MspInit+0x120>)
 800411e:	2200      	movs	r2, #0
 8004120:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004122:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_ADC_MspInit+0x120>)
 8004124:	2200      	movs	r2, #0
 8004126:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_ADC_MspInit+0x120>)
 800412a:	2200      	movs	r2, #0
 800412c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800412e:	4b18      	ldr	r3, [pc, #96]	; (8004190 <HAL_ADC_MspInit+0x120>)
 8004130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004134:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004136:	4b16      	ldr	r3, [pc, #88]	; (8004190 <HAL_ADC_MspInit+0x120>)
 8004138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800413c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800413e:	4b14      	ldr	r3, [pc, #80]	; (8004190 <HAL_ADC_MspInit+0x120>)
 8004140:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004144:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <HAL_ADC_MspInit+0x120>)
 8004148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800414c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_ADC_MspInit+0x120>)
 8004150:	2200      	movs	r2, #0
 8004152:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <HAL_ADC_MspInit+0x120>)
 8004156:	2200      	movs	r2, #0
 8004158:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800415a:	480d      	ldr	r0, [pc, #52]	; (8004190 <HAL_ADC_MspInit+0x120>)
 800415c:	f001 f83c 	bl	80051d8 <HAL_DMA_Init>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004166:	f7fe fa3b 	bl	80025e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a08      	ldr	r2, [pc, #32]	; (8004190 <HAL_ADC_MspInit+0x120>)
 800416e:	639a      	str	r2, [r3, #56]	; 0x38
 8004170:	4a07      	ldr	r2, [pc, #28]	; (8004190 <HAL_ADC_MspInit+0x120>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004176:	bf00      	nop
 8004178:	3728      	adds	r7, #40	; 0x28
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40012000 	.word	0x40012000
 8004184:	40023800 	.word	0x40023800
 8004188:	40020800 	.word	0x40020800
 800418c:	40020000 	.word	0x40020000
 8004190:	200001ec 	.word	0x200001ec
 8004194:	40026410 	.word	0x40026410

08004198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a0:	f107 0314 	add.w	r3, r7, #20
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a19      	ldr	r2, [pc, #100]	; (800421c <HAL_I2C_MspInit+0x84>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d12b      	bne.n	8004212 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	4b18      	ldr	r3, [pc, #96]	; (8004220 <HAL_I2C_MspInit+0x88>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	4a17      	ldr	r2, [pc, #92]	; (8004220 <HAL_I2C_MspInit+0x88>)
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <HAL_I2C_MspInit+0x88>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80041d6:	23c0      	movs	r3, #192	; 0xc0
 80041d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041da:	2312      	movs	r3, #18
 80041dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e2:	2303      	movs	r3, #3
 80041e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041e6:	2304      	movs	r3, #4
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ea:	f107 0314 	add.w	r3, r7, #20
 80041ee:	4619      	mov	r1, r3
 80041f0:	480c      	ldr	r0, [pc, #48]	; (8004224 <HAL_I2C_MspInit+0x8c>)
 80041f2:	f001 fdd1 	bl	8005d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_I2C_MspInit+0x88>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a08      	ldr	r2, [pc, #32]	; (8004220 <HAL_I2C_MspInit+0x88>)
 8004200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_I2C_MspInit+0x88>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004212:	bf00      	nop
 8004214:	3728      	adds	r7, #40	; 0x28
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40005400 	.word	0x40005400
 8004220:	40023800 	.word	0x40023800
 8004224:	40020400 	.word	0x40020400

08004228 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <HAL_TIM_PWM_MspInit+0x38>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_TIM_PWM_MspInit+0x3c>)
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	4a08      	ldr	r2, [pc, #32]	; (8004264 <HAL_TIM_PWM_MspInit+0x3c>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6453      	str	r3, [r2, #68]	; 0x44
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_TIM_PWM_MspInit+0x3c>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	40010000 	.word	0x40010000
 8004264:	40023800 	.word	0x40023800

08004268 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08c      	sub	sp, #48	; 0x30
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004270:	f107 031c 	add.w	r3, r7, #28
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a32      	ldr	r2, [pc, #200]	; (8004350 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d12c      	bne.n	80042e4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	4b31      	ldr	r3, [pc, #196]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	4a30      	ldr	r2, [pc, #192]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	6413      	str	r3, [r2, #64]	; 0x40
 800429a:	4b2e      	ldr	r3, [pc, #184]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	4b2a      	ldr	r3, [pc, #168]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4a29      	ldr	r2, [pc, #164]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 80042b0:	f043 0302 	orr.w	r3, r3, #2
 80042b4:	6313      	str	r3, [r2, #48]	; 0x30
 80042b6:	4b27      	ldr	r3, [pc, #156]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 80042c2:	2330      	movs	r3, #48	; 0x30
 80042c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c6:	2302      	movs	r3, #2
 80042c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ce:	2300      	movs	r3, #0
 80042d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042d2:	2302      	movs	r3, #2
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d6:	f107 031c 	add.w	r3, r7, #28
 80042da:	4619      	mov	r1, r3
 80042dc:	481e      	ldr	r0, [pc, #120]	; (8004358 <HAL_TIM_Encoder_MspInit+0xf0>)
 80042de:	f001 fd5b 	bl	8005d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80042e2:	e030      	b.n	8004346 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1c      	ldr	r2, [pc, #112]	; (800435c <HAL_TIM_Encoder_MspInit+0xf4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d12b      	bne.n	8004346 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	4b18      	ldr	r3, [pc, #96]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 80042f8:	f043 0302 	orr.w	r3, r3, #2
 80042fc:	6453      	str	r3, [r2, #68]	; 0x44
 80042fe:	4b15      	ldr	r3, [pc, #84]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	4a10      	ldr	r2, [pc, #64]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 8004314:	f043 0304 	orr.w	r3, r3, #4
 8004318:	6313      	str	r3, [r2, #48]	; 0x30
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <HAL_TIM_Encoder_MspInit+0xec>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8004326:	23c0      	movs	r3, #192	; 0xc0
 8004328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432a:	2302      	movs	r3, #2
 800432c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004332:	2300      	movs	r3, #0
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004336:	2303      	movs	r3, #3
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800433a:	f107 031c 	add.w	r3, r7, #28
 800433e:	4619      	mov	r1, r3
 8004340:	4807      	ldr	r0, [pc, #28]	; (8004360 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004342:	f001 fd29 	bl	8005d98 <HAL_GPIO_Init>
}
 8004346:	bf00      	nop
 8004348:	3730      	adds	r7, #48	; 0x30
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40000400 	.word	0x40000400
 8004354:	40023800 	.word	0x40023800
 8004358:	40020400 	.word	0x40020400
 800435c:	40010400 	.word	0x40010400
 8004360:	40020800 	.word	0x40020800

08004364 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800436c:	f107 030c 	add.w	r3, r7, #12
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	605a      	str	r2, [r3, #4]
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a12      	ldr	r2, [pc, #72]	; (80043cc <HAL_TIM_MspPostInit+0x68>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d11e      	bne.n	80043c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <HAL_TIM_MspPostInit+0x6c>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <HAL_TIM_MspPostInit+0x6c>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6313      	str	r3, [r2, #48]	; 0x30
 8004396:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <HAL_TIM_MspPostInit+0x6c>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 80043a2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80043a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a8:	2302      	movs	r3, #2
 80043aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b8:	f107 030c 	add.w	r3, r7, #12
 80043bc:	4619      	mov	r1, r3
 80043be:	4805      	ldr	r0, [pc, #20]	; (80043d4 <HAL_TIM_MspPostInit+0x70>)
 80043c0:	f001 fcea 	bl	8005d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043c4:	bf00      	nop
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40020000 	.word	0x40020000

080043d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043dc:	e7fe      	b.n	80043dc <NMI_Handler+0x4>

080043de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043e2:	e7fe      	b.n	80043e2 <HardFault_Handler+0x4>

080043e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043e8:	e7fe      	b.n	80043e8 <MemManage_Handler+0x4>

080043ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043ee:	e7fe      	b.n	80043ee <BusFault_Handler+0x4>

080043f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043f4:	e7fe      	b.n	80043f4 <UsageFault_Handler+0x4>

080043f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043f6:	b480      	push	{r7}
 80043f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043fa:	bf00      	nop
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr

08004402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004402:	b480      	push	{r7}
 8004404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004406:	bf00      	nop
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800440e:	b480      	push	{r7}
 8004410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800441e:	f000 f983 	bl	8004728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  SysTickFunction();
 8004422:	f000 f857 	bl	80044d4 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}

0800442a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch2_Pin);
 800442e:	2004      	movs	r0, #4
 8004430:	f001 fe80 	bl	8006134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004434:	bf00      	nop
 8004436:	bd80      	pop	{r7, pc}

08004438 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch1_Pin);
 800443c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004440:	f001 fe78 	bl	8006134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004444:	bf00      	nop
 8004446:	bd80      	pop	{r7, pc}

08004448 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800444c:	4802      	ldr	r0, [pc, #8]	; (8004458 <DMA2_Stream0_IRQHandler+0x10>)
 800444e:	f001 f839 	bl	80054c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	200001ec 	.word	0x200001ec

0800445c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <_sbrk+0x5c>)
 8004466:	4b15      	ldr	r3, [pc, #84]	; (80044bc <_sbrk+0x60>)
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004470:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <_sbrk+0x64>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004478:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <_sbrk+0x64>)
 800447a:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <_sbrk+0x68>)
 800447c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800447e:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <_sbrk+0x64>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	429a      	cmp	r2, r3
 800448a:	d207      	bcs.n	800449c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800448c:	f004 f898 	bl	80085c0 <__errno>
 8004490:	4603      	mov	r3, r0
 8004492:	220c      	movs	r2, #12
 8004494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004496:	f04f 33ff 	mov.w	r3, #4294967295
 800449a:	e009      	b.n	80044b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800449c:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <_sbrk+0x64>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044a2:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <_sbrk+0x64>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4413      	add	r3, r2
 80044aa:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <_sbrk+0x64>)
 80044ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044ae:	68fb      	ldr	r3, [r7, #12]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20020000 	.word	0x20020000
 80044bc:	00000400 	.word	0x00000400
 80044c0:	200014f0 	.word	0x200014f0
 80044c4:	20001530 	.word	0x20001530

080044c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <SysTickFunction>:

#include "main.h"
#include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 80044da:	f7fe fc79 	bl	8002dd0 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 80044de:	f7fd f82f 	bl	8001540 <getRightEncoderCounts>
 80044e2:	4603      	mov	r3, r0
 80044e4:	461a      	mov	r2, r3
 80044e6:	f647 1318 	movw	r3, #31000	; 0x7918
 80044ea:	429a      	cmp	r2, r3
 80044ec:	dc15      	bgt.n	800451a <SysTickFunction+0x46>
 80044ee:	f7fd f835 	bl	800155c <getLeftEncoderCounts>
 80044f2:	4603      	mov	r3, r0
 80044f4:	461a      	mov	r2, r3
 80044f6:	f647 1318 	movw	r3, #31000	; 0x7918
 80044fa:	429a      	cmp	r2, r3
 80044fc:	dc0d      	bgt.n	800451a <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 80044fe:	f7fd f81f 	bl	8001540 <getRightEncoderCounts>
 8004502:	4603      	mov	r3, r0
 8004504:	461a      	mov	r2, r3
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <SysTickFunction+0x74>)
 8004508:	429a      	cmp	r2, r3
 800450a:	db06      	blt.n	800451a <SysTickFunction+0x46>
 800450c:	f7fd f826 	bl	800155c <getLeftEncoderCounts>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <SysTickFunction+0x74>)
 8004516:	429a      	cmp	r2, r3
 8004518:	da11      	bge.n	800453e <SysTickFunction+0x6a>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 800451a:	f7fd f811 	bl	8001540 <getRightEncoderCounts>
 800451e:	4603      	mov	r3, r0
 8004520:	b29c      	uxth	r4, r3
 8004522:	f7fd f81b 	bl	800155c <getLeftEncoderCounts>
 8004526:	4603      	mov	r3, r0
 8004528:	b29b      	uxth	r3, r3
 800452a:	1ae3      	subs	r3, r4, r3
 800452c:	b29b      	uxth	r3, r3
 800452e:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 8004530:	f7fd f822 	bl	8001578 <resetEncoders>
		TIM2->CNT = (int16_t) difference;
 8004534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800453c:	6253      	str	r3, [r2, #36]	; 0x24
	}
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bd90      	pop	{r4, r7, pc}
 8004546:	bf00      	nop
 8004548:	ffff86e8 	.word	0xffff86e8

0800454c <leftWallCheck>:

void setLeftWall(int wall) { left_wall_threshold = wall; }
void setRightWall(int wall) { right_wall_threshold = wall; }
void setFrontWall(int wall) { front_wall_threshold = wall; }

int16_t leftWallCheck() {
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
	if (readIR(IR_LEFT) > left_wall_threshold) {
 8004550:	2001      	movs	r0, #1
 8004552:	f7fd f94b 	bl	80017ec <readIR>
 8004556:	4603      	mov	r3, r0
 8004558:	461a      	mov	r2, r3
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <leftWallCheck+0x30>)
 800455c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004560:	429a      	cmp	r2, r3
 8004562:	dd03      	ble.n	800456c <leftWallCheck+0x20>
		left_wall = 1;
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <leftWallCheck+0x34>)
 8004566:	2201      	movs	r2, #1
 8004568:	801a      	strh	r2, [r3, #0]
 800456a:	e002      	b.n	8004572 <leftWallCheck+0x26>
	}
	else {
		left_wall = 0;
 800456c:	4b04      	ldr	r3, [pc, #16]	; (8004580 <leftWallCheck+0x34>)
 800456e:	2200      	movs	r2, #0
 8004570:	801a      	strh	r2, [r3, #0]
	}
	return left_wall;
 8004572:	4b03      	ldr	r3, [pc, #12]	; (8004580 <leftWallCheck+0x34>)
 8004574:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000010 	.word	0x20000010
 8004580:	200014f4 	.word	0x200014f4

08004584 <rightWallCheck>:

int16_t rightWallCheck() {
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
	if (readIR(IR_RIGHT) > right_wall_threshold) {
 8004588:	2002      	movs	r0, #2
 800458a:	f7fd f92f 	bl	80017ec <readIR>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <rightWallCheck+0x30>)
 8004594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004598:	429a      	cmp	r2, r3
 800459a:	dd03      	ble.n	80045a4 <rightWallCheck+0x20>
		right_wall = 1;
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <rightWallCheck+0x34>)
 800459e:	2201      	movs	r2, #1
 80045a0:	801a      	strh	r2, [r3, #0]
 80045a2:	e002      	b.n	80045aa <rightWallCheck+0x26>
	}
	else {
		right_wall = 0;
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <rightWallCheck+0x34>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	801a      	strh	r2, [r3, #0]
	}
	return right_wall;
 80045aa:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <rightWallCheck+0x34>)
 80045ac:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000012 	.word	0x20000012
 80045b8:	200014f6 	.word	0x200014f6

080045bc <frontWallCheck>:

int16_t frontWallCheck() {
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
	if (readIR(IR_FORWARD_LEFT) > front_wall_threshold) {
 80045c0:	2000      	movs	r0, #0
 80045c2:	f7fd f913 	bl	80017ec <readIR>
 80045c6:	4603      	mov	r3, r0
 80045c8:	461a      	mov	r2, r3
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <frontWallCheck+0x30>)
 80045cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	dd03      	ble.n	80045dc <frontWallCheck+0x20>
		front_wall = 1;
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <frontWallCheck+0x34>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	801a      	strh	r2, [r3, #0]
 80045da:	e002      	b.n	80045e2 <frontWallCheck+0x26>
	}
	else {
		front_wall = 0;
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <frontWallCheck+0x34>)
 80045de:	2200      	movs	r2, #0
 80045e0:	801a      	strh	r2, [r3, #0]
	}
	return front_wall;
 80045e2:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <frontWallCheck+0x34>)
 80045e4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20000014 	.word	0x20000014
 80045f0:	200014f8 	.word	0x200014f8

080045f4 <sign>:

int16_t sign(float x) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	if (x > 0)
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7fc fd51 	bl	80010a8 <__aeabi_fcmpgt>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <sign+0x1c>
	{
		return 1;
 800460c:	2301      	movs	r3, #1
 800460e:	e00b      	b.n	8004628 <sign+0x34>
	}
	else if (x < 0)
 8004610:	f04f 0100 	mov.w	r1, #0
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fc fd29 	bl	800106c <__aeabi_fcmplt>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <sign+0x32>
	{
		return -1;
 8004620:	f04f 33ff 	mov.w	r3, #4294967295
 8004624:	e000      	b.n	8004628 <sign+0x34>
	}
	else
	{
		return 0;
 8004626:	2300      	movs	r3, #0
	}
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004668 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004634:	480d      	ldr	r0, [pc, #52]	; (800466c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004636:	490e      	ldr	r1, [pc, #56]	; (8004670 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004638:	4a0e      	ldr	r2, [pc, #56]	; (8004674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800463a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800463c:	e002      	b.n	8004644 <LoopCopyDataInit>

0800463e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800463e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004642:	3304      	adds	r3, #4

08004644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004648:	d3f9      	bcc.n	800463e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800464a:	4a0b      	ldr	r2, [pc, #44]	; (8004678 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800464c:	4c0b      	ldr	r4, [pc, #44]	; (800467c <LoopFillZerobss+0x26>)
  movs r3, #0
 800464e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004650:	e001      	b.n	8004656 <LoopFillZerobss>

08004652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004654:	3204      	adds	r2, #4

08004656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004658:	d3fb      	bcc.n	8004652 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800465a:	f7ff ff35 	bl	80044c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800465e:	f003 ffb5 	bl	80085cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004662:	f7fd fb53 	bl	8001d0c <main>
  bx  lr    
 8004666:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800466c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004670:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004674:	08008880 	.word	0x08008880
  ldr r2, =_sbss
 8004678:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800467c:	20001530 	.word	0x20001530

08004680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004680:	e7fe      	b.n	8004680 <ADC_IRQHandler>
	...

08004684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <HAL_Init+0x40>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <HAL_Init+0x40>)
 800468e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_Init+0x40>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <HAL_Init+0x40>)
 800469a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800469e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <HAL_Init+0x40>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a07      	ldr	r2, [pc, #28]	; (80046c4 <HAL_Init+0x40>)
 80046a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ac:	2003      	movs	r0, #3
 80046ae:	f000 fd51 	bl	8005154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046b2:	200f      	movs	r0, #15
 80046b4:	f000 f808 	bl	80046c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80046b8:	f7ff fcb4 	bl	8004024 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023c00 	.word	0x40023c00

080046c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_InitTick+0x54>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_InitTick+0x58>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	4619      	mov	r1, r3
 80046da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046de:	fbb3 f3f1 	udiv	r3, r3, r1
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fd69 	bl	80051be <HAL_SYSTICK_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e00e      	b.n	8004714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b0f      	cmp	r3, #15
 80046fa:	d80a      	bhi.n	8004712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046fc:	2200      	movs	r2, #0
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	f000 fd31 	bl	800516a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004708:	4a06      	ldr	r2, [pc, #24]	; (8004724 <HAL_InitTick+0x5c>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	2000000c 	.word	0x2000000c
 8004720:	2000001c 	.word	0x2000001c
 8004724:	20000018 	.word	0x20000018

08004728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <HAL_IncTick+0x1c>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_IncTick+0x20>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4413      	add	r3, r2
 8004738:	4a03      	ldr	r2, [pc, #12]	; (8004748 <HAL_IncTick+0x20>)
 800473a:	6013      	str	r3, [r2, #0]
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	2000001c 	.word	0x2000001c
 8004748:	200014fc 	.word	0x200014fc

0800474c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return uwTick;
 8004750:	4b02      	ldr	r3, [pc, #8]	; (800475c <HAL_GetTick+0x10>)
 8004752:	681b      	ldr	r3, [r3, #0]
}
 8004754:	4618      	mov	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	200014fc 	.word	0x200014fc

08004760 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e033      	b.n	80047de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fc76 	bl	8004070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b00      	cmp	r3, #0
 800479c:	d118      	bne.n	80047d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80047a6:	f023 0302 	bic.w	r3, r3, #2
 80047aa:	f043 0202 	orr.w	r2, r3, #2
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa7a 	bl	8004cac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	f043 0201 	orr.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40
 80047ce:	e001      	b.n	80047d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_ADC_Start_DMA+0x1e>
 8004802:	2302      	movs	r3, #2
 8004804:	e0bc      	b.n	8004980 <HAL_ADC_Start_DMA+0x198>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d018      	beq.n	800484e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800482c:	4b56      	ldr	r3, [pc, #344]	; (8004988 <HAL_ADC_Start_DMA+0x1a0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a56      	ldr	r2, [pc, #344]	; (800498c <HAL_ADC_Start_DMA+0x1a4>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	0c9a      	lsrs	r2, r3, #18
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8004840:	e002      	b.n	8004848 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	3b01      	subs	r3, #1
 8004846:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f9      	bne.n	8004842 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	f040 8084 	bne.w	8004966 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004888:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489c:	d106      	bne.n	80048ac <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	f023 0206 	bic.w	r2, r3, #6
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	645a      	str	r2, [r3, #68]	; 0x44
 80048aa:	e002      	b.n	80048b2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	4a34      	ldr	r2, [pc, #208]	; (8004990 <HAL_ADC_Start_DMA+0x1a8>)
 80048c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	4a33      	ldr	r2, [pc, #204]	; (8004994 <HAL_ADC_Start_DMA+0x1ac>)
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	4a32      	ldr	r2, [pc, #200]	; (8004998 <HAL_ADC_Start_DMA+0x1b0>)
 80048d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80048da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	334c      	adds	r3, #76	; 0x4c
 8004906:	4619      	mov	r1, r3
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f000 fd12 	bl	8005334 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004910:	4b22      	ldr	r3, [pc, #136]	; (800499c <HAL_ADC_Start_DMA+0x1b4>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10f      	bne.n	800493c <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d129      	bne.n	800497e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004938:	609a      	str	r2, [r3, #8]
 800493a:	e020      	b.n	800497e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_ADC_Start_DMA+0x1b8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d11b      	bne.n	800497e <HAL_ADC_Start_DMA+0x196>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d114      	bne.n	800497e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	e00b      	b.n	800497e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f043 0210 	orr.w	r2, r3, #16
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	f043 0201 	orr.w	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	2000000c 	.word	0x2000000c
 800498c:	431bde83 	.word	0x431bde83
 8004990:	08004eb9 	.word	0x08004eb9
 8004994:	08004f73 	.word	0x08004f73
 8004998:	08004f8f 	.word	0x08004f8f
 800499c:	40012300 	.word	0x40012300
 80049a0:	40012000 	.word	0x40012000

080049a4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_ADC_Stop_DMA+0x1a>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e03f      	b.n	8004a3e <HAL_ADC_Stop_DMA+0x9a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0201 	bic.w	r2, r2, #1
 80049d4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d127      	bne.n	8004a34 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049f2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d118      	bne.n	8004a34 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fcec 	bl	80053e4 <HAL_DMA_Abort>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004a1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr

08004a58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
	...

08004a6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x1c>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e103      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x224>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b09      	cmp	r3, #9
 8004a96:	d925      	bls.n	8004ae4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68d9      	ldr	r1, [r3, #12]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4413      	add	r3, r2
 8004aac:	3b1e      	subs	r3, #30
 8004aae:	2207      	movs	r2, #7
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43da      	mvns	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	400a      	ands	r2, r1
 8004abc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68d9      	ldr	r1, [r3, #12]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	4618      	mov	r0, r3
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4403      	add	r3, r0
 8004ad6:	3b1e      	subs	r3, #30
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	e022      	b.n	8004b2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6919      	ldr	r1, [r3, #16]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	4613      	mov	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	4413      	add	r3, r2
 8004af8:	2207      	movs	r2, #7
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43da      	mvns	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	400a      	ands	r2, r1
 8004b06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6919      	ldr	r1, [r3, #16]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	4618      	mov	r0, r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4403      	add	r3, r0
 8004b20:	409a      	lsls	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d824      	bhi.n	8004b7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	3b05      	subs	r3, #5
 8004b44:	221f      	movs	r2, #31
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	43da      	mvns	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	400a      	ands	r2, r1
 8004b52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	4618      	mov	r0, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3b05      	subs	r3, #5
 8004b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34
 8004b7a:	e04c      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b0c      	cmp	r3, #12
 8004b82:	d824      	bhi.n	8004bce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	3b23      	subs	r3, #35	; 0x23
 8004b96:	221f      	movs	r2, #31
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	400a      	ands	r2, r1
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3b23      	subs	r3, #35	; 0x23
 8004bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
 8004bcc:	e023      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	3b41      	subs	r3, #65	; 0x41
 8004be0:	221f      	movs	r2, #31
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43da      	mvns	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	400a      	ands	r2, r1
 8004bee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	3b41      	subs	r3, #65	; 0x41
 8004c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a20      	ldr	r2, [pc, #128]	; (8004c9c <HAL_ADC_ConfigChannel+0x230>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d109      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x1c8>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b12      	cmp	r3, #18
 8004c26:	d105      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <HAL_ADC_ConfigChannel+0x234>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a1c      	ldr	r2, [pc, #112]	; (8004ca0 <HAL_ADC_ConfigChannel+0x234>)
 8004c2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c32:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a18      	ldr	r2, [pc, #96]	; (8004c9c <HAL_ADC_ConfigChannel+0x230>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d123      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x21a>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d003      	beq.n	8004c4e <HAL_ADC_ConfigChannel+0x1e2>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b11      	cmp	r3, #17
 8004c4c:	d11b      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004c4e:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <HAL_ADC_ConfigChannel+0x234>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <HAL_ADC_ConfigChannel+0x234>)
 8004c54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c58:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d111      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c62:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <HAL_ADC_ConfigChannel+0x238>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a10      	ldr	r2, [pc, #64]	; (8004ca8 <HAL_ADC_ConfigChannel+0x23c>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	0c9a      	lsrs	r2, r3, #18
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004c78:	e002      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f9      	bne.n	8004c7a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40012000 	.word	0x40012000
 8004ca0:	40012300 	.word	0x40012300
 8004ca4:	2000000c 	.word	0x2000000c
 8004ca8:	431bde83 	.word	0x431bde83

08004cac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004cb4:	4b7e      	ldr	r3, [pc, #504]	; (8004eb0 <ADC_Init+0x204>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a7d      	ldr	r2, [pc, #500]	; (8004eb0 <ADC_Init+0x204>)
 8004cba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004cbe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004cc0:	4b7b      	ldr	r3, [pc, #492]	; (8004eb0 <ADC_Init+0x204>)
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4979      	ldr	r1, [pc, #484]	; (8004eb0 <ADC_Init+0x204>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6859      	ldr	r1, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	021a      	lsls	r2, r3, #8
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6859      	ldr	r1, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6899      	ldr	r1, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	4a5e      	ldr	r2, [pc, #376]	; (8004eb4 <ADC_Init+0x208>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d022      	beq.n	8004d86 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6899      	ldr	r1, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6899      	ldr	r1, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]
 8004d84:	e00f      	b.n	8004da6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004da4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0202 	bic.w	r2, r2, #2
 8004db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6899      	ldr	r1, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	7e1b      	ldrb	r3, [r3, #24]
 8004dc0:	005a      	lsls	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d027      	beq.n	8004e24 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004df2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004dfe:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	fa92 f2a2 	rbit	r2, r2
 8004e06:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	fab2 f282 	clz	r2, r2
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	fa03 f102 	lsl.w	r1, r3, r2
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
 8004e22:	e007      	b.n	8004e34 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	051a      	lsls	r2, r3, #20
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6899      	ldr	r1, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e76:	025a      	lsls	r2, r3, #9
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6899      	ldr	r1, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	029a      	lsls	r2, r3, #10
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40012300 	.word	0x40012300
 8004eb4:	0f000001 	.word	0x0f000001

08004eb8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d13c      	bne.n	8004f4c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d12b      	bne.n	8004f44 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d127      	bne.n	8004f44 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d006      	beq.n	8004f10 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d119      	bne.n	8004f44 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0220 	bic.w	r2, r2, #32
 8004f1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	f043 0201 	orr.w	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7fc fd37 	bl	80019b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f4a:	e00e      	b.n	8004f6a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fd7d 	bl	8004a58 <HAL_ADC_ErrorCallback>
}
 8004f5e:	e004      	b.n	8004f6a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	4798      	blx	r3
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff fd60 	bl	8004a46 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2240      	movs	r2, #64	; 0x40
 8004fa0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	f043 0204 	orr.w	r2, r3, #4
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f7ff fd52 	bl	8004a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fb4:	bf00      	nop
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fcc:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <__NVIC_SetPriorityGrouping+0x44>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fee:	4a04      	ldr	r2, [pc, #16]	; (8005000 <__NVIC_SetPriorityGrouping+0x44>)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	60d3      	str	r3, [r2, #12]
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	e000ed00 	.word	0xe000ed00

08005004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <__NVIC_GetPriorityGrouping+0x18>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	0a1b      	lsrs	r3, r3, #8
 800500e:	f003 0307 	and.w	r3, r3, #7
}
 8005012:	4618      	mov	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	e000ed00 	.word	0xe000ed00

08005020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502e:	2b00      	cmp	r3, #0
 8005030:	db0b      	blt.n	800504a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	f003 021f 	and.w	r2, r3, #31
 8005038:	4906      	ldr	r1, [pc, #24]	; (8005054 <__NVIC_EnableIRQ+0x34>)
 800503a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	2001      	movs	r0, #1
 8005042:	fa00 f202 	lsl.w	r2, r0, r2
 8005046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	e000e100 	.word	0xe000e100

08005058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	6039      	str	r1, [r7, #0]
 8005062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005068:	2b00      	cmp	r3, #0
 800506a:	db0a      	blt.n	8005082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	490c      	ldr	r1, [pc, #48]	; (80050a4 <__NVIC_SetPriority+0x4c>)
 8005072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005076:	0112      	lsls	r2, r2, #4
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	440b      	add	r3, r1
 800507c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005080:	e00a      	b.n	8005098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	4908      	ldr	r1, [pc, #32]	; (80050a8 <__NVIC_SetPriority+0x50>)
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	3b04      	subs	r3, #4
 8005090:	0112      	lsls	r2, r2, #4
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	440b      	add	r3, r1
 8005096:	761a      	strb	r2, [r3, #24]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	e000e100 	.word	0xe000e100
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b089      	sub	sp, #36	; 0x24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f1c3 0307 	rsb	r3, r3, #7
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	bf28      	it	cs
 80050ca:	2304      	movcs	r3, #4
 80050cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	3304      	adds	r3, #4
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d902      	bls.n	80050dc <NVIC_EncodePriority+0x30>
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	3b03      	subs	r3, #3
 80050da:	e000      	b.n	80050de <NVIC_EncodePriority+0x32>
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050e0:	f04f 32ff 	mov.w	r2, #4294967295
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43da      	mvns	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	401a      	ands	r2, r3
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050f4:	f04f 31ff 	mov.w	r1, #4294967295
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	fa01 f303 	lsl.w	r3, r1, r3
 80050fe:	43d9      	mvns	r1, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005104:	4313      	orrs	r3, r2
         );
}
 8005106:	4618      	mov	r0, r3
 8005108:	3724      	adds	r7, #36	; 0x24
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3b01      	subs	r3, #1
 800511c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005120:	d301      	bcc.n	8005126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005122:	2301      	movs	r3, #1
 8005124:	e00f      	b.n	8005146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005126:	4a0a      	ldr	r2, [pc, #40]	; (8005150 <SysTick_Config+0x40>)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3b01      	subs	r3, #1
 800512c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800512e:	210f      	movs	r1, #15
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	f7ff ff90 	bl	8005058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <SysTick_Config+0x40>)
 800513a:	2200      	movs	r2, #0
 800513c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800513e:	4b04      	ldr	r3, [pc, #16]	; (8005150 <SysTick_Config+0x40>)
 8005140:	2207      	movs	r2, #7
 8005142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	e000e010 	.word	0xe000e010

08005154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ff2d 	bl	8004fbc <__NVIC_SetPriorityGrouping>
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800516a:	b580      	push	{r7, lr}
 800516c:	b086      	sub	sp, #24
 800516e:	af00      	add	r7, sp, #0
 8005170:	4603      	mov	r3, r0
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800517c:	f7ff ff42 	bl	8005004 <__NVIC_GetPriorityGrouping>
 8005180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	6978      	ldr	r0, [r7, #20]
 8005188:	f7ff ff90 	bl	80050ac <NVIC_EncodePriority>
 800518c:	4602      	mov	r2, r0
 800518e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff ff5f 	bl	8005058 <__NVIC_SetPriority>
}
 800519a:	bf00      	nop
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	4603      	mov	r3, r0
 80051aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff ff35 	bl	8005020 <__NVIC_EnableIRQ>
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff ffa2 	bl	8005110 <SysTick_Config>
 80051cc:	4603      	mov	r3, r0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051e4:	f7ff fab2 	bl	800474c <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e099      	b.n	8005328 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005214:	e00f      	b.n	8005236 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005216:	f7ff fa99 	bl	800474c <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b05      	cmp	r3, #5
 8005222:	d908      	bls.n	8005236 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2203      	movs	r2, #3
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e078      	b.n	8005328 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e8      	bne.n	8005216 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4b38      	ldr	r3, [pc, #224]	; (8005330 <HAL_DMA_Init+0x158>)
 8005250:	4013      	ands	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005262:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800526e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800527a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	2b04      	cmp	r3, #4
 800528e:	d107      	bne.n	80052a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	4313      	orrs	r3, r2
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f023 0307 	bic.w	r3, r3, #7
 80052b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d117      	bne.n	80052fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00e      	beq.n	80052fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fadd 	bl	800589c <DMA_CheckFifoParam>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2240      	movs	r2, #64	; 0x40
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052f6:	2301      	movs	r3, #1
 80052f8:	e016      	b.n	8005328 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa96 	bl	8005834 <DMA_CalcBaseAndBitshift>
 8005308:	4603      	mov	r3, r0
 800530a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005310:	223f      	movs	r2, #63	; 0x3f
 8005312:	409a      	lsls	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	f010803f 	.word	0xf010803f

08005334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_DMA_Start_IT+0x26>
 8005356:	2302      	movs	r3, #2
 8005358:	e040      	b.n	80053dc <HAL_DMA_Start_IT+0xa8>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	d12f      	bne.n	80053ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fa28 	bl	80057d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538c:	223f      	movs	r2, #63	; 0x3f
 800538e:	409a      	lsls	r2, r3
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0216 	orr.w	r2, r2, #22
 80053a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0208 	orr.w	r2, r2, #8
 80053ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e005      	b.n	80053da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
 80053d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053da:	7dfb      	ldrb	r3, [r7, #23]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053f2:	f7ff f9ab 	bl	800474c <HAL_GetTick>
 80053f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d008      	beq.n	8005416 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2280      	movs	r2, #128	; 0x80
 8005408:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e052      	b.n	80054bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0216 	bic.w	r2, r2, #22
 8005424:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695a      	ldr	r2, [r3, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005434:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <HAL_DMA_Abort+0x62>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0208 	bic.w	r2, r2, #8
 8005454:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005466:	e013      	b.n	8005490 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005468:	f7ff f970 	bl	800474c <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b05      	cmp	r3, #5
 8005474:	d90c      	bls.n	8005490 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2203      	movs	r2, #3
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e015      	b.n	80054bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e4      	bne.n	8005468 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a2:	223f      	movs	r2, #63	; 0x3f
 80054a4:	409a      	lsls	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054d0:	4b8e      	ldr	r3, [pc, #568]	; (800570c <HAL_DMA_IRQHandler+0x248>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a8e      	ldr	r2, [pc, #568]	; (8005710 <HAL_DMA_IRQHandler+0x24c>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	0a9b      	lsrs	r3, r3, #10
 80054dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ee:	2208      	movs	r2, #8
 80054f0:	409a      	lsls	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01a      	beq.n	8005530 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d013      	beq.n	8005530 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0204 	bic.w	r2, r2, #4
 8005516:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551c:	2208      	movs	r2, #8
 800551e:	409a      	lsls	r2, r3
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	f043 0201 	orr.w	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005534:	2201      	movs	r2, #1
 8005536:	409a      	lsls	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4013      	ands	r3, r2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d012      	beq.n	8005566 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005552:	2201      	movs	r2, #1
 8005554:	409a      	lsls	r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556a:	2204      	movs	r2, #4
 800556c:	409a      	lsls	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4013      	ands	r3, r2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d012      	beq.n	800559c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00b      	beq.n	800559c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005588:	2204      	movs	r2, #4
 800558a:	409a      	lsls	r2, r3
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005594:	f043 0204 	orr.w	r2, r3, #4
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a0:	2210      	movs	r2, #16
 80055a2:	409a      	lsls	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d043      	beq.n	8005634 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d03c      	beq.n	8005634 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	2210      	movs	r2, #16
 80055c0:	409a      	lsls	r2, r3
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d018      	beq.n	8005606 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d108      	bne.n	80055f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d024      	beq.n	8005634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
 80055f2:	e01f      	b.n	8005634 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
 8005604:	e016      	b.n	8005634 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d107      	bne.n	8005624 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0208 	bic.w	r2, r2, #8
 8005622:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	2220      	movs	r2, #32
 800563a:	409a      	lsls	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 808f 	beq.w	8005764 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8087 	beq.w	8005764 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565a:	2220      	movs	r2, #32
 800565c:	409a      	lsls	r2, r3
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b05      	cmp	r3, #5
 800566c:	d136      	bne.n	80056dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0216 	bic.w	r2, r2, #22
 800567c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695a      	ldr	r2, [r3, #20]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800568c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <HAL_DMA_IRQHandler+0x1da>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0208 	bic.w	r2, r2, #8
 80056ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b2:	223f      	movs	r2, #63	; 0x3f
 80056b4:	409a      	lsls	r2, r3
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d07e      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
        }
        return;
 80056da:	e079      	b.n	80057d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01d      	beq.n	8005726 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10d      	bne.n	8005714 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d031      	beq.n	8005764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	4798      	blx	r3
 8005708:	e02c      	b.n	8005764 <HAL_DMA_IRQHandler+0x2a0>
 800570a:	bf00      	nop
 800570c:	2000000c 	.word	0x2000000c
 8005710:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d023      	beq.n	8005764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4798      	blx	r3
 8005724:	e01e      	b.n	8005764 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10f      	bne.n	8005754 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0210 	bic.w	r2, r2, #16
 8005742:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005768:	2b00      	cmp	r3, #0
 800576a:	d032      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d022      	beq.n	80057be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2205      	movs	r2, #5
 800577c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	3301      	adds	r3, #1
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	429a      	cmp	r2, r3
 800579a:	d307      	bcc.n	80057ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f2      	bne.n	8005790 <HAL_DMA_IRQHandler+0x2cc>
 80057aa:	e000      	b.n	80057ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
 80057ce:	e000      	b.n	80057d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80057d0:	bf00      	nop
    }
  }
}
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	d108      	bne.n	8005818 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005816:	e007      	b.n	8005828 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	60da      	str	r2, [r3, #12]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
	...

08005834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	3b10      	subs	r3, #16
 8005844:	4a13      	ldr	r2, [pc, #76]	; (8005894 <DMA_CalcBaseAndBitshift+0x60>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <DMA_CalcBaseAndBitshift+0x64>)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b03      	cmp	r3, #3
 8005860:	d909      	bls.n	8005876 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	1d1a      	adds	r2, r3, #4
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	659a      	str	r2, [r3, #88]	; 0x58
 8005874:	e007      	b.n	8005886 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr
 8005894:	aaaaaaab 	.word	0xaaaaaaab
 8005898:	08008868 	.word	0x08008868

0800589c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11f      	bne.n	80058f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d856      	bhi.n	800596a <DMA_CheckFifoParam+0xce>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <DMA_CheckFifoParam+0x28>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058e7 	.word	0x080058e7
 80058cc:	080058d5 	.word	0x080058d5
 80058d0:	0800596b 	.word	0x0800596b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d046      	beq.n	800596e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e4:	e043      	b.n	800596e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058ee:	d140      	bne.n	8005972 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f4:	e03d      	b.n	8005972 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fe:	d121      	bne.n	8005944 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d837      	bhi.n	8005976 <DMA_CheckFifoParam+0xda>
 8005906:	a201      	add	r2, pc, #4	; (adr r2, 800590c <DMA_CheckFifoParam+0x70>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	0800591d 	.word	0x0800591d
 8005910:	08005923 	.word	0x08005923
 8005914:	0800591d 	.word	0x0800591d
 8005918:	08005935 	.word	0x08005935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
      break;
 8005920:	e030      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d025      	beq.n	800597a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005932:	e022      	b.n	800597a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800593c:	d11f      	bne.n	800597e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005942:	e01c      	b.n	800597e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d903      	bls.n	8005952 <DMA_CheckFifoParam+0xb6>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b03      	cmp	r3, #3
 800594e:	d003      	beq.n	8005958 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005950:	e018      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
      break;
 8005956:	e015      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00e      	beq.n	8005982 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      break;
 8005968:	e00b      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
      break;
 800596a:	bf00      	nop
 800596c:	e00a      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 800596e:	bf00      	nop
 8005970:	e008      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 8005972:	bf00      	nop
 8005974:	e006      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 8005976:	bf00      	nop
 8005978:	e004      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 800597a:	bf00      	nop
 800597c:	e002      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;   
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 8005982:	bf00      	nop
    }
  } 
  
  return status; 
 8005984:	7bfb      	ldrb	r3, [r7, #15]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059a2:	4b23      	ldr	r3, [pc, #140]	; (8005a30 <HAL_FLASH_Program+0xa0>)
 80059a4:	7e1b      	ldrb	r3, [r3, #24]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_FLASH_Program+0x1e>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e03b      	b.n	8005a26 <HAL_FLASH_Program+0x96>
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <HAL_FLASH_Program+0xa0>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059b8:	f000 f870 	bl	8005a9c <FLASH_WaitForLastOperation>
 80059bc:	4603      	mov	r3, r0
 80059be:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80059c0:	7dfb      	ldrb	r3, [r7, #23]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d12b      	bne.n	8005a1e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d105      	bne.n	80059d8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80059cc:	783b      	ldrb	r3, [r7, #0]
 80059ce:	4619      	mov	r1, r3
 80059d0:	68b8      	ldr	r0, [r7, #8]
 80059d2:	f000 f919 	bl	8005c08 <FLASH_Program_Byte>
 80059d6:	e016      	b.n	8005a06 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d105      	bne.n	80059ea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80059de:	883b      	ldrh	r3, [r7, #0]
 80059e0:	4619      	mov	r1, r3
 80059e2:	68b8      	ldr	r0, [r7, #8]
 80059e4:	f000 f8ee 	bl	8005bc4 <FLASH_Program_HalfWord>
 80059e8:	e00d      	b.n	8005a06 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d105      	bne.n	80059fc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	4619      	mov	r1, r3
 80059f4:	68b8      	ldr	r0, [r7, #8]
 80059f6:	f000 f8c3 	bl	8005b80 <FLASH_Program_Word>
 80059fa:	e004      	b.n	8005a06 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80059fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a00:	68b8      	ldr	r0, [r7, #8]
 8005a02:	f000 f88b 	bl	8005b1c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a0a:	f000 f847 	bl	8005a9c <FLASH_WaitForLastOperation>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005a12:	4b08      	ldr	r3, [pc, #32]	; (8005a34 <HAL_FLASH_Program+0xa4>)
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	4a07      	ldr	r2, [pc, #28]	; (8005a34 <HAL_FLASH_Program+0xa4>)
 8005a18:	f023 0301 	bic.w	r3, r3, #1
 8005a1c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a1e:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <HAL_FLASH_Program+0xa0>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20001500 	.word	0x20001500
 8005a34:	40023c00 	.word	0x40023c00

08005a38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <HAL_FLASH_Unlock+0x38>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	da0b      	bge.n	8005a62 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_FLASH_Unlock+0x38>)
 8005a4c:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <HAL_FLASH_Unlock+0x3c>)
 8005a4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005a50:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <HAL_FLASH_Unlock+0x38>)
 8005a52:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <HAL_FLASH_Unlock+0x40>)
 8005a54:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <HAL_FLASH_Unlock+0x38>)
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da01      	bge.n	8005a62 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005a62:	79fb      	ldrb	r3, [r7, #7]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40023c00 	.word	0x40023c00
 8005a74:	45670123 	.word	0x45670123
 8005a78:	cdef89ab 	.word	0xcdef89ab

08005a7c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <HAL_FLASH_Lock+0x1c>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	4a04      	ldr	r2, [pc, #16]	; (8005a98 <HAL_FLASH_Lock+0x1c>)
 8005a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a8a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40023c00 	.word	0x40023c00

08005a9c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <FLASH_WaitForLastOperation+0x78>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005aae:	f7fe fe4d 	bl	800474c <HAL_GetTick>
 8005ab2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005ab4:	e010      	b.n	8005ad8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d00c      	beq.n	8005ad8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <FLASH_WaitForLastOperation+0x38>
 8005ac4:	f7fe fe42 	bl	800474c <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d201      	bcs.n	8005ad8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e019      	b.n	8005b0c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005ad8:	4b0f      	ldr	r3, [pc, #60]	; (8005b18 <FLASH_WaitForLastOperation+0x7c>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e8      	bne.n	8005ab6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <FLASH_WaitForLastOperation+0x7c>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005af0:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <FLASH_WaitForLastOperation+0x7c>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005af6:	4b08      	ldr	r3, [pc, #32]	; (8005b18 <FLASH_WaitForLastOperation+0x7c>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005b02:	f000 f8a1 	bl	8005c48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
  
}  
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20001500 	.word	0x20001500
 8005b18:	40023c00 	.word	0x40023c00

08005b1c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b28:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <FLASH_Program_DoubleWord+0x60>)
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <FLASH_Program_DoubleWord+0x60>)
 8005b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005b34:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <FLASH_Program_DoubleWord+0x60>)
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	4a10      	ldr	r2, [pc, #64]	; (8005b7c <FLASH_Program_DoubleWord+0x60>)
 8005b3a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005b3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b40:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <FLASH_Program_DoubleWord+0x60>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	4a0d      	ldr	r2, [pc, #52]	; (8005b7c <FLASH_Program_DoubleWord+0x60>)
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005b52:	f3bf 8f6f 	isb	sy
}
 8005b56:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	000a      	movs	r2, r1
 8005b66:	2300      	movs	r3, #0
 8005b68:	68f9      	ldr	r1, [r7, #12]
 8005b6a:	3104      	adds	r1, #4
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	600b      	str	r3, [r1, #0]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40023c00 	.word	0x40023c00

08005b80 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	; (8005bc0 <FLASH_Program_Word+0x40>)
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	4a0c      	ldr	r2, [pc, #48]	; (8005bc0 <FLASH_Program_Word+0x40>)
 8005b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005b96:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <FLASH_Program_Word+0x40>)
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	4a09      	ldr	r2, [pc, #36]	; (8005bc0 <FLASH_Program_Word+0x40>)
 8005b9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ba0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ba2:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <FLASH_Program_Word+0x40>)
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	4a06      	ldr	r2, [pc, #24]	; (8005bc0 <FLASH_Program_Word+0x40>)
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40023c00 	.word	0x40023c00

08005bc4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <FLASH_Program_HalfWord+0x40>)
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	4a0b      	ldr	r2, [pc, #44]	; (8005c04 <FLASH_Program_HalfWord+0x40>)
 8005bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005bdc:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <FLASH_Program_HalfWord+0x40>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	4a08      	ldr	r2, [pc, #32]	; (8005c04 <FLASH_Program_HalfWord+0x40>)
 8005be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005be8:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <FLASH_Program_HalfWord+0x40>)
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <FLASH_Program_HalfWord+0x40>)
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	887a      	ldrh	r2, [r7, #2]
 8005bf8:	801a      	strh	r2, [r3, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr
 8005c04:	40023c00 	.word	0x40023c00

08005c08 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c14:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <FLASH_Program_Byte+0x3c>)
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	4a0a      	ldr	r2, [pc, #40]	; (8005c44 <FLASH_Program_Byte+0x3c>)
 8005c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005c20:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <FLASH_Program_Byte+0x3c>)
 8005c22:	4a08      	ldr	r2, [pc, #32]	; (8005c44 <FLASH_Program_Byte+0x3c>)
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c28:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <FLASH_Program_Byte+0x3c>)
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	4a05      	ldr	r2, [pc, #20]	; (8005c44 <FLASH_Program_Byte+0x3c>)
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	701a      	strb	r2, [r3, #0]
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr
 8005c44:	40023c00 	.word	0x40023c00

08005c48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005c4c:	4b27      	ldr	r3, [pc, #156]	; (8005cec <FLASH_SetErrorCode+0xa4>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005c58:	4b25      	ldr	r3, [pc, #148]	; (8005cf0 <FLASH_SetErrorCode+0xa8>)
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	f043 0308 	orr.w	r3, r3, #8
 8005c60:	4a23      	ldr	r2, [pc, #140]	; (8005cf0 <FLASH_SetErrorCode+0xa8>)
 8005c62:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005c64:	4b21      	ldr	r3, [pc, #132]	; (8005cec <FLASH_SetErrorCode+0xa4>)
 8005c66:	2210      	movs	r2, #16
 8005c68:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005c6a:	4b20      	ldr	r3, [pc, #128]	; (8005cec <FLASH_SetErrorCode+0xa4>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d008      	beq.n	8005c88 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005c76:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <FLASH_SetErrorCode+0xa8>)
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f043 0304 	orr.w	r3, r3, #4
 8005c7e:	4a1c      	ldr	r2, [pc, #112]	; (8005cf0 <FLASH_SetErrorCode+0xa8>)
 8005c80:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005c82:	4b1a      	ldr	r3, [pc, #104]	; (8005cec <FLASH_SetErrorCode+0xa4>)
 8005c84:	2220      	movs	r2, #32
 8005c86:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005c88:	4b18      	ldr	r3, [pc, #96]	; (8005cec <FLASH_SetErrorCode+0xa4>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005c94:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <FLASH_SetErrorCode+0xa8>)
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	f043 0302 	orr.w	r3, r3, #2
 8005c9c:	4a14      	ldr	r2, [pc, #80]	; (8005cf0 <FLASH_SetErrorCode+0xa8>)
 8005c9e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005ca0:	4b12      	ldr	r3, [pc, #72]	; (8005cec <FLASH_SetErrorCode+0xa4>)
 8005ca2:	2240      	movs	r2, #64	; 0x40
 8005ca4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005ca6:	4b11      	ldr	r3, [pc, #68]	; (8005cec <FLASH_SetErrorCode+0xa4>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d008      	beq.n	8005cc4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005cb2:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <FLASH_SetErrorCode+0xa8>)
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f043 0301 	orr.w	r3, r3, #1
 8005cba:	4a0d      	ldr	r2, [pc, #52]	; (8005cf0 <FLASH_SetErrorCode+0xa8>)
 8005cbc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <FLASH_SetErrorCode+0xa4>)
 8005cc0:	2280      	movs	r2, #128	; 0x80
 8005cc2:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005cc4:	4b09      	ldr	r3, [pc, #36]	; (8005cec <FLASH_SetErrorCode+0xa4>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005cd0:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <FLASH_SetErrorCode+0xa8>)
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f043 0310 	orr.w	r3, r3, #16
 8005cd8:	4a05      	ldr	r2, [pc, #20]	; (8005cf0 <FLASH_SetErrorCode+0xa8>)
 8005cda:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005cdc:	4b03      	ldr	r3, [pc, #12]	; (8005cec <FLASH_SetErrorCode+0xa4>)
 8005cde:	2202      	movs	r2, #2
 8005ce0:	60da      	str	r2, [r3, #12]
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40023c00 	.word	0x40023c00
 8005cf0:	20001500 	.word	0x20001500

08005cf4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e010      	b.n	8005d32 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d103      	bne.n	8005d1e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	e009      	b.n	8005d32 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d103      	bne.n	8005d2c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	e002      	b.n	8005d32 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005d2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005d30:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d32:	4b18      	ldr	r3, [pc, #96]	; (8005d94 <FLASH_Erase_Sector+0xa0>)
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	4a17      	ldr	r2, [pc, #92]	; (8005d94 <FLASH_Erase_Sector+0xa0>)
 8005d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005d3e:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <FLASH_Erase_Sector+0xa0>)
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	4914      	ldr	r1, [pc, #80]	; (8005d94 <FLASH_Erase_Sector+0xa0>)
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005d4a:	4b12      	ldr	r3, [pc, #72]	; (8005d94 <FLASH_Erase_Sector+0xa0>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	4a11      	ldr	r2, [pc, #68]	; (8005d94 <FLASH_Erase_Sector+0xa0>)
 8005d50:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005d54:	6113      	str	r3, [r2, #16]
 8005d56:	23f8      	movs	r3, #248	; 0xf8
 8005d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	fa93 f3a3 	rbit	r3, r3
 8005d60:	60fb      	str	r3, [r7, #12]
  return result;
 8005d62:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8005d64:	fab3 f383 	clz	r3, r3
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4093      	lsls	r3, r2
 8005d70:	f043 0202 	orr.w	r2, r3, #2
 8005d74:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <FLASH_Erase_Sector+0xa0>)
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	4906      	ldr	r1, [pc, #24]	; (8005d94 <FLASH_Erase_Sector+0xa0>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005d7e:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <FLASH_Erase_Sector+0xa0>)
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <FLASH_Erase_Sector+0xa0>)
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d88:	6113      	str	r3, [r2, #16]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr
 8005d94:	40023c00 	.word	0x40023c00

08005d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005da6:	e16f      	b.n	8006088 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	2101      	movs	r1, #1
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	fa01 f303 	lsl.w	r3, r1, r3
 8005db4:	4013      	ands	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8161 	beq.w	8006082 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d005      	beq.n	8005dd8 <HAL_GPIO_Init+0x40>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d130      	bne.n	8005e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	2203      	movs	r2, #3
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	43db      	mvns	r3, r3
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4013      	ands	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e0e:	2201      	movs	r2, #1
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	43db      	mvns	r3, r3
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	091b      	lsrs	r3, r3, #4
 8005e24:	f003 0201 	and.w	r2, r3, #1
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d017      	beq.n	8005e76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	2203      	movs	r2, #3
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	43db      	mvns	r3, r3
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d123      	bne.n	8005eca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	08da      	lsrs	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3208      	adds	r2, #8
 8005e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	220f      	movs	r2, #15
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	08da      	lsrs	r2, r3, #3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3208      	adds	r2, #8
 8005ec4:	6939      	ldr	r1, [r7, #16]
 8005ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	43db      	mvns	r3, r3
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f003 0203 	and.w	r2, r3, #3
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80bb 	beq.w	8006082 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60bb      	str	r3, [r7, #8]
 8005f10:	4b64      	ldr	r3, [pc, #400]	; (80060a4 <HAL_GPIO_Init+0x30c>)
 8005f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f14:	4a63      	ldr	r2, [pc, #396]	; (80060a4 <HAL_GPIO_Init+0x30c>)
 8005f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f1a:	6453      	str	r3, [r2, #68]	; 0x44
 8005f1c:	4b61      	ldr	r3, [pc, #388]	; (80060a4 <HAL_GPIO_Init+0x30c>)
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f24:	60bb      	str	r3, [r7, #8]
 8005f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005f28:	4a5f      	ldr	r2, [pc, #380]	; (80060a8 <HAL_GPIO_Init+0x310>)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	089b      	lsrs	r3, r3, #2
 8005f2e:	3302      	adds	r3, #2
 8005f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	220f      	movs	r2, #15
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	43db      	mvns	r3, r3
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a57      	ldr	r2, [pc, #348]	; (80060ac <HAL_GPIO_Init+0x314>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d031      	beq.n	8005fb8 <HAL_GPIO_Init+0x220>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a56      	ldr	r2, [pc, #344]	; (80060b0 <HAL_GPIO_Init+0x318>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d02b      	beq.n	8005fb4 <HAL_GPIO_Init+0x21c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a55      	ldr	r2, [pc, #340]	; (80060b4 <HAL_GPIO_Init+0x31c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d025      	beq.n	8005fb0 <HAL_GPIO_Init+0x218>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a54      	ldr	r2, [pc, #336]	; (80060b8 <HAL_GPIO_Init+0x320>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d01f      	beq.n	8005fac <HAL_GPIO_Init+0x214>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a53      	ldr	r2, [pc, #332]	; (80060bc <HAL_GPIO_Init+0x324>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d019      	beq.n	8005fa8 <HAL_GPIO_Init+0x210>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a52      	ldr	r2, [pc, #328]	; (80060c0 <HAL_GPIO_Init+0x328>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d013      	beq.n	8005fa4 <HAL_GPIO_Init+0x20c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a51      	ldr	r2, [pc, #324]	; (80060c4 <HAL_GPIO_Init+0x32c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00d      	beq.n	8005fa0 <HAL_GPIO_Init+0x208>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a50      	ldr	r2, [pc, #320]	; (80060c8 <HAL_GPIO_Init+0x330>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d007      	beq.n	8005f9c <HAL_GPIO_Init+0x204>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a4f      	ldr	r2, [pc, #316]	; (80060cc <HAL_GPIO_Init+0x334>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d101      	bne.n	8005f98 <HAL_GPIO_Init+0x200>
 8005f94:	2308      	movs	r3, #8
 8005f96:	e010      	b.n	8005fba <HAL_GPIO_Init+0x222>
 8005f98:	2309      	movs	r3, #9
 8005f9a:	e00e      	b.n	8005fba <HAL_GPIO_Init+0x222>
 8005f9c:	2307      	movs	r3, #7
 8005f9e:	e00c      	b.n	8005fba <HAL_GPIO_Init+0x222>
 8005fa0:	2306      	movs	r3, #6
 8005fa2:	e00a      	b.n	8005fba <HAL_GPIO_Init+0x222>
 8005fa4:	2305      	movs	r3, #5
 8005fa6:	e008      	b.n	8005fba <HAL_GPIO_Init+0x222>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	e006      	b.n	8005fba <HAL_GPIO_Init+0x222>
 8005fac:	2303      	movs	r3, #3
 8005fae:	e004      	b.n	8005fba <HAL_GPIO_Init+0x222>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e002      	b.n	8005fba <HAL_GPIO_Init+0x222>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_GPIO_Init+0x222>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	f002 0203 	and.w	r2, r2, #3
 8005fc0:	0092      	lsls	r2, r2, #2
 8005fc2:	4093      	lsls	r3, r2
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005fcc:	4936      	ldr	r1, [pc, #216]	; (80060a8 <HAL_GPIO_Init+0x310>)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	089b      	lsrs	r3, r3, #2
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fda:	4b3d      	ldr	r3, [pc, #244]	; (80060d0 <HAL_GPIO_Init+0x338>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005ffe:	4a34      	ldr	r2, [pc, #208]	; (80060d0 <HAL_GPIO_Init+0x338>)
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006004:	4b32      	ldr	r3, [pc, #200]	; (80060d0 <HAL_GPIO_Init+0x338>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	43db      	mvns	r3, r3
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4013      	ands	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006028:	4a29      	ldr	r2, [pc, #164]	; (80060d0 <HAL_GPIO_Init+0x338>)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800602e:	4b28      	ldr	r3, [pc, #160]	; (80060d0 <HAL_GPIO_Init+0x338>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	43db      	mvns	r3, r3
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4013      	ands	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006052:	4a1f      	ldr	r2, [pc, #124]	; (80060d0 <HAL_GPIO_Init+0x338>)
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006058:	4b1d      	ldr	r3, [pc, #116]	; (80060d0 <HAL_GPIO_Init+0x338>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	43db      	mvns	r3, r3
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4013      	ands	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800607c:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <HAL_GPIO_Init+0x338>)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	3301      	adds	r3, #1
 8006086:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	fa22 f303 	lsr.w	r3, r2, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	f47f ae88 	bne.w	8005da8 <HAL_GPIO_Init+0x10>
  }
}
 8006098:	bf00      	nop
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr
 80060a4:	40023800 	.word	0x40023800
 80060a8:	40013800 	.word	0x40013800
 80060ac:	40020000 	.word	0x40020000
 80060b0:	40020400 	.word	0x40020400
 80060b4:	40020800 	.word	0x40020800
 80060b8:	40020c00 	.word	0x40020c00
 80060bc:	40021000 	.word	0x40021000
 80060c0:	40021400 	.word	0x40021400
 80060c4:	40021800 	.word	0x40021800
 80060c8:	40021c00 	.word	0x40021c00
 80060cc:	40022000 	.word	0x40022000
 80060d0:	40013c00 	.word	0x40013c00

080060d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	887b      	ldrh	r3, [r7, #2]
 80060e6:	4013      	ands	r3, r2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060ec:	2301      	movs	r3, #1
 80060ee:	73fb      	strb	r3, [r7, #15]
 80060f0:	e001      	b.n	80060f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bc80      	pop	{r7}
 8006100:	4770      	bx	lr

08006102 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	460b      	mov	r3, r1
 800610c:	807b      	strh	r3, [r7, #2]
 800610e:	4613      	mov	r3, r2
 8006110:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006112:	787b      	ldrb	r3, [r7, #1]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006118:	887a      	ldrh	r2, [r7, #2]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800611e:	e003      	b.n	8006128 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006120:	887b      	ldrh	r3, [r7, #2]
 8006122:	041a      	lsls	r2, r3, #16
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	619a      	str	r2, [r3, #24]
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	bc80      	pop	{r7}
 8006130:	4770      	bx	lr
	...

08006134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800613e:	4b08      	ldr	r3, [pc, #32]	; (8006160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006140:	695a      	ldr	r2, [r3, #20]
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	4013      	ands	r3, r2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d006      	beq.n	8006158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800614a:	4a05      	ldr	r2, [pc, #20]	; (8006160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006150:	88fb      	ldrh	r3, [r7, #6]
 8006152:	4618      	mov	r0, r3
 8006154:	f7fc fa06 	bl	8002564 <HAL_GPIO_EXTI_Callback>
  }
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40013c00 	.word	0x40013c00

08006164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e12b      	b.n	80063ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fe f804 	bl	8004198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2224      	movs	r2, #36	; 0x24
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061c8:	f001 fb94 	bl	80078f4 <HAL_RCC_GetPCLK1Freq>
 80061cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4a81      	ldr	r2, [pc, #516]	; (80063d8 <HAL_I2C_Init+0x274>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d807      	bhi.n	80061e8 <HAL_I2C_Init+0x84>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4a80      	ldr	r2, [pc, #512]	; (80063dc <HAL_I2C_Init+0x278>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	bf94      	ite	ls
 80061e0:	2301      	movls	r3, #1
 80061e2:	2300      	movhi	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	e006      	b.n	80061f6 <HAL_I2C_Init+0x92>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4a7d      	ldr	r2, [pc, #500]	; (80063e0 <HAL_I2C_Init+0x27c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	bf94      	ite	ls
 80061f0:	2301      	movls	r3, #1
 80061f2:	2300      	movhi	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e0e7      	b.n	80063ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4a78      	ldr	r2, [pc, #480]	; (80063e4 <HAL_I2C_Init+0x280>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	0c9b      	lsrs	r3, r3, #18
 8006208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	4a6a      	ldr	r2, [pc, #424]	; (80063d8 <HAL_I2C_Init+0x274>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d802      	bhi.n	8006238 <HAL_I2C_Init+0xd4>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	3301      	adds	r3, #1
 8006236:	e009      	b.n	800624c <HAL_I2C_Init+0xe8>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800623e:	fb02 f303 	mul.w	r3, r2, r3
 8006242:	4a69      	ldr	r2, [pc, #420]	; (80063e8 <HAL_I2C_Init+0x284>)
 8006244:	fba2 2303 	umull	r2, r3, r2, r3
 8006248:	099b      	lsrs	r3, r3, #6
 800624a:	3301      	adds	r3, #1
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	430b      	orrs	r3, r1
 8006252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800625e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	495c      	ldr	r1, [pc, #368]	; (80063d8 <HAL_I2C_Init+0x274>)
 8006268:	428b      	cmp	r3, r1
 800626a:	d819      	bhi.n	80062a0 <HAL_I2C_Init+0x13c>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	1e59      	subs	r1, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	fbb1 f3f3 	udiv	r3, r1, r3
 800627a:	1c59      	adds	r1, r3, #1
 800627c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006280:	400b      	ands	r3, r1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <HAL_I2C_Init+0x138>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1e59      	subs	r1, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	fbb1 f3f3 	udiv	r3, r1, r3
 8006294:	3301      	adds	r3, #1
 8006296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629a:	e051      	b.n	8006340 <HAL_I2C_Init+0x1dc>
 800629c:	2304      	movs	r3, #4
 800629e:	e04f      	b.n	8006340 <HAL_I2C_Init+0x1dc>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d111      	bne.n	80062cc <HAL_I2C_Init+0x168>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	1e58      	subs	r0, r3, #1
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6859      	ldr	r1, [r3, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	440b      	add	r3, r1
 80062b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ba:	3301      	adds	r3, #1
 80062bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bf0c      	ite	eq
 80062c4:	2301      	moveq	r3, #1
 80062c6:	2300      	movne	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	e012      	b.n	80062f2 <HAL_I2C_Init+0x18e>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	1e58      	subs	r0, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6859      	ldr	r1, [r3, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	0099      	lsls	r1, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	fbb0 f3f3 	udiv	r3, r0, r3
 80062e2:	3301      	adds	r3, #1
 80062e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	bf0c      	ite	eq
 80062ec:	2301      	moveq	r3, #1
 80062ee:	2300      	movne	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_I2C_Init+0x196>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e022      	b.n	8006340 <HAL_I2C_Init+0x1dc>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10e      	bne.n	8006320 <HAL_I2C_Init+0x1bc>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1e58      	subs	r0, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6859      	ldr	r1, [r3, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	440b      	add	r3, r1
 8006310:	fbb0 f3f3 	udiv	r3, r0, r3
 8006314:	3301      	adds	r3, #1
 8006316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800631a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631e:	e00f      	b.n	8006340 <HAL_I2C_Init+0x1dc>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	1e58      	subs	r0, r3, #1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6859      	ldr	r1, [r3, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	440b      	add	r3, r1
 800632e:	0099      	lsls	r1, r3, #2
 8006330:	440b      	add	r3, r1
 8006332:	fbb0 f3f3 	udiv	r3, r0, r3
 8006336:	3301      	adds	r3, #1
 8006338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800633c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	6809      	ldr	r1, [r1, #0]
 8006344:	4313      	orrs	r3, r2
 8006346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69da      	ldr	r2, [r3, #28]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800636e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6911      	ldr	r1, [r2, #16]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	68d2      	ldr	r2, [r2, #12]
 800637a:	4311      	orrs	r1, r2
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	430b      	orrs	r3, r1
 8006382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695a      	ldr	r2, [r3, #20]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	000186a0 	.word	0x000186a0
 80063dc:	001e847f 	.word	0x001e847f
 80063e0:	003d08ff 	.word	0x003d08ff
 80063e4:	431bde83 	.word	0x431bde83
 80063e8:	10624dd3 	.word	0x10624dd3

080063ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	4608      	mov	r0, r1
 80063f6:	4611      	mov	r1, r2
 80063f8:	461a      	mov	r2, r3
 80063fa:	4603      	mov	r3, r0
 80063fc:	817b      	strh	r3, [r7, #10]
 80063fe:	460b      	mov	r3, r1
 8006400:	813b      	strh	r3, [r7, #8]
 8006402:	4613      	mov	r3, r2
 8006404:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006406:	f7fe f9a1 	bl	800474c <HAL_GetTick>
 800640a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b20      	cmp	r3, #32
 8006416:	f040 80d9 	bne.w	80065cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	2319      	movs	r3, #25
 8006420:	2201      	movs	r2, #1
 8006422:	496d      	ldr	r1, [pc, #436]	; (80065d8 <HAL_I2C_Mem_Write+0x1ec>)
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fc7f 	bl	8006d28 <I2C_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006430:	2302      	movs	r3, #2
 8006432:	e0cc      	b.n	80065ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800643a:	2b01      	cmp	r3, #1
 800643c:	d101      	bne.n	8006442 <HAL_I2C_Mem_Write+0x56>
 800643e:	2302      	movs	r3, #2
 8006440:	e0c5      	b.n	80065ce <HAL_I2C_Mem_Write+0x1e2>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d007      	beq.n	8006468 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006476:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2221      	movs	r2, #33	; 0x21
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2240      	movs	r2, #64	; 0x40
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a3a      	ldr	r2, [r7, #32]
 8006492:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006498:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4a4d      	ldr	r2, [pc, #308]	; (80065dc <HAL_I2C_Mem_Write+0x1f0>)
 80064a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064aa:	88f8      	ldrh	r0, [r7, #6]
 80064ac:	893a      	ldrh	r2, [r7, #8]
 80064ae:	8979      	ldrh	r1, [r7, #10]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	4603      	mov	r3, r0
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 fab6 	bl	8006a2c <I2C_RequestMemoryWrite>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d052      	beq.n	800656c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e081      	b.n	80065ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 fd00 	bl	8006ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00d      	beq.n	80064f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d107      	bne.n	80064f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e06b      	b.n	80065ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	781a      	ldrb	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b04      	cmp	r3, #4
 8006532:	d11b      	bne.n	800656c <HAL_I2C_Mem_Write+0x180>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006538:	2b00      	cmp	r3, #0
 800653a:	d017      	beq.n	800656c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	781a      	ldrb	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1aa      	bne.n	80064ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 fcec 	bl	8006f56 <I2C_WaitOnBTFFlagUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00d      	beq.n	80065a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	2b04      	cmp	r3, #4
 800658a:	d107      	bne.n	800659c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e016      	b.n	80065ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e000      	b.n	80065ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
  }
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	00100002 	.word	0x00100002
 80065dc:	ffff0000 	.word	0xffff0000

080065e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08c      	sub	sp, #48	; 0x30
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	4608      	mov	r0, r1
 80065ea:	4611      	mov	r1, r2
 80065ec:	461a      	mov	r2, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	817b      	strh	r3, [r7, #10]
 80065f2:	460b      	mov	r3, r1
 80065f4:	813b      	strh	r3, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065fa:	f7fe f8a7 	bl	800474c <HAL_GetTick>
 80065fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b20      	cmp	r3, #32
 800660a:	f040 8208 	bne.w	8006a1e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	2319      	movs	r3, #25
 8006614:	2201      	movs	r2, #1
 8006616:	497b      	ldr	r1, [pc, #492]	; (8006804 <HAL_I2C_Mem_Read+0x224>)
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 fb85 	bl	8006d28 <I2C_WaitOnFlagUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006624:	2302      	movs	r3, #2
 8006626:	e1fb      	b.n	8006a20 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_I2C_Mem_Read+0x56>
 8006632:	2302      	movs	r3, #2
 8006634:	e1f4      	b.n	8006a20 <HAL_I2C_Mem_Read+0x440>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b01      	cmp	r3, #1
 800664a:	d007      	beq.n	800665c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800666a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2222      	movs	r2, #34	; 0x22
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2240      	movs	r2, #64	; 0x40
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800668c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4a5b      	ldr	r2, [pc, #364]	; (8006808 <HAL_I2C_Mem_Read+0x228>)
 800669c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800669e:	88f8      	ldrh	r0, [r7, #6]
 80066a0:	893a      	ldrh	r2, [r7, #8]
 80066a2:	8979      	ldrh	r1, [r7, #10]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	4603      	mov	r3, r0
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fa52 	bl	8006b58 <I2C_RequestMemoryRead>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e1b0      	b.n	8006a20 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d113      	bne.n	80066ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c6:	2300      	movs	r3, #0
 80066c8:	623b      	str	r3, [r7, #32]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	623b      	str	r3, [r7, #32]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	e184      	b.n	80069f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d11b      	bne.n	800672e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	61fb      	str	r3, [r7, #28]
 800671a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	e164      	b.n	80069f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006732:	2b02      	cmp	r3, #2
 8006734:	d11b      	bne.n	800676e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006744:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006756:	2300      	movs	r3, #0
 8006758:	61bb      	str	r3, [r7, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	e144      	b.n	80069f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006784:	e138      	b.n	80069f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678a:	2b03      	cmp	r3, #3
 800678c:	f200 80f1 	bhi.w	8006972 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006794:	2b01      	cmp	r3, #1
 8006796:	d123      	bne.n	80067e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 fc1b 	bl	8006fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e139      	b.n	8006a20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067de:	e10b      	b.n	80069f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d14e      	bne.n	8006886 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	2200      	movs	r2, #0
 80067f0:	4906      	ldr	r1, [pc, #24]	; (800680c <HAL_I2C_Mem_Read+0x22c>)
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 fa98 	bl	8006d28 <I2C_WaitOnFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d008      	beq.n	8006810 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e10e      	b.n	8006a20 <HAL_I2C_Mem_Read+0x440>
 8006802:	bf00      	nop
 8006804:	00100002 	.word	0x00100002
 8006808:	ffff0000 	.word	0xffff0000
 800680c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800681e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006884:	e0b8      	b.n	80069f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688c:	2200      	movs	r2, #0
 800688e:	4966      	ldr	r1, [pc, #408]	; (8006a28 <HAL_I2C_Mem_Read+0x448>)
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 fa49 	bl	8006d28 <I2C_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0bf      	b.n	8006a20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	2200      	movs	r2, #0
 80068ea:	494f      	ldr	r1, [pc, #316]	; (8006a28 <HAL_I2C_Mem_Read+0x448>)
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 fa1b 	bl	8006d28 <I2C_WaitOnFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e091      	b.n	8006a20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006970:	e042      	b.n	80069f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006974:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 fb2e 	bl	8006fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e04c      	b.n	8006a20 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d118      	bne.n	80069f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f47f aec2 	bne.w	8006786 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e000      	b.n	8006a20 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a1e:	2302      	movs	r3, #2
  }
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3728      	adds	r7, #40	; 0x28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	00010004 	.word	0x00010004

08006a2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	4608      	mov	r0, r1
 8006a36:	4611      	mov	r1, r2
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	817b      	strh	r3, [r7, #10]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	813b      	strh	r3, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f960 	bl	8006d28 <I2C_WaitOnFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00d      	beq.n	8006a8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7c:	d103      	bne.n	8006a86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e05f      	b.n	8006b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a8a:	897b      	ldrh	r3, [r7, #10]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	6a3a      	ldr	r2, [r7, #32]
 8006a9e:	492d      	ldr	r1, [pc, #180]	; (8006b54 <I2C_RequestMemoryWrite+0x128>)
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 f998 	bl	8006dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e04c      	b.n	8006b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac8:	6a39      	ldr	r1, [r7, #32]
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fa02 	bl	8006ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00d      	beq.n	8006af2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d107      	bne.n	8006aee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e02b      	b.n	8006b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d105      	bne.n	8006b04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006af8:	893b      	ldrh	r3, [r7, #8]
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	611a      	str	r2, [r3, #16]
 8006b02:	e021      	b.n	8006b48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b04:	893b      	ldrh	r3, [r7, #8]
 8006b06:	0a1b      	lsrs	r3, r3, #8
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b14:	6a39      	ldr	r1, [r7, #32]
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 f9dc 	bl	8006ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00d      	beq.n	8006b3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d107      	bne.n	8006b3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e005      	b.n	8006b4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b3e:	893b      	ldrh	r3, [r7, #8]
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	00010002 	.word	0x00010002

08006b58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	817b      	strh	r3, [r7, #10]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	813b      	strh	r3, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f8c2 	bl	8006d28 <I2C_WaitOnFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00d      	beq.n	8006bc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb8:	d103      	bne.n	8006bc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e0aa      	b.n	8006d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bc6:	897b      	ldrh	r3, [r7, #10]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	6a3a      	ldr	r2, [r7, #32]
 8006bda:	4952      	ldr	r1, [pc, #328]	; (8006d24 <I2C_RequestMemoryRead+0x1cc>)
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 f8fa 	bl	8006dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e097      	b.n	8006d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bec:	2300      	movs	r3, #0
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c04:	6a39      	ldr	r1, [r7, #32]
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 f964 	bl	8006ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00d      	beq.n	8006c2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d107      	bne.n	8006c2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e076      	b.n	8006d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d105      	bne.n	8006c40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c34:	893b      	ldrh	r3, [r7, #8]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	611a      	str	r2, [r3, #16]
 8006c3e:	e021      	b.n	8006c84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c40:	893b      	ldrh	r3, [r7, #8]
 8006c42:	0a1b      	lsrs	r3, r3, #8
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c50:	6a39      	ldr	r1, [r7, #32]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f93e 	bl	8006ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00d      	beq.n	8006c7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d107      	bne.n	8006c76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e050      	b.n	8006d1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c7a:	893b      	ldrh	r3, [r7, #8]
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c86:	6a39      	ldr	r1, [r7, #32]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f923 	bl	8006ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00d      	beq.n	8006cb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d107      	bne.n	8006cac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006caa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e035      	b.n	8006d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f82b 	bl	8006d28 <I2C_WaitOnFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00d      	beq.n	8006cf4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce6:	d103      	bne.n	8006cf0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e013      	b.n	8006d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006cf4:	897b      	ldrh	r3, [r7, #10]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	6a3a      	ldr	r2, [r7, #32]
 8006d08:	4906      	ldr	r1, [pc, #24]	; (8006d24 <I2C_RequestMemoryRead+0x1cc>)
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f863 	bl	8006dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	00010002 	.word	0x00010002

08006d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	4613      	mov	r3, r2
 8006d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d38:	e025      	b.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d021      	beq.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d42:	f7fd fd03 	bl	800474c <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d302      	bcc.n	8006d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d116      	bne.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2220      	movs	r2, #32
 8006d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	f043 0220 	orr.w	r2, r3, #32
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e023      	b.n	8006dce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	0c1b      	lsrs	r3, r3, #16
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d10d      	bne.n	8006dac <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	43da      	mvns	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bf0c      	ite	eq
 8006da2:	2301      	moveq	r3, #1
 8006da4:	2300      	movne	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	e00c      	b.n	8006dc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	43da      	mvns	r2, r3
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	4013      	ands	r3, r2
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bf0c      	ite	eq
 8006dbe:	2301      	moveq	r3, #1
 8006dc0:	2300      	movne	r3, #0
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	79fb      	ldrb	r3, [r7, #7]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d0b6      	beq.n	8006d3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
 8006de2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006de4:	e051      	b.n	8006e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df4:	d123      	bne.n	8006e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2a:	f043 0204 	orr.w	r2, r3, #4
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e046      	b.n	8006ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d021      	beq.n	8006e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e46:	f7fd fc81 	bl	800474c <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d302      	bcc.n	8006e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d116      	bne.n	8006e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	f043 0220 	orr.w	r2, r3, #32
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e020      	b.n	8006ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	0c1b      	lsrs	r3, r3, #16
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d10c      	bne.n	8006eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	43da      	mvns	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bf14      	ite	ne
 8006ea6:	2301      	movne	r3, #1
 8006ea8:	2300      	moveq	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	e00b      	b.n	8006ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	43da      	mvns	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d18d      	bne.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ee0:	e02d      	b.n	8006f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 f8ce 	bl	8007084 <I2C_IsAcknowledgeFailed>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e02d      	b.n	8006f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef8:	d021      	beq.n	8006f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006efa:	f7fd fc27 	bl	800474c <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d302      	bcc.n	8006f10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d116      	bne.n	8006f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	f043 0220 	orr.w	r2, r3, #32
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e007      	b.n	8006f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f48:	2b80      	cmp	r3, #128	; 0x80
 8006f4a:	d1ca      	bne.n	8006ee2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f62:	e02d      	b.n	8006fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f88d 	bl	8007084 <I2C_IsAcknowledgeFailed>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e02d      	b.n	8006fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d021      	beq.n	8006fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f7c:	f7fd fbe6 	bl	800474c <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d302      	bcc.n	8006f92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d116      	bne.n	8006fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	f043 0220 	orr.w	r2, r3, #32
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e007      	b.n	8006fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d1ca      	bne.n	8006f64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fe4:	e042      	b.n	800706c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	f003 0310 	and.w	r3, r3, #16
 8006ff0:	2b10      	cmp	r3, #16
 8006ff2:	d119      	bne.n	8007028 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0210 	mvn.w	r2, #16
 8006ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e029      	b.n	800707c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007028:	f7fd fb90 	bl	800474c <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	429a      	cmp	r2, r3
 8007036:	d302      	bcc.n	800703e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d116      	bne.n	800706c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	f043 0220 	orr.w	r2, r3, #32
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e007      	b.n	800707c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	d1b5      	bne.n	8006fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800709a:	d11b      	bne.n	80070d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	f043 0204 	orr.w	r2, r3, #4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	bc80      	pop	{r7}
 80070de:	4770      	bx	lr

080070e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08a      	sub	sp, #40	; 0x28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e236      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d050      	beq.n	80071a0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070fe:	4b9e      	ldr	r3, [pc, #632]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
 8007106:	2b04      	cmp	r3, #4
 8007108:	d00c      	beq.n	8007124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800710a:	4b9b      	ldr	r3, [pc, #620]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007112:	2b08      	cmp	r3, #8
 8007114:	d112      	bne.n	800713c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007116:	4b98      	ldr	r3, [pc, #608]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800711e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007122:	d10b      	bne.n	800713c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007124:	4b94      	ldr	r3, [pc, #592]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d036      	beq.n	800719e <HAL_RCC_OscConfig+0xbe>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d132      	bne.n	800719e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e211      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	4b8e      	ldr	r3, [pc, #568]	; (800737c <HAL_RCC_OscConfig+0x29c>)
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d013      	beq.n	8007176 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800714e:	f7fd fafd 	bl	800474c <HAL_GetTick>
 8007152:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007154:	e008      	b.n	8007168 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007156:	f7fd faf9 	bl	800474c <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b64      	cmp	r3, #100	; 0x64
 8007162:	d901      	bls.n	8007168 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e1fb      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007168:	4b83      	ldr	r3, [pc, #524]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0f0      	beq.n	8007156 <HAL_RCC_OscConfig+0x76>
 8007174:	e014      	b.n	80071a0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007176:	f7fd fae9 	bl	800474c <HAL_GetTick>
 800717a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800717e:	f7fd fae5 	bl	800474c <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b64      	cmp	r3, #100	; 0x64
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e1e7      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007190:	4b79      	ldr	r3, [pc, #484]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f0      	bne.n	800717e <HAL_RCC_OscConfig+0x9e>
 800719c:	e000      	b.n	80071a0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800719e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d077      	beq.n	800729c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071ac:	4b72      	ldr	r3, [pc, #456]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f003 030c 	and.w	r3, r3, #12
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071b8:	4b6f      	ldr	r3, [pc, #444]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d126      	bne.n	8007212 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071c4:	4b6c      	ldr	r3, [pc, #432]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d120      	bne.n	8007212 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071d0:	4b69      	ldr	r3, [pc, #420]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_RCC_OscConfig+0x108>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d001      	beq.n	80071e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e1bb      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071e8:	4b63      	ldr	r3, [pc, #396]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	21f8      	movs	r1, #248	; 0xf8
 80071f6:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f8:	69b9      	ldr	r1, [r7, #24]
 80071fa:	fa91 f1a1 	rbit	r1, r1
 80071fe:	6179      	str	r1, [r7, #20]
  return result;
 8007200:	6979      	ldr	r1, [r7, #20]
 8007202:	fab1 f181 	clz	r1, r1
 8007206:	b2c9      	uxtb	r1, r1
 8007208:	408b      	lsls	r3, r1
 800720a:	495b      	ldr	r1, [pc, #364]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 800720c:	4313      	orrs	r3, r2
 800720e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007210:	e044      	b.n	800729c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d02a      	beq.n	8007270 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800721a:	4b59      	ldr	r3, [pc, #356]	; (8007380 <HAL_RCC_OscConfig+0x2a0>)
 800721c:	2201      	movs	r2, #1
 800721e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007220:	f7fd fa94 	bl	800474c <HAL_GetTick>
 8007224:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007228:	f7fd fa90 	bl	800474c <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e192      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723a:	4b4f      	ldr	r3, [pc, #316]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0f0      	beq.n	8007228 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007246:	4b4c      	ldr	r3, [pc, #304]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	21f8      	movs	r1, #248	; 0xf8
 8007254:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007256:	6939      	ldr	r1, [r7, #16]
 8007258:	fa91 f1a1 	rbit	r1, r1
 800725c:	60f9      	str	r1, [r7, #12]
  return result;
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	fab1 f181 	clz	r1, r1
 8007264:	b2c9      	uxtb	r1, r1
 8007266:	408b      	lsls	r3, r1
 8007268:	4943      	ldr	r1, [pc, #268]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 800726a:	4313      	orrs	r3, r2
 800726c:	600b      	str	r3, [r1, #0]
 800726e:	e015      	b.n	800729c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007270:	4b43      	ldr	r3, [pc, #268]	; (8007380 <HAL_RCC_OscConfig+0x2a0>)
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007276:	f7fd fa69 	bl	800474c <HAL_GetTick>
 800727a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800727c:	e008      	b.n	8007290 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800727e:	f7fd fa65 	bl	800474c <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e167      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007290:	4b39      	ldr	r3, [pc, #228]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1f0      	bne.n	800727e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d030      	beq.n	800730a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d016      	beq.n	80072de <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072b0:	4b34      	ldr	r3, [pc, #208]	; (8007384 <HAL_RCC_OscConfig+0x2a4>)
 80072b2:	2201      	movs	r2, #1
 80072b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072b6:	f7fd fa49 	bl	800474c <HAL_GetTick>
 80072ba:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072bc:	e008      	b.n	80072d0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072be:	f7fd fa45 	bl	800474c <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e147      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072d0:	4b29      	ldr	r3, [pc, #164]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 80072d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0f0      	beq.n	80072be <HAL_RCC_OscConfig+0x1de>
 80072dc:	e015      	b.n	800730a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072de:	4b29      	ldr	r3, [pc, #164]	; (8007384 <HAL_RCC_OscConfig+0x2a4>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072e4:	f7fd fa32 	bl	800474c <HAL_GetTick>
 80072e8:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072ea:	e008      	b.n	80072fe <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072ec:	f7fd fa2e 	bl	800474c <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e130      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072fe:	4b1e      	ldr	r3, [pc, #120]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 8007300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1f0      	bne.n	80072ec <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 8087 	beq.w	8007426 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007318:	2300      	movs	r3, #0
 800731a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800731e:	4b16      	ldr	r3, [pc, #88]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d110      	bne.n	800734c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800732a:	2300      	movs	r3, #0
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	4b12      	ldr	r3, [pc, #72]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	4a11      	ldr	r2, [pc, #68]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 8007334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007338:	6413      	str	r3, [r2, #64]	; 0x40
 800733a:	4b0f      	ldr	r3, [pc, #60]	; (8007378 <HAL_RCC_OscConfig+0x298>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007342:	60bb      	str	r3, [r7, #8]
 8007344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007346:	2301      	movs	r3, #1
 8007348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800734c:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <HAL_RCC_OscConfig+0x2a8>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0d      	ldr	r2, [pc, #52]	; (8007388 <HAL_RCC_OscConfig+0x2a8>)
 8007352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007356:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007358:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <HAL_RCC_OscConfig+0x2a8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007360:	2b00      	cmp	r3, #0
 8007362:	d122      	bne.n	80073aa <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007364:	4b08      	ldr	r3, [pc, #32]	; (8007388 <HAL_RCC_OscConfig+0x2a8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a07      	ldr	r2, [pc, #28]	; (8007388 <HAL_RCC_OscConfig+0x2a8>)
 800736a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800736e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007370:	f7fd f9ec 	bl	800474c <HAL_GetTick>
 8007374:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007376:	e012      	b.n	800739e <HAL_RCC_OscConfig+0x2be>
 8007378:	40023800 	.word	0x40023800
 800737c:	40023802 	.word	0x40023802
 8007380:	42470000 	.word	0x42470000
 8007384:	42470e80 	.word	0x42470e80
 8007388:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800738c:	f7fd f9de 	bl	800474c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e0e0      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800739e:	4b72      	ldr	r3, [pc, #456]	; (8007568 <HAL_RCC_OscConfig+0x488>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0f0      	beq.n	800738c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	4b6f      	ldr	r3, [pc, #444]	; (800756c <HAL_RCC_OscConfig+0x48c>)
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d015      	beq.n	80073e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073bc:	f7fd f9c6 	bl	800474c <HAL_GetTick>
 80073c0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073c2:	e00a      	b.n	80073da <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073c4:	f7fd f9c2 	bl	800474c <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e0c2      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073da:	4b65      	ldr	r3, [pc, #404]	; (8007570 <HAL_RCC_OscConfig+0x490>)
 80073dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0ee      	beq.n	80073c4 <HAL_RCC_OscConfig+0x2e4>
 80073e6:	e014      	b.n	8007412 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073e8:	f7fd f9b0 	bl	800474c <HAL_GetTick>
 80073ec:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073ee:	e00a      	b.n	8007406 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073f0:	f7fd f9ac 	bl	800474c <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80073fe:	4293      	cmp	r3, r2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e0ac      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007406:	4b5a      	ldr	r3, [pc, #360]	; (8007570 <HAL_RCC_OscConfig+0x490>)
 8007408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1ee      	bne.n	80073f0 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007416:	2b01      	cmp	r3, #1
 8007418:	d105      	bne.n	8007426 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800741a:	4b55      	ldr	r3, [pc, #340]	; (8007570 <HAL_RCC_OscConfig+0x490>)
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	4a54      	ldr	r2, [pc, #336]	; (8007570 <HAL_RCC_OscConfig+0x490>)
 8007420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007424:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 8097 	beq.w	800755e <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007430:	4b4f      	ldr	r3, [pc, #316]	; (8007570 <HAL_RCC_OscConfig+0x490>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f003 030c 	and.w	r3, r3, #12
 8007438:	2b08      	cmp	r3, #8
 800743a:	d061      	beq.n	8007500 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d146      	bne.n	80074d2 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007444:	4b4b      	ldr	r3, [pc, #300]	; (8007574 <HAL_RCC_OscConfig+0x494>)
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800744a:	f7fd f97f 	bl	800474c <HAL_GetTick>
 800744e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007450:	e008      	b.n	8007464 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007452:	f7fd f97b 	bl	800474c <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b64      	cmp	r3, #100	; 0x64
 800745e:	d901      	bls.n	8007464 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e07d      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007464:	4b42      	ldr	r3, [pc, #264]	; (8007570 <HAL_RCC_OscConfig+0x490>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f0      	bne.n	8007452 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007470:	4b3f      	ldr	r3, [pc, #252]	; (8007570 <HAL_RCC_OscConfig+0x490>)
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	4b40      	ldr	r3, [pc, #256]	; (8007578 <HAL_RCC_OscConfig+0x498>)
 8007476:	4013      	ands	r3, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	69d1      	ldr	r1, [r2, #28]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6a12      	ldr	r2, [r2, #32]
 8007480:	4311      	orrs	r1, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007486:	0192      	lsls	r2, r2, #6
 8007488:	4311      	orrs	r1, r2
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800748e:	0612      	lsls	r2, r2, #24
 8007490:	4311      	orrs	r1, r2
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007496:	0852      	lsrs	r2, r2, #1
 8007498:	3a01      	subs	r2, #1
 800749a:	0412      	lsls	r2, r2, #16
 800749c:	430a      	orrs	r2, r1
 800749e:	4934      	ldr	r1, [pc, #208]	; (8007570 <HAL_RCC_OscConfig+0x490>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074a4:	4b33      	ldr	r3, [pc, #204]	; (8007574 <HAL_RCC_OscConfig+0x494>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074aa:	f7fd f94f 	bl	800474c <HAL_GetTick>
 80074ae:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b0:	e008      	b.n	80074c4 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b2:	f7fd f94b 	bl	800474c <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b64      	cmp	r3, #100	; 0x64
 80074be:	d901      	bls.n	80074c4 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e04d      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c4:	4b2a      	ldr	r3, [pc, #168]	; (8007570 <HAL_RCC_OscConfig+0x490>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0f0      	beq.n	80074b2 <HAL_RCC_OscConfig+0x3d2>
 80074d0:	e045      	b.n	800755e <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074d2:	4b28      	ldr	r3, [pc, #160]	; (8007574 <HAL_RCC_OscConfig+0x494>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d8:	f7fd f938 	bl	800474c <HAL_GetTick>
 80074dc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074e0:	f7fd f934 	bl	800474c <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b64      	cmp	r3, #100	; 0x64
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e036      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074f2:	4b1f      	ldr	r3, [pc, #124]	; (8007570 <HAL_RCC_OscConfig+0x490>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f0      	bne.n	80074e0 <HAL_RCC_OscConfig+0x400>
 80074fe:	e02e      	b.n	800755e <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d101      	bne.n	800750c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e029      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800750c:	4b18      	ldr	r3, [pc, #96]	; (8007570 <HAL_RCC_OscConfig+0x490>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	429a      	cmp	r2, r3
 800751e:	d11c      	bne.n	800755a <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752a:	429a      	cmp	r2, r3
 800752c:	d115      	bne.n	800755a <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	099b      	lsrs	r3, r3, #6
 8007532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800753a:	429a      	cmp	r2, r3
 800753c:	d10d      	bne.n	800755a <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007548:	429a      	cmp	r2, r3
 800754a:	d106      	bne.n	800755a <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007556:	429a      	cmp	r2, r3
 8007558:	d001      	beq.n	800755e <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3728      	adds	r7, #40	; 0x28
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	40007000 	.word	0x40007000
 800756c:	40023870 	.word	0x40023870
 8007570:	40023800 	.word	0x40023800
 8007574:	42470060 	.word	0x42470060
 8007578:	f0bc8000 	.word	0xf0bc8000

0800757c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e0d2      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007590:	4b6b      	ldr	r3, [pc, #428]	; (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	429a      	cmp	r2, r3
 800759c:	d90c      	bls.n	80075b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800759e:	4b68      	ldr	r3, [pc, #416]	; (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075a6:	4b66      	ldr	r3, [pc, #408]	; (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d001      	beq.n	80075b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e0be      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d020      	beq.n	8007606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d005      	beq.n	80075dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075d0:	4b5c      	ldr	r3, [pc, #368]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	4a5b      	ldr	r2, [pc, #364]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80075e8:	4b56      	ldr	r3, [pc, #344]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	4a55      	ldr	r2, [pc, #340]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075f4:	4b53      	ldr	r3, [pc, #332]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	4950      	ldr	r1, [pc, #320]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007602:	4313      	orrs	r3, r2
 8007604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d040      	beq.n	8007694 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d107      	bne.n	800762a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800761a:	4b4a      	ldr	r3, [pc, #296]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d115      	bne.n	8007652 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e085      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d107      	bne.n	8007642 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007632:	4b44      	ldr	r3, [pc, #272]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d109      	bne.n	8007652 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e079      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007642:	4b40      	ldr	r3, [pc, #256]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e071      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007652:	4b3c      	ldr	r3, [pc, #240]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f023 0203 	bic.w	r2, r3, #3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	4939      	ldr	r1, [pc, #228]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007660:	4313      	orrs	r3, r2
 8007662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007664:	f7fd f872 	bl	800474c <HAL_GetTick>
 8007668:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800766a:	e00a      	b.n	8007682 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800766c:	f7fd f86e 	bl	800474c <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	f241 3288 	movw	r2, #5000	; 0x1388
 800767a:	4293      	cmp	r3, r2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e059      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007682:	4b30      	ldr	r3, [pc, #192]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 020c 	and.w	r2, r3, #12
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	429a      	cmp	r2, r3
 8007692:	d1eb      	bne.n	800766c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007694:	4b2a      	ldr	r3, [pc, #168]	; (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 030f 	and.w	r3, r3, #15
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d20c      	bcs.n	80076bc <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a2:	4b27      	ldr	r3, [pc, #156]	; (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	b2d2      	uxtb	r2, r2
 80076a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076aa:	4b25      	ldr	r3, [pc, #148]	; (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d001      	beq.n	80076bc <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e03c      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d008      	beq.n	80076da <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076c8:	4b1e      	ldr	r3, [pc, #120]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	491b      	ldr	r1, [pc, #108]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d009      	beq.n	80076fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076e6:	4b17      	ldr	r3, [pc, #92]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	4913      	ldr	r1, [pc, #76]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80076fa:	f000 f82b 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 80076fe:	4601      	mov	r1, r0
 8007700:	4b10      	ldr	r3, [pc, #64]	; (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007708:	22f0      	movs	r2, #240	; 0xf0
 800770a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	fa92 f2a2 	rbit	r2, r2
 8007712:	60fa      	str	r2, [r7, #12]
  return result;
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	fab2 f282 	clz	r2, r2
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	40d3      	lsrs	r3, r2
 800771e:	4a0a      	ldr	r2, [pc, #40]	; (8007748 <HAL_RCC_ClockConfig+0x1cc>)
 8007720:	5cd3      	ldrb	r3, [r2, r3]
 8007722:	fa21 f303 	lsr.w	r3, r1, r3
 8007726:	4a09      	ldr	r2, [pc, #36]	; (800774c <HAL_RCC_ClockConfig+0x1d0>)
 8007728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800772a:	4b09      	ldr	r3, [pc, #36]	; (8007750 <HAL_RCC_ClockConfig+0x1d4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f7fc ffca 	bl	80046c8 <HAL_InitTick>

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40023c00 	.word	0x40023c00
 8007744:	40023800 	.word	0x40023800
 8007748:	08008850 	.word	0x08008850
 800774c:	2000000c 	.word	0x2000000c
 8007750:	20000018 	.word	0x20000018

08007754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007758:	b090      	sub	sp, #64	; 0x40
 800775a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
 8007760:	2300      	movs	r3, #0
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007764:	2300      	movs	r3, #0
 8007766:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800776c:	4b59      	ldr	r3, [pc, #356]	; (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 030c 	and.w	r3, r3, #12
 8007774:	2b08      	cmp	r3, #8
 8007776:	d00d      	beq.n	8007794 <HAL_RCC_GetSysClockFreq+0x40>
 8007778:	2b08      	cmp	r3, #8
 800777a:	f200 80a2 	bhi.w	80078c2 <HAL_RCC_GetSysClockFreq+0x16e>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <HAL_RCC_GetSysClockFreq+0x34>
 8007782:	2b04      	cmp	r3, #4
 8007784:	d003      	beq.n	800778e <HAL_RCC_GetSysClockFreq+0x3a>
 8007786:	e09c      	b.n	80078c2 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007788:	4b53      	ldr	r3, [pc, #332]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800778a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800778c:	e09c      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800778e:	4b53      	ldr	r3, [pc, #332]	; (80078dc <HAL_RCC_GetSysClockFreq+0x188>)
 8007790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007792:	e099      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007794:	4b4f      	ldr	r3, [pc, #316]	; (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800779e:	4b4d      	ldr	r3, [pc, #308]	; (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d027      	beq.n	80077fa <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077aa:	4b4a      	ldr	r3, [pc, #296]	; (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	099b      	lsrs	r3, r3, #6
 80077b0:	2200      	movs	r2, #0
 80077b2:	623b      	str	r3, [r7, #32]
 80077b4:	627a      	str	r2, [r7, #36]	; 0x24
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80077bc:	2100      	movs	r1, #0
 80077be:	4b47      	ldr	r3, [pc, #284]	; (80078dc <HAL_RCC_GetSysClockFreq+0x188>)
 80077c0:	fb03 f201 	mul.w	r2, r3, r1
 80077c4:	2300      	movs	r3, #0
 80077c6:	fb00 f303 	mul.w	r3, r0, r3
 80077ca:	4413      	add	r3, r2
 80077cc:	4a43      	ldr	r2, [pc, #268]	; (80078dc <HAL_RCC_GetSysClockFreq+0x188>)
 80077ce:	fba0 2102 	umull	r2, r1, r0, r2
 80077d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80077d4:	62ba      	str	r2, [r7, #40]	; 0x28
 80077d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d8:	4413      	add	r3, r2
 80077da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	2200      	movs	r2, #0
 80077e0:	61bb      	str	r3, [r7, #24]
 80077e2:	61fa      	str	r2, [r7, #28]
 80077e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80077ec:	f7f9 fc86 	bl	80010fc <__aeabi_uldivmod>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4613      	mov	r3, r2
 80077f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f8:	e055      	b.n	80078a6 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077fa:	4b36      	ldr	r3, [pc, #216]	; (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	099b      	lsrs	r3, r3, #6
 8007800:	2200      	movs	r2, #0
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	617a      	str	r2, [r7, #20]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800780c:	f04f 0b00 	mov.w	fp, #0
 8007810:	4652      	mov	r2, sl
 8007812:	465b      	mov	r3, fp
 8007814:	f04f 0000 	mov.w	r0, #0
 8007818:	f04f 0100 	mov.w	r1, #0
 800781c:	0159      	lsls	r1, r3, #5
 800781e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007822:	0150      	lsls	r0, r2, #5
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	ebb2 080a 	subs.w	r8, r2, sl
 800782c:	eb63 090b 	sbc.w	r9, r3, fp
 8007830:	f04f 0200 	mov.w	r2, #0
 8007834:	f04f 0300 	mov.w	r3, #0
 8007838:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800783c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007840:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007844:	ebb2 0408 	subs.w	r4, r2, r8
 8007848:	eb63 0509 	sbc.w	r5, r3, r9
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	00eb      	lsls	r3, r5, #3
 8007856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800785a:	00e2      	lsls	r2, r4, #3
 800785c:	4614      	mov	r4, r2
 800785e:	461d      	mov	r5, r3
 8007860:	eb14 030a 	adds.w	r3, r4, sl
 8007864:	603b      	str	r3, [r7, #0]
 8007866:	eb45 030b 	adc.w	r3, r5, fp
 800786a:	607b      	str	r3, [r7, #4]
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007878:	4629      	mov	r1, r5
 800787a:	028b      	lsls	r3, r1, #10
 800787c:	4620      	mov	r0, r4
 800787e:	4629      	mov	r1, r5
 8007880:	4604      	mov	r4, r0
 8007882:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8007886:	4601      	mov	r1, r0
 8007888:	028a      	lsls	r2, r1, #10
 800788a:	4610      	mov	r0, r2
 800788c:	4619      	mov	r1, r3
 800788e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007890:	2200      	movs	r2, #0
 8007892:	60bb      	str	r3, [r7, #8]
 8007894:	60fa      	str	r2, [r7, #12]
 8007896:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800789a:	f7f9 fc2f 	bl	80010fc <__aeabi_uldivmod>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4613      	mov	r3, r2
 80078a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078a6:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	f003 0303 	and.w	r3, r3, #3
 80078b0:	3301      	adds	r3, #1
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80078b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80078be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80078c0:	e002      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80078c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80078c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3740      	adds	r7, #64	; 0x40
 80078ce:	46bd      	mov	sp, r7
 80078d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078d4:	40023800 	.word	0x40023800
 80078d8:	00f42400 	.word	0x00f42400
 80078dc:	017d7840 	.word	0x017d7840

080078e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078e4:	4b02      	ldr	r3, [pc, #8]	; (80078f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80078e6:	681b      	ldr	r3, [r3, #0]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr
 80078f0:	2000000c 	.word	0x2000000c

080078f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80078fa:	f7ff fff1 	bl	80078e0 <HAL_RCC_GetHCLKFreq>
 80078fe:	4601      	mov	r1, r0
 8007900:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007908:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800790c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	fa92 f2a2 	rbit	r2, r2
 8007914:	603a      	str	r2, [r7, #0]
  return result;
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	fab2 f282 	clz	r2, r2
 800791c:	b2d2      	uxtb	r2, r2
 800791e:	40d3      	lsrs	r3, r2
 8007920:	4a04      	ldr	r2, [pc, #16]	; (8007934 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007922:	5cd3      	ldrb	r3, [r2, r3]
 8007924:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	40023800 	.word	0x40023800
 8007934:	08008860 	.word	0x08008860

08007938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e041      	b.n	80079ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d106      	bne.n	8007964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7fc fc62 	bl	8004228 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3304      	adds	r3, #4
 8007974:	4619      	mov	r1, r3
 8007976:	4610      	mov	r0, r2
 8007978:	f000 fae8 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d109      	bne.n	80079fc <HAL_TIM_PWM_Start+0x24>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	bf14      	ite	ne
 80079f4:	2301      	movne	r3, #1
 80079f6:	2300      	moveq	r3, #0
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	e022      	b.n	8007a42 <HAL_TIM_PWM_Start+0x6a>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d109      	bne.n	8007a16 <HAL_TIM_PWM_Start+0x3e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	bf14      	ite	ne
 8007a0e:	2301      	movne	r3, #1
 8007a10:	2300      	moveq	r3, #0
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	e015      	b.n	8007a42 <HAL_TIM_PWM_Start+0x6a>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d109      	bne.n	8007a30 <HAL_TIM_PWM_Start+0x58>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	bf14      	ite	ne
 8007a28:	2301      	movne	r3, #1
 8007a2a:	2300      	moveq	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	e008      	b.n	8007a42 <HAL_TIM_PWM_Start+0x6a>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	bf14      	ite	ne
 8007a3c:	2301      	movne	r3, #1
 8007a3e:	2300      	moveq	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e07c      	b.n	8007b44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <HAL_TIM_PWM_Start+0x82>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a58:	e013      	b.n	8007a82 <HAL_TIM_PWM_Start+0xaa>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	d104      	bne.n	8007a6a <HAL_TIM_PWM_Start+0x92>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a68:	e00b      	b.n	8007a82 <HAL_TIM_PWM_Start+0xaa>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d104      	bne.n	8007a7a <HAL_TIM_PWM_Start+0xa2>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a78:	e003      	b.n	8007a82 <HAL_TIM_PWM_Start+0xaa>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2201      	movs	r2, #1
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 fca8 	bl	80083e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a2d      	ldr	r2, [pc, #180]	; (8007b4c <HAL_TIM_PWM_Start+0x174>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d004      	beq.n	8007aa4 <HAL_TIM_PWM_Start+0xcc>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a2c      	ldr	r2, [pc, #176]	; (8007b50 <HAL_TIM_PWM_Start+0x178>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d101      	bne.n	8007aa8 <HAL_TIM_PWM_Start+0xd0>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <HAL_TIM_PWM_Start+0xd2>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d007      	beq.n	8007abe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007abc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a22      	ldr	r2, [pc, #136]	; (8007b4c <HAL_TIM_PWM_Start+0x174>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d022      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x136>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad0:	d01d      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x136>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1f      	ldr	r2, [pc, #124]	; (8007b54 <HAL_TIM_PWM_Start+0x17c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d018      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x136>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1d      	ldr	r2, [pc, #116]	; (8007b58 <HAL_TIM_PWM_Start+0x180>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x136>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1c      	ldr	r2, [pc, #112]	; (8007b5c <HAL_TIM_PWM_Start+0x184>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00e      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x136>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a16      	ldr	r2, [pc, #88]	; (8007b50 <HAL_TIM_PWM_Start+0x178>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d009      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x136>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a18      	ldr	r2, [pc, #96]	; (8007b60 <HAL_TIM_PWM_Start+0x188>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d004      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x136>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a16      	ldr	r2, [pc, #88]	; (8007b64 <HAL_TIM_PWM_Start+0x18c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d111      	bne.n	8007b32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	d010      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b30:	e007      	b.n	8007b42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0201 	orr.w	r2, r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40010400 	.word	0x40010400
 8007b54:	40000400 	.word	0x40000400
 8007b58:	40000800 	.word	0x40000800
 8007b5c:	40000c00 	.word	0x40000c00
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40001800 	.word	0x40001800

08007b68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e097      	b.n	8007cac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d106      	bne.n	8007b96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7fc fb69 	bl	8004268 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6812      	ldr	r2, [r2, #0]
 8007ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bac:	f023 0307 	bic.w	r3, r3, #7
 8007bb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f000 f9c5 	bl	8007f4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bea:	f023 0303 	bic.w	r3, r3, #3
 8007bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c08:	f023 030c 	bic.w	r3, r3, #12
 8007c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	4313      	orrs	r3, r2
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	011a      	lsls	r2, r3, #4
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	031b      	lsls	r3, r3, #12
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007c46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007c4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	011b      	lsls	r3, r3, #4
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cc4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ccc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cd4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cdc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d110      	bne.n	8007d06 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d102      	bne.n	8007cf0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cea:	7b7b      	ldrb	r3, [r7, #13]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d001      	beq.n	8007cf4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e069      	b.n	8007dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d04:	e031      	b.n	8007d6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d110      	bne.n	8007d2e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d102      	bne.n	8007d18 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d12:	7b3b      	ldrb	r3, [r7, #12]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d001      	beq.n	8007d1c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e055      	b.n	8007dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d2c:	e01d      	b.n	8007d6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d108      	bne.n	8007d46 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d105      	bne.n	8007d46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d3a:	7b7b      	ldrb	r3, [r7, #13]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d102      	bne.n	8007d46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d40:	7b3b      	ldrb	r3, [r7, #12]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d001      	beq.n	8007d4a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e03e      	b.n	8007dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2202      	movs	r2, #2
 8007d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <HAL_TIM_Encoder_Start+0xc4>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d008      	beq.n	8007d88 <HAL_TIM_Encoder_Start+0xd4>
 8007d76:	e00f      	b.n	8007d98 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	2100      	movs	r1, #0
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 fb2d 	bl	80083e0 <TIM_CCxChannelCmd>
      break;
 8007d86:	e016      	b.n	8007db6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2104      	movs	r1, #4
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fb25 	bl	80083e0 <TIM_CCxChannelCmd>
      break;
 8007d96:	e00e      	b.n	8007db6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fb1d 	bl	80083e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2201      	movs	r2, #1
 8007dac:	2104      	movs	r1, #4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fb16 	bl	80083e0 <TIM_CCxChannelCmd>
      break;
 8007db4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f042 0201 	orr.w	r2, r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007de6:	2302      	movs	r3, #2
 8007de8:	e0ac      	b.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b0c      	cmp	r3, #12
 8007df6:	f200 809f 	bhi.w	8007f38 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007dfa:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e00:	08007e35 	.word	0x08007e35
 8007e04:	08007f39 	.word	0x08007f39
 8007e08:	08007f39 	.word	0x08007f39
 8007e0c:	08007f39 	.word	0x08007f39
 8007e10:	08007e75 	.word	0x08007e75
 8007e14:	08007f39 	.word	0x08007f39
 8007e18:	08007f39 	.word	0x08007f39
 8007e1c:	08007f39 	.word	0x08007f39
 8007e20:	08007eb7 	.word	0x08007eb7
 8007e24:	08007f39 	.word	0x08007f39
 8007e28:	08007f39 	.word	0x08007f39
 8007e2c:	08007f39 	.word	0x08007f39
 8007e30:	08007ef7 	.word	0x08007ef7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f924 	bl	8008088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0208 	orr.w	r2, r2, #8
 8007e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 0204 	bic.w	r2, r2, #4
 8007e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6999      	ldr	r1, [r3, #24]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	691a      	ldr	r2, [r3, #16]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	619a      	str	r2, [r3, #24]
      break;
 8007e72:	e062      	b.n	8007f3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68b9      	ldr	r1, [r7, #8]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 f974 	bl	8008168 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6999      	ldr	r1, [r3, #24]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	021a      	lsls	r2, r3, #8
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	619a      	str	r2, [r3, #24]
      break;
 8007eb4:	e041      	b.n	8007f3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 f9c7 	bl	8008250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69da      	ldr	r2, [r3, #28]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0208 	orr.w	r2, r2, #8
 8007ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0204 	bic.w	r2, r2, #4
 8007ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69d9      	ldr	r1, [r3, #28]
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	691a      	ldr	r2, [r3, #16]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	61da      	str	r2, [r3, #28]
      break;
 8007ef4:	e021      	b.n	8007f3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fa1b 	bl	8008338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69d9      	ldr	r1, [r3, #28]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	021a      	lsls	r2, r3, #8
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	61da      	str	r2, [r3, #28]
      break;
 8007f36:	e000      	b.n	8007f3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007f38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a3f      	ldr	r2, [pc, #252]	; (800805c <TIM_Base_SetConfig+0x110>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d013      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6a:	d00f      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a3c      	ldr	r2, [pc, #240]	; (8008060 <TIM_Base_SetConfig+0x114>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00b      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a3b      	ldr	r2, [pc, #236]	; (8008064 <TIM_Base_SetConfig+0x118>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d007      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a3a      	ldr	r2, [pc, #232]	; (8008068 <TIM_Base_SetConfig+0x11c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d003      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a39      	ldr	r2, [pc, #228]	; (800806c <TIM_Base_SetConfig+0x120>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d108      	bne.n	8007f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a2e      	ldr	r2, [pc, #184]	; (800805c <TIM_Base_SetConfig+0x110>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d02b      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fac:	d027      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a2b      	ldr	r2, [pc, #172]	; (8008060 <TIM_Base_SetConfig+0x114>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d023      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a2a      	ldr	r2, [pc, #168]	; (8008064 <TIM_Base_SetConfig+0x118>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d01f      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a29      	ldr	r2, [pc, #164]	; (8008068 <TIM_Base_SetConfig+0x11c>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d01b      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a28      	ldr	r2, [pc, #160]	; (800806c <TIM_Base_SetConfig+0x120>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d017      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a27      	ldr	r2, [pc, #156]	; (8008070 <TIM_Base_SetConfig+0x124>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d013      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a26      	ldr	r2, [pc, #152]	; (8008074 <TIM_Base_SetConfig+0x128>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00f      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a25      	ldr	r2, [pc, #148]	; (8008078 <TIM_Base_SetConfig+0x12c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a24      	ldr	r2, [pc, #144]	; (800807c <TIM_Base_SetConfig+0x130>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d007      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a23      	ldr	r2, [pc, #140]	; (8008080 <TIM_Base_SetConfig+0x134>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a22      	ldr	r2, [pc, #136]	; (8008084 <TIM_Base_SetConfig+0x138>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d108      	bne.n	8008010 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a09      	ldr	r2, [pc, #36]	; (800805c <TIM_Base_SetConfig+0x110>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_Base_SetConfig+0xf8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a0b      	ldr	r2, [pc, #44]	; (800806c <TIM_Base_SetConfig+0x120>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d103      	bne.n	800804c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	691a      	ldr	r2, [r3, #16]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	615a      	str	r2, [r3, #20]
}
 8008052:	bf00      	nop
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	bc80      	pop	{r7}
 800805a:	4770      	bx	lr
 800805c:	40010000 	.word	0x40010000
 8008060:	40000400 	.word	0x40000400
 8008064:	40000800 	.word	0x40000800
 8008068:	40000c00 	.word	0x40000c00
 800806c:	40010400 	.word	0x40010400
 8008070:	40014000 	.word	0x40014000
 8008074:	40014400 	.word	0x40014400
 8008078:	40014800 	.word	0x40014800
 800807c:	40001800 	.word	0x40001800
 8008080:	40001c00 	.word	0x40001c00
 8008084:	40002000 	.word	0x40002000

08008088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	f023 0201 	bic.w	r2, r3, #1
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0303 	bic.w	r3, r3, #3
 80080be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f023 0302 	bic.w	r3, r3, #2
 80080d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a20      	ldr	r2, [pc, #128]	; (8008160 <TIM_OC1_SetConfig+0xd8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d003      	beq.n	80080ec <TIM_OC1_SetConfig+0x64>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a1f      	ldr	r2, [pc, #124]	; (8008164 <TIM_OC1_SetConfig+0xdc>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d10c      	bne.n	8008106 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f023 0308 	bic.w	r3, r3, #8
 80080f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f023 0304 	bic.w	r3, r3, #4
 8008104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a15      	ldr	r2, [pc, #84]	; (8008160 <TIM_OC1_SetConfig+0xd8>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d003      	beq.n	8008116 <TIM_OC1_SetConfig+0x8e>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a14      	ldr	r2, [pc, #80]	; (8008164 <TIM_OC1_SetConfig+0xdc>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d111      	bne.n	800813a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800811c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	621a      	str	r2, [r3, #32]
}
 8008154:	bf00      	nop
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	40010000 	.word	0x40010000
 8008164:	40010400 	.word	0x40010400

08008168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008168:	b480      	push	{r7}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	f023 0210 	bic.w	r2, r3, #16
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800819e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	021b      	lsls	r3, r3, #8
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f023 0320 	bic.w	r3, r3, #32
 80081b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	011b      	lsls	r3, r3, #4
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	4313      	orrs	r3, r2
 80081be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a21      	ldr	r2, [pc, #132]	; (8008248 <TIM_OC2_SetConfig+0xe0>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d003      	beq.n	80081d0 <TIM_OC2_SetConfig+0x68>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a20      	ldr	r2, [pc, #128]	; (800824c <TIM_OC2_SetConfig+0xe4>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10d      	bne.n	80081ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	011b      	lsls	r3, r3, #4
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a16      	ldr	r2, [pc, #88]	; (8008248 <TIM_OC2_SetConfig+0xe0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d003      	beq.n	80081fc <TIM_OC2_SetConfig+0x94>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <TIM_OC2_SetConfig+0xe4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d113      	bne.n	8008224 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008202:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800820a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4313      	orrs	r3, r2
 8008216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	621a      	str	r2, [r3, #32]
}
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr
 8008248:	40010000 	.word	0x40010000
 800824c:	40010400 	.word	0x40010400

08008250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4313      	orrs	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a21      	ldr	r2, [pc, #132]	; (8008330 <TIM_OC3_SetConfig+0xe0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d003      	beq.n	80082b6 <TIM_OC3_SetConfig+0x66>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a20      	ldr	r2, [pc, #128]	; (8008334 <TIM_OC3_SetConfig+0xe4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d10d      	bne.n	80082d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a16      	ldr	r2, [pc, #88]	; (8008330 <TIM_OC3_SetConfig+0xe0>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_OC3_SetConfig+0x92>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a15      	ldr	r2, [pc, #84]	; (8008334 <TIM_OC3_SetConfig+0xe4>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d113      	bne.n	800830a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	621a      	str	r2, [r3, #32]
}
 8008324:	bf00      	nop
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	bc80      	pop	{r7}
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40010000 	.word	0x40010000
 8008334:	40010400 	.word	0x40010400

08008338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800836e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4313      	orrs	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	031b      	lsls	r3, r3, #12
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a11      	ldr	r2, [pc, #68]	; (80083d8 <TIM_OC4_SetConfig+0xa0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_OC4_SetConfig+0x68>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a10      	ldr	r2, [pc, #64]	; (80083dc <TIM_OC4_SetConfig+0xa4>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d109      	bne.n	80083b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	019b      	lsls	r3, r3, #6
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	621a      	str	r2, [r3, #32]
}
 80083ce:	bf00      	nop
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bc80      	pop	{r7}
 80083d6:	4770      	bx	lr
 80083d8:	40010000 	.word	0x40010000
 80083dc:	40010400 	.word	0x40010400

080083e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	2201      	movs	r2, #1
 80083f4:	fa02 f303 	lsl.w	r3, r2, r3
 80083f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6a1a      	ldr	r2, [r3, #32]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	43db      	mvns	r3, r3
 8008402:	401a      	ands	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a1a      	ldr	r2, [r3, #32]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f003 031f 	and.w	r3, r3, #31
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	fa01 f303 	lsl.w	r3, r1, r3
 8008418:	431a      	orrs	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	621a      	str	r2, [r3, #32]
}
 800841e:	bf00      	nop
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	bc80      	pop	{r7}
 8008426:	4770      	bx	lr

08008428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008438:	2b01      	cmp	r3, #1
 800843a:	d101      	bne.n	8008440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800843c:	2302      	movs	r3, #2
 800843e:	e05a      	b.n	80084f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a20      	ldr	r2, [pc, #128]	; (8008500 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d022      	beq.n	80084ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800848c:	d01d      	beq.n	80084ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a1c      	ldr	r2, [pc, #112]	; (8008504 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d018      	beq.n	80084ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a1a      	ldr	r2, [pc, #104]	; (8008508 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d013      	beq.n	80084ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a19      	ldr	r2, [pc, #100]	; (800850c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d00e      	beq.n	80084ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a17      	ldr	r2, [pc, #92]	; (8008510 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d009      	beq.n	80084ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a16      	ldr	r2, [pc, #88]	; (8008514 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d004      	beq.n	80084ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a14      	ldr	r2, [pc, #80]	; (8008518 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d10c      	bne.n	80084e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bc80      	pop	{r7}
 80084fe:	4770      	bx	lr
 8008500:	40010000 	.word	0x40010000
 8008504:	40000400 	.word	0x40000400
 8008508:	40000800 	.word	0x40000800
 800850c:	40000c00 	.word	0x40000c00
 8008510:	40010400 	.word	0x40010400
 8008514:	40014000 	.word	0x40014000
 8008518:	40001800 	.word	0x40001800

0800851c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008534:	2302      	movs	r3, #2
 8008536:	e03d      	b.n	80085b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4313      	orrs	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	4313      	orrs	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bc80      	pop	{r7}
 80085bc:	4770      	bx	lr
	...

080085c0 <__errno>:
 80085c0:	4b01      	ldr	r3, [pc, #4]	; (80085c8 <__errno+0x8>)
 80085c2:	6818      	ldr	r0, [r3, #0]
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	20000020 	.word	0x20000020

080085cc <__libc_init_array>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	2600      	movs	r6, #0
 80085d0:	4d0c      	ldr	r5, [pc, #48]	; (8008604 <__libc_init_array+0x38>)
 80085d2:	4c0d      	ldr	r4, [pc, #52]	; (8008608 <__libc_init_array+0x3c>)
 80085d4:	1b64      	subs	r4, r4, r5
 80085d6:	10a4      	asrs	r4, r4, #2
 80085d8:	42a6      	cmp	r6, r4
 80085da:	d109      	bne.n	80085f0 <__libc_init_array+0x24>
 80085dc:	f000 f92c 	bl	8008838 <_init>
 80085e0:	2600      	movs	r6, #0
 80085e2:	4d0a      	ldr	r5, [pc, #40]	; (800860c <__libc_init_array+0x40>)
 80085e4:	4c0a      	ldr	r4, [pc, #40]	; (8008610 <__libc_init_array+0x44>)
 80085e6:	1b64      	subs	r4, r4, r5
 80085e8:	10a4      	asrs	r4, r4, #2
 80085ea:	42a6      	cmp	r6, r4
 80085ec:	d105      	bne.n	80085fa <__libc_init_array+0x2e>
 80085ee:	bd70      	pop	{r4, r5, r6, pc}
 80085f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f4:	4798      	blx	r3
 80085f6:	3601      	adds	r6, #1
 80085f8:	e7ee      	b.n	80085d8 <__libc_init_array+0xc>
 80085fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80085fe:	4798      	blx	r3
 8008600:	3601      	adds	r6, #1
 8008602:	e7f2      	b.n	80085ea <__libc_init_array+0x1e>
 8008604:	08008878 	.word	0x08008878
 8008608:	08008878 	.word	0x08008878
 800860c:	08008878 	.word	0x08008878
 8008610:	0800887c 	.word	0x0800887c

08008614 <malloc>:
 8008614:	4b02      	ldr	r3, [pc, #8]	; (8008620 <malloc+0xc>)
 8008616:	4601      	mov	r1, r0
 8008618:	6818      	ldr	r0, [r3, #0]
 800861a:	f000 b87b 	b.w	8008714 <_malloc_r>
 800861e:	bf00      	nop
 8008620:	20000020 	.word	0x20000020

08008624 <free>:
 8008624:	4b02      	ldr	r3, [pc, #8]	; (8008630 <free+0xc>)
 8008626:	4601      	mov	r1, r0
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	f000 b80b 	b.w	8008644 <_free_r>
 800862e:	bf00      	nop
 8008630:	20000020 	.word	0x20000020

08008634 <memset>:
 8008634:	4603      	mov	r3, r0
 8008636:	4402      	add	r2, r0
 8008638:	4293      	cmp	r3, r2
 800863a:	d100      	bne.n	800863e <memset+0xa>
 800863c:	4770      	bx	lr
 800863e:	f803 1b01 	strb.w	r1, [r3], #1
 8008642:	e7f9      	b.n	8008638 <memset+0x4>

08008644 <_free_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4605      	mov	r5, r0
 8008648:	2900      	cmp	r1, #0
 800864a:	d040      	beq.n	80086ce <_free_r+0x8a>
 800864c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008650:	1f0c      	subs	r4, r1, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	bfb8      	it	lt
 8008656:	18e4      	addlt	r4, r4, r3
 8008658:	f000 f8e0 	bl	800881c <__malloc_lock>
 800865c:	4a1c      	ldr	r2, [pc, #112]	; (80086d0 <_free_r+0x8c>)
 800865e:	6813      	ldr	r3, [r2, #0]
 8008660:	b933      	cbnz	r3, 8008670 <_free_r+0x2c>
 8008662:	6063      	str	r3, [r4, #4]
 8008664:	6014      	str	r4, [r2, #0]
 8008666:	4628      	mov	r0, r5
 8008668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800866c:	f000 b8dc 	b.w	8008828 <__malloc_unlock>
 8008670:	42a3      	cmp	r3, r4
 8008672:	d908      	bls.n	8008686 <_free_r+0x42>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	1821      	adds	r1, r4, r0
 8008678:	428b      	cmp	r3, r1
 800867a:	bf01      	itttt	eq
 800867c:	6819      	ldreq	r1, [r3, #0]
 800867e:	685b      	ldreq	r3, [r3, #4]
 8008680:	1809      	addeq	r1, r1, r0
 8008682:	6021      	streq	r1, [r4, #0]
 8008684:	e7ed      	b.n	8008662 <_free_r+0x1e>
 8008686:	461a      	mov	r2, r3
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	b10b      	cbz	r3, 8008690 <_free_r+0x4c>
 800868c:	42a3      	cmp	r3, r4
 800868e:	d9fa      	bls.n	8008686 <_free_r+0x42>
 8008690:	6811      	ldr	r1, [r2, #0]
 8008692:	1850      	adds	r0, r2, r1
 8008694:	42a0      	cmp	r0, r4
 8008696:	d10b      	bne.n	80086b0 <_free_r+0x6c>
 8008698:	6820      	ldr	r0, [r4, #0]
 800869a:	4401      	add	r1, r0
 800869c:	1850      	adds	r0, r2, r1
 800869e:	4283      	cmp	r3, r0
 80086a0:	6011      	str	r1, [r2, #0]
 80086a2:	d1e0      	bne.n	8008666 <_free_r+0x22>
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	4401      	add	r1, r0
 80086aa:	6011      	str	r1, [r2, #0]
 80086ac:	6053      	str	r3, [r2, #4]
 80086ae:	e7da      	b.n	8008666 <_free_r+0x22>
 80086b0:	d902      	bls.n	80086b8 <_free_r+0x74>
 80086b2:	230c      	movs	r3, #12
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	e7d6      	b.n	8008666 <_free_r+0x22>
 80086b8:	6820      	ldr	r0, [r4, #0]
 80086ba:	1821      	adds	r1, r4, r0
 80086bc:	428b      	cmp	r3, r1
 80086be:	bf01      	itttt	eq
 80086c0:	6819      	ldreq	r1, [r3, #0]
 80086c2:	685b      	ldreq	r3, [r3, #4]
 80086c4:	1809      	addeq	r1, r1, r0
 80086c6:	6021      	streq	r1, [r4, #0]
 80086c8:	6063      	str	r3, [r4, #4]
 80086ca:	6054      	str	r4, [r2, #4]
 80086cc:	e7cb      	b.n	8008666 <_free_r+0x22>
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	20001520 	.word	0x20001520

080086d4 <sbrk_aligned>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	4e0e      	ldr	r6, [pc, #56]	; (8008710 <sbrk_aligned+0x3c>)
 80086d8:	460c      	mov	r4, r1
 80086da:	6831      	ldr	r1, [r6, #0]
 80086dc:	4605      	mov	r5, r0
 80086de:	b911      	cbnz	r1, 80086e6 <sbrk_aligned+0x12>
 80086e0:	f000 f88c 	bl	80087fc <_sbrk_r>
 80086e4:	6030      	str	r0, [r6, #0]
 80086e6:	4621      	mov	r1, r4
 80086e8:	4628      	mov	r0, r5
 80086ea:	f000 f887 	bl	80087fc <_sbrk_r>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	d00a      	beq.n	8008708 <sbrk_aligned+0x34>
 80086f2:	1cc4      	adds	r4, r0, #3
 80086f4:	f024 0403 	bic.w	r4, r4, #3
 80086f8:	42a0      	cmp	r0, r4
 80086fa:	d007      	beq.n	800870c <sbrk_aligned+0x38>
 80086fc:	1a21      	subs	r1, r4, r0
 80086fe:	4628      	mov	r0, r5
 8008700:	f000 f87c 	bl	80087fc <_sbrk_r>
 8008704:	3001      	adds	r0, #1
 8008706:	d101      	bne.n	800870c <sbrk_aligned+0x38>
 8008708:	f04f 34ff 	mov.w	r4, #4294967295
 800870c:	4620      	mov	r0, r4
 800870e:	bd70      	pop	{r4, r5, r6, pc}
 8008710:	20001524 	.word	0x20001524

08008714 <_malloc_r>:
 8008714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008718:	1ccd      	adds	r5, r1, #3
 800871a:	f025 0503 	bic.w	r5, r5, #3
 800871e:	3508      	adds	r5, #8
 8008720:	2d0c      	cmp	r5, #12
 8008722:	bf38      	it	cc
 8008724:	250c      	movcc	r5, #12
 8008726:	2d00      	cmp	r5, #0
 8008728:	4607      	mov	r7, r0
 800872a:	db01      	blt.n	8008730 <_malloc_r+0x1c>
 800872c:	42a9      	cmp	r1, r5
 800872e:	d905      	bls.n	800873c <_malloc_r+0x28>
 8008730:	230c      	movs	r3, #12
 8008732:	2600      	movs	r6, #0
 8008734:	603b      	str	r3, [r7, #0]
 8008736:	4630      	mov	r0, r6
 8008738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800873c:	4e2e      	ldr	r6, [pc, #184]	; (80087f8 <_malloc_r+0xe4>)
 800873e:	f000 f86d 	bl	800881c <__malloc_lock>
 8008742:	6833      	ldr	r3, [r6, #0]
 8008744:	461c      	mov	r4, r3
 8008746:	bb34      	cbnz	r4, 8008796 <_malloc_r+0x82>
 8008748:	4629      	mov	r1, r5
 800874a:	4638      	mov	r0, r7
 800874c:	f7ff ffc2 	bl	80086d4 <sbrk_aligned>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	4604      	mov	r4, r0
 8008754:	d14d      	bne.n	80087f2 <_malloc_r+0xde>
 8008756:	6834      	ldr	r4, [r6, #0]
 8008758:	4626      	mov	r6, r4
 800875a:	2e00      	cmp	r6, #0
 800875c:	d140      	bne.n	80087e0 <_malloc_r+0xcc>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	4631      	mov	r1, r6
 8008762:	4638      	mov	r0, r7
 8008764:	eb04 0803 	add.w	r8, r4, r3
 8008768:	f000 f848 	bl	80087fc <_sbrk_r>
 800876c:	4580      	cmp	r8, r0
 800876e:	d13a      	bne.n	80087e6 <_malloc_r+0xd2>
 8008770:	6821      	ldr	r1, [r4, #0]
 8008772:	3503      	adds	r5, #3
 8008774:	1a6d      	subs	r5, r5, r1
 8008776:	f025 0503 	bic.w	r5, r5, #3
 800877a:	3508      	adds	r5, #8
 800877c:	2d0c      	cmp	r5, #12
 800877e:	bf38      	it	cc
 8008780:	250c      	movcc	r5, #12
 8008782:	4638      	mov	r0, r7
 8008784:	4629      	mov	r1, r5
 8008786:	f7ff ffa5 	bl	80086d4 <sbrk_aligned>
 800878a:	3001      	adds	r0, #1
 800878c:	d02b      	beq.n	80087e6 <_malloc_r+0xd2>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	442b      	add	r3, r5
 8008792:	6023      	str	r3, [r4, #0]
 8008794:	e00e      	b.n	80087b4 <_malloc_r+0xa0>
 8008796:	6822      	ldr	r2, [r4, #0]
 8008798:	1b52      	subs	r2, r2, r5
 800879a:	d41e      	bmi.n	80087da <_malloc_r+0xc6>
 800879c:	2a0b      	cmp	r2, #11
 800879e:	d916      	bls.n	80087ce <_malloc_r+0xba>
 80087a0:	1961      	adds	r1, r4, r5
 80087a2:	42a3      	cmp	r3, r4
 80087a4:	6025      	str	r5, [r4, #0]
 80087a6:	bf18      	it	ne
 80087a8:	6059      	strne	r1, [r3, #4]
 80087aa:	6863      	ldr	r3, [r4, #4]
 80087ac:	bf08      	it	eq
 80087ae:	6031      	streq	r1, [r6, #0]
 80087b0:	5162      	str	r2, [r4, r5]
 80087b2:	604b      	str	r3, [r1, #4]
 80087b4:	4638      	mov	r0, r7
 80087b6:	f104 060b 	add.w	r6, r4, #11
 80087ba:	f000 f835 	bl	8008828 <__malloc_unlock>
 80087be:	f026 0607 	bic.w	r6, r6, #7
 80087c2:	1d23      	adds	r3, r4, #4
 80087c4:	1af2      	subs	r2, r6, r3
 80087c6:	d0b6      	beq.n	8008736 <_malloc_r+0x22>
 80087c8:	1b9b      	subs	r3, r3, r6
 80087ca:	50a3      	str	r3, [r4, r2]
 80087cc:	e7b3      	b.n	8008736 <_malloc_r+0x22>
 80087ce:	6862      	ldr	r2, [r4, #4]
 80087d0:	42a3      	cmp	r3, r4
 80087d2:	bf0c      	ite	eq
 80087d4:	6032      	streq	r2, [r6, #0]
 80087d6:	605a      	strne	r2, [r3, #4]
 80087d8:	e7ec      	b.n	80087b4 <_malloc_r+0xa0>
 80087da:	4623      	mov	r3, r4
 80087dc:	6864      	ldr	r4, [r4, #4]
 80087de:	e7b2      	b.n	8008746 <_malloc_r+0x32>
 80087e0:	4634      	mov	r4, r6
 80087e2:	6876      	ldr	r6, [r6, #4]
 80087e4:	e7b9      	b.n	800875a <_malloc_r+0x46>
 80087e6:	230c      	movs	r3, #12
 80087e8:	4638      	mov	r0, r7
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	f000 f81c 	bl	8008828 <__malloc_unlock>
 80087f0:	e7a1      	b.n	8008736 <_malloc_r+0x22>
 80087f2:	6025      	str	r5, [r4, #0]
 80087f4:	e7de      	b.n	80087b4 <_malloc_r+0xa0>
 80087f6:	bf00      	nop
 80087f8:	20001520 	.word	0x20001520

080087fc <_sbrk_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	2300      	movs	r3, #0
 8008800:	4d05      	ldr	r5, [pc, #20]	; (8008818 <_sbrk_r+0x1c>)
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	f7fb fe28 	bl	800445c <_sbrk>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_sbrk_r+0x1a>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_sbrk_r+0x1a>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20001528 	.word	0x20001528

0800881c <__malloc_lock>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__malloc_lock+0x8>)
 800881e:	f000 b809 	b.w	8008834 <__retarget_lock_acquire_recursive>
 8008822:	bf00      	nop
 8008824:	2000152c 	.word	0x2000152c

08008828 <__malloc_unlock>:
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <__malloc_unlock+0x8>)
 800882a:	f000 b804 	b.w	8008836 <__retarget_lock_release_recursive>
 800882e:	bf00      	nop
 8008830:	2000152c 	.word	0x2000152c

08008834 <__retarget_lock_acquire_recursive>:
 8008834:	4770      	bx	lr

08008836 <__retarget_lock_release_recursive>:
 8008836:	4770      	bx	lr

08008838 <_init>:
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	bf00      	nop
 800883c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883e:	bc08      	pop	{r3}
 8008840:	469e      	mov	lr, r3
 8008842:	4770      	bx	lr

08008844 <_fini>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr
