
Crewmate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006634  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d4  080067d4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067dc  080067dc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080067e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001858  20000080  08006864  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018d8  08006864  000218d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d696  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002947  00000000  00000000  0002d73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00030088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00030e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd04  00000000  00000000  00031ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001165e  00000000  00000000  000517b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bba67  00000000  00000000  00062e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e879  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c78  00000000  00000000  0011e8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080067a4 	.word	0x080067a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	080067a4 	.word	0x080067a4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2f>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ac:	bf24      	itt	cs
 80008ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008b6:	d90d      	bls.n	80008d4 <__aeabi_d2f+0x30>
 80008b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008d8:	d121      	bne.n	800091e <__aeabi_d2f+0x7a>
 80008da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008de:	bfbc      	itt	lt
 80008e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	4770      	bxlt	lr
 80008e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ee:	f1c2 0218 	rsb	r2, r2, #24
 80008f2:	f1c2 0c20 	rsb	ip, r2, #32
 80008f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008fa:	fa20 f002 	lsr.w	r0, r0, r2
 80008fe:	bf18      	it	ne
 8000900:	f040 0001 	orrne.w	r0, r0, #1
 8000904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800090c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000910:	ea40 000c 	orr.w	r0, r0, ip
 8000914:	fa23 f302 	lsr.w	r3, r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	e7cc      	b.n	80008b8 <__aeabi_d2f+0x14>
 800091e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000922:	d107      	bne.n	8000934 <__aeabi_d2f+0x90>
 8000924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000928:	bf1e      	ittt	ne
 800092a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800092e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000932:	4770      	bxne	lr
 8000934:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000938:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800093c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_frsub>:
 8000944:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000948:	e002      	b.n	8000950 <__addsf3>
 800094a:	bf00      	nop

0800094c <__aeabi_fsub>:
 800094c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000950 <__addsf3>:
 8000950:	0042      	lsls	r2, r0, #1
 8000952:	bf1f      	itttt	ne
 8000954:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000958:	ea92 0f03 	teqne	r2, r3
 800095c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000960:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000964:	d06a      	beq.n	8000a3c <__addsf3+0xec>
 8000966:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800096a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096e:	bfc1      	itttt	gt
 8000970:	18d2      	addgt	r2, r2, r3
 8000972:	4041      	eorgt	r1, r0
 8000974:	4048      	eorgt	r0, r1
 8000976:	4041      	eorgt	r1, r0
 8000978:	bfb8      	it	lt
 800097a:	425b      	neglt	r3, r3
 800097c:	2b19      	cmp	r3, #25
 800097e:	bf88      	it	hi
 8000980:	4770      	bxhi	lr
 8000982:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000996:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800099a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800099e:	bf18      	it	ne
 80009a0:	4249      	negne	r1, r1
 80009a2:	ea92 0f03 	teq	r2, r3
 80009a6:	d03f      	beq.n	8000a28 <__addsf3+0xd8>
 80009a8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ac:	fa41 fc03 	asr.w	ip, r1, r3
 80009b0:	eb10 000c 	adds.w	r0, r0, ip
 80009b4:	f1c3 0320 	rsb	r3, r3, #32
 80009b8:	fa01 f103 	lsl.w	r1, r1, r3
 80009bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009c0:	d502      	bpl.n	80009c8 <__addsf3+0x78>
 80009c2:	4249      	negs	r1, r1
 80009c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009cc:	d313      	bcc.n	80009f6 <__addsf3+0xa6>
 80009ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009d2:	d306      	bcc.n	80009e2 <__addsf3+0x92>
 80009d4:	0840      	lsrs	r0, r0, #1
 80009d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009da:	f102 0201 	add.w	r2, r2, #1
 80009de:	2afe      	cmp	r2, #254	; 0xfe
 80009e0:	d251      	bcs.n	8000a86 <__addsf3+0x136>
 80009e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ea:	bf08      	it	eq
 80009ec:	f020 0001 	biceq.w	r0, r0, #1
 80009f0:	ea40 0003 	orr.w	r0, r0, r3
 80009f4:	4770      	bx	lr
 80009f6:	0049      	lsls	r1, r1, #1
 80009f8:	eb40 0000 	adc.w	r0, r0, r0
 80009fc:	3a01      	subs	r2, #1
 80009fe:	bf28      	it	cs
 8000a00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a04:	d2ed      	bcs.n	80009e2 <__addsf3+0x92>
 8000a06:	fab0 fc80 	clz	ip, r0
 8000a0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a16:	bfaa      	itet	ge
 8000a18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a1c:	4252      	neglt	r2, r2
 8000a1e:	4318      	orrge	r0, r3
 8000a20:	bfbc      	itt	lt
 8000a22:	40d0      	lsrlt	r0, r2
 8000a24:	4318      	orrlt	r0, r3
 8000a26:	4770      	bx	lr
 8000a28:	f092 0f00 	teq	r2, #0
 8000a2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a30:	bf06      	itte	eq
 8000a32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a36:	3201      	addeq	r2, #1
 8000a38:	3b01      	subne	r3, #1
 8000a3a:	e7b5      	b.n	80009a8 <__addsf3+0x58>
 8000a3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a44:	bf18      	it	ne
 8000a46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4a:	d021      	beq.n	8000a90 <__addsf3+0x140>
 8000a4c:	ea92 0f03 	teq	r2, r3
 8000a50:	d004      	beq.n	8000a5c <__addsf3+0x10c>
 8000a52:	f092 0f00 	teq	r2, #0
 8000a56:	bf08      	it	eq
 8000a58:	4608      	moveq	r0, r1
 8000a5a:	4770      	bx	lr
 8000a5c:	ea90 0f01 	teq	r0, r1
 8000a60:	bf1c      	itt	ne
 8000a62:	2000      	movne	r0, #0
 8000a64:	4770      	bxne	lr
 8000a66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a6a:	d104      	bne.n	8000a76 <__addsf3+0x126>
 8000a6c:	0040      	lsls	r0, r0, #1
 8000a6e:	bf28      	it	cs
 8000a70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a74:	4770      	bx	lr
 8000a76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a7a:	bf3c      	itt	cc
 8000a7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bxcc	lr
 8000a82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8e:	4770      	bx	lr
 8000a90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a94:	bf16      	itet	ne
 8000a96:	4608      	movne	r0, r1
 8000a98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a9c:	4601      	movne	r1, r0
 8000a9e:	0242      	lsls	r2, r0, #9
 8000aa0:	bf06      	itte	eq
 8000aa2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa6:	ea90 0f01 	teqeq	r0, r1
 8000aaa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_ui2f>:
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	e004      	b.n	8000ac0 <__aeabi_i2f+0x8>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_i2f>:
 8000ab8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000abc:	bf48      	it	mi
 8000abe:	4240      	negmi	r0, r0
 8000ac0:	ea5f 0c00 	movs.w	ip, r0
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000acc:	4601      	mov	r1, r0
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	e01c      	b.n	8000b0e <__aeabi_l2f+0x2a>

08000ad4 <__aeabi_ul2f>:
 8000ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad8:	bf08      	it	eq
 8000ada:	4770      	bxeq	lr
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	e00a      	b.n	8000af8 <__aeabi_l2f+0x14>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_l2f>:
 8000ae4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae8:	bf08      	it	eq
 8000aea:	4770      	bxeq	lr
 8000aec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_l2f+0x14>
 8000af2:	4240      	negs	r0, r0
 8000af4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af8:	ea5f 0c01 	movs.w	ip, r1
 8000afc:	bf02      	ittt	eq
 8000afe:	4684      	moveq	ip, r0
 8000b00:	4601      	moveq	r1, r0
 8000b02:	2000      	moveq	r0, #0
 8000b04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b08:	bf08      	it	eq
 8000b0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b12:	fabc f28c 	clz	r2, ip
 8000b16:	3a08      	subs	r2, #8
 8000b18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b1c:	db10      	blt.n	8000b40 <__aeabi_l2f+0x5c>
 8000b1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b22:	4463      	add	r3, ip
 8000b24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b28:	f1c2 0220 	rsb	r2, r2, #32
 8000b2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b30:	fa20 f202 	lsr.w	r2, r0, r2
 8000b34:	eb43 0002 	adc.w	r0, r3, r2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f102 0220 	add.w	r2, r2, #32
 8000b44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b48:	f1c2 0220 	rsb	r2, r2, #32
 8000b4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b50:	fa21 f202 	lsr.w	r2, r1, r2
 8000b54:	eb43 0002 	adc.w	r0, r3, r2
 8000b58:	bf08      	it	eq
 8000b5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_fmul>:
 8000b60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b68:	bf1e      	ittt	ne
 8000b6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b6e:	ea92 0f0c 	teqne	r2, ip
 8000b72:	ea93 0f0c 	teqne	r3, ip
 8000b76:	d06f      	beq.n	8000c58 <__aeabi_fmul+0xf8>
 8000b78:	441a      	add	r2, r3
 8000b7a:	ea80 0c01 	eor.w	ip, r0, r1
 8000b7e:	0240      	lsls	r0, r0, #9
 8000b80:	bf18      	it	ne
 8000b82:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b86:	d01e      	beq.n	8000bc6 <__aeabi_fmul+0x66>
 8000b88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b8c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b90:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b94:	fba0 3101 	umull	r3, r1, r0, r1
 8000b98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b9c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba0:	bf3e      	ittt	cc
 8000ba2:	0049      	lslcc	r1, r1, #1
 8000ba4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba8:	005b      	lslcc	r3, r3, #1
 8000baa:	ea40 0001 	orr.w	r0, r0, r1
 8000bae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bb2:	2afd      	cmp	r2, #253	; 0xfd
 8000bb4:	d81d      	bhi.n	8000bf2 <__aeabi_fmul+0x92>
 8000bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	4770      	bx	lr
 8000bc6:	f090 0f00 	teq	r0, #0
 8000bca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bce:	bf08      	it	eq
 8000bd0:	0249      	lsleq	r1, r1, #9
 8000bd2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bd6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bda:	3a7f      	subs	r2, #127	; 0x7f
 8000bdc:	bfc2      	ittt	gt
 8000bde:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000be6:	4770      	bxgt	lr
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	3a01      	subs	r2, #1
 8000bf2:	dc5d      	bgt.n	8000cb0 <__aeabi_fmul+0x150>
 8000bf4:	f112 0f19 	cmn.w	r2, #25
 8000bf8:	bfdc      	itt	le
 8000bfa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bxle	lr
 8000c00:	f1c2 0200 	rsb	r2, r2, #0
 8000c04:	0041      	lsls	r1, r0, #1
 8000c06:	fa21 f102 	lsr.w	r1, r1, r2
 8000c0a:	f1c2 0220 	rsb	r2, r2, #32
 8000c0e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c12:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c16:	f140 0000 	adc.w	r0, r0, #0
 8000c1a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c1e:	bf08      	it	eq
 8000c20:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c24:	4770      	bx	lr
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0040      	lsleq	r0, r0, #1
 8000c32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c36:	3a01      	subeq	r2, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xce>
 8000c3a:	ea40 000c 	orr.w	r0, r0, ip
 8000c3e:	f093 0f00 	teq	r3, #0
 8000c42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c46:	bf02      	ittt	eq
 8000c48:	0049      	lsleq	r1, r1, #1
 8000c4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c4e:	3b01      	subeq	r3, #1
 8000c50:	d0f9      	beq.n	8000c46 <__aeabi_fmul+0xe6>
 8000c52:	ea41 010c 	orr.w	r1, r1, ip
 8000c56:	e78f      	b.n	8000b78 <__aeabi_fmul+0x18>
 8000c58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	bf18      	it	ne
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d00a      	beq.n	8000c7e <__aeabi_fmul+0x11e>
 8000c68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c6c:	bf18      	it	ne
 8000c6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c72:	d1d8      	bne.n	8000c26 <__aeabi_fmul+0xc6>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	bf17      	itett	ne
 8000c84:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	f091 0f00 	teqne	r1, #0
 8000c8e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c92:	d014      	beq.n	8000cbe <__aeabi_fmul+0x15e>
 8000c94:	ea92 0f0c 	teq	r2, ip
 8000c98:	d101      	bne.n	8000c9e <__aeabi_fmul+0x13e>
 8000c9a:	0242      	lsls	r2, r0, #9
 8000c9c:	d10f      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000c9e:	ea93 0f0c 	teq	r3, ip
 8000ca2:	d103      	bne.n	8000cac <__aeabi_fmul+0x14c>
 8000ca4:	024b      	lsls	r3, r1, #9
 8000ca6:	bf18      	it	ne
 8000ca8:	4608      	movne	r0, r1
 8000caa:	d108      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000cac:	ea80 0001 	eor.w	r0, r0, r1
 8000cb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fdiv>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d069      	beq.n	8000db4 <__aeabi_fdiv+0xec>
 8000ce0:	eba2 0203 	sub.w	r2, r2, r3
 8000ce4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce8:	0249      	lsls	r1, r1, #9
 8000cea:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cee:	d037      	beq.n	8000d60 <__aeabi_fdiv+0x98>
 8000cf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cf4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d00:	428b      	cmp	r3, r1
 8000d02:	bf38      	it	cc
 8000d04:	005b      	lslcc	r3, r3, #1
 8000d06:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d0a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	bf24      	itt	cs
 8000d12:	1a5b      	subcs	r3, r3, r1
 8000d14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d18:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d1c:	bf24      	itt	cs
 8000d1e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d22:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d26:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d2a:	bf24      	itt	cs
 8000d2c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d38:	bf24      	itt	cs
 8000d3a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d3e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d4a:	d1e0      	bne.n	8000d0e <__aeabi_fdiv+0x46>
 8000d4c:	2afd      	cmp	r2, #253	; 0xfd
 8000d4e:	f63f af50 	bhi.w	8000bf2 <__aeabi_fmul+0x92>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d64:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d68:	327f      	adds	r2, #127	; 0x7f
 8000d6a:	bfc2      	ittt	gt
 8000d6c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d70:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d74:	4770      	bxgt	lr
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7a:	f04f 0300 	mov.w	r3, #0
 8000d7e:	3a01      	subs	r2, #1
 8000d80:	e737      	b.n	8000bf2 <__aeabi_fmul+0x92>
 8000d82:	f092 0f00 	teq	r2, #0
 8000d86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0040      	lsleq	r0, r0, #1
 8000d8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d92:	3a01      	subeq	r2, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xc2>
 8000d96:	ea40 000c 	orr.w	r0, r0, ip
 8000d9a:	f093 0f00 	teq	r3, #0
 8000d9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0049      	lsleq	r1, r1, #1
 8000da6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000daa:	3b01      	subeq	r3, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fdiv+0xda>
 8000dae:	ea41 010c 	orr.w	r1, r1, ip
 8000db2:	e795      	b.n	8000ce0 <__aeabi_fdiv+0x18>
 8000db4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d108      	bne.n	8000dd0 <__aeabi_fdiv+0x108>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	f47f af7d 	bne.w	8000cbe <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	f47f af70 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e776      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dd0:	ea93 0f0c 	teq	r3, ip
 8000dd4:	d104      	bne.n	8000de0 <__aeabi_fdiv+0x118>
 8000dd6:	024b      	lsls	r3, r1, #9
 8000dd8:	f43f af4c 	beq.w	8000c74 <__aeabi_fmul+0x114>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e76e      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000de0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de4:	bf18      	it	ne
 8000de6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	d1ca      	bne.n	8000d82 <__aeabi_fdiv+0xba>
 8000dec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df0:	f47f af5c 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000df4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000df8:	f47f af3c 	bne.w	8000c74 <__aeabi_fmul+0x114>
 8000dfc:	e75f      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dfe:	bf00      	nop

08000e00 <__gesf2>:
 8000e00:	f04f 3cff 	mov.w	ip, #4294967295
 8000e04:	e006      	b.n	8000e14 <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__lesf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	e002      	b.n	8000e14 <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__cmpsf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e24:	bf18      	it	ne
 8000e26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e2a:	d011      	beq.n	8000e50 <__cmpsf2+0x40>
 8000e2c:	b001      	add	sp, #4
 8000e2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e32:	bf18      	it	ne
 8000e34:	ea90 0f01 	teqne	r0, r1
 8000e38:	bf58      	it	pl
 8000e3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e3e:	bf88      	it	hi
 8000e40:	17c8      	asrhi	r0, r1, #31
 8000e42:	bf38      	it	cc
 8000e44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e48:	bf18      	it	ne
 8000e4a:	f040 0001 	orrne.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e54:	d102      	bne.n	8000e5c <__cmpsf2+0x4c>
 8000e56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e5a:	d105      	bne.n	8000e68 <__cmpsf2+0x58>
 8000e5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e60:	d1e4      	bne.n	8000e2c <__cmpsf2+0x1c>
 8000e62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e66:	d0e1      	beq.n	8000e2c <__cmpsf2+0x1c>
 8000e68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <__aeabi_cfrcmple>:
 8000e70:	4684      	mov	ip, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4661      	mov	r1, ip
 8000e76:	e7ff      	b.n	8000e78 <__aeabi_cfcmpeq>

08000e78 <__aeabi_cfcmpeq>:
 8000e78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e7a:	f7ff ffc9 	bl	8000e10 <__cmpsf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	bf48      	it	mi
 8000e82:	f110 0f00 	cmnmi.w	r0, #0
 8000e86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e88 <__aeabi_fcmpeq>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff fff4 	bl	8000e78 <__aeabi_cfcmpeq>
 8000e90:	bf0c      	ite	eq
 8000e92:	2001      	moveq	r0, #1
 8000e94:	2000      	movne	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_fcmplt>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffea 	bl	8000e78 <__aeabi_cfcmpeq>
 8000ea4:	bf34      	ite	cc
 8000ea6:	2001      	movcc	r0, #1
 8000ea8:	2000      	movcs	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmple>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffe0 	bl	8000e78 <__aeabi_cfcmpeq>
 8000eb8:	bf94      	ite	ls
 8000eba:	2001      	movls	r0, #1
 8000ebc:	2000      	movhi	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmpge>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffd2 	bl	8000e70 <__aeabi_cfrcmple>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_fcmpgt>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffc8 	bl	8000e70 <__aeabi_cfrcmple>
 8000ee0:	bf34      	ite	cc
 8000ee2:	2001      	movcc	r0, #1
 8000ee4:	2000      	movcs	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_f2uiz>:
 8000eec:	0042      	lsls	r2, r0, #1
 8000eee:	d20e      	bcs.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef4:	d30b      	bcc.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d409      	bmi.n	8000f14 <__aeabi_f2uiz+0x28>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	fa23 f002 	lsr.w	r0, r3, r2
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2uiz+0x32>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d102      	bne.n	8000f24 <__aeabi_f2uiz+0x38>
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	4770      	bx	lr
 8000f24:	f04f 0000 	mov.w	r0, #0
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__aeabi_uldivmod>:
 8000f2c:	b953      	cbnz	r3, 8000f44 <__aeabi_uldivmod+0x18>
 8000f2e:	b94a      	cbnz	r2, 8000f44 <__aeabi_uldivmod+0x18>
 8000f30:	2900      	cmp	r1, #0
 8000f32:	bf08      	it	eq
 8000f34:	2800      	cmpeq	r0, #0
 8000f36:	bf1c      	itt	ne
 8000f38:	f04f 31ff 	movne.w	r1, #4294967295
 8000f3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f40:	f000 b976 	b.w	8001230 <__aeabi_idiv0>
 8000f44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4c:	f000 f806 	bl	8000f5c <__udivmoddi4>
 8000f50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f58:	b004      	add	sp, #16
 8000f5a:	4770      	bx	lr

08000f5c <__udivmoddi4>:
 8000f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f60:	9e08      	ldr	r6, [sp, #32]
 8000f62:	460d      	mov	r5, r1
 8000f64:	4604      	mov	r4, r0
 8000f66:	4688      	mov	r8, r1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d14d      	bne.n	8001008 <__udivmoddi4+0xac>
 8000f6c:	428a      	cmp	r2, r1
 8000f6e:	4694      	mov	ip, r2
 8000f70:	d968      	bls.n	8001044 <__udivmoddi4+0xe8>
 8000f72:	fab2 f282 	clz	r2, r2
 8000f76:	b152      	cbz	r2, 8000f8e <__udivmoddi4+0x32>
 8000f78:	fa01 f302 	lsl.w	r3, r1, r2
 8000f7c:	f1c2 0120 	rsb	r1, r2, #32
 8000f80:	fa20 f101 	lsr.w	r1, r0, r1
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	ea41 0803 	orr.w	r8, r1, r3
 8000f8c:	4094      	lsls	r4, r2
 8000f8e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000f92:	fbb8 f7f1 	udiv	r7, r8, r1
 8000f96:	fa1f fe8c 	uxth.w	lr, ip
 8000f9a:	fb01 8817 	mls	r8, r1, r7, r8
 8000f9e:	fb07 f00e 	mul.w	r0, r7, lr
 8000fa2:	0c23      	lsrs	r3, r4, #16
 8000fa4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa8:	4298      	cmp	r0, r3
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x66>
 8000fac:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb0:	f107 35ff 	add.w	r5, r7, #4294967295
 8000fb4:	f080 811e 	bcs.w	80011f4 <__udivmoddi4+0x298>
 8000fb8:	4298      	cmp	r0, r3
 8000fba:	f240 811b 	bls.w	80011f4 <__udivmoddi4+0x298>
 8000fbe:	3f02      	subs	r7, #2
 8000fc0:	4463      	add	r3, ip
 8000fc2:	1a1b      	subs	r3, r3, r0
 8000fc4:	fbb3 f0f1 	udiv	r0, r3, r1
 8000fc8:	fb01 3310 	mls	r3, r1, r0, r3
 8000fcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd0:	b2a4      	uxth	r4, r4
 8000fd2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd6:	45a6      	cmp	lr, r4
 8000fd8:	d90a      	bls.n	8000ff0 <__udivmoddi4+0x94>
 8000fda:	eb1c 0404 	adds.w	r4, ip, r4
 8000fde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fe2:	f080 8109 	bcs.w	80011f8 <__udivmoddi4+0x29c>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	f240 8106 	bls.w	80011f8 <__udivmoddi4+0x29c>
 8000fec:	4464      	add	r4, ip
 8000fee:	3802      	subs	r0, #2
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	eba4 040e 	sub.w	r4, r4, lr
 8000ff6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ffa:	b11e      	cbz	r6, 8001004 <__udivmoddi4+0xa8>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	40d4      	lsrs	r4, r2
 8001000:	e9c6 4300 	strd	r4, r3, [r6]
 8001004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0xc2>
 800100c:	2e00      	cmp	r6, #0
 800100e:	f000 80ee 	beq.w	80011ee <__udivmoddi4+0x292>
 8001012:	2100      	movs	r1, #0
 8001014:	e9c6 0500 	strd	r0, r5, [r6]
 8001018:	4608      	mov	r0, r1
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	fab3 f183 	clz	r1, r3
 8001022:	2900      	cmp	r1, #0
 8001024:	d14a      	bne.n	80010bc <__udivmoddi4+0x160>
 8001026:	42ab      	cmp	r3, r5
 8001028:	d302      	bcc.n	8001030 <__udivmoddi4+0xd4>
 800102a:	4282      	cmp	r2, r0
 800102c:	f200 80fc 	bhi.w	8001228 <__udivmoddi4+0x2cc>
 8001030:	1a84      	subs	r4, r0, r2
 8001032:	eb65 0303 	sbc.w	r3, r5, r3
 8001036:	2001      	movs	r0, #1
 8001038:	4698      	mov	r8, r3
 800103a:	2e00      	cmp	r6, #0
 800103c:	d0e2      	beq.n	8001004 <__udivmoddi4+0xa8>
 800103e:	e9c6 4800 	strd	r4, r8, [r6]
 8001042:	e7df      	b.n	8001004 <__udivmoddi4+0xa8>
 8001044:	b902      	cbnz	r2, 8001048 <__udivmoddi4+0xec>
 8001046:	deff      	udf	#255	; 0xff
 8001048:	fab2 f282 	clz	r2, r2
 800104c:	2a00      	cmp	r2, #0
 800104e:	f040 8091 	bne.w	8001174 <__udivmoddi4+0x218>
 8001052:	eba1 000c 	sub.w	r0, r1, ip
 8001056:	2101      	movs	r1, #1
 8001058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800105c:	fa1f fe8c 	uxth.w	lr, ip
 8001060:	fbb0 f3f7 	udiv	r3, r0, r7
 8001064:	fb07 0013 	mls	r0, r7, r3, r0
 8001068:	0c25      	lsrs	r5, r4, #16
 800106a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800106e:	fb0e f003 	mul.w	r0, lr, r3
 8001072:	42a8      	cmp	r0, r5
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x12c>
 8001076:	eb1c 0505 	adds.w	r5, ip, r5
 800107a:	f103 38ff 	add.w	r8, r3, #4294967295
 800107e:	d202      	bcs.n	8001086 <__udivmoddi4+0x12a>
 8001080:	42a8      	cmp	r0, r5
 8001082:	f200 80ce 	bhi.w	8001222 <__udivmoddi4+0x2c6>
 8001086:	4643      	mov	r3, r8
 8001088:	1a2d      	subs	r5, r5, r0
 800108a:	fbb5 f0f7 	udiv	r0, r5, r7
 800108e:	fb07 5510 	mls	r5, r7, r0, r5
 8001092:	fb0e fe00 	mul.w	lr, lr, r0
 8001096:	b2a4      	uxth	r4, r4
 8001098:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800109c:	45a6      	cmp	lr, r4
 800109e:	d908      	bls.n	80010b2 <__udivmoddi4+0x156>
 80010a0:	eb1c 0404 	adds.w	r4, ip, r4
 80010a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80010a8:	d202      	bcs.n	80010b0 <__udivmoddi4+0x154>
 80010aa:	45a6      	cmp	lr, r4
 80010ac:	f200 80b6 	bhi.w	800121c <__udivmoddi4+0x2c0>
 80010b0:	4628      	mov	r0, r5
 80010b2:	eba4 040e 	sub.w	r4, r4, lr
 80010b6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010ba:	e79e      	b.n	8000ffa <__udivmoddi4+0x9e>
 80010bc:	f1c1 0720 	rsb	r7, r1, #32
 80010c0:	408b      	lsls	r3, r1
 80010c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80010c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ca:	fa25 fa07 	lsr.w	sl, r5, r7
 80010ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010d2:	fbba f8f9 	udiv	r8, sl, r9
 80010d6:	fa20 f307 	lsr.w	r3, r0, r7
 80010da:	fb09 aa18 	mls	sl, r9, r8, sl
 80010de:	408d      	lsls	r5, r1
 80010e0:	fa1f fe8c 	uxth.w	lr, ip
 80010e4:	431d      	orrs	r5, r3
 80010e6:	fa00 f301 	lsl.w	r3, r0, r1
 80010ea:	fb08 f00e 	mul.w	r0, r8, lr
 80010ee:	0c2c      	lsrs	r4, r5, #16
 80010f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010f4:	42a0      	cmp	r0, r4
 80010f6:	fa02 f201 	lsl.w	r2, r2, r1
 80010fa:	d90b      	bls.n	8001114 <__udivmoddi4+0x1b8>
 80010fc:	eb1c 0404 	adds.w	r4, ip, r4
 8001100:	f108 3aff 	add.w	sl, r8, #4294967295
 8001104:	f080 8088 	bcs.w	8001218 <__udivmoddi4+0x2bc>
 8001108:	42a0      	cmp	r0, r4
 800110a:	f240 8085 	bls.w	8001218 <__udivmoddi4+0x2bc>
 800110e:	f1a8 0802 	sub.w	r8, r8, #2
 8001112:	4464      	add	r4, ip
 8001114:	1a24      	subs	r4, r4, r0
 8001116:	fbb4 f0f9 	udiv	r0, r4, r9
 800111a:	fb09 4410 	mls	r4, r9, r0, r4
 800111e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001122:	b2ad      	uxth	r5, r5
 8001124:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001128:	45a6      	cmp	lr, r4
 800112a:	d908      	bls.n	800113e <__udivmoddi4+0x1e2>
 800112c:	eb1c 0404 	adds.w	r4, ip, r4
 8001130:	f100 35ff 	add.w	r5, r0, #4294967295
 8001134:	d26c      	bcs.n	8001210 <__udivmoddi4+0x2b4>
 8001136:	45a6      	cmp	lr, r4
 8001138:	d96a      	bls.n	8001210 <__udivmoddi4+0x2b4>
 800113a:	3802      	subs	r0, #2
 800113c:	4464      	add	r4, ip
 800113e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001142:	fba0 9502 	umull	r9, r5, r0, r2
 8001146:	eba4 040e 	sub.w	r4, r4, lr
 800114a:	42ac      	cmp	r4, r5
 800114c:	46c8      	mov	r8, r9
 800114e:	46ae      	mov	lr, r5
 8001150:	d356      	bcc.n	8001200 <__udivmoddi4+0x2a4>
 8001152:	d053      	beq.n	80011fc <__udivmoddi4+0x2a0>
 8001154:	2e00      	cmp	r6, #0
 8001156:	d069      	beq.n	800122c <__udivmoddi4+0x2d0>
 8001158:	ebb3 0208 	subs.w	r2, r3, r8
 800115c:	eb64 040e 	sbc.w	r4, r4, lr
 8001160:	fa22 f301 	lsr.w	r3, r2, r1
 8001164:	fa04 f707 	lsl.w	r7, r4, r7
 8001168:	431f      	orrs	r7, r3
 800116a:	40cc      	lsrs	r4, r1
 800116c:	e9c6 7400 	strd	r7, r4, [r6]
 8001170:	2100      	movs	r1, #0
 8001172:	e747      	b.n	8001004 <__udivmoddi4+0xa8>
 8001174:	fa0c fc02 	lsl.w	ip, ip, r2
 8001178:	f1c2 0120 	rsb	r1, r2, #32
 800117c:	fa25 f301 	lsr.w	r3, r5, r1
 8001180:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001184:	fa20 f101 	lsr.w	r1, r0, r1
 8001188:	4095      	lsls	r5, r2
 800118a:	430d      	orrs	r5, r1
 800118c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001190:	fb07 3311 	mls	r3, r7, r1, r3
 8001194:	fa1f fe8c 	uxth.w	lr, ip
 8001198:	0c28      	lsrs	r0, r5, #16
 800119a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800119e:	fb01 f30e 	mul.w	r3, r1, lr
 80011a2:	4283      	cmp	r3, r0
 80011a4:	fa04 f402 	lsl.w	r4, r4, r2
 80011a8:	d908      	bls.n	80011bc <__udivmoddi4+0x260>
 80011aa:	eb1c 0000 	adds.w	r0, ip, r0
 80011ae:	f101 38ff 	add.w	r8, r1, #4294967295
 80011b2:	d22f      	bcs.n	8001214 <__udivmoddi4+0x2b8>
 80011b4:	4283      	cmp	r3, r0
 80011b6:	d92d      	bls.n	8001214 <__udivmoddi4+0x2b8>
 80011b8:	3902      	subs	r1, #2
 80011ba:	4460      	add	r0, ip
 80011bc:	1ac0      	subs	r0, r0, r3
 80011be:	fbb0 f3f7 	udiv	r3, r0, r7
 80011c2:	fb07 0013 	mls	r0, r7, r3, r0
 80011c6:	b2ad      	uxth	r5, r5
 80011c8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011cc:	fb03 f00e 	mul.w	r0, r3, lr
 80011d0:	42a8      	cmp	r0, r5
 80011d2:	d908      	bls.n	80011e6 <__udivmoddi4+0x28a>
 80011d4:	eb1c 0505 	adds.w	r5, ip, r5
 80011d8:	f103 38ff 	add.w	r8, r3, #4294967295
 80011dc:	d216      	bcs.n	800120c <__udivmoddi4+0x2b0>
 80011de:	42a8      	cmp	r0, r5
 80011e0:	d914      	bls.n	800120c <__udivmoddi4+0x2b0>
 80011e2:	3b02      	subs	r3, #2
 80011e4:	4465      	add	r5, ip
 80011e6:	1a28      	subs	r0, r5, r0
 80011e8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80011ec:	e738      	b.n	8001060 <__udivmoddi4+0x104>
 80011ee:	4631      	mov	r1, r6
 80011f0:	4630      	mov	r0, r6
 80011f2:	e707      	b.n	8001004 <__udivmoddi4+0xa8>
 80011f4:	462f      	mov	r7, r5
 80011f6:	e6e4      	b.n	8000fc2 <__udivmoddi4+0x66>
 80011f8:	4618      	mov	r0, r3
 80011fa:	e6f9      	b.n	8000ff0 <__udivmoddi4+0x94>
 80011fc:	454b      	cmp	r3, r9
 80011fe:	d2a9      	bcs.n	8001154 <__udivmoddi4+0x1f8>
 8001200:	ebb9 0802 	subs.w	r8, r9, r2
 8001204:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001208:	3801      	subs	r0, #1
 800120a:	e7a3      	b.n	8001154 <__udivmoddi4+0x1f8>
 800120c:	4643      	mov	r3, r8
 800120e:	e7ea      	b.n	80011e6 <__udivmoddi4+0x28a>
 8001210:	4628      	mov	r0, r5
 8001212:	e794      	b.n	800113e <__udivmoddi4+0x1e2>
 8001214:	4641      	mov	r1, r8
 8001216:	e7d1      	b.n	80011bc <__udivmoddi4+0x260>
 8001218:	46d0      	mov	r8, sl
 800121a:	e77b      	b.n	8001114 <__udivmoddi4+0x1b8>
 800121c:	4464      	add	r4, ip
 800121e:	3802      	subs	r0, #2
 8001220:	e747      	b.n	80010b2 <__udivmoddi4+0x156>
 8001222:	3b02      	subs	r3, #2
 8001224:	4465      	add	r5, ip
 8001226:	e72f      	b.n	8001088 <__udivmoddi4+0x12c>
 8001228:	4608      	mov	r0, r1
 800122a:	e706      	b.n	800103a <__udivmoddi4+0xde>
 800122c:	4631      	mov	r1, r6
 800122e:	e6e9      	b.n	8001004 <__udivmoddi4+0xa8>

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <move>:
#include <math.h>

extern int16_t goal_forward_left;
extern int16_t goal_forward_right;

void move(int8_t n) {	// Move n cells forward (with acceleration)
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]

	setState(MOVING);
 800123e:	2001      	movs	r0, #1
 8001240:	f000 fe66 	bl	8001f10 <setState>

	setPIDGoalA(0);
 8001244:	2000      	movs	r0, #0
 8001246:	f000 fe4f 	bl	8001ee8 <setPIDGoalA>
	setPIDGoalD(MOVE_COUNTS*n);
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	b29b      	uxth	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	00d2      	lsls	r2, r2, #3
 8001254:	4413      	add	r3, r2
 8001256:	461a      	mov	r2, r3
 8001258:	0111      	lsls	r1, r2, #4
 800125a:	461a      	mov	r2, r3
 800125c:	460b      	mov	r3, r1
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b29b      	uxth	r3, r3
 8001264:	b21b      	sxth	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fe2a 	bl	8001ec0 <setPIDGoalD>

	while(!PIDdone())
 800126c:	e013      	b.n	8001296 <move+0x62>
	{
		setIRAngle(readIR(IR_LEFT), readIR(IR_RIGHT));
 800126e:	2001      	movs	r0, #1
 8001270:	f000 f8a8 	bl	80013c4 <readIR>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fc1a 	bl	8000ab0 <__aeabi_ui2f>
 800127c:	4604      	mov	r4, r0
 800127e:	2002      	movs	r0, #2
 8001280:	f000 f8a0 	bl	80013c4 <readIR>
 8001284:	4603      	mov	r3, r0
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fc12 	bl	8000ab0 <__aeabi_ui2f>
 800128c:	4603      	mov	r3, r0
 800128e:	4619      	mov	r1, r3
 8001290:	4620      	mov	r0, r4
 8001292:	f000 fe7f 	bl	8001f94 <setIRAngle>
	while(!PIDdone())
 8001296:	f001 fbe1 	bl	8002a5c <PIDdone>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0e6      	beq.n	800126e <move+0x3a>
	}

	resetPID();
 80012a0:	f001 fbee 	bl	8002a80 <resetPID>

}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}

080012ac <turn>:

void turn(int8_t n) {	// Make n 90 degree turns (no acceleration)
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]

	setState(TURNING);
 80012b6:	2002      	movs	r0, #2
 80012b8:	f000 fe2a 	bl	8001f10 <setState>

	setPIDGoalD(0);
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 fdff 	bl	8001ec0 <setPIDGoalD>
	setPIDGoalA(TURN_COUNTS*n);
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	00d2      	lsls	r2, r2, #3
 80012cc:	1ad2      	subs	r2, r2, r3
 80012ce:	00d2      	lsls	r2, r2, #3
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fe05 	bl	8001ee8 <setPIDGoalA>

	while(!PIDdone())
 80012de:	bf00      	nop
 80012e0:	f001 fbbc 	bl	8002a5c <PIDdone>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0fa      	beq.n	80012e0 <turn+0x34>
	{

	}

	resetPID();
 80012ea:	f001 fbc9 	bl	8002a80 <resetPID>

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <Delay_Init+0x38>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10e      	bne.n	8001326 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <Delay_Init+0x38>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <Delay_Init+0x38>)
 800130e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001312:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <Delay_Init+0x3c>)
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <Delay_Init+0x3c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <Delay_Init+0x3c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6013      	str	r3, [r2, #0]
    }
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000edf0 	.word	0xe000edf0
 8001334:	e0001000 	.word	0xe0001000

08001338 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <delayMicroseconds+0x30>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800134c:	bf00      	nop
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <delayMicroseconds+0x30>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f8      	bhi.n	800134e <delayMicroseconds+0x16>
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	e0001000 	.word	0xe0001000

0800136c <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <getRightEncoderCounts+0x18>)
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	b29b      	uxth	r3, r3
 8001376:	425b      	negs	r3, r3
 8001378:	b29b      	uxth	r3, r3
 800137a:	b21b      	sxth	r3, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40000400 	.word	0x40000400

08001388 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <getLeftEncoderCounts+0x18>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	b29b      	uxth	r3, r3
 8001392:	425b      	negs	r3, r3
 8001394:	b29b      	uxth	r3, r3
 8001396:	b21b      	sxth	r3, r3
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40010400 	.word	0x40010400

080013a4 <resetEncoders>:

void resetEncoders() {
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <resetEncoders+0x18>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = (int16_t) 0;
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <resetEncoders+0x1c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40000400 	.word	0x40000400
 80013c0:	40010400 	.word	0x40010400

080013c4 <readIR>:
uint8_t complete = 0;

uint32_t usDelay = 100;

uint16_t readIR(IR ir)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue;

	switch(ir)
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d869      	bhi.n	80014a8 <readIR+0xe4>
 80013d4:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <readIR+0x18>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	080013ed 	.word	0x080013ed
 80013e0:	0800141b 	.word	0x0800141b
 80013e4:	08001449 	.word	0x08001449
 80013e8:	08001477 	.word	0x08001477
	    {
	        case IR_FORWARD_LEFT:
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	4830      	ldr	r0, [pc, #192]	; (80014b4 <readIR+0xf0>)
 80013f2:	f003 fe3e 	bl	8005072 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <readIR+0xf4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff9c 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f85c 	bl	80014c0 <analogRead>
 8001408:	4603      	mov	r3, r0
 800140a:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2180      	movs	r1, #128	; 0x80
 8001410:	4828      	ldr	r0, [pc, #160]	; (80014b4 <readIR+0xf0>)
 8001412:	f003 fe2e 	bl	8005072 <HAL_GPIO_WritePin>
	        	return readValue;
 8001416:	89fb      	ldrh	r3, [r7, #14]
 8001418:	e047      	b.n	80014aa <readIR+0xe6>
	            break;
	        case IR_LEFT:
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2110      	movs	r1, #16
 800141e:	4825      	ldr	r0, [pc, #148]	; (80014b4 <readIR+0xf0>)
 8001420:	f003 fe27 	bl	8005072 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <readIR+0xf4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff85 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f845 	bl	80014c0 <analogRead>
 8001436:	4603      	mov	r3, r0
 8001438:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2110      	movs	r1, #16
 800143e:	481d      	ldr	r0, [pc, #116]	; (80014b4 <readIR+0xf0>)
 8001440:	f003 fe17 	bl	8005072 <HAL_GPIO_WritePin>
	        	return readValue;
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	e030      	b.n	80014aa <readIR+0xe6>
	            break;
	        case IR_RIGHT:
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	2104      	movs	r1, #4
 800144c:	4819      	ldr	r0, [pc, #100]	; (80014b4 <readIR+0xf0>)
 800144e:	f003 fe10 	bl	8005072 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <readIR+0xf4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff6e 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f82e 	bl	80014c0 <analogRead>
 8001464:	4603      	mov	r3, r0
 8001466:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2104      	movs	r1, #4
 800146c:	4811      	ldr	r0, [pc, #68]	; (80014b4 <readIR+0xf0>)
 800146e:	f003 fe00 	bl	8005072 <HAL_GPIO_WritePin>
	        	return readValue;
 8001472:	89fb      	ldrh	r3, [r7, #14]
 8001474:	e019      	b.n	80014aa <readIR+0xe6>
	            break;
	        case IR_FORWARD_RIGHT:
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	480f      	ldr	r0, [pc, #60]	; (80014bc <readIR+0xf8>)
 800147e:	f003 fdf8 	bl	8005072 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <readIR+0xf4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff56 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f816 	bl	80014c0 <analogRead>
 8001494:	4603      	mov	r3, r0
 8001496:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149e:	4807      	ldr	r0, [pc, #28]	; (80014bc <readIR+0xf8>)
 80014a0:	f003 fde7 	bl	8005072 <HAL_GPIO_WritePin>
	        	return readValue;
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	e000      	b.n	80014aa <readIR+0xe6>
	            break;
	        default:
	            return 0;
 80014a8:	2300      	movs	r3, #0
	    }
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40020000 	.word	0x40020000
 80014b8:	20000000 	.word	0x20000000
 80014bc:	40020400 	.word	0x40020400

080014c0 <analogRead>:
{
	return readIR(IR_FORWARD_RIGHT);
}

uint16_t analogRead(IR ir)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 80014d8:	f000 fc2c 	bl	8001d34 <Get_HADC1_Ptr>
 80014dc:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d817      	bhi.n	8001514 <analogRead+0x54>
 80014e4:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <analogRead+0x2c>)
 80014e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ea:	bf00      	nop
 80014ec:	080014fd 	.word	0x080014fd
 80014f0:	08001503 	.word	0x08001503
 80014f4:	08001509 	.word	0x08001509
 80014f8:	0800150f 	.word	0x0800150f
    {
        case IR_FORWARD_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 80014fc:	2306      	movs	r3, #6
 80014fe:	60fb      	str	r3, [r7, #12]
            break;
 8001500:	e00a      	b.n	8001518 <analogRead+0x58>
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_5;
 8001502:	2305      	movs	r3, #5
 8001504:	60fb      	str	r3, [r7, #12]
            break;
 8001506:	e007      	b.n	8001518 <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 8001508:	230b      	movs	r3, #11
 800150a:	60fb      	str	r3, [r7, #12]
            break;
 800150c:	e004      	b.n	8001518 <analogRead+0x58>
        case IR_FORWARD_RIGHT:
            sConfig.Channel = ADC_CHANNEL_10;
 800150e:	230a      	movs	r3, #10
 8001510:	60fb      	str	r3, [r7, #12]
            break;
 8001512:	e001      	b.n	8001518 <analogRead+0x58>
        default:
            return 0;
 8001514:	2300      	movs	r3, #0
 8001516:	e032      	b.n	800157e <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 8001518:	2301      	movs	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	69f8      	ldr	r0, [r7, #28]
 8001528:	f002 fc5c 	bl	8003de4 <HAL_ADC_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <analogRead+0x76>
    {
        return 0;
 8001532:	2300      	movs	r3, #0
 8001534:	e023      	b.n	800157e <analogRead+0xbe>
    }

    complete = 0;
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <analogRead+0xc8>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	4913      	ldr	r1, [pc, #76]	; (800158c <analogRead+0xcc>)
 8001540:	69f8      	ldr	r0, [r7, #28]
 8001542:	f002 fb0d 	bl	8003b60 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 8001546:	e000      	b.n	800154a <analogRead+0x8a>
    {
        continue;
 8001548:	bf00      	nop
    while (complete == 0)
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <analogRead+0xc8>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0fa      	beq.n	8001548 <analogRead+0x88>
    }

    uint32_t sum = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 800155a:	e00a      	b.n	8001572 <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 800155c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <analogRead+0xcc>)
 8001560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001564:	461a      	mov	r2, r3
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	4413      	add	r3, r2
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
        ++measurement;
 800156c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800156e:	3301      	adds	r3, #1
 8001570:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 8001572:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001574:	2b7f      	cmp	r3, #127	; 0x7f
 8001576:	d9f1      	bls.n	800155c <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	09db      	lsrs	r3, r3, #7
 800157c:	b29b      	uxth	r3, r3
}
 800157e:	4618      	mov	r0, r3
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000019c 	.word	0x2000019c
 800158c:	2000009c 	.word	0x2000009c

08001590 <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f002 fbbf 	bl	8003d1c <HAL_ADC_Stop_DMA>
    complete = 1;
 800159e:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_ADC_ConvCpltCallback+0x1c>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2000019c 	.word	0x2000019c

080015b0 <solve>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void solve(Algorithm alg) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	Action nextMove = solver(alg);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fdc9 	bl	8003154 <solver>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]
	switch(nextMove) {
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d819      	bhi.n	8001600 <solve+0x50>
 80015cc:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <solve+0x24>)
 80015ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d2:	bf00      	nop
 80015d4:	080015ed 	.word	0x080015ed
 80015d8:	080015e5 	.word	0x080015e5
 80015dc:	080015f7 	.word	0x080015f7
 80015e0:	080015ff 	.word	0x080015ff
		case FORWARD:
			move(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fe25 	bl	8001234 <move>
			break;
 80015ea:	e009      	b.n	8001600 <solve+0x50>
		case LEFT:
			turn(-1);
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff fe5c 	bl	80012ac <turn>
			break;
 80015f4:	e004      	b.n	8001600 <solve+0x50>
		case RIGHT:
			turn(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff fe58 	bl	80012ac <turn>
			break;
 80015fc:	e000      	b.n	8001600 <solve+0x50>
		case IDLE:
			break;
 80015fe:	bf00      	nop
	}
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160c:	f002 f9f6 	bl	80039fc <HAL_Init>

  /* USER CODE BEGIN Init */

  Delay_Init();
 8001610:	f7ff fe72 	bl	80012f8 <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001614:	f000 f8a8 	bl	8001768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001618:	f000 faa8 	bl	8001b6c <MX_GPIO_Init>
  MX_DMA_Init();
 800161c:	f000 fa86 	bl	8001b2c <MX_DMA_Init>
  MX_ADC1_Init();
 8001620:	f000 f8de 	bl	80017e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001624:	f000 f92e 	bl	8001884 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001628:	f000 f9d4 	bl	80019d4 <MX_TIM3_Init>
  MX_TIM8_Init();
 800162c:	f000 fa26 	bl	8001a7c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001630:	213c      	movs	r1, #60	; 0x3c
 8001632:	4840      	ldr	r0, [pc, #256]	; (8001734 <main+0x12c>)
 8001634:	f004 faf4 	bl	8005c20 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001638:	213c      	movs	r1, #60	; 0x3c
 800163a:	483f      	ldr	r0, [pc, #252]	; (8001738 <main+0x130>)
 800163c:	f004 faf0 	bl	8005c20 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001640:	2100      	movs	r1, #0
 8001642:	483e      	ldr	r0, [pc, #248]	; (800173c <main+0x134>)
 8001644:	f004 f97e 	bl	8005944 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001648:	2104      	movs	r1, #4
 800164a:	483c      	ldr	r0, [pc, #240]	; (800173c <main+0x134>)
 800164c:	f004 f97a 	bl	8005944 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001650:	2108      	movs	r1, #8
 8001652:	483a      	ldr	r0, [pc, #232]	; (800173c <main+0x134>)
 8001654:	f004 f976 	bl	8005944 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001658:	210c      	movs	r1, #12
 800165a:	4838      	ldr	r0, [pc, #224]	; (800173c <main+0x134>)
 800165c:	f004 f972 	bl	8005944 <HAL_TIM_PWM_Start>

  HAL_Init();
 8001660:	f002 f9cc 	bl	80039fc <HAL_Init>

  HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800166a:	4835      	ldr	r0, [pc, #212]	; (8001740 <main+0x138>)
 800166c:	f003 fd01 	bl	8005072 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff fea7 	bl	80013c4 <readIR>
 8001676:	4603      	mov	r3, r0
 8001678:	b21a      	sxth	r2, r3
 800167a:	4b32      	ldr	r3, [pc, #200]	; (8001744 <main+0x13c>)
 800167c:	801a      	strh	r2, [r3, #0]
	  leftIRvalue = readIR(IR_LEFT);
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff fea0 	bl	80013c4 <readIR>
 8001684:	4603      	mov	r3, r0
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <main+0x140>)
 800168a:	801a      	strh	r2, [r3, #0]
	  rightIRvalue = readIR(IR_RIGHT);
 800168c:	2002      	movs	r0, #2
 800168e:	f7ff fe99 	bl	80013c4 <readIR>
 8001692:	4603      	mov	r3, r0
 8001694:	b21a      	sxth	r2, r3
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <main+0x144>)
 8001698:	801a      	strh	r2, [r3, #0]
	  forwardRightIRvalue = readIR(IR_FORWARD_RIGHT);
 800169a:	2003      	movs	r0, #3
 800169c:	f7ff fe92 	bl	80013c4 <readIR>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <main+0x148>)
 80016a6:	801a      	strh	r2, [r3, #0]

	  left_counts = getLeftEncoderCounts();
 80016a8:	f7ff fe6e 	bl	8001388 <getLeftEncoderCounts>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <main+0x14c>)
 80016b2:	801a      	strh	r2, [r3, #0]
	  right_counts = getRightEncoderCounts();
 80016b4:	f7ff fe5a 	bl	800136c <getRightEncoderCounts>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <main+0x150>)
 80016be:	801a      	strh	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(LeftButton_GPIO_Port, LeftButton_Pin))
 80016c0:	2101      	movs	r1, #1
 80016c2:	4826      	ldr	r0, [pc, #152]	; (800175c <main+0x154>)
 80016c4:	f003 fcbe 	bl	8005044 <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01b      	beq.n	8001706 <main+0xfe>
	  {
		  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff fe78 	bl	80013c4 <readIR>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b21c      	sxth	r4, r3
 80016d8:	2003      	movs	r0, #3
 80016da:	f7ff fe73 	bl	80013c4 <readIR>
 80016de:	4603      	mov	r3, r0
 80016e0:	b21d      	sxth	r5, r3
 80016e2:	2001      	movs	r0, #1
 80016e4:	f7ff fe6e 	bl	80013c4 <readIR>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b21e      	sxth	r6, r3
 80016ec:	2002      	movs	r0, #2
 80016ee:	f7ff fe69 	bl	80013c4 <readIR>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	4632      	mov	r2, r6
 80016f8:	4629      	mov	r1, r5
 80016fa:	4620      	mov	r0, r4
 80016fc:	f000 fc18 	bl	8001f30 <setIRGoals>
		  irOffset_Set = 1;
 8001700:	4b17      	ldr	r3, [pc, #92]	; (8001760 <main+0x158>)
 8001702:	2201      	movs	r2, #1
 8001704:	801a      	strh	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(RightButton_GPIO_Port, RightButton_Pin))
 8001706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170a:	480d      	ldr	r0, [pc, #52]	; (8001740 <main+0x138>)
 800170c:	f003 fc9a 	bl	8005044 <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <main+0x114>
	  {
//		  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
//		  frontCorrection();
		  start_pressed = 1;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <main+0x15c>)
 8001718:	2201      	movs	r2, #1
 800171a:	801a      	strh	r2, [r3, #0]
 * Zoom: we know what the maze looks like, so we can run multiple floodfill moves at once
 * 			not implemented yet
 *
 *
 */
	  if (start_pressed)
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <main+0x15c>)
 800171e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0a4      	beq.n	8001670 <main+0x68>
	  {
//		  solve(DEAD);
		  move(0);
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff fd84 	bl	8001234 <move>
		  solve(FLOODFILL);
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff ff3f 	bl	80015b0 <solve>
	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 8001732:	e79d      	b.n	8001670 <main+0x68>
 8001734:	20000290 	.word	0x20000290
 8001738:	200002d8 	.word	0x200002d8
 800173c:	20000248 	.word	0x20000248
 8001740:	40020800 	.word	0x40020800
 8001744:	20000326 	.word	0x20000326
 8001748:	20000328 	.word	0x20000328
 800174c:	2000032a 	.word	0x2000032a
 8001750:	2000032c 	.word	0x2000032c
 8001754:	20000322 	.word	0x20000322
 8001758:	20000324 	.word	0x20000324
 800175c:	40020400 	.word	0x40020400
 8001760:	2000032e 	.word	0x2000032e
 8001764:	20000320 	.word	0x20000320

08001768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b092      	sub	sp, #72	; 0x48
 800176c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176e:	f107 0318 	add.w	r3, r7, #24
 8001772:	2230      	movs	r2, #48	; 0x30
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f004 ff12 	bl	80065a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800178e:	2301      	movs	r3, #1
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001792:	2310      	movs	r3, #16
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001796:	2300      	movs	r3, #0
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179a:	f107 0318 	add.w	r3, r7, #24
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 fc80 	bl	80050a4 <HAL_RCC_OscConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80017aa:	f000 facd 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ae:	230f      	movs	r3, #15
 80017b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 feba 	bl	8005540 <HAL_RCC_ClockConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80017d2:	f000 fab9 	bl	8001d48 <Error_Handler>
  }
}
 80017d6:	bf00      	nop
 80017d8:	3748      	adds	r7, #72	; 0x48
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017e6:	463b      	mov	r3, r7
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_ADC1_Init+0x98>)
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <MX_ADC1_Init+0x9c>)
 80017f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_ADC1_Init+0x98>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_ADC1_Init+0x98>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_ADC1_Init+0x98>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <MX_ADC1_Init+0x98>)
 800180c:	2201      	movs	r2, #1
 800180e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_ADC1_Init+0x98>)
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_ADC1_Init+0x98>)
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_ADC1_Init+0x98>)
 8001820:	4a17      	ldr	r2, [pc, #92]	; (8001880 <MX_ADC1_Init+0xa0>)
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_ADC1_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <MX_ADC1_Init+0x98>)
 800182c:	2201      	movs	r2, #1
 800182e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_ADC1_Init+0x98>)
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_ADC1_Init+0x98>)
 800183a:	2201      	movs	r2, #1
 800183c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800183e:	480e      	ldr	r0, [pc, #56]	; (8001878 <MX_ADC1_Init+0x98>)
 8001840:	f002 f94a 	bl	8003ad8 <HAL_ADC_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800184a:	f000 fa7d 	bl	8001d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800184e:	2305      	movs	r3, #5
 8001850:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001852:	2301      	movs	r3, #1
 8001854:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185a:	463b      	mov	r3, r7
 800185c:	4619      	mov	r1, r3
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <MX_ADC1_Init+0x98>)
 8001860:	f002 fac0 	bl	8003de4 <HAL_ADC_ConfigChannel>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800186a:	f000 fa6d 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200001a0 	.word	0x200001a0
 800187c:	40012000 	.word	0x40012000
 8001880:	0f000001 	.word	0x0f000001

08001884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b092      	sub	sp, #72	; 0x48
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	615a      	str	r2, [r3, #20]
 80018a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2220      	movs	r2, #32
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f004 fe76 	bl	80065a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018b4:	4b45      	ldr	r3, [pc, #276]	; (80019cc <MX_TIM1_Init+0x148>)
 80018b6:	4a46      	ldr	r2, [pc, #280]	; (80019d0 <MX_TIM1_Init+0x14c>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018ba:	4b44      	ldr	r3, [pc, #272]	; (80019cc <MX_TIM1_Init+0x148>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b42      	ldr	r3, [pc, #264]	; (80019cc <MX_TIM1_Init+0x148>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 80018c6:	4b41      	ldr	r3, [pc, #260]	; (80019cc <MX_TIM1_Init+0x148>)
 80018c8:	f640 427f 	movw	r2, #3199	; 0xc7f
 80018cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ce:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <MX_TIM1_Init+0x148>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d4:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <MX_TIM1_Init+0x148>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018da:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <MX_TIM1_Init+0x148>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018e0:	483a      	ldr	r0, [pc, #232]	; (80019cc <MX_TIM1_Init+0x148>)
 80018e2:	f003 ffdf 	bl	80058a4 <HAL_TIM_PWM_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80018ec:	f000 fa2c 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018fc:	4619      	mov	r1, r3
 80018fe:	4833      	ldr	r0, [pc, #204]	; (80019cc <MX_TIM1_Init+0x148>)
 8001900:	f004 fd48 	bl	8006394 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800190a:	f000 fa1d 	bl	8001d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190e:	2360      	movs	r3, #96	; 0x60
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800191a:	2300      	movs	r3, #0
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	2200      	movs	r2, #0
 8001930:	4619      	mov	r1, r3
 8001932:	4826      	ldr	r0, [pc, #152]	; (80019cc <MX_TIM1_Init+0x148>)
 8001934:	f004 fa02 	bl	8005d3c <HAL_TIM_PWM_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800193e:	f000 fa03 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001946:	2204      	movs	r2, #4
 8001948:	4619      	mov	r1, r3
 800194a:	4820      	ldr	r0, [pc, #128]	; (80019cc <MX_TIM1_Init+0x148>)
 800194c:	f004 f9f6 	bl	8005d3c <HAL_TIM_PWM_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001956:	f000 f9f7 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800195a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195e:	2208      	movs	r2, #8
 8001960:	4619      	mov	r1, r3
 8001962:	481a      	ldr	r0, [pc, #104]	; (80019cc <MX_TIM1_Init+0x148>)
 8001964:	f004 f9ea 	bl	8005d3c <HAL_TIM_PWM_ConfigChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800196e:	f000 f9eb 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	220c      	movs	r2, #12
 8001978:	4619      	mov	r1, r3
 800197a:	4814      	ldr	r0, [pc, #80]	; (80019cc <MX_TIM1_Init+0x148>)
 800197c:	f004 f9de 	bl	8005d3c <HAL_TIM_PWM_ConfigChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001986:	f000 f9df 	bl	8001d48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800199e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	4619      	mov	r1, r3
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <MX_TIM1_Init+0x148>)
 80019ae:	f004 fd6b 	bl	8006488 <HAL_TIMEx_ConfigBreakDeadTime>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80019b8:	f000 f9c6 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <MX_TIM1_Init+0x148>)
 80019be:	f001 fe9b 	bl	80036f8 <HAL_TIM_MspPostInit>

}
 80019c2:	bf00      	nop
 80019c4:	3748      	adds	r7, #72	; 0x48
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000248 	.word	0x20000248
 80019d0:	40010000 	.word	0x40010000

080019d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	2224      	movs	r2, #36	; 0x24
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f004 fddc 	bl	80065a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <MX_TIM3_Init+0xa0>)
 80019f2:	4a21      	ldr	r2, [pc, #132]	; (8001a78 <MX_TIM3_Init+0xa4>)
 80019f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <MX_TIM3_Init+0xa0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_TIM3_Init+0xa0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_TIM3_Init+0xa0>)
 8001a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_TIM3_Init+0xa0>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_TIM3_Init+0xa0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a16:	2303      	movs	r3, #3
 8001a18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_TIM3_Init+0xa0>)
 8001a42:	f004 f847 	bl	8005ad4 <HAL_TIM_Encoder_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a4c:	f000 f97c 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_TIM3_Init+0xa0>)
 8001a5e:	f004 fc99 	bl	8006394 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a68:	f000 f96e 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3730      	adds	r7, #48	; 0x30
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000290 	.word	0x20000290
 8001a78:	40000400 	.word	0x40000400

08001a7c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2224      	movs	r2, #36	; 0x24
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 fd88 	bl	80065a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001a9a:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <MX_TIM8_Init+0xac>)
 8001a9c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001acc:	2301      	movs	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001adc:	2301      	movs	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4619      	mov	r1, r3
 8001aee:	480d      	ldr	r0, [pc, #52]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001af0:	f003 fff0 	bl	8005ad4 <HAL_TIM_Encoder_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001afa:	f000 f925 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001b0c:	f004 fc42 	bl	8006394 <HAL_TIMEx_MasterConfigSynchronization>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001b16:	f000 f917 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	3730      	adds	r7, #48	; 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200002d8 	.word	0x200002d8
 8001b28:	40010400 	.word	0x40010400

08001b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_DMA_Init+0x3c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <MX_DMA_Init+0x3c>)
 8001b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_DMA_Init+0x3c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2038      	movs	r0, #56	; 0x38
 8001b54:	f002 fcc5 	bl	80044e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b58:	2038      	movs	r0, #56	; 0x38
 8001b5a:	f002 fcde 	bl	800451a <HAL_NVIC_EnableIRQ>

}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b66      	ldr	r3, [pc, #408]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a65      	ldr	r2, [pc, #404]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b5f      	ldr	r3, [pc, #380]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a5e      	ldr	r2, [pc, #376]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b5c      	ldr	r3, [pc, #368]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b58      	ldr	r3, [pc, #352]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a57      	ldr	r2, [pc, #348]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a50      	ldr	r2, [pc, #320]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <MX_GPIO_Init+0x1b4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_LED_Pin|Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001bf8:	484a      	ldr	r0, [pc, #296]	; (8001d24 <MX_GPIO_Init+0x1b8>)
 8001bfa:	f003 fa3a 	bl	8005072 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2194      	movs	r1, #148	; 0x94
 8001c02:	4849      	ldr	r0, [pc, #292]	; (8001d28 <MX_GPIO_Init+0x1bc>)
 8001c04:	f003 fa35 	bl	8005072 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c0e:	4847      	ldr	r0, [pc, #284]	; (8001d2c <MX_GPIO_Init+0x1c0>)
 8001c10:	f003 fa2f 	bl	8005072 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_LED_Pin Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|Y_LED_Pin|G_LED_Pin;
 8001c14:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	483d      	ldr	r0, [pc, #244]	; (8001d24 <MX_GPIO_Init+0x1b8>)
 8001c2e:	f003 f86b 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 8001c32:	2394      	movs	r3, #148	; 0x94
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4837      	ldr	r0, [pc, #220]	; (8001d28 <MX_GPIO_Init+0x1bc>)
 8001c4a:	f003 f85d 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001c4e:	2308      	movs	r3, #8
 8001c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	482f      	ldr	r0, [pc, #188]	; (8001d28 <MX_GPIO_Init+0x1bc>)
 8001c6a:	f003 f84d 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftButton_Pin Switch3_Pin */
  GPIO_InitStruct.Pin = LeftButton_Pin|Switch3_Pin;
 8001c6e:	2309      	movs	r3, #9
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	482a      	ldr	r0, [pc, #168]	; (8001d2c <MX_GPIO_Init+0x1c0>)
 8001c82:	f003 f841 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c98:	2307      	movs	r3, #7
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4822      	ldr	r0, [pc, #136]	; (8001d2c <MX_GPIO_Init+0x1c0>)
 8001ca4:	f003 f830 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightButton_Pin Switch1_Pin */
  GPIO_InitStruct.Pin = RightButton_Pin|Switch1_Pin;
 8001ca8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4819      	ldr	r0, [pc, #100]	; (8001d24 <MX_GPIO_Init+0x1b8>)
 8001cbe:	f003 f823 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4816      	ldr	r0, [pc, #88]	; (8001d30 <MX_GPIO_Init+0x1c4>)
 8001cd6:	f003 f817 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001cda:	23c0      	movs	r3, #192	; 0xc0
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cde:	2312      	movs	r3, #18
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cea:	2304      	movs	r3, #4
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480d      	ldr	r0, [pc, #52]	; (8001d2c <MX_GPIO_Init+0x1c0>)
 8001cf6:	f003 f807 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8001cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <MX_GPIO_Init+0x1c0>)
 8001d14:	f002 fff8 	bl	8004d08 <HAL_GPIO_Init>

}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020800 	.word	0x40020800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40020c00 	.word	0x40020c00

08001d34 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */

ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
	return &hadc1;
 8001d38:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <Get_HADC1_Ptr+0x10>)
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	200001a0 	.word	0x200001a0

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <Error_Handler+0x8>
 8001d52:	0000      	movs	r0, r0
 8001d54:	0000      	movs	r0, r0
	...

08001d58 <limitPWM>:
#include "pid.h"

extern float velocity_left;
extern float velocity_right;

float limitPWM(float pwm) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7fe fcbf 	bl	80006e4 <__aeabi_f2d>
 8001d66:	a30e      	add	r3, pc, #56	; (adr r3, 8001da0 <limitPWM+0x48>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe fd90 	bl	8000890 <__aeabi_dcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <limitPWM+0x22>
		return PWM_MAX;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <limitPWM+0x58>)
 8001d78:	e00d      	b.n	8001d96 <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fcb2 	bl	80006e4 <__aeabi_f2d>
 8001d80:	a309      	add	r3, pc, #36	; (adr r3, 8001da8 <limitPWM+0x50>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fd65 	bl	8000854 <__aeabi_dcmplt>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <limitPWM+0x3c>
		return -PWM_MAX;
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <limitPWM+0x5c>)
 8001d92:	e000      	b.n	8001d96 <limitPWM+0x3e>
	else
		return pwm;
 8001d94:	687b      	ldr	r3, [r7, #4]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	66666666 	.word	0x66666666
 8001da4:	3fee6666 	.word	0x3fee6666
 8001da8:	66666666 	.word	0x66666666
 8001dac:	bfee6666 	.word	0xbfee6666
 8001db0:	3f733333 	.word	0x3f733333
 8001db4:	bf733333 	.word	0xbf733333

08001db8 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8001dc0:	f04f 0100 	mov.w	r1, #0
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff f87d 	bl	8000ec4 <__aeabi_fcmpge>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d012      	beq.n	8001df6 <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <setMotorLPWM+0x70>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffbe 	bl	8001d58 <limitPWM>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4913      	ldr	r1, [pc, #76]	; (8001e2c <setMotorLPWM+0x74>)
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe febd 	bl	8000b60 <__aeabi_fmul>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4c0f      	ldr	r4, [pc, #60]	; (8001e28 <setMotorLPWM+0x70>)
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f87e 	bl	8000eec <__aeabi_f2uiz>
 8001df0:	4603      	mov	r3, r0
 8001df2:	63a3      	str	r3, [r4, #56]	; 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 8001df4:	e013      	b.n	8001e1e <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <setMotorLPWM+0x70>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffab 	bl	8001d58 <limitPWM>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4909      	ldr	r1, [pc, #36]	; (8001e2c <setMotorLPWM+0x74>)
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe feaa 	bl	8000b60 <__aeabi_fmul>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e12:	4c05      	ldr	r4, [pc, #20]	; (8001e28 <setMotorLPWM+0x70>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f869 	bl	8000eec <__aeabi_f2uiz>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd90      	pop	{r4, r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	4547f000 	.word	0x4547f000

08001e30 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff f841 	bl	8000ec4 <__aeabi_fcmpge>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d012      	beq.n	8001e6e <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <setMotorRPWM+0x70>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff82 	bl	8001d58 <limitPWM>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4913      	ldr	r1, [pc, #76]	; (8001ea4 <setMotorRPWM+0x74>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fe81 	bl	8000b60 <__aeabi_fmul>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4c0f      	ldr	r4, [pc, #60]	; (8001ea0 <setMotorRPWM+0x70>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f842 	bl	8000eec <__aeabi_f2uiz>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	63e3      	str	r3, [r4, #60]	; 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8001e6c:	e013      	b.n	8001e96 <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <setMotorRPWM+0x70>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff6f 	bl	8001d58 <limitPWM>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4909      	ldr	r1, [pc, #36]	; (8001ea4 <setMotorRPWM+0x74>)
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fe6e 	bl	8000b60 <__aeabi_fmul>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e8a:	4c05      	ldr	r4, [pc, #20]	; (8001ea0 <setMotorRPWM+0x70>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f82d 	bl	8000eec <__aeabi_f2uiz>
 8001e92:	4603      	mov	r3, r0
 8001e94:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd90      	pop	{r4, r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	4547f000 	.word	0x4547f000

08001ea8 <resetMotors>:

void resetMotors() {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 8001eac:	f04f 0000 	mov.w	r0, #0
 8001eb0:	f7ff ff82 	bl	8001db8 <setMotorLPWM>
	setMotorRPWM(0);
 8001eb4:	f04f 0000 	mov.w	r0, #0
 8001eb8:	f7ff ffba 	bl	8001e30 <setMotorRPWM>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <setPIDGoalD>:
STATE state = REST;
float left_PWM_value = 0;
float right_PWM_value = 0;
int goal_reached_timer = 0;

void setPIDGoalD(int16_t distance) { goal_distance = distance; }
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
 8001eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fdf2 	bl	8000ab8 <__aeabi_i2f>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a03      	ldr	r2, [pc, #12]	; (8001ee4 <setPIDGoalD+0x24>)
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000338 	.word	0x20000338

08001ee8 <setPIDGoalA>:
void setPIDGoalA(int16_t angle) { goal_angle = angle; }
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
 8001ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fdde 	bl	8000ab8 <__aeabi_i2f>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4a03      	ldr	r2, [pc, #12]	; (8001f0c <setPIDGoalA+0x24>)
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000033c 	.word	0x2000033c

08001f10 <setState>:
void setState(STATE curr_state) { state = curr_state; }
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <setState+0x1c>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	7013      	strb	r3, [r2, #0]
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000414 	.word	0x20000414

08001f30 <setIRGoals>:

void setIRGoals(int16_t frontLeftGoal, int16_t frontRightGoal, int16_t leftGoal, int16_t rightGoal) {
 8001f30:	b490      	push	{r4, r7}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4604      	mov	r4, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4623      	mov	r3, r4
 8001f40:	80fb      	strh	r3, [r7, #6]
 8001f42:	4603      	mov	r3, r0
 8001f44:	80bb      	strh	r3, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	807b      	strh	r3, [r7, #2]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = leftGoal - rightGoal;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	883b      	ldrh	r3, [r7, #0]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b21a      	sxth	r2, r3
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <setIRGoals+0x50>)
 8001f5a:	801a      	strh	r2, [r3, #0]
	goal_forward_left = frontLeftGoal;
 8001f5c:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <setIRGoals+0x54>)
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	8013      	strh	r3, [r2, #0]
	goal_forward_right = frontRightGoal;
 8001f62:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <setIRGoals+0x58>)
 8001f64:	88bb      	ldrh	r3, [r7, #4]
 8001f66:	8013      	strh	r3, [r2, #0]
	goal_left = leftGoal;
 8001f68:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <setIRGoals+0x5c>)
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	8013      	strh	r3, [r2, #0]
	goal_right = rightGoal;
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <setIRGoals+0x60>)
 8001f70:	883b      	ldrh	r3, [r7, #0]
 8001f72:	8013      	strh	r3, [r2, #0]

}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc90      	pop	{r4, r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000340 	.word	0x20000340
 8001f84:	20000330 	.word	0x20000330
 8001f88:	20000332 	.word	0x20000332
 8001f8c:	20000334 	.word	0x20000334
 8001f90:	20000336 	.word	0x20000336

08001f94 <setIRAngle>:
	setPIDGoalD(front_kPx * ((goal_forward_left - curr_forward_left + goal_forward_right - curr_forward_left)/2));

}

// TODO: CHANGE TO USE WALL CHECK FUNCTIONS
void setIRAngle(float left, float right){
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]

	if (left > 600 && right > 600 && goal_angle == 0)
 8001f9e:	4947      	ldr	r1, [pc, #284]	; (80020bc <setIRAngle+0x128>)
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7fe ff99 	bl	8000ed8 <__aeabi_fcmpgt>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d02d      	beq.n	8002008 <setIRAngle+0x74>
 8001fac:	4943      	ldr	r1, [pc, #268]	; (80020bc <setIRAngle+0x128>)
 8001fae:	6838      	ldr	r0, [r7, #0]
 8001fb0:	f7fe ff92 	bl	8000ed8 <__aeabi_fcmpgt>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d026      	beq.n	8002008 <setIRAngle+0x74>
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <setIRAngle+0x12c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe ff60 	bl	8000e88 <__aeabi_fcmpeq>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01c      	beq.n	8002008 <setIRAngle+0x74>
	{
		IRadjustment = (kPir * ((left - right) - IRAngleOffset));
 8001fce:	6839      	ldr	r1, [r7, #0]
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7fe fcbb 	bl	800094c <__aeabi_fsub>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461c      	mov	r4, r3
 8001fda:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <setIRAngle+0x130>)
 8001fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fd69 	bl	8000ab8 <__aeabi_i2f>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7fe fcae 	bl	800094c <__aeabi_fsub>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <setIRAngle+0x134>)
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	f7fe fdb1 	bl	8000b60 <__aeabi_fmul>
 8001ffe:	4603      	mov	r3, r0
 8002000:	461a      	mov	r2, r3
 8002002:	4b32      	ldr	r3, [pc, #200]	; (80020cc <setIRAngle+0x138>)
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e054      	b.n	80020b2 <setIRAngle+0x11e>
	}
	else if (left > 600 && goal_angle == 0)
 8002008:	492c      	ldr	r1, [pc, #176]	; (80020bc <setIRAngle+0x128>)
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe ff64 	bl	8000ed8 <__aeabi_fcmpgt>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d020      	beq.n	8002058 <setIRAngle+0xc4>
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <setIRAngle+0x12c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f04f 0100 	mov.w	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe ff32 	bl	8000e88 <__aeabi_fcmpeq>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <setIRAngle+0xc4>
	{
		IRadjustment = (kPir2 * (left - goal_left));
 800202a:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <setIRAngle+0x13c>)
 800202c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fd41 	bl	8000ab8 <__aeabi_i2f>
 8002036:	4603      	mov	r3, r0
 8002038:	4619      	mov	r1, r3
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fc86 	bl	800094c <__aeabi_fsub>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <setIRAngle+0x140>)
 8002046:	4619      	mov	r1, r3
 8002048:	4610      	mov	r0, r2
 800204a:	f7fe fd89 	bl	8000b60 <__aeabi_fmul>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <setIRAngle+0x138>)
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e02c      	b.n	80020b2 <setIRAngle+0x11e>
	}
	else if (right > 600 && goal_angle == 0)
 8002058:	4918      	ldr	r1, [pc, #96]	; (80020bc <setIRAngle+0x128>)
 800205a:	6838      	ldr	r0, [r7, #0]
 800205c:	f7fe ff3c 	bl	8000ed8 <__aeabi_fcmpgt>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d020      	beq.n	80020a8 <setIRAngle+0x114>
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <setIRAngle+0x12c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f04f 0100 	mov.w	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe ff0a 	bl	8000e88 <__aeabi_fcmpeq>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <setIRAngle+0x114>
	{
		IRadjustment = (kPir2 * (goal_right - right));
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <setIRAngle+0x144>)
 800207c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fd19 	bl	8000ab8 <__aeabi_i2f>
 8002086:	4603      	mov	r3, r0
 8002088:	6839      	ldr	r1, [r7, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fc5e 	bl	800094c <__aeabi_fsub>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <setIRAngle+0x140>)
 8002096:	4619      	mov	r1, r3
 8002098:	4610      	mov	r0, r2
 800209a:	f7fe fd61 	bl	8000b60 <__aeabi_fmul>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <setIRAngle+0x138>)
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e004      	b.n	80020b2 <setIRAngle+0x11e>
	}
	else
		IRadjustment = 0;
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <setIRAngle+0x138>)
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}
 80020ba:	bf00      	nop
 80020bc:	44160000 	.word	0x44160000
 80020c0:	2000033c 	.word	0x2000033c
 80020c4:	20000340 	.word	0x20000340
 80020c8:	3d4ccccd 	.word	0x3d4ccccd
 80020cc:	20000410 	.word	0x20000410
 80020d0:	20000334 	.word	0x20000334
 80020d4:	3d99999a 	.word	0x3d99999a
 80020d8:	20000336 	.word	0x20000336

080020dc <accelerateLeftPWM>:

float accelerateLeftPWM() {
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
//	if (derivative > velocity_left * 34.0)
//		return left_PWM_value - xacceleration;
//
//	return left_PWM_value;

}
 80020e0:	bf00      	nop
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <accelerateRightPWM>:

float accelerateRightPWM() {
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
//	if (derivative > velocity_right * 34.0)
//		return right_PWM_value - xacceleration;
//
//	return right_PWM_value;

}
 80020ee:	bf00      	nop
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <PDController>:

void PDController() {
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0

//////////////////////////	CALCULATE DISTANCE AND ANGLE CORRECTION /////////////////////////

	float adjustedAngle = goal_angle + IRadjustment;
 80020fe:	4ba0      	ldr	r3, [pc, #640]	; (8002380 <PDController+0x288>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4aa0      	ldr	r2, [pc, #640]	; (8002384 <PDController+0x28c>)
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fc21 	bl	8000950 <__addsf3>
 800210e:	4603      	mov	r3, r0
 8002110:	607b      	str	r3, [r7, #4]

	angleError = adjustedAngle - (getLeftEncoderCounts() - getRightEncoderCounts());
 8002112:	f7ff f939 	bl	8001388 <getLeftEncoderCounts>
 8002116:	4603      	mov	r3, r0
 8002118:	461c      	mov	r4, r3
 800211a:	f7ff f927 	bl	800136c <getRightEncoderCounts>
 800211e:	4603      	mov	r3, r0
 8002120:	1ae3      	subs	r3, r4, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fcc8 	bl	8000ab8 <__aeabi_i2f>
 8002128:	4603      	mov	r3, r0
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7fe fc0d 	bl	800094c <__aeabi_fsub>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	4b94      	ldr	r3, [pc, #592]	; (8002388 <PDController+0x290>)
 8002138:	601a      	str	r2, [r3, #0]
	angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 800213a:	4a94      	ldr	r2, [pc, #592]	; (800238c <PDController+0x294>)
 800213c:	4b92      	ldr	r3, [pc, #584]	; (8002388 <PDController+0x290>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f7fe fd0c 	bl	8000b60 <__aeabi_fmul>
 8002148:	4603      	mov	r3, r0
 800214a:	461c      	mov	r4, r3
 800214c:	4b8e      	ldr	r3, [pc, #568]	; (8002388 <PDController+0x290>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a8f      	ldr	r2, [pc, #572]	; (8002390 <PDController+0x298>)
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fbf8 	bl	800094c <__aeabi_fsub>
 800215c:	4603      	mov	r3, r0
 800215e:	461a      	mov	r2, r3
 8002160:	4b8c      	ldr	r3, [pc, #560]	; (8002394 <PDController+0x29c>)
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7fe fcfb 	bl	8000b60 <__aeabi_fmul>
 800216a:	4603      	mov	r3, r0
 800216c:	4619      	mov	r1, r3
 800216e:	4620      	mov	r0, r4
 8002170:	f7fe fbee 	bl	8000950 <__addsf3>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	4b87      	ldr	r3, [pc, #540]	; (8002398 <PDController+0x2a0>)
 800217a:	601a      	str	r2, [r3, #0]

	distanceError = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts())/2);
 800217c:	4b87      	ldr	r3, [pc, #540]	; (800239c <PDController+0x2a4>)
 800217e:	681c      	ldr	r4, [r3, #0]
 8002180:	f7ff f902 	bl	8001388 <getLeftEncoderCounts>
 8002184:	4603      	mov	r3, r0
 8002186:	461d      	mov	r5, r3
 8002188:	f7ff f8f0 	bl	800136c <getRightEncoderCounts>
 800218c:	4603      	mov	r3, r0
 800218e:	442b      	add	r3, r5
 8002190:	0fda      	lsrs	r2, r3, #31
 8002192:	4413      	add	r3, r2
 8002194:	105b      	asrs	r3, r3, #1
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fc8e 	bl	8000ab8 <__aeabi_i2f>
 800219c:	4603      	mov	r3, r0
 800219e:	4619      	mov	r1, r3
 80021a0:	4620      	mov	r0, r4
 80021a2:	f7fe fbd3 	bl	800094c <__aeabi_fsub>
 80021a6:	4603      	mov	r3, r0
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b7d      	ldr	r3, [pc, #500]	; (80023a0 <PDController+0x2a8>)
 80021ac:	601a      	str	r2, [r3, #0]

	distanceCorrection = kPx * distanceError + kDx * (distanceError - oldDistanceError);
 80021ae:	4a7d      	ldr	r2, [pc, #500]	; (80023a4 <PDController+0x2ac>)
 80021b0:	4b7b      	ldr	r3, [pc, #492]	; (80023a0 <PDController+0x2a8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f7fe fcd2 	bl	8000b60 <__aeabi_fmul>
 80021bc:	4603      	mov	r3, r0
 80021be:	461c      	mov	r4, r3
 80021c0:	4b77      	ldr	r3, [pc, #476]	; (80023a0 <PDController+0x2a8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a78      	ldr	r2, [pc, #480]	; (80023a8 <PDController+0x2b0>)
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fbbe 	bl	800094c <__aeabi_fsub>
 80021d0:	4603      	mov	r3, r0
 80021d2:	461a      	mov	r2, r3
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	4619      	mov	r1, r3
 80021da:	4610      	mov	r0, r2
 80021dc:	f7fe fcc0 	bl	8000b60 <__aeabi_fmul>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4619      	mov	r1, r3
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7fe fbb3 	bl	8000950 <__addsf3>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <PDController+0x2b4>)
 80021f0:	601a      	str	r2, [r3, #0]

	left_distance = getLeftEncoderCounts();
 80021f2:	f7ff f8c9 	bl	8001388 <getLeftEncoderCounts>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fc5d 	bl	8000ab8 <__aeabi_i2f>
 80021fe:	4603      	mov	r3, r0
 8002200:	4a6b      	ldr	r2, [pc, #428]	; (80023b0 <PDController+0x2b8>)
 8002202:	6013      	str	r3, [r2, #0]
	right_distance = getRightEncoderCounts();
 8002204:	f7ff f8b2 	bl	800136c <getRightEncoderCounts>
 8002208:	4603      	mov	r3, r0
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fc54 	bl	8000ab8 <__aeabi_i2f>
 8002210:	4603      	mov	r3, r0
 8002212:	4a68      	ldr	r2, [pc, #416]	; (80023b4 <PDController+0x2bc>)
 8002214:	6013      	str	r3, [r2, #0]

	if (state == MOVING && fabs(distanceError) > 100)
 8002216:	4b68      	ldr	r3, [pc, #416]	; (80023b8 <PDController+0x2c0>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d13f      	bne.n	800229e <PDController+0x1a6>
 800221e:	4b60      	ldr	r3, [pc, #384]	; (80023a0 <PDController+0x2a8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002226:	4965      	ldr	r1, [pc, #404]	; (80023bc <PDController+0x2c4>)
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fe55 	bl	8000ed8 <__aeabi_fcmpgt>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d034      	beq.n	800229e <PDController+0x1a6>
	{		// If we're going straight and not at the end, apply acceleration
		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 8002234:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <PDController+0x2b4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a61      	ldr	r2, [pc, #388]	; (80023c0 <PDController+0x2c8>)
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fb84 	bl	800094c <__aeabi_fsub>
 8002244:	4603      	mov	r3, r0
 8002246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800224a:	4a56      	ldr	r2, [pc, #344]	; (80023a4 <PDController+0x2ac>)
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fe42 	bl	8000ed8 <__aeabi_fcmpgt>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d021      	beq.n	800229e <PDController+0x1a6>
		{
			distanceCorrection = oldDistanceCorrection + (xacceleration * sign(distanceCorrection - oldDistanceCorrection));
 800225a:	4b54      	ldr	r3, [pc, #336]	; (80023ac <PDController+0x2b4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <PDController+0x2c8>)
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fb71 	bl	800094c <__aeabi_fsub>
 800226a:	4603      	mov	r3, r0
 800226c:	4618      	mov	r0, r3
 800226e:	f001 fb7d 	bl	800396c <sign>
 8002272:	4603      	mov	r3, r0
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fc1f 	bl	8000ab8 <__aeabi_i2f>
 800227a:	4603      	mov	r3, r0
 800227c:	4a49      	ldr	r2, [pc, #292]	; (80023a4 <PDController+0x2ac>)
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fc6d 	bl	8000b60 <__aeabi_fmul>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	4b4d      	ldr	r3, [pc, #308]	; (80023c0 <PDController+0x2c8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4619      	mov	r1, r3
 8002290:	4610      	mov	r0, r2
 8002292:	f7fe fb5d 	bl	8000950 <__addsf3>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	4b44      	ldr	r3, [pc, #272]	; (80023ac <PDController+0x2b4>)
 800229c:	601a      	str	r2, [r3, #0]
		}
	}

////////////////////// ROUND DISTANCE OR ANGLE CORRECTION	//////////////////////////

	switch(state) {		// Apply lower limits of PWM for various states
 800229e:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <PDController+0x2c0>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	f200 80bf 	bhi.w	8002428 <PDController+0x330>
 80022aa:	a201      	add	r2, pc, #4	; (adr r2, 80022b0 <PDController+0x1b8>)
 80022ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b0:	080022ed 	.word	0x080022ed
 80022b4:	0800234f 	.word	0x0800234f
 80022b8:	080022c5 	.word	0x080022c5
 80022bc:	08002429 	.word	0x08002429
 80022c0:	0800240b 	.word	0x0800240b
		case EXPLORING:
			distanceCorrection = (accelerateLeftPWM() + accelerateRightPWM())/2;
 80022c4:	f7ff ff0a 	bl	80020dc <accelerateLeftPWM>
 80022c8:	4604      	mov	r4, r0
 80022ca:	f7ff ff0e 	bl	80020ea <accelerateRightPWM>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4619      	mov	r1, r3
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7fe fb3c 	bl	8000950 <__addsf3>
 80022d8:	4603      	mov	r3, r0
 80022da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fcf2 	bl	8000cc8 <__aeabi_fdiv>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <PDController+0x2b4>)
 80022ea:	601a      	str	r2, [r3, #0]
		case MOVING:
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 80022ec:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <PDController+0x2b4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f9f5 	bl	80006e4 <__aeabi_f2d>
 80022fa:	a31d      	add	r3, pc, #116	; (adr r3, 8002370 <PDController+0x278>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe fac6 	bl	8000890 <__aeabi_dcmpgt>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d100      	bne.n	800230c <PDController+0x214>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
			break;
 800230a:	e08e      	b.n	800242a <PDController+0x332>
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <PDController+0x2b4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002314:	4a2b      	ldr	r2, [pc, #172]	; (80023c4 <PDController+0x2cc>)
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fdbf 	bl	8000e9c <__aeabi_fcmplt>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d100      	bne.n	8002326 <PDController+0x22e>
			break;
 8002324:	e081      	b.n	800242a <PDController+0x332>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
 8002326:	4b21      	ldr	r3, [pc, #132]	; (80023ac <PDController+0x2b4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f001 fb1e 	bl	800396c <sign>
 8002330:	4603      	mov	r3, r0
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fbc0 	bl	8000ab8 <__aeabi_i2f>
 8002338:	4603      	mov	r3, r0
 800233a:	4a22      	ldr	r2, [pc, #136]	; (80023c4 <PDController+0x2cc>)
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fc0e 	bl	8000b60 <__aeabi_fmul>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	4b18      	ldr	r3, [pc, #96]	; (80023ac <PDController+0x2b4>)
 800234a:	601a      	str	r2, [r3, #0]
			break;
 800234c:	e06d      	b.n	800242a <PDController+0x332>
		case TURNING:
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <PDController+0x2a0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f9c4 	bl	80006e4 <__aeabi_f2d>
 800235c:	a306      	add	r3, pc, #24	; (adr r3, 8002378 <PDController+0x280>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fe fa95 	bl	8000890 <__aeabi_dcmpgt>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d12d      	bne.n	80023c8 <PDController+0x2d0>
				angleCorrection = sign(angleCorrection) * PWMMinw;
			break;
 800236c:	e05d      	b.n	800242a <PDController+0x332>
 800236e:	bf00      	nop
 8002370:	eb851eb8 	.word	0xeb851eb8
 8002374:	3f9eb851 	.word	0x3f9eb851
 8002378:	47ae147b 	.word	0x47ae147b
 800237c:	3f847ae1 	.word	0x3f847ae1
 8002380:	2000033c 	.word	0x2000033c
 8002384:	20000410 	.word	0x20000410
 8002388:	20000344 	.word	0x20000344
 800238c:	3b449ba6 	.word	0x3b449ba6
 8002390:	20000348 	.word	0x20000348
 8002394:	3a03126f 	.word	0x3a03126f
 8002398:	20000374 	.word	0x20000374
 800239c:	20000338 	.word	0x20000338
 80023a0:	20000378 	.word	0x20000378
 80023a4:	3a83126f 	.word	0x3a83126f
 80023a8:	2000037c 	.word	0x2000037c
 80023ac:	200003a8 	.word	0x200003a8
 80023b0:	200003b0 	.word	0x200003b0
 80023b4:	200003e0 	.word	0x200003e0
 80023b8:	20000414 	.word	0x20000414
 80023bc:	42c80000 	.word	0x42c80000
 80023c0:	200003ac 	.word	0x200003ac
 80023c4:	3ea3d70a 	.word	0x3ea3d70a
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 80023c8:	4b4f      	ldr	r3, [pc, #316]	; (8002508 <PDController+0x410>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d0:	4a4e      	ldr	r2, [pc, #312]	; (800250c <PDController+0x414>)
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fd61 	bl	8000e9c <__aeabi_fcmplt>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d100      	bne.n	80023e2 <PDController+0x2ea>
			break;
 80023e0:	e023      	b.n	800242a <PDController+0x332>
				angleCorrection = sign(angleCorrection) * PWMMinw;
 80023e2:	4b49      	ldr	r3, [pc, #292]	; (8002508 <PDController+0x410>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 fac0 	bl	800396c <sign>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fb62 	bl	8000ab8 <__aeabi_i2f>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4a45      	ldr	r2, [pc, #276]	; (800250c <PDController+0x414>)
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fbb0 	bl	8000b60 <__aeabi_fmul>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	4b40      	ldr	r3, [pc, #256]	; (8002508 <PDController+0x410>)
 8002406:	601a      	str	r2, [r3, #0]
			break;
 8002408:	e00f      	b.n	800242a <PDController+0x332>
		case CURVING:
			if (fabs(distanceError) < 60)
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <PDController+0x418>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002412:	4940      	ldr	r1, [pc, #256]	; (8002514 <PDController+0x41c>)
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fd41 	bl	8000e9c <__aeabi_fcmplt>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d100      	bne.n	8002422 <PDController+0x32a>
				setState(REST);
		default:
			break;
 8002420:	e002      	b.n	8002428 <PDController+0x330>
				setState(REST);
 8002422:	2000      	movs	r0, #0
 8002424:	f7ff fd74 	bl	8001f10 <setState>
			break;
 8002428:	bf00      	nop
	}

	if (fabs(distanceCorrection) > PWMMaxx)		// Upper Limit for PWM
 800242a:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <PDController+0x420>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002432:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fd4d 	bl	8000ed8 <__aeabi_fcmpgt>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <PDController+0x374>
		distanceCorrection = sign(distanceCorrection) * PWMMaxx;
 8002444:	4b34      	ldr	r3, [pc, #208]	; (8002518 <PDController+0x420>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f001 fa8f 	bl	800396c <sign>
 800244e:	4603      	mov	r3, r0
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fb31 	bl	8000ab8 <__aeabi_i2f>
 8002456:	4603      	mov	r3, r0
 8002458:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fb7e 	bl	8000b60 <__aeabi_fmul>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <PDController+0x420>)
 800246a:	601a      	str	r2, [r3, #0]

	if (fabs(angleCorrection) > PWMMaxw)
 800246c:	4b26      	ldr	r3, [pc, #152]	; (8002508 <PDController+0x410>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002474:	4a29      	ldr	r2, [pc, #164]	; (800251c <PDController+0x424>)
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fd2d 	bl	8000ed8 <__aeabi_fcmpgt>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d012      	beq.n	80024aa <PDController+0x3b2>
		angleCorrection = sign(angleCorrection) * PWMMaxw;
 8002484:	4b20      	ldr	r3, [pc, #128]	; (8002508 <PDController+0x410>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f001 fa6f 	bl	800396c <sign>
 800248e:	4603      	mov	r3, r0
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fb11 	bl	8000ab8 <__aeabi_i2f>
 8002496:	4603      	mov	r3, r0
 8002498:	4a20      	ldr	r2, [pc, #128]	; (800251c <PDController+0x424>)
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fb5f 	bl	8000b60 <__aeabi_fmul>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <PDController+0x410>)
 80024a8:	601a      	str	r2, [r3, #0]

	if (state == ACCELERATING || state == CURVING)
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <PDController+0x428>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d003      	beq.n	80024ba <PDController+0x3c2>
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <PDController+0x428>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b05      	cmp	r3, #5
 80024b8:	d10a      	bne.n	80024d0 <PDController+0x3d8>
	{
		left_PWM_value = accelerateLeftPWM();
 80024ba:	f7ff fe0f 	bl	80020dc <accelerateLeftPWM>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <PDController+0x42c>)
 80024c2:	6013      	str	r3, [r2, #0]
		right_PWM_value = accelerateRightPWM();
 80024c4:	f7ff fe11 	bl	80020ea <accelerateRightPWM>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4a17      	ldr	r2, [pc, #92]	; (8002528 <PDController+0x430>)
 80024cc:	6013      	str	r3, [r2, #0]
		return;
 80024ce:	e017      	b.n	8002500 <PDController+0x408>
	}

	left_PWM_value = (distanceCorrection + angleCorrection);
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <PDController+0x420>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <PDController+0x410>)
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fa38 	bl	8000950 <__addsf3>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <PDController+0x42c>)
 80024e6:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distanceCorrection - angleCorrection);
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <PDController+0x420>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <PDController+0x410>)
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fa2a 	bl	800094c <__aeabi_fsub>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <PDController+0x430>)
 80024fe:	601a      	str	r2, [r3, #0]

}
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bdb0      	pop	{r4, r5, r7, pc}
 8002506:	bf00      	nop
 8002508:	20000374 	.word	0x20000374
 800250c:	3ea3d70a 	.word	0x3ea3d70a
 8002510:	20000378 	.word	0x20000378
 8002514:	42700000 	.word	0x42700000
 8002518:	200003a8 	.word	0x200003a8
 800251c:	3eb33333 	.word	0x3eb33333
 8002520:	20000414 	.word	0x20000414
 8002524:	20000418 	.word	0x20000418
 8002528:	2000041c 	.word	0x2000041c
 800252c:	00000000 	.word	0x00000000

08002530 <updatePID>:

void updatePID() {
 8002530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0

///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldAngleError = oldAngleErrors[9];
 8002538:	4b49      	ldr	r3, [pc, #292]	; (8002660 <updatePID+0x130>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	4a49      	ldr	r2, [pc, #292]	; (8002664 <updatePID+0x134>)
 800253e:	6013      	str	r3, [r2, #0]
	oldDistanceError = oldDistanceErrors[9];
 8002540:	4b49      	ldr	r3, [pc, #292]	; (8002668 <updatePID+0x138>)
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	4a49      	ldr	r2, [pc, #292]	; (800266c <updatePID+0x13c>)
 8002546:	6013      	str	r3, [r2, #0]
	old_left_distance = old_left_distances[9];
 8002548:	4b49      	ldr	r3, [pc, #292]	; (8002670 <updatePID+0x140>)
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	4a49      	ldr	r2, [pc, #292]	; (8002674 <updatePID+0x144>)
 800254e:	6013      	str	r3, [r2, #0]
	old_right_distance = old_right_distances[9];
 8002550:	4b49      	ldr	r3, [pc, #292]	; (8002678 <updatePID+0x148>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	4a49      	ldr	r2, [pc, #292]	; (800267c <updatePID+0x14c>)
 8002556:	6013      	str	r3, [r2, #0]

//////////////////////	CALCULATE MOTOR PWM VALUES	/////////////////////

	PDController();
 8002558:	f7ff fdce 	bl	80020f8 <PDController>

////////////////////	NORMALIZE LEFT AND RIGHT PWM VALUES ////////////////

	// Apply lower PWM limits for small adjustments
	if (state == REST || state == ACCELERATING || fabs(distanceError) < 60 || fabs (angleError) < 60)
 800255c:	4b48      	ldr	r3, [pc, #288]	; (8002680 <updatePID+0x150>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01a      	beq.n	800259a <updatePID+0x6a>
 8002564:	4b46      	ldr	r3, [pc, #280]	; (8002680 <updatePID+0x150>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d016      	beq.n	800259a <updatePID+0x6a>
 800256c:	4b45      	ldr	r3, [pc, #276]	; (8002684 <updatePID+0x154>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002574:	4944      	ldr	r1, [pc, #272]	; (8002688 <updatePID+0x158>)
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fc90 	bl	8000e9c <__aeabi_fcmplt>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10b      	bne.n	800259a <updatePID+0x6a>
 8002582:	4b42      	ldr	r3, [pc, #264]	; (800268c <updatePID+0x15c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800258a:	493f      	ldr	r1, [pc, #252]	; (8002688 <updatePID+0x158>)
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fc85 	bl	8000e9c <__aeabi_fcmplt>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8081 	beq.w	800269c <updatePID+0x16c>
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <updatePID+0x160>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe f89e 	bl	80006e4 <__aeabi_f2d>
 80025a8:	a32b      	add	r3, pc, #172	; (adr r3, 8002658 <updatePID+0x128>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fe f96f 	bl	8000890 <__aeabi_dcmpgt>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01e      	beq.n	80025f6 <updatePID+0xc6>
 80025b8:	4b35      	ldr	r3, [pc, #212]	; (8002690 <updatePID+0x160>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025c0:	4a34      	ldr	r2, [pc, #208]	; (8002694 <updatePID+0x164>)
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fc69 	bl	8000e9c <__aeabi_fcmplt>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d012      	beq.n	80025f6 <updatePID+0xc6>
		{
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 80025d0:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <updatePID+0x160>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 f9c9 	bl	800396c <sign>
 80025da:	4603      	mov	r3, r0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fa6b 	bl	8000ab8 <__aeabi_i2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a2b      	ldr	r2, [pc, #172]	; (8002694 <updatePID+0x164>)
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fab9 	bl	8000b60 <__aeabi_fmul>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b27      	ldr	r3, [pc, #156]	; (8002690 <updatePID+0x160>)
 80025f4:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 80025f6:	4b28      	ldr	r3, [pc, #160]	; (8002698 <updatePID+0x168>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe f870 	bl	80006e4 <__aeabi_f2d>
 8002604:	a314      	add	r3, pc, #80	; (adr r3, 8002658 <updatePID+0x128>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fe f941 	bl	8000890 <__aeabi_dcmpgt>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8113 	beq.w	800283c <updatePID+0x30c>
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <updatePID+0x168>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <updatePID+0x164>)
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fc3a 	bl	8000e9c <__aeabi_fcmplt>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d100      	bne.n	8002630 <updatePID+0x100>
 800262e:	e105      	b.n	800283c <updatePID+0x30c>
		{
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <updatePID+0x168>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f001 f999 	bl	800396c <sign>
 800263a:	4603      	mov	r3, r0
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fa3b 	bl	8000ab8 <__aeabi_i2f>
 8002642:	4603      	mov	r3, r0
 8002644:	4a13      	ldr	r2, [pc, #76]	; (8002694 <updatePID+0x164>)
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fa89 	bl	8000b60 <__aeabi_fmul>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <updatePID+0x168>)
 8002654:	601a      	str	r2, [r3, #0]
		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 8002656:	e0f1      	b.n	800283c <updatePID+0x30c>
 8002658:	47ae147b 	.word	0x47ae147b
 800265c:	3f847ae1 	.word	0x3f847ae1
 8002660:	2000034c 	.word	0x2000034c
 8002664:	20000348 	.word	0x20000348
 8002668:	20000380 	.word	0x20000380
 800266c:	2000037c 	.word	0x2000037c
 8002670:	200003b8 	.word	0x200003b8
 8002674:	200003b4 	.word	0x200003b4
 8002678:	200003e8 	.word	0x200003e8
 800267c:	200003e4 	.word	0x200003e4
 8002680:	20000414 	.word	0x20000414
 8002684:	20000378 	.word	0x20000378
 8002688:	42700000 	.word	0x42700000
 800268c:	20000344 	.word	0x20000344
 8002690:	20000418 	.word	0x20000418
 8002694:	3e8f5c29 	.word	0x3e8f5c29
 8002698:	2000041c 	.word	0x2000041c
		}
	}
	else	// If under PWM limits, normalize values
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 800269c:	4bb0      	ldr	r3, [pc, #704]	; (8002960 <updatePID+0x430>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe f81d 	bl	80006e4 <__aeabi_f2d>
 80026aa:	a3a9      	add	r3, pc, #676	; (adr r3, 8002950 <updatePID+0x420>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fe f8ee 	bl	8000890 <__aeabi_dcmpgt>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d058      	beq.n	800276c <updatePID+0x23c>
 80026ba:	4ba9      	ldr	r3, [pc, #676]	; (8002960 <updatePID+0x430>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026c2:	4aa8      	ldr	r2, [pc, #672]	; (8002964 <updatePID+0x434>)
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fbe8 	bl	8000e9c <__aeabi_fcmplt>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d04c      	beq.n	800276c <updatePID+0x23c>
		{
			right_PWM_value = right_PWM_value - (sign(right_PWM_value) * (PWMMin - fabs(left_PWM_value)));
 80026d2:	4ba5      	ldr	r3, [pc, #660]	; (8002968 <updatePID+0x438>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe f804 	bl	80006e4 <__aeabi_f2d>
 80026dc:	4604      	mov	r4, r0
 80026de:	460d      	mov	r5, r1
 80026e0:	4ba1      	ldr	r3, [pc, #644]	; (8002968 <updatePID+0x438>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 f941 	bl	800396c <sign>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd ffe7 	bl	80006c0 <__aeabi_i2d>
 80026f2:	4680      	mov	r8, r0
 80026f4:	4689      	mov	r9, r1
 80026f6:	4b9b      	ldr	r3, [pc, #620]	; (8002964 <updatePID+0x434>)
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fff3 	bl	80006e4 <__aeabi_f2d>
 80026fe:	4682      	mov	sl, r0
 8002700:	468b      	mov	fp, r1
 8002702:	4b97      	ldr	r3, [pc, #604]	; (8002960 <updatePID+0x430>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd ffea 	bl	80006e4 <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4650      	mov	r0, sl
 8002716:	4659      	mov	r1, fp
 8002718:	f7fd fe84 	bl	8000424 <__aeabi_dsub>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4640      	mov	r0, r8
 8002722:	4649      	mov	r1, r9
 8002724:	f7fd fd50 	bl	80001c8 <__aeabi_dmul>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4620      	mov	r0, r4
 800272e:	4629      	mov	r1, r5
 8002730:	f7fd fe78 	bl	8000424 <__aeabi_dsub>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe f8b2 	bl	80008a4 <__aeabi_d2f>
 8002740:	4603      	mov	r3, r0
 8002742:	4a89      	ldr	r2, [pc, #548]	; (8002968 <updatePID+0x438>)
 8002744:	6013      	str	r3, [r2, #0]
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 8002746:	4b86      	ldr	r3, [pc, #536]	; (8002960 <updatePID+0x430>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f001 f90e 	bl	800396c <sign>
 8002750:	4603      	mov	r3, r0
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe f9b0 	bl	8000ab8 <__aeabi_i2f>
 8002758:	4603      	mov	r3, r0
 800275a:	4a82      	ldr	r2, [pc, #520]	; (8002964 <updatePID+0x434>)
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe f9fe 	bl	8000b60 <__aeabi_fmul>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b7d      	ldr	r3, [pc, #500]	; (8002960 <updatePID+0x430>)
 800276a:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 800276c:	4b7e      	ldr	r3, [pc, #504]	; (8002968 <updatePID+0x438>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd ffb5 	bl	80006e4 <__aeabi_f2d>
 800277a:	a375      	add	r3, pc, #468	; (adr r3, 8002950 <updatePID+0x420>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f7fe f886 	bl	8000890 <__aeabi_dcmpgt>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d058      	beq.n	800283c <updatePID+0x30c>
 800278a:	4b77      	ldr	r3, [pc, #476]	; (8002968 <updatePID+0x438>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002792:	4a74      	ldr	r2, [pc, #464]	; (8002964 <updatePID+0x434>)
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fb80 	bl	8000e9c <__aeabi_fcmplt>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d04c      	beq.n	800283c <updatePID+0x30c>
		{
			left_PWM_value = left_PWM_value - (sign(left_PWM_value) * (PWMMin - fabs(right_PWM_value)));
 80027a2:	4b6f      	ldr	r3, [pc, #444]	; (8002960 <updatePID+0x430>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd ff9c 	bl	80006e4 <__aeabi_f2d>
 80027ac:	4604      	mov	r4, r0
 80027ae:	460d      	mov	r5, r1
 80027b0:	4b6b      	ldr	r3, [pc, #428]	; (8002960 <updatePID+0x430>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 f8d9 	bl	800396c <sign>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd ff7f 	bl	80006c0 <__aeabi_i2d>
 80027c2:	4680      	mov	r8, r0
 80027c4:	4689      	mov	r9, r1
 80027c6:	4b67      	ldr	r3, [pc, #412]	; (8002964 <updatePID+0x434>)
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd ff8b 	bl	80006e4 <__aeabi_f2d>
 80027ce:	4682      	mov	sl, r0
 80027d0:	468b      	mov	fp, r1
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <updatePID+0x438>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd ff82 	bl	80006e4 <__aeabi_f2d>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4650      	mov	r0, sl
 80027e6:	4659      	mov	r1, fp
 80027e8:	f7fd fe1c 	bl	8000424 <__aeabi_dsub>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4640      	mov	r0, r8
 80027f2:	4649      	mov	r1, r9
 80027f4:	f7fd fce8 	bl	80001c8 <__aeabi_dmul>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4620      	mov	r0, r4
 80027fe:	4629      	mov	r1, r5
 8002800:	f7fd fe10 	bl	8000424 <__aeabi_dsub>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f7fe f84a 	bl	80008a4 <__aeabi_d2f>
 8002810:	4603      	mov	r3, r0
 8002812:	4a53      	ldr	r2, [pc, #332]	; (8002960 <updatePID+0x430>)
 8002814:	6013      	str	r3, [r2, #0]
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 8002816:	4b54      	ldr	r3, [pc, #336]	; (8002968 <updatePID+0x438>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f001 f8a6 	bl	800396c <sign>
 8002820:	4603      	mov	r3, r0
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe f948 	bl	8000ab8 <__aeabi_i2f>
 8002828:	4603      	mov	r3, r0
 800282a:	4a4e      	ldr	r2, [pc, #312]	; (8002964 <updatePID+0x434>)
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe f996 	bl	8000b60 <__aeabi_fmul>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <updatePID+0x438>)
 800283a:	601a      	str	r2, [r3, #0]
		}
	}

	if (fabs(left_PWM_value) > PWM_MAX)
 800283c:	4b48      	ldr	r3, [pc, #288]	; (8002960 <updatePID+0x430>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd ff4d 	bl	80006e4 <__aeabi_f2d>
 800284a:	a343      	add	r3, pc, #268	; (adr r3, 8002958 <updatePID+0x428>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	f7fe f81e 	bl	8000890 <__aeabi_dcmpgt>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d016      	beq.n	8002888 <updatePID+0x358>
	{
		left_PWM_value = sign(left_PWM_value) * PWM_MAX;
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <updatePID+0x430>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f001 f884 	bl	800396c <sign>
 8002864:	4603      	mov	r3, r0
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd ff2a 	bl	80006c0 <__aeabi_i2d>
 800286c:	a33a      	add	r3, pc, #232	; (adr r3, 8002958 <updatePID+0x428>)
 800286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002872:	f7fd fca9 	bl	80001c8 <__aeabi_dmul>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f7fe f811 	bl	80008a4 <__aeabi_d2f>
 8002882:	4603      	mov	r3, r0
 8002884:	4a36      	ldr	r2, [pc, #216]	; (8002960 <updatePID+0x430>)
 8002886:	6013      	str	r3, [r2, #0]
	}

	if (fabs(right_PWM_value) > PWM_MAX)
 8002888:	4b37      	ldr	r3, [pc, #220]	; (8002968 <updatePID+0x438>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd ff27 	bl	80006e4 <__aeabi_f2d>
 8002896:	a330      	add	r3, pc, #192	; (adr r3, 8002958 <updatePID+0x428>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fd fff8 	bl	8000890 <__aeabi_dcmpgt>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <updatePID+0x3a4>
	{
		right_PWM_value = sign(right_PWM_value) * PWM_MAX;
 80028a6:	4b30      	ldr	r3, [pc, #192]	; (8002968 <updatePID+0x438>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 f85e 	bl	800396c <sign>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd ff04 	bl	80006c0 <__aeabi_i2d>
 80028b8:	a327      	add	r3, pc, #156	; (adr r3, 8002958 <updatePID+0x428>)
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	f7fd fc83 	bl	80001c8 <__aeabi_dmul>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	f7fd ffeb 	bl	80008a4 <__aeabi_d2f>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4a25      	ldr	r2, [pc, #148]	; (8002968 <updatePID+0x438>)
 80028d2:	6013      	str	r3, [r2, #0]



//////////////////	SET PWM VALUES AND CHECK FOR GOAL REACHED ////////////////////////

	setMotorLPWM(left_PWM_value);
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <updatePID+0x430>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fa6d 	bl	8001db8 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <updatePID+0x438>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff faa4 	bl	8001e30 <setMotorRPWM>

	if(angleError < 30 && angleError > -30 && distanceError < 30 && distanceError > -30)
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <updatePID+0x43c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4920      	ldr	r1, [pc, #128]	; (8002970 <updatePID+0x440>)
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fad4 	bl	8000e9c <__aeabi_fcmplt>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d020      	beq.n	800293c <updatePID+0x40c>
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <updatePID+0x43c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	491d      	ldr	r1, [pc, #116]	; (8002974 <updatePID+0x444>)
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fae9 	bl	8000ed8 <__aeabi_fcmpgt>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d017      	beq.n	800293c <updatePID+0x40c>
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <updatePID+0x448>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4917      	ldr	r1, [pc, #92]	; (8002970 <updatePID+0x440>)
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fac2 	bl	8000e9c <__aeabi_fcmplt>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00e      	beq.n	800293c <updatePID+0x40c>
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <updatePID+0x448>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4914      	ldr	r1, [pc, #80]	; (8002974 <updatePID+0x444>)
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fad7 	bl	8000ed8 <__aeabi_fcmpgt>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <updatePID+0x40c>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <updatePID+0x44c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	4a11      	ldr	r2, [pc, #68]	; (800297c <updatePID+0x44c>)
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e002      	b.n	8002942 <updatePID+0x412>

	else
		goal_reached_timer = 0;
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <updatePID+0x44c>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

///////////////////// UPDATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldDistanceCorrection = distanceCorrection;
 8002942:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <updatePID+0x450>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <updatePID+0x454>)
 8002948:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 800294a:	2309      	movs	r3, #9
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e027      	b.n	80029a0 <updatePID+0x470>
 8002950:	47ae147b 	.word	0x47ae147b
 8002954:	3f847ae1 	.word	0x3f847ae1
 8002958:	66666666 	.word	0x66666666
 800295c:	3fee6666 	.word	0x3fee6666
 8002960:	20000418 	.word	0x20000418
 8002964:	3e8f5c29 	.word	0x3e8f5c29
 8002968:	2000041c 	.word	0x2000041c
 800296c:	20000344 	.word	0x20000344
 8002970:	41f00000 	.word	0x41f00000
 8002974:	c1f00000 	.word	0xc1f00000
 8002978:	20000378 	.word	0x20000378
 800297c:	20000420 	.word	0x20000420
 8002980:	200003a8 	.word	0x200003a8
 8002984:	200003ac 	.word	0x200003ac
		oldAngleErrors[i] = oldAngleErrors[i-1];	// Adds the newest angleError to array and shifts everything to the right
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3b01      	subs	r3, #1
 800298c:	4a2b      	ldr	r2, [pc, #172]	; (8002a3c <updatePID+0x50c>)
 800298e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002992:	492a      	ldr	r1, [pc, #168]	; (8002a3c <updatePID+0x50c>)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3b01      	subs	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	dcf0      	bgt.n	8002988 <updatePID+0x458>
	oldAngleErrors[0] = angleError;
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <updatePID+0x510>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <updatePID+0x50c>)
 80029ac:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 80029ae:	2309      	movs	r3, #9
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	e00b      	b.n	80029cc <updatePID+0x49c>
		oldDistanceErrors[i] = oldDistanceErrors[i-1];	// Adds the newest distanceError to array and shifts everything right
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <updatePID+0x514>)
 80029ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029be:	4921      	ldr	r1, [pc, #132]	; (8002a44 <updatePID+0x514>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	dcf0      	bgt.n	80029b4 <updatePID+0x484>
	oldDistanceErrors[0] = distanceError;
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <updatePID+0x518>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <updatePID+0x514>)
 80029d8:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 80029da:	2309      	movs	r3, #9
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	e00b      	b.n	80029f8 <updatePID+0x4c8>
		old_left_distances[i] = old_left_distances[i-1];
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <updatePID+0x51c>)
 80029e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029ea:	4918      	ldr	r1, [pc, #96]	; (8002a4c <updatePID+0x51c>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	dcf0      	bgt.n	80029e0 <updatePID+0x4b0>
	old_left_distances[0] = left_distance;
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <updatePID+0x520>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <updatePID+0x51c>)
 8002a04:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002a06:	2309      	movs	r3, #9
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	e00b      	b.n	8002a24 <updatePID+0x4f4>
		old_right_distances[i] = old_right_distances[i-1];
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <updatePID+0x524>)
 8002a12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a16:	490f      	ldr	r1, [pc, #60]	; (8002a54 <updatePID+0x524>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	dcf0      	bgt.n	8002a0c <updatePID+0x4dc>
	old_right_distances[0] = right_distance;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <updatePID+0x528>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <updatePID+0x524>)
 8002a30:	6013      	str	r3, [r2, #0]

}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3c:	2000034c 	.word	0x2000034c
 8002a40:	20000344 	.word	0x20000344
 8002a44:	20000380 	.word	0x20000380
 8002a48:	20000378 	.word	0x20000378
 8002a4c:	200003b8 	.word	0x200003b8
 8002a50:	200003b0 	.word	0x200003b0
 8002a54:	200003e8 	.word	0x200003e8
 8002a58:	200003e0 	.word	0x200003e0

08002a5c <PIDdone>:

int8_t PIDdone(){ // There is no bool type in C. True/False values are represented as 1 or 0.
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0

	if (goal_reached_timer >= 50)
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <PIDdone+0x20>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b31      	cmp	r3, #49	; 0x31
 8002a66:	dd06      	ble.n	8002a76 <PIDdone+0x1a>
	{
		resetPID();
 8002a68:	f000 f80a 	bl	8002a80 <resetPID>
		setState(REST);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7ff fa4f 	bl	8001f10 <setState>
		return 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <PIDdone+0x1c>
	}
	else
		return 0;
 8002a76:	2300      	movs	r3, #0

}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000420 	.word	0x20000420

08002a80 <resetPID>:

void resetPID() {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0

//////////////	RESET ALL ANGLE AND DISTANCE ERRORS TO 0	////////////////
	angleError = 0;
 8002a86:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <resetPID+0x104>)
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
	oldAngleError = 0;
 8002a8e:	4b3e      	ldr	r3, [pc, #248]	; (8002b88 <resetPID+0x108>)
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
	angleCorrection = 0;
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <resetPID+0x10c>)
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e008      	b.n	8002ab6 <resetPID+0x36>
		oldAngleErrors[i] = 0;
 8002aa4:	4a3a      	ldr	r2, [pc, #232]	; (8002b90 <resetPID+0x110>)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f04f 0100 	mov.w	r1, #0
 8002aac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b09      	cmp	r3, #9
 8002aba:	ddf3      	ble.n	8002aa4 <resetPID+0x24>

	distanceError = 0;
 8002abc:	4b35      	ldr	r3, [pc, #212]	; (8002b94 <resetPID+0x114>)
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
	oldDistanceError = 0;
 8002ac4:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <resetPID+0x118>)
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
	distanceCorrection = 0;
 8002acc:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <resetPID+0x11c>)
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	e008      	b.n	8002aec <resetPID+0x6c>
		oldDistanceErrors[i] = 0;
 8002ada:	4a31      	ldr	r2, [pc, #196]	; (8002ba0 <resetPID+0x120>)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f04f 0100 	mov.w	r1, #0
 8002ae2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b09      	cmp	r3, #9
 8002af0:	ddf3      	ble.n	8002ada <resetPID+0x5a>

	left_distance = 0;
 8002af2:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <resetPID+0x124>)
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
	old_left_distance = 0;
 8002afa:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <resetPID+0x128>)
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	e008      	b.n	8002b1a <resetPID+0x9a>
		old_left_distances[i] = 0;
 8002b08:	4a28      	ldr	r2, [pc, #160]	; (8002bac <resetPID+0x12c>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f04f 0100 	mov.w	r1, #0
 8002b10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3301      	adds	r3, #1
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b09      	cmp	r3, #9
 8002b1e:	ddf3      	ble.n	8002b08 <resetPID+0x88>

	right_distance = 0;
 8002b20:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <resetPID+0x130>)
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
	old_right_distance = 0;
 8002b28:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <resetPID+0x134>)
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	e008      	b.n	8002b48 <resetPID+0xc8>
		old_right_distances[i] = 0;
 8002b36:	4a20      	ldr	r2, [pc, #128]	; (8002bb8 <resetPID+0x138>)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b09      	cmp	r3, #9
 8002b4c:	ddf3      	ble.n	8002b36 <resetPID+0xb6>

	IRadjustment = 0;
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <resetPID+0x13c>)
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]

////////////// 	RESET ALL GOALS AND ENCODER COUNTS TO 0 	///////////////////
	goal_angle = 0;
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <resetPID+0x140>)
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
	goal_distance = 0;
 8002b5e:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <resetPID+0x144>)
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
	goal_reached_timer = 0;
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <resetPID+0x148>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

	resetEncoders();
 8002b6c:	f7fe fc1a 	bl	80013a4 <resetEncoders>
	resetMotors();
 8002b70:	f7ff f99a 	bl	8001ea8 <resetMotors>

	setState(REST);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7ff f9cb 	bl	8001f10 <setState>

}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000344 	.word	0x20000344
 8002b88:	20000348 	.word	0x20000348
 8002b8c:	20000374 	.word	0x20000374
 8002b90:	2000034c 	.word	0x2000034c
 8002b94:	20000378 	.word	0x20000378
 8002b98:	2000037c 	.word	0x2000037c
 8002b9c:	200003a8 	.word	0x200003a8
 8002ba0:	20000380 	.word	0x20000380
 8002ba4:	200003b0 	.word	0x200003b0
 8002ba8:	200003b4 	.word	0x200003b4
 8002bac:	200003b8 	.word	0x200003b8
 8002bb0:	200003e0 	.word	0x200003e0
 8002bb4:	200003e4 	.word	0x200003e4
 8002bb8:	200003e8 	.word	0x200003e8
 8002bbc:	20000410 	.word	0x20000410
 8002bc0:	2000033c 	.word	0x2000033c
 8002bc4:	20000338 	.word	0x20000338
 8002bc8:	20000420 	.word	0x20000420

08002bcc <newCell>:
//extern int16_t rightIRvalue;
//extern int16_t frontLeftIRvalue;
//extern int16_t frontRightIRvalue; // TODO: IS THIS NECESSARY?

struct Cell* newCell(int r, int c)           // Acts as a constructor for a cell cuz C is annoying
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
    struct Cell* p = malloc(sizeof(struct Cell));
 8002bd6:	2008      	movs	r0, #8
 8002bd8:	f003 fcd2 	bl	8006580 <malloc>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	60fb      	str	r3, [r7, #12]
    p->row = r;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
    p->col = c;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	605a      	str	r2, [r3, #4]
    return p;
 8002bec:	68fb      	ldr	r3, [r7, #12]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <insertQueue>:

void insertQueue(struct Cell* input) {
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
    queue[queueEnd] = input;
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <insertQueue+0x38>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	490b      	ldr	r1, [pc, #44]	; (8002c34 <insertQueue+0x3c>)
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    queueEnd++;
 8002c0c:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <insertQueue+0x38>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	4a07      	ldr	r2, [pc, #28]	; (8002c30 <insertQueue+0x38>)
 8002c14:	6013      	str	r3, [r2, #0]

    if (queueEnd == 512) {
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <insertQueue+0x38>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1e:	d102      	bne.n	8002c26 <insertQueue+0x2e>
        queueEnd = 0;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <insertQueue+0x38>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20001034 	.word	0x20001034
 8002c34:	20000830 	.word	0x20000830

08002c38 <popQueueFront>:

void popQueueFront()
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
    free(queueFront());
 8002c3c:	f000 f816 	bl	8002c6c <queueFront>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fca4 	bl	8006590 <free>

    queueStart++;
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <popQueueFront+0x30>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <popQueueFront+0x30>)
 8002c50:	6013      	str	r3, [r2, #0]
    if (queueStart == 512) {
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <popQueueFront+0x30>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c5a:	d102      	bne.n	8002c62 <popQueueFront+0x2a>
        queueStart = 0;
 8002c5c:	4b02      	ldr	r3, [pc, #8]	; (8002c68 <popQueueFront+0x30>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20001030 	.word	0x20001030

08002c6c <queueFront>:

struct Cell* queueFront()
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
    return queue[queueStart];
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <queueFront+0x18>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <queueFront+0x1c>)
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20001030 	.word	0x20001030
 8002c88:	20000830 	.word	0x20000830

08002c8c <initElements>:

void initElements()
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
    currPos = newCell(15, 0);           // Sets current position to row 15, column 0
 8002c92:	2100      	movs	r1, #0
 8002c94:	200f      	movs	r0, #15
 8002c96:	f7ff ff99 	bl	8002bcc <newCell>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4a22      	ldr	r2, [pc, #136]	; (8002d28 <initElements+0x9c>)
 8002c9e:	6013      	str	r3, [r2, #0]
    currHead = NORTH;                    // Sets current heading to north
 8002ca0:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <initElements+0xa0>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 17; i++) {
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e013      	b.n	8002cd4 <initElements+0x48>
        for (int j = 0; j < 16; j++) {
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	e00a      	b.n	8002cc8 <initElements+0x3c>
            horzWall[i][j] = 0;
 8002cb2:	491f      	ldr	r1, [pc, #124]	; (8002d30 <initElements+0xa4>)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	011a      	lsls	r2, r3, #4
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4413      	add	r3, r2
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < 16; j++) {
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b0f      	cmp	r3, #15
 8002ccc:	ddf1      	ble.n	8002cb2 <initElements+0x26>
    for (int i = 0; i < 17; i++) {
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	dde8      	ble.n	8002cac <initElements+0x20>
        }
    }

    for (int i = 0; i < 16; i++) {
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	e015      	b.n	8002d0c <initElements+0x80>
        for (int j = 0; j < 17; j++) {
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	e00c      	b.n	8002d00 <initElements+0x74>
            vertWall[i][j] = 0;
 8002ce6:	4913      	ldr	r1, [pc, #76]	; (8002d34 <initElements+0xa8>)
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	4413      	add	r3, r2
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < 17; j++) {
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	ddef      	ble.n	8002ce6 <initElements+0x5a>
    for (int i = 0; i < 16; i++) {
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	dde6      	ble.n	8002ce0 <initElements+0x54>
        }
    }

    queueStart = 0;
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <initElements+0xac>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
    queueEnd = 0;
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <initElements+0xb0>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000428 	.word	0x20000428
 8002d2c:	2000042c 	.word	0x2000042c
 8002d30:	20001038 	.word	0x20001038
 8002d34:	20001478 	.word	0x20001478
 8002d38:	20001030 	.word	0x20001030
 8002d3c:	20001034 	.word	0x20001034

08002d40 <setWall>:

void setWall(int dir)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
    switch (dir)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d844      	bhi.n	8002dd8 <setWall+0x98>
 8002d4e:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <setWall+0x14>)
 8002d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d7f 	.word	0x08002d7f
 8002d5c:	08002d9f 	.word	0x08002d9f
 8002d60:	08002dbb 	.word	0x08002dbb
    {
    case NORTH:
        horzWall[currPos->row][currPos->col] = 1;   // Sets the 2D array value to 1 to represent true (there's no bool type in C)
 8002d64:	4b1f      	ldr	r3, [pc, #124]	; (8002de4 <setWall+0xa4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <setWall+0xa4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	491d      	ldr	r1, [pc, #116]	; (8002de8 <setWall+0xa8>)
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	4413      	add	r3, r2
 8002d76:	2201      	movs	r2, #1
 8002d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        break;
 8002d7c:	e02c      	b.n	8002dd8 <setWall+0x98>
    case EAST:
        vertWall[currPos->row][currPos->col + 1] = 1;   // May need to check 2D array logic my head hurts lol
 8002d7e:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <setWall+0xa4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <setWall+0xa4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	1c59      	adds	r1, r3, #1
 8002d8c:	4817      	ldr	r0, [pc, #92]	; (8002dec <setWall+0xac>)
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	440b      	add	r3, r1
 8002d96:	2201      	movs	r2, #1
 8002d98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        break;
 8002d9c:	e01c      	b.n	8002dd8 <setWall+0x98>
    case SOUTH:
        horzWall[currPos->row + 1][currPos->col] = 1;
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <setWall+0xa4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <setWall+0xa4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	490e      	ldr	r1, [pc, #56]	; (8002de8 <setWall+0xa8>)
 8002dae:	0112      	lsls	r2, r2, #4
 8002db0:	4413      	add	r3, r2
 8002db2:	2201      	movs	r2, #1
 8002db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        break;
 8002db8:	e00e      	b.n	8002dd8 <setWall+0x98>
    case WEST:
        vertWall[currPos->row][currPos->col] = 1;
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <setWall+0xa4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <setWall+0xa4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	4809      	ldr	r0, [pc, #36]	; (8002dec <setWall+0xac>)
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	4413      	add	r3, r2
 8002dce:	440b      	add	r3, r1
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        break;
 8002dd6:	bf00      	nop
    }
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000428 	.word	0x20000428
 8002de8:	20001038 	.word	0x20001038
 8002dec:	20001478 	.word	0x20001478

08002df0 <detectWalls>:

void detectWalls()
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
    switch (currHead)
 8002df4:	4b3e      	ldr	r3, [pc, #248]	; (8002ef0 <detectWalls+0x100>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d876      	bhi.n	8002eea <detectWalls+0xfa>
 8002dfc:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <detectWalls+0x14>)
 8002dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e02:	bf00      	nop
 8002e04:	08002e15 	.word	0x08002e15
 8002e08:	08002e47 	.word	0x08002e47
 8002e0c:	08002e79 	.word	0x08002e79
 8002e10:	08002eab 	.word	0x08002eab
    {
    case NORTH:
        if (frontWallCheck())
 8002e14:	f000 fd8e 	bl	8003934 <frontWallCheck>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <detectWalls+0x34>
        {
            setWall(NORTH);
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f7ff ff8e 	bl	8002d40 <setWall>
        }
        if (leftWallCheck())
 8002e24:	f000 fd4e 	bl	80038c4 <leftWallCheck>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <detectWalls+0x44>
        {
            setWall(WEST);
 8002e2e:	2003      	movs	r0, #3
 8002e30:	f7ff ff86 	bl	8002d40 <setWall>
        }
        if (rightWallCheck())
 8002e34:	f000 fd62 	bl	80038fc <rightWallCheck>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d04e      	beq.n	8002edc <detectWalls+0xec>
        {
            setWall(EAST);
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f7ff ff7e 	bl	8002d40 <setWall>
        }
        break;
 8002e44:	e04a      	b.n	8002edc <detectWalls+0xec>
    case EAST:
        if (frontWallCheck())
 8002e46:	f000 fd75 	bl	8003934 <frontWallCheck>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <detectWalls+0x66>
        {
            setWall(EAST);
 8002e50:	2001      	movs	r0, #1
 8002e52:	f7ff ff75 	bl	8002d40 <setWall>
        }
        if (leftWallCheck())
 8002e56:	f000 fd35 	bl	80038c4 <leftWallCheck>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <detectWalls+0x76>
        {
            setWall(NORTH);
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7ff ff6d 	bl	8002d40 <setWall>
        }
        if (rightWallCheck())
 8002e66:	f000 fd49 	bl	80038fc <rightWallCheck>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d037      	beq.n	8002ee0 <detectWalls+0xf0>
        {
            setWall(SOUTH);
 8002e70:	2002      	movs	r0, #2
 8002e72:	f7ff ff65 	bl	8002d40 <setWall>
        }
        break;
 8002e76:	e033      	b.n	8002ee0 <detectWalls+0xf0>
    case SOUTH:
        if (frontWallCheck())
 8002e78:	f000 fd5c 	bl	8003934 <frontWallCheck>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <detectWalls+0x98>
        {
            setWall(SOUTH);
 8002e82:	2002      	movs	r0, #2
 8002e84:	f7ff ff5c 	bl	8002d40 <setWall>
        }
        if (leftWallCheck())
 8002e88:	f000 fd1c 	bl	80038c4 <leftWallCheck>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <detectWalls+0xa8>
        {
            setWall(EAST);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7ff ff54 	bl	8002d40 <setWall>
        }
        if (rightWallCheck())
 8002e98:	f000 fd30 	bl	80038fc <rightWallCheck>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d020      	beq.n	8002ee4 <detectWalls+0xf4>
        {
            setWall(WEST);
 8002ea2:	2003      	movs	r0, #3
 8002ea4:	f7ff ff4c 	bl	8002d40 <setWall>
        }
        break;
 8002ea8:	e01c      	b.n	8002ee4 <detectWalls+0xf4>
    case WEST:
        if (frontWallCheck())
 8002eaa:	f000 fd43 	bl	8003934 <frontWallCheck>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <detectWalls+0xca>
        {
            setWall(WEST);
 8002eb4:	2003      	movs	r0, #3
 8002eb6:	f7ff ff43 	bl	8002d40 <setWall>
        }
        if (leftWallCheck())
 8002eba:	f000 fd03 	bl	80038c4 <leftWallCheck>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <detectWalls+0xda>
        {
            setWall(SOUTH);
 8002ec4:	2002      	movs	r0, #2
 8002ec6:	f7ff ff3b 	bl	8002d40 <setWall>
        }
        if (rightWallCheck())
 8002eca:	f000 fd17 	bl	80038fc <rightWallCheck>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d009      	beq.n	8002ee8 <detectWalls+0xf8>
        {
            setWall(NORTH);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7ff ff33 	bl	8002d40 <setWall>
        }
        break;
 8002eda:	e005      	b.n	8002ee8 <detectWalls+0xf8>
        break;
 8002edc:	bf00      	nop
 8002ede:	e004      	b.n	8002eea <detectWalls+0xfa>
        break;
 8002ee0:	bf00      	nop
 8002ee2:	e002      	b.n	8002eea <detectWalls+0xfa>
        break;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <detectWalls+0xfa>
        break;
 8002ee8:	bf00      	nop
    }
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	2000042c 	.word	0x2000042c

08002ef4 <recalculate>:

void recalculate()
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
    queueStart = 0;
 8002efa:	4b90      	ldr	r3, [pc, #576]	; (800313c <recalculate+0x248>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
    queueEnd = 0;
 8002f00:	4b8f      	ldr	r3, [pc, #572]	; (8003140 <recalculate+0x24c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

    // Mark all cells as -1, meaning that they have not had their Manhattan set yet
    for (int j = 0; j < 16; j++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e014      	b.n	8002f36 <recalculate+0x42>
    {
        for (int i = 0; i < 16; i++)
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	e00b      	b.n	8002f2a <recalculate+0x36>
        {
            Manhattans[i][j] = -1;
 8002f12:	498c      	ldr	r1, [pc, #560]	; (8003144 <recalculate+0x250>)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	011a      	lsls	r2, r3, #4
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < 16; i++)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	3301      	adds	r3, #1
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b0f      	cmp	r3, #15
 8002f2e:	ddf0      	ble.n	8002f12 <recalculate+0x1e>
    for (int j = 0; j < 16; j++)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3301      	adds	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b0f      	cmp	r3, #15
 8002f3a:	dde7      	ble.n	8002f0c <recalculate+0x18>
        }
    }

    if(goToCenter)
 8002f3c:	4b82      	ldr	r3, [pc, #520]	; (8003148 <recalculate+0x254>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <recalculate+0x6a>
//        insertQueue(newCell(7, 7));
//        insertQueue(newCell(7, 8));
//        insertQueue(newCell(8, 7));
//        insertQueue(newCell(8, 8));

    	Manhattans[12][0] = 0;
 8002f44:	4b7f      	ldr	r3, [pc, #508]	; (8003144 <recalculate+0x250>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    	insertQueue(newCell(12, 0));
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	200c      	movs	r0, #12
 8002f50:	f7ff fe3c 	bl	8002bcc <newCell>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fe4e 	bl	8002bf8 <insertQueue>
 8002f5c:	e0e1      	b.n	8003122 <recalculate+0x22e>
    }

    else
    {
        // Set starting cell to 0, insert starting cell into queue (set start as destination)
        Manhattans[15][0] = 0;
 8002f5e:	4b79      	ldr	r3, [pc, #484]	; (8003144 <recalculate+0x250>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
        insertQueue(newCell(15, 0));
 8002f66:	2100      	movs	r1, #0
 8002f68:	200f      	movs	r0, #15
 8002f6a:	f7ff fe2f 	bl	8002bcc <newCell>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fe41 	bl	8002bf8 <insertQueue>
    }


    //while queue is not empty
    while (queueStart != queueEnd) {
 8002f76:	e0d4      	b.n	8003122 <recalculate+0x22e>

        struct Cell* currElement = queueFront();
 8002f78:	f7ff fe78 	bl	8002c6c <queueFront>
 8002f7c:	60f8      	str	r0, [r7, #12]

        int currRow = currElement->row;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60bb      	str	r3, [r7, #8]
        int currCol = currElement->col;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	607b      	str	r3, [r7, #4]

        // For all accessable neighbors with no set Manhattan distance, add cell to queue and set Manhattan to current Manhattan + 1

        //north wall
        if (currRow > 0 && horzWall[currRow][currCol] != 1 && Manhattans[currRow - 1][currCol] == -1) {
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	dd2d      	ble.n	8002fec <recalculate+0xf8>
 8002f90:	496e      	ldr	r1, [pc, #440]	; (800314c <recalculate+0x258>)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	011a      	lsls	r2, r3, #4
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d024      	beq.n	8002fec <recalculate+0xf8>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	4967      	ldr	r1, [pc, #412]	; (8003144 <recalculate+0x250>)
 8002fa8:	011a      	lsls	r2, r3, #4
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d119      	bne.n	8002fec <recalculate+0xf8>
            Manhattans[currRow - 1][currCol] = Manhattans[currRow][currCol] + 1;
 8002fb8:	4962      	ldr	r1, [pc, #392]	; (8003144 <recalculate+0x250>)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	011a      	lsls	r2, r3, #4
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	3201      	adds	r2, #1
 8002fcc:	485d      	ldr	r0, [pc, #372]	; (8003144 <recalculate+0x250>)
 8002fce:	0119      	lsls	r1, r3, #4
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            insertQueue(newCell(currRow - 1, currCol));
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fdf4 	bl	8002bcc <newCell>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fe06 	bl	8002bf8 <insertQueue>
        }
        //east wall
        if (currCol < 15 && vertWall[currRow][currCol + 1] != 1 && Manhattans[currRow][currCol + 1] == -1) {
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b0e      	cmp	r3, #14
 8002ff0:	dc30      	bgt.n	8003054 <recalculate+0x160>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	1c59      	adds	r1, r3, #1
 8002ff6:	4856      	ldr	r0, [pc, #344]	; (8003150 <recalculate+0x25c>)
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4413      	add	r3, r2
 8003000:	440b      	add	r3, r1
 8003002:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d024      	beq.n	8003054 <recalculate+0x160>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3301      	adds	r3, #1
 800300e:	494d      	ldr	r1, [pc, #308]	; (8003144 <recalculate+0x250>)
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	0112      	lsls	r2, r2, #4
 8003014:	4413      	add	r3, r2
 8003016:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d119      	bne.n	8003054 <recalculate+0x160>
            Manhattans[currRow][currCol + 1] = Manhattans[currRow][currCol] + 1;
 8003020:	4948      	ldr	r1, [pc, #288]	; (8003144 <recalculate+0x250>)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	011a      	lsls	r2, r3, #4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3301      	adds	r3, #1
 8003032:	3201      	adds	r2, #1
 8003034:	4843      	ldr	r0, [pc, #268]	; (8003144 <recalculate+0x250>)
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	0109      	lsls	r1, r1, #4
 800303a:	440b      	add	r3, r1
 800303c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            insertQueue(newCell(currRow, currCol + 1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3301      	adds	r3, #1
 8003044:	4619      	mov	r1, r3
 8003046:	68b8      	ldr	r0, [r7, #8]
 8003048:	f7ff fdc0 	bl	8002bcc <newCell>
 800304c:	4603      	mov	r3, r0
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fdd2 	bl	8002bf8 <insertQueue>
        }
        //south wall
        if (currRow < 15 && horzWall[currRow + 1][currCol] != 1 && Manhattans[currRow + 1][currCol] == -1) {
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b0e      	cmp	r3, #14
 8003058:	dc2e      	bgt.n	80030b8 <recalculate+0x1c4>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3301      	adds	r3, #1
 800305e:	493b      	ldr	r1, [pc, #236]	; (800314c <recalculate+0x258>)
 8003060:	011a      	lsls	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d024      	beq.n	80030b8 <recalculate+0x1c4>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	3301      	adds	r3, #1
 8003072:	4934      	ldr	r1, [pc, #208]	; (8003144 <recalculate+0x250>)
 8003074:	011a      	lsls	r2, r3, #4
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d119      	bne.n	80030b8 <recalculate+0x1c4>
            Manhattans[currRow + 1][currCol] = Manhattans[currRow][currCol] + 1;
 8003084:	492f      	ldr	r1, [pc, #188]	; (8003144 <recalculate+0x250>)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	011a      	lsls	r2, r3, #4
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3301      	adds	r3, #1
 8003096:	3201      	adds	r2, #1
 8003098:	482a      	ldr	r0, [pc, #168]	; (8003144 <recalculate+0x250>)
 800309a:	0119      	lsls	r1, r3, #4
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	440b      	add	r3, r1
 80030a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            insertQueue(newCell(currRow + 1, currCol));
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	3301      	adds	r3, #1
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fd8e 	bl	8002bcc <newCell>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fda0 	bl	8002bf8 <insertQueue>
        }
        //west wall
        if (currCol > 0 && vertWall[currRow][currCol] != 1 && Manhattans[currRow][currCol - 1] == -1) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	dd2f      	ble.n	800311e <recalculate+0x22a>
 80030be:	4924      	ldr	r1, [pc, #144]	; (8003150 <recalculate+0x25c>)
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	4413      	add	r3, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d024      	beq.n	800311e <recalculate+0x22a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	491a      	ldr	r1, [pc, #104]	; (8003144 <recalculate+0x250>)
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	4413      	add	r3, r2
 80030e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d119      	bne.n	800311e <recalculate+0x22a>
            Manhattans[currRow][currCol - 1] = Manhattans[currRow][currCol] + 1;
 80030ea:	4916      	ldr	r1, [pc, #88]	; (8003144 <recalculate+0x250>)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	011a      	lsls	r2, r3, #4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	3201      	adds	r2, #1
 80030fe:	4811      	ldr	r0, [pc, #68]	; (8003144 <recalculate+0x250>)
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	0109      	lsls	r1, r1, #4
 8003104:	440b      	add	r3, r1
 8003106:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            insertQueue(newCell(currRow, currCol - 1));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3b01      	subs	r3, #1
 800310e:	4619      	mov	r1, r3
 8003110:	68b8      	ldr	r0, [r7, #8]
 8003112:	f7ff fd5b 	bl	8002bcc <newCell>
 8003116:	4603      	mov	r3, r0
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fd6d 	bl	8002bf8 <insertQueue>
        }

        // Deletes cell from queue and frees memory
        popQueueFront();
 800311e:	f7ff fd8b 	bl	8002c38 <popQueueFront>
    while (queueStart != queueEnd) {
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <recalculate+0x248>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <recalculate+0x24c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	f47f af24 	bne.w	8002f78 <recalculate+0x84>
    }
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20001030 	.word	0x20001030
 8003140:	20001034 	.word	0x20001034
 8003144:	20000430 	.word	0x20000430
 8003148:	20000004 	.word	0x20000004
 800314c:	20001038 	.word	0x20001038
 8003150:	20001478 	.word	0x20001478

08003154 <solver>:

Action solver(Algorithm alg) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	71fb      	strb	r3, [r7, #7]
    switch (alg)
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <solver+0x16>
 8003164:	2b01      	cmp	r3, #1
 8003166:	d004      	beq.n	8003172 <solver+0x1e>
 8003168:	e007      	b.n	800317a <solver+0x26>
    {
    case DEAD:
    	return deadReckoning();
 800316a:	f000 f80b 	bl	8003184 <deadReckoning>
 800316e:	4603      	mov	r3, r0
 8003170:	e004      	b.n	800317c <solver+0x28>
    	break;
    case FLOODFILL:
    	return floodFill();
 8003172:	f000 f81b 	bl	80031ac <floodFill>
 8003176:	4603      	mov	r3, r0
 8003178:	e000      	b.n	800317c <solver+0x28>
    	break;
    default:
    	return FORWARD;
 800317a:	2301      	movs	r3, #1
    }
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <deadReckoning>:

Action deadReckoning() {       // The simple left wall following algorithm that they provided
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
	if (!frontWallCheck())
 8003188:	f000 fbd4 	bl	8003934 <frontWallCheck>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <deadReckoning+0x12>
	{
		return FORWARD;
 8003192:	2301      	movs	r3, #1
 8003194:	e007      	b.n	80031a6 <deadReckoning+0x22>
	}
	else if (!rightWallCheck())
 8003196:	f000 fbb1 	bl	80038fc <rightWallCheck>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <deadReckoning+0x20>
	{
		return RIGHT;
 80031a0:	2302      	movs	r3, #2
 80031a2:	e000      	b.n	80031a6 <deadReckoning+0x22>
	}
	else
	{
		return LEFT;
 80031a4:	2300      	movs	r3, #0
	}
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <floodFill>:

Action floodFill() {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
    // Initializes all the elements and calculates Manhattan distances
    if (!initialized)
 80031b2:	4b9e      	ldr	r3, [pc, #632]	; (800342c <floodFill+0x280>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <floodFill+0x1c>
    {
        initElements();
 80031ba:	f7ff fd67 	bl	8002c8c <initElements>
        recalculate();
 80031be:	f7ff fe99 	bl	8002ef4 <recalculate>
        initialized = 1;
 80031c2:	4b9a      	ldr	r3, [pc, #616]	; (800342c <floodFill+0x280>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
    }

    // Lights up detected walls and adds them to the 2D wall arrays
    detectWalls();
 80031c8:	f7ff fe12 	bl	8002df0 <detectWalls>

    // Display all Manhattan distances in the API dispaly

    int row = currPos->row;
 80031cc:	4b98      	ldr	r3, [pc, #608]	; (8003430 <floodFill+0x284>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61bb      	str	r3, [r7, #24]
    int col = currPos->col;
 80031d4:	4b96      	ldr	r3, [pc, #600]	; (8003430 <floodFill+0x284>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	617b      	str	r3, [r7, #20]

    // If goal has already been reached, set new destination to either middle or starting cell
    if (Manhattans[row][col] == 0)
 80031dc:	4995      	ldr	r1, [pc, #596]	; (8003434 <floodFill+0x288>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	011a      	lsls	r2, r3, #4
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4413      	add	r3, r2
 80031e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10e      	bne.n	800320c <floodFill+0x60>
    {
        if (goToCenter)
 80031ee:	4b92      	ldr	r3, [pc, #584]	; (8003438 <floodFill+0x28c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <floodFill+0x52>
            goToCenter = 0; // Destination is now Starting Cell
 80031f6:	4b90      	ldr	r3, [pc, #576]	; (8003438 <floodFill+0x28c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e002      	b.n	8003204 <floodFill+0x58>
        else
            goToCenter = 1; // Destination is now middle four
 80031fe:	4b8e      	ldr	r3, [pc, #568]	; (8003438 <floodFill+0x28c>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

        recalculate();
 8003204:	f7ff fe76 	bl	8002ef4 <recalculate>
        return IDLE;
 8003208:	2303      	movs	r3, #3
 800320a:	e10a      	b.n	8003422 <floodFill+0x276>
    }

    int northBlocked = horzWall[row][col];
 800320c:	498b      	ldr	r1, [pc, #556]	; (800343c <floodFill+0x290>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	011a      	lsls	r2, r3, #4
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	4413      	add	r3, r2
 8003216:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800321a:	613b      	str	r3, [r7, #16]
    int eastBlocked = vertWall[row][col + 1];
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	1c59      	adds	r1, r3, #1
 8003220:	4887      	ldr	r0, [pc, #540]	; (8003440 <floodFill+0x294>)
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	4413      	add	r3, r2
 800322a:	440b      	add	r3, r1
 800322c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003230:	60fb      	str	r3, [r7, #12]
    int southBlocked = horzWall[row + 1][col];
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	3301      	adds	r3, #1
 8003236:	4981      	ldr	r1, [pc, #516]	; (800343c <floodFill+0x290>)
 8003238:	011a      	lsls	r2, r3, #4
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	4413      	add	r3, r2
 800323e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003242:	60bb      	str	r3, [r7, #8]
    int westBlocked = vertWall[row][col];
 8003244:	497e      	ldr	r1, [pc, #504]	; (8003440 <floodFill+0x294>)
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	4413      	add	r3, r2
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4413      	add	r3, r2
 8003252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003256:	607b      	str	r3, [r7, #4]

    // Find next heading
    int nextHead = -1;
 8003258:	f04f 33ff 	mov.w	r3, #4294967295
 800325c:	61fb      	str	r3, [r7, #28]

    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d015      	beq.n	8003290 <floodFill+0xe4>
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	3b01      	subs	r3, #1
 8003268:	4972      	ldr	r1, [pc, #456]	; (8003434 <floodFill+0x288>)
 800326a:	011a      	lsls	r2, r3, #4
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	4413      	add	r3, r2
 8003270:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003274:	486f      	ldr	r0, [pc, #444]	; (8003434 <floodFill+0x288>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	0119      	lsls	r1, r3, #4
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	440b      	add	r3, r1
 800327e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003282:	429a      	cmp	r2, r3
 8003284:	da04      	bge.n	8003290 <floodFill+0xe4>
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <floodFill+0xe4>
        nextHead = NORTH;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
    if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b0f      	cmp	r3, #15
 8003294:	d015      	beq.n	80032c2 <floodFill+0x116>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3301      	adds	r3, #1
 800329a:	4966      	ldr	r1, [pc, #408]	; (8003434 <floodFill+0x288>)
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	4413      	add	r3, r2
 80032a2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80032a6:	4863      	ldr	r0, [pc, #396]	; (8003434 <floodFill+0x288>)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	0119      	lsls	r1, r3, #4
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	440b      	add	r3, r1
 80032b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	da04      	bge.n	80032c2 <floodFill+0x116>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <floodFill+0x116>
        nextHead = EAST;
 80032be:	2301      	movs	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
    if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b0f      	cmp	r3, #15
 80032c6:	d015      	beq.n	80032f4 <floodFill+0x148>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	3301      	adds	r3, #1
 80032cc:	4959      	ldr	r1, [pc, #356]	; (8003434 <floodFill+0x288>)
 80032ce:	011a      	lsls	r2, r3, #4
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	4413      	add	r3, r2
 80032d4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80032d8:	4856      	ldr	r0, [pc, #344]	; (8003434 <floodFill+0x288>)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	0119      	lsls	r1, r3, #4
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	440b      	add	r3, r1
 80032e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	da04      	bge.n	80032f4 <floodFill+0x148>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <floodFill+0x148>
        nextHead = SOUTH;
 80032f0:	2302      	movs	r3, #2
 80032f2:	61fb      	str	r3, [r7, #28]
    if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d015      	beq.n	8003326 <floodFill+0x17a>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	494d      	ldr	r1, [pc, #308]	; (8003434 <floodFill+0x288>)
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	0112      	lsls	r2, r2, #4
 8003304:	4413      	add	r3, r2
 8003306:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800330a:	484a      	ldr	r0, [pc, #296]	; (8003434 <floodFill+0x288>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	0119      	lsls	r1, r3, #4
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	440b      	add	r3, r1
 8003314:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003318:	429a      	cmp	r2, r3
 800331a:	da04      	bge.n	8003326 <floodFill+0x17a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <floodFill+0x17a>
        nextHead = WEST;
 8003322:	2303      	movs	r3, #3
 8003324:	61fb      	str	r3, [r7, #28]

    // If no path available, then recalculta
    if (nextHead == -1)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d103      	bne.n	8003336 <floodFill+0x18a>
    {
        recalculate();
 800332e:	f7ff fde1 	bl	8002ef4 <recalculate>
        return IDLE;
 8003332:	2303      	movs	r3, #3
 8003334:	e075      	b.n	8003422 <floodFill+0x276>
    }

    // If next heading is in same direction, move forward
    if (nextHead == currHead)
 8003336:	4b43      	ldr	r3, [pc, #268]	; (8003444 <floodFill+0x298>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4293      	cmp	r3, r2
 8003340:	d128      	bne.n	8003394 <floodFill+0x1e8>
    {
        switch (currHead)
 8003342:	4b40      	ldr	r3, [pc, #256]	; (8003444 <floodFill+0x298>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d822      	bhi.n	8003390 <floodFill+0x1e4>
 800334a:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <floodFill+0x1a4>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	08003361 	.word	0x08003361
 8003354:	0800336d 	.word	0x0800336d
 8003358:	08003379 	.word	0x08003379
 800335c:	08003385 	.word	0x08003385
        {
        case NORTH:
            currPos->row--;
 8003360:	4b33      	ldr	r3, [pc, #204]	; (8003430 <floodFill+0x284>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	3a01      	subs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]
            break;
 800336a:	e011      	b.n	8003390 <floodFill+0x1e4>
        case EAST:
            currPos->col++;
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <floodFill+0x284>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	3201      	adds	r2, #1
 8003374:	605a      	str	r2, [r3, #4]
            break;
 8003376:	e00b      	b.n	8003390 <floodFill+0x1e4>
        case SOUTH:
            currPos->row++;
 8003378:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <floodFill+0x284>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	3201      	adds	r2, #1
 8003380:	601a      	str	r2, [r3, #0]
            break;
 8003382:	e005      	b.n	8003390 <floodFill+0x1e4>
        case WEST:
            currPos->col--;
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <floodFill+0x284>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	3a01      	subs	r2, #1
 800338c:	605a      	str	r2, [r3, #4]
            break;
 800338e:	bf00      	nop
        }
        return FORWARD;
 8003390:	2301      	movs	r3, #1
 8003392:	e046      	b.n	8003422 <floodFill+0x276>
    }

    // If next heading is in opposite direction, turn right
    if ((nextHead - currHead) % 2 == 0)
 8003394:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <floodFill+0x298>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10f      	bne.n	80033c6 <floodFill+0x21a>
    {
        if (currHead == WEST)
 80033a6:	4b27      	ldr	r3, [pc, #156]	; (8003444 <floodFill+0x298>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d103      	bne.n	80033b6 <floodFill+0x20a>
            currHead = NORTH;
 80033ae:	4b25      	ldr	r3, [pc, #148]	; (8003444 <floodFill+0x298>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e005      	b.n	80033c2 <floodFill+0x216>
        else
            currHead++;
 80033b6:	4b23      	ldr	r3, [pc, #140]	; (8003444 <floodFill+0x298>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	3301      	adds	r3, #1
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <floodFill+0x298>)
 80033c0:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 80033c2:	2302      	movs	r3, #2
 80033c4:	e02d      	b.n	8003422 <floodFill+0x276>
    }

    // If next heading is right, turn right
    if ((nextHead - currHead) == 1 || nextHead - currHead == -3)
 80033c6:	4b1f      	ldr	r3, [pc, #124]	; (8003444 <floodFill+0x298>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d007      	beq.n	80033e4 <floodFill+0x238>
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <floodFill+0x298>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	f113 0f03 	cmn.w	r3, #3
 80033e2:	d10f      	bne.n	8003404 <floodFill+0x258>
    {
        if (currHead == WEST)
 80033e4:	4b17      	ldr	r3, [pc, #92]	; (8003444 <floodFill+0x298>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d103      	bne.n	80033f4 <floodFill+0x248>
            currHead = NORTH;
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <floodFill+0x298>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e005      	b.n	8003400 <floodFill+0x254>
        else
            currHead++;
 80033f4:	4b13      	ldr	r3, [pc, #76]	; (8003444 <floodFill+0x298>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <floodFill+0x298>)
 80033fe:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 8003400:	2302      	movs	r3, #2
 8003402:	e00e      	b.n	8003422 <floodFill+0x276>
    }

    // else, turn left
    if (currHead == NORTH)
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <floodFill+0x298>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d103      	bne.n	8003414 <floodFill+0x268>
        currHead = WEST;
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <floodFill+0x298>)
 800340e:	2203      	movs	r2, #3
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e005      	b.n	8003420 <floodFill+0x274>
    else
        currHead--;
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <floodFill+0x298>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	3b01      	subs	r3, #1
 800341a:	b2da      	uxtb	r2, r3
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <floodFill+0x298>)
 800341e:	701a      	strb	r2, [r3, #0]
    return LEFT;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000424 	.word	0x20000424
 8003430:	20000428 	.word	0x20000428
 8003434:	20000430 	.word	0x20000430
 8003438:	20000004 	.word	0x20000004
 800343c:	20001038 	.word	0x20001038
 8003440:	20001478 	.word	0x20001478
 8003444:	2000042c 	.word	0x2000042c

08003448 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <HAL_MspInit+0x48>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <HAL_MspInit+0x48>)
 8003458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800345c:	6453      	str	r3, [r2, #68]	; 0x44
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <HAL_MspInit+0x48>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_MspInit+0x48>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a07      	ldr	r2, [pc, #28]	; (8003490 <HAL_MspInit+0x48>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_MspInit+0x48>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	40023800 	.word	0x40023800

08003494 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349c:	f107 0314 	add.w	r3, r7, #20
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a3c      	ldr	r2, [pc, #240]	; (80035a4 <HAL_ADC_MspInit+0x110>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d171      	bne.n	800359a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_ADC_MspInit+0x114>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	4a3a      	ldr	r2, [pc, #232]	; (80035a8 <HAL_ADC_MspInit+0x114>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	6453      	str	r3, [r2, #68]	; 0x44
 80034c6:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_ADC_MspInit+0x114>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <HAL_ADC_MspInit+0x114>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4a33      	ldr	r2, [pc, #204]	; (80035a8 <HAL_ADC_MspInit+0x114>)
 80034dc:	f043 0304 	orr.w	r3, r3, #4
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30
 80034e2:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <HAL_ADC_MspInit+0x114>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_ADC_MspInit+0x114>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4a2c      	ldr	r2, [pc, #176]	; (80035a8 <HAL_ADC_MspInit+0x114>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6313      	str	r3, [r2, #48]	; 0x30
 80034fe:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <HAL_ADC_MspInit+0x114>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 800350a:	2303      	movs	r3, #3
 800350c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800350e:	2303      	movs	r3, #3
 8003510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003516:	f107 0314 	add.w	r3, r7, #20
 800351a:	4619      	mov	r1, r3
 800351c:	4823      	ldr	r0, [pc, #140]	; (80035ac <HAL_ADC_MspInit+0x118>)
 800351e:	f001 fbf3 	bl	8004d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 8003522:	2360      	movs	r3, #96	; 0x60
 8003524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003526:	2303      	movs	r3, #3
 8003528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	4619      	mov	r1, r3
 8003534:	481e      	ldr	r0, [pc, #120]	; (80035b0 <HAL_ADC_MspInit+0x11c>)
 8003536:	f001 fbe7 	bl	8004d08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 800353c:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <HAL_ADC_MspInit+0x124>)
 800353e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003540:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 8003542:	2200      	movs	r2, #0
 8003544:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003546:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003552:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 8003554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003558:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 800355c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003560:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 8003564:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003568:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 800356c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003570:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 8003574:	2200      	movs	r2, #0
 8003576:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003578:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 800357a:	2200      	movs	r2, #0
 800357c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800357e:	480d      	ldr	r0, [pc, #52]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 8003580:	f000 ffe6 	bl	8004550 <HAL_DMA_Init>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800358a:	f7fe fbdd 	bl	8001d48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a08      	ldr	r2, [pc, #32]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
 8003594:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <HAL_ADC_MspInit+0x120>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800359a:	bf00      	nop
 800359c:	3728      	adds	r7, #40	; 0x28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40012000 	.word	0x40012000
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40020800 	.word	0x40020800
 80035b0:	40020000 	.word	0x40020000
 80035b4:	200001e8 	.word	0x200001e8
 80035b8:	40026410 	.word	0x40026410

080035bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <HAL_TIM_PWM_MspInit+0x38>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d10d      	bne.n	80035ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6453      	str	r3, [r2, #68]	; 0x44
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40023800 	.word	0x40023800

080035fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 031c 	add.w	r3, r7, #28
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a32      	ldr	r2, [pc, #200]	; (80036e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d12c      	bne.n	8003678 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a30      	ldr	r2, [pc, #192]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a29      	ldr	r2, [pc, #164]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8003656:	2330      	movs	r3, #48	; 0x30
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003666:	2302      	movs	r3, #2
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	4619      	mov	r1, r3
 8003670:	481e      	ldr	r0, [pc, #120]	; (80036ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8003672:	f001 fb49 	bl	8004d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003676:	e030      	b.n	80036da <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d12b      	bne.n	80036da <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	6453      	str	r3, [r2, #68]	; 0x44
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80036a8:	f043 0304 	orr.w	r3, r3, #4
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 80036ba:	23c0      	movs	r3, #192	; 0xc0
 80036bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80036ca:	2303      	movs	r3, #3
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ce:	f107 031c 	add.w	r3, r7, #28
 80036d2:	4619      	mov	r1, r3
 80036d4:	4807      	ldr	r0, [pc, #28]	; (80036f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80036d6:	f001 fb17 	bl	8004d08 <HAL_GPIO_Init>
}
 80036da:	bf00      	nop
 80036dc:	3730      	adds	r7, #48	; 0x30
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40020400 	.word	0x40020400
 80036f0:	40010400 	.word	0x40010400
 80036f4:	40020800 	.word	0x40020800

080036f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a12      	ldr	r2, [pc, #72]	; (8003760 <HAL_TIM_MspPostInit+0x68>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d11e      	bne.n	8003758 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <HAL_TIM_MspPostInit+0x6c>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a10      	ldr	r2, [pc, #64]	; (8003764 <HAL_TIM_MspPostInit+0x6c>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_TIM_MspPostInit+0x6c>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8003736:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800373a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	2302      	movs	r3, #2
 800373e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003748:	2301      	movs	r3, #1
 800374a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374c:	f107 030c 	add.w	r3, r7, #12
 8003750:	4619      	mov	r1, r3
 8003752:	4805      	ldr	r0, [pc, #20]	; (8003768 <HAL_TIM_MspPostInit+0x70>)
 8003754:	f001 fad8 	bl	8004d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003758:	bf00      	nop
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40010000 	.word	0x40010000
 8003764:	40023800 	.word	0x40023800
 8003768:	40020000 	.word	0x40020000

0800376c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003770:	e7fe      	b.n	8003770 <NMI_Handler+0x4>

08003772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003776:	e7fe      	b.n	8003776 <HardFault_Handler+0x4>

08003778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800377c:	e7fe      	b.n	800377c <MemManage_Handler+0x4>

0800377e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003782:	e7fe      	b.n	8003782 <BusFault_Handler+0x4>

08003784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003788:	e7fe      	b.n	8003788 <UsageFault_Handler+0x4>

0800378a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037a2:	b480      	push	{r7}
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b2:	f000 f975 	bl	8003aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  SysTickFunction();
 80037b6:	f000 f849 	bl	800384c <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037c4:	4802      	ldr	r0, [pc, #8]	; (80037d0 <DMA2_Stream0_IRQHandler+0x10>)
 80037c6:	f001 f839 	bl	800483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200001e8 	.word	0x200001e8

080037d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <_sbrk+0x5c>)
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <_sbrk+0x60>)
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037e8:	4b13      	ldr	r3, [pc, #76]	; (8003838 <_sbrk+0x64>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <_sbrk+0x64>)
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <_sbrk+0x68>)
 80037f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037f6:	4b10      	ldr	r3, [pc, #64]	; (8003838 <_sbrk+0x64>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	429a      	cmp	r2, r3
 8003802:	d207      	bcs.n	8003814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003804:	f002 fe92 	bl	800652c <__errno>
 8003808:	4603      	mov	r3, r0
 800380a:	220c      	movs	r2, #12
 800380c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295
 8003812:	e009      	b.n	8003828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003814:	4b08      	ldr	r3, [pc, #32]	; (8003838 <_sbrk+0x64>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <_sbrk+0x64>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	4a05      	ldr	r2, [pc, #20]	; (8003838 <_sbrk+0x64>)
 8003824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003826:	68fb      	ldr	r3, [r7, #12]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20020000 	.word	0x20020000
 8003834:	00000400 	.word	0x00000400
 8003838:	200018b8 	.word	0x200018b8
 800383c:	200018d8 	.word	0x200018d8

08003840 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <SysTickFunction>:

#include "main.h"
#include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 8003852:	f7fe fe6d 	bl	8002530 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8003856:	f7fd fd89 	bl	800136c <getRightEncoderCounts>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	f647 1318 	movw	r3, #31000	; 0x7918
 8003862:	429a      	cmp	r2, r3
 8003864:	dc15      	bgt.n	8003892 <SysTickFunction+0x46>
 8003866:	f7fd fd8f 	bl	8001388 <getLeftEncoderCounts>
 800386a:	4603      	mov	r3, r0
 800386c:	461a      	mov	r2, r3
 800386e:	f647 1318 	movw	r3, #31000	; 0x7918
 8003872:	429a      	cmp	r2, r3
 8003874:	dc0d      	bgt.n	8003892 <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8003876:	f7fd fd79 	bl	800136c <getRightEncoderCounts>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <SysTickFunction+0x74>)
 8003880:	429a      	cmp	r2, r3
 8003882:	db06      	blt.n	8003892 <SysTickFunction+0x46>
 8003884:	f7fd fd80 	bl	8001388 <getLeftEncoderCounts>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <SysTickFunction+0x74>)
 800388e:	429a      	cmp	r2, r3
 8003890:	da11      	bge.n	80038b6 <SysTickFunction+0x6a>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8003892:	f7fd fd6b 	bl	800136c <getRightEncoderCounts>
 8003896:	4603      	mov	r3, r0
 8003898:	b29c      	uxth	r4, r3
 800389a:	f7fd fd75 	bl	8001388 <getLeftEncoderCounts>
 800389e:	4603      	mov	r3, r0
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	1ae3      	subs	r3, r4, r3
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 80038a8:	f7fd fd7c 	bl	80013a4 <resetEncoders>
		TIM2->CNT = (int16_t) difference;
 80038ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038b4:	6253      	str	r3, [r2, #36]	; 0x24
	}
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd90      	pop	{r4, r7, pc}
 80038be:	bf00      	nop
 80038c0:	ffff86e8 	.word	0xffff86e8

080038c4 <leftWallCheck>:

void setLeftWall(int wall) { left_wall_threshold = wall; }
void setRightWall(int wall) { right_wall_threshold = wall; }
void setFrontWall(int wall) { front_wall_threshold = wall; }

int16_t leftWallCheck() {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	if (readIR(IR_LEFT) > left_wall_threshold) {
 80038c8:	2001      	movs	r0, #1
 80038ca:	f7fd fd7b 	bl	80013c4 <readIR>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <leftWallCheck+0x30>)
 80038d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d8:	429a      	cmp	r2, r3
 80038da:	dd03      	ble.n	80038e4 <leftWallCheck+0x20>
		left_wall = 1;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <leftWallCheck+0x34>)
 80038de:	2201      	movs	r2, #1
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	e002      	b.n	80038ea <leftWallCheck+0x26>
	}
	else {
		left_wall = 0;
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <leftWallCheck+0x34>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	801a      	strh	r2, [r3, #0]
	}
	return left_wall;
 80038ea:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <leftWallCheck+0x34>)
 80038ec:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	2000000c 	.word	0x2000000c
 80038f8:	200018bc 	.word	0x200018bc

080038fc <rightWallCheck>:

int16_t rightWallCheck() {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
	if (readIR(IR_RIGHT) > right_wall_threshold) {
 8003900:	2002      	movs	r0, #2
 8003902:	f7fd fd5f 	bl	80013c4 <readIR>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <rightWallCheck+0x30>)
 800390c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003910:	429a      	cmp	r2, r3
 8003912:	dd03      	ble.n	800391c <rightWallCheck+0x20>
		right_wall = 1;
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <rightWallCheck+0x34>)
 8003916:	2201      	movs	r2, #1
 8003918:	801a      	strh	r2, [r3, #0]
 800391a:	e002      	b.n	8003922 <rightWallCheck+0x26>
	}
	else {
		right_wall = 0;
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <rightWallCheck+0x34>)
 800391e:	2200      	movs	r2, #0
 8003920:	801a      	strh	r2, [r3, #0]
	}
	return right_wall;
 8003922:	4b03      	ldr	r3, [pc, #12]	; (8003930 <rightWallCheck+0x34>)
 8003924:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd80      	pop	{r7, pc}
 800392c:	2000000e 	.word	0x2000000e
 8003930:	200018be 	.word	0x200018be

08003934 <frontWallCheck>:

int16_t frontWallCheck() {
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
	if (readIR(IR_FORWARD_LEFT) > front_wall_threshold) {
 8003938:	2000      	movs	r0, #0
 800393a:	f7fd fd43 	bl	80013c4 <readIR>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <frontWallCheck+0x30>)
 8003944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003948:	429a      	cmp	r2, r3
 800394a:	dd03      	ble.n	8003954 <frontWallCheck+0x20>
		front_wall = 1;
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <frontWallCheck+0x34>)
 800394e:	2201      	movs	r2, #1
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	e002      	b.n	800395a <frontWallCheck+0x26>
	}
	else {
		front_wall = 0;
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <frontWallCheck+0x34>)
 8003956:	2200      	movs	r2, #0
 8003958:	801a      	strh	r2, [r3, #0]
	}
	return front_wall;
 800395a:	4b03      	ldr	r3, [pc, #12]	; (8003968 <frontWallCheck+0x34>)
 800395c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000010 	.word	0x20000010
 8003968:	200018c0 	.word	0x200018c0

0800396c <sign>:

int16_t sign(float x) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	if (x > 0)
 8003974:	f04f 0100 	mov.w	r1, #0
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fd faad 	bl	8000ed8 <__aeabi_fcmpgt>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <sign+0x1c>
	{
		return 1;
 8003984:	2301      	movs	r3, #1
 8003986:	e00b      	b.n	80039a0 <sign+0x34>
	}
	else if (x < 0)
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7fd fa85 	bl	8000e9c <__aeabi_fcmplt>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <sign+0x32>
	{
		return -1;
 8003998:	f04f 33ff 	mov.w	r3, #4294967295
 800399c:	e000      	b.n	80039a0 <sign+0x34>
	}
	else
	{
		return 0;
 800399e:	2300      	movs	r3, #0
	}
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039ac:	480d      	ldr	r0, [pc, #52]	; (80039e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039ae:	490e      	ldr	r1, [pc, #56]	; (80039e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039b0:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039b4:	e002      	b.n	80039bc <LoopCopyDataInit>

080039b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ba:	3304      	adds	r3, #4

080039bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039c0:	d3f9      	bcc.n	80039b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039c2:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039c4:	4c0b      	ldr	r4, [pc, #44]	; (80039f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039c8:	e001      	b.n	80039ce <LoopFillZerobss>

080039ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039cc:	3204      	adds	r2, #4

080039ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039d0:	d3fb      	bcc.n	80039ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039d2:	f7ff ff35 	bl	8003840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039d6:	f002 fdaf 	bl	8006538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039da:	f7fd fe15 	bl	8001608 <main>
  bx  lr    
 80039de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039e8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80039ec:	080067e4 	.word	0x080067e4
  ldr r2, =_sbss
 80039f0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80039f4:	200018d8 	.word	0x200018d8

080039f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039f8:	e7fe      	b.n	80039f8 <ADC_IRQHandler>
	...

080039fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <HAL_Init+0x40>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <HAL_Init+0x40>)
 8003a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_Init+0x40>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <HAL_Init+0x40>)
 8003a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a18:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <HAL_Init+0x40>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a07      	ldr	r2, [pc, #28]	; (8003a3c <HAL_Init+0x40>)
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a24:	2003      	movs	r0, #3
 8003a26:	f000 fd51 	bl	80044cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a2a:	200f      	movs	r0, #15
 8003a2c:	f000 f808 	bl	8003a40 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003a30:	f7ff fd0a 	bl	8003448 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023c00 	.word	0x40023c00

08003a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a48:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_InitTick+0x54>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <HAL_InitTick+0x58>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	4619      	mov	r1, r3
 8003a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fd69 	bl	8004536 <HAL_SYSTICK_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e00e      	b.n	8003a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b0f      	cmp	r3, #15
 8003a72:	d80a      	bhi.n	8003a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a74:	2200      	movs	r2, #0
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	f000 fd31 	bl	80044e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a80:	4a06      	ldr	r2, [pc, #24]	; (8003a9c <HAL_InitTick+0x5c>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20000008 	.word	0x20000008
 8003a98:	20000018 	.word	0x20000018
 8003a9c:	20000014 	.word	0x20000014

08003aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_IncTick+0x1c>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_IncTick+0x20>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4413      	add	r3, r2
 8003ab0:	4a03      	ldr	r2, [pc, #12]	; (8003ac0 <HAL_IncTick+0x20>)
 8003ab2:	6013      	str	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr
 8003abc:	20000018 	.word	0x20000018
 8003ac0:	200018c4 	.word	0x200018c4

08003ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ac8:	4b02      	ldr	r3, [pc, #8]	; (8003ad4 <HAL_GetTick+0x10>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	200018c4 	.word	0x200018c4

08003ad8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e033      	b.n	8003b56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fccc 	bl	8003494 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d118      	bne.n	8003b48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b1e:	f023 0302 	bic.w	r3, r3, #2
 8003b22:	f043 0202 	orr.w	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa7a 	bl	8004024 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
 8003b46:	e001      	b.n	8003b4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_Start_DMA+0x1e>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e0bc      	b.n	8003cf8 <HAL_ADC_Start_DMA+0x198>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d018      	beq.n	8003bc6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ba4:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <HAL_ADC_Start_DMA+0x1a0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a56      	ldr	r2, [pc, #344]	; (8003d04 <HAL_ADC_Start_DMA+0x1a4>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	0c9a      	lsrs	r2, r3, #18
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003bb8:	e002      	b.n	8003bc0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f9      	bne.n	8003bba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	f040 8084 	bne.w	8003cde <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d007      	beq.n	8003c08 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c14:	d106      	bne.n	8003c24 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	f023 0206 	bic.w	r2, r3, #6
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
 8003c22:	e002      	b.n	8003c2a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	4a34      	ldr	r2, [pc, #208]	; (8003d08 <HAL_ADC_Start_DMA+0x1a8>)
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	4a33      	ldr	r2, [pc, #204]	; (8003d0c <HAL_ADC_Start_DMA+0x1ac>)
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	4a32      	ldr	r2, [pc, #200]	; (8003d10 <HAL_ADC_Start_DMA+0x1b0>)
 8003c48:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c52:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c62:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c72:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	334c      	adds	r3, #76	; 0x4c
 8003c7e:	4619      	mov	r1, r3
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f000 fd12 	bl	80046ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003c88:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <HAL_ADC_Start_DMA+0x1b4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d129      	bne.n	8003cf6 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	e020      	b.n	8003cf6 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a17      	ldr	r2, [pc, #92]	; (8003d18 <HAL_ADC_Start_DMA+0x1b8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d11b      	bne.n	8003cf6 <HAL_ADC_Start_DMA+0x196>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d114      	bne.n	8003cf6 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	e00b      	b.n	8003cf6 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0210 	orr.w	r2, r3, #16
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000008 	.word	0x20000008
 8003d04:	431bde83 	.word	0x431bde83
 8003d08:	08004231 	.word	0x08004231
 8003d0c:	080042eb 	.word	0x080042eb
 8003d10:	08004307 	.word	0x08004307
 8003d14:	40012300 	.word	0x40012300
 8003d18:	40012000 	.word	0x40012000

08003d1c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_Stop_DMA+0x1a>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e03f      	b.n	8003db6 <HAL_ADC_Stop_DMA+0x9a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d127      	bne.n	8003dac <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d6a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d118      	bne.n	8003dac <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fcec 	bl	800475c <HAL_DMA_Abort>
 8003d84:	4603      	mov	r3, r0
 8003d86:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003d96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x1c>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e103      	b.n	8004008 <HAL_ADC_ConfigChannel+0x224>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b09      	cmp	r3, #9
 8003e0e:	d925      	bls.n	8003e5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68d9      	ldr	r1, [r3, #12]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4613      	mov	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4413      	add	r3, r2
 8003e24:	3b1e      	subs	r3, #30
 8003e26:	2207      	movs	r2, #7
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43da      	mvns	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	400a      	ands	r2, r1
 8003e34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68d9      	ldr	r1, [r3, #12]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4618      	mov	r0, r3
 8003e48:	4603      	mov	r3, r0
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4403      	add	r3, r0
 8003e4e:	3b1e      	subs	r3, #30
 8003e50:	409a      	lsls	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	e022      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6919      	ldr	r1, [r3, #16]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	2207      	movs	r2, #7
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6919      	ldr	r1, [r3, #16]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4618      	mov	r0, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4403      	add	r3, r0
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d824      	bhi.n	8003ef4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	3b05      	subs	r3, #5
 8003ebc:	221f      	movs	r2, #31
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	400a      	ands	r2, r1
 8003eca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	4618      	mov	r0, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3b05      	subs	r3, #5
 8003ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ef2:	e04c      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b0c      	cmp	r3, #12
 8003efa:	d824      	bhi.n	8003f46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3b23      	subs	r3, #35	; 0x23
 8003f0e:	221f      	movs	r2, #31
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43da      	mvns	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	3b23      	subs	r3, #35	; 0x23
 8003f38:	fa00 f203 	lsl.w	r2, r0, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
 8003f44:	e023      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	3b41      	subs	r3, #65	; 0x41
 8003f58:	221f      	movs	r2, #31
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	400a      	ands	r2, r1
 8003f66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	4618      	mov	r0, r3
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	3b41      	subs	r3, #65	; 0x41
 8003f82:	fa00 f203 	lsl.w	r2, r0, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a20      	ldr	r2, [pc, #128]	; (8004014 <HAL_ADC_ConfigChannel+0x230>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d109      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x1c8>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b12      	cmp	r3, #18
 8003f9e:	d105      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <HAL_ADC_ConfigChannel+0x234>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <HAL_ADC_ConfigChannel+0x234>)
 8003fa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003faa:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a18      	ldr	r2, [pc, #96]	; (8004014 <HAL_ADC_ConfigChannel+0x230>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d123      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x21a>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d003      	beq.n	8003fc6 <HAL_ADC_ConfigChannel+0x1e2>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b11      	cmp	r3, #17
 8003fc4:	d11b      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003fc6:	4b14      	ldr	r3, [pc, #80]	; (8004018 <HAL_ADC_ConfigChannel+0x234>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <HAL_ADC_ConfigChannel+0x234>)
 8003fcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fd0:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d111      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_ADC_ConfigChannel+0x238>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a10      	ldr	r2, [pc, #64]	; (8004020 <HAL_ADC_ConfigChannel+0x23c>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	0c9a      	lsrs	r2, r3, #18
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003ff0:	e002      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f9      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40012000 	.word	0x40012000
 8004018:	40012300 	.word	0x40012300
 800401c:	20000008 	.word	0x20000008
 8004020:	431bde83 	.word	0x431bde83

08004024 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800402c:	4b7e      	ldr	r3, [pc, #504]	; (8004228 <ADC_Init+0x204>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a7d      	ldr	r2, [pc, #500]	; (8004228 <ADC_Init+0x204>)
 8004032:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004036:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004038:	4b7b      	ldr	r3, [pc, #492]	; (8004228 <ADC_Init+0x204>)
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4979      	ldr	r1, [pc, #484]	; (8004228 <ADC_Init+0x204>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	021a      	lsls	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6859      	ldr	r1, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800409a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6899      	ldr	r1, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	4a5e      	ldr	r2, [pc, #376]	; (800422c <ADC_Init+0x208>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d022      	beq.n	80040fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6899      	ldr	r1, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6899      	ldr	r1, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	e00f      	b.n	800411e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800410c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800411c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0202 	bic.w	r2, r2, #2
 800412c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6899      	ldr	r1, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7e1b      	ldrb	r3, [r3, #24]
 8004138:	005a      	lsls	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d027      	beq.n	800419c <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800415a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800416a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	3b01      	subs	r3, #1
 8004172:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004176:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	fa92 f2a2 	rbit	r2, r2
 800417e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	fab2 f282 	clz	r2, r2
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	fa03 f102 	lsl.w	r1, r3, r2
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	e007      	b.n	80041ac <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	051a      	lsls	r2, r3, #20
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041ee:	025a      	lsls	r2, r3, #9
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6899      	ldr	r1, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	029a      	lsls	r2, r3, #10
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40012300 	.word	0x40012300
 800422c:	0f000001 	.word	0x0f000001

08004230 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004246:	2b00      	cmp	r3, #0
 8004248:	d13c      	bne.n	80042c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d12b      	bne.n	80042bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004268:	2b00      	cmp	r3, #0
 800426a:	d127      	bne.n	80042bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004284:	2b00      	cmp	r3, #0
 8004286:	d119      	bne.n	80042bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0220 	bic.w	r2, r2, #32
 8004296:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f043 0201 	orr.w	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7fd f967 	bl	8001590 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042c2:	e00e      	b.n	80042e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7ff fd7d 	bl	8003dd0 <HAL_ADC_ErrorCallback>
}
 80042d6:	e004      	b.n	80042e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4798      	blx	r3
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fd60 	bl	8003dbe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff fd52 	bl	8003dd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004350:	4013      	ands	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800435c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004366:	4a04      	ldr	r2, [pc, #16]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	60d3      	str	r3, [r2, #12]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <__NVIC_GetPriorityGrouping+0x18>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	f003 0307 	and.w	r3, r3, #7
}
 800438a:	4618      	mov	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db0b      	blt.n	80043c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	4906      	ldr	r1, [pc, #24]	; (80043cc <__NVIC_EnableIRQ+0x34>)
 80043b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2001      	movs	r0, #1
 80043ba:	fa00 f202 	lsl.w	r2, r0, r2
 80043be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	e000e100 	.word	0xe000e100

080043d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	db0a      	blt.n	80043fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	490c      	ldr	r1, [pc, #48]	; (800441c <__NVIC_SetPriority+0x4c>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	0112      	lsls	r2, r2, #4
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	440b      	add	r3, r1
 80043f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043f8:	e00a      	b.n	8004410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4908      	ldr	r1, [pc, #32]	; (8004420 <__NVIC_SetPriority+0x50>)
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	3b04      	subs	r3, #4
 8004408:	0112      	lsls	r2, r2, #4
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	440b      	add	r3, r1
 800440e:	761a      	strb	r2, [r3, #24]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000e100 	.word	0xe000e100
 8004420:	e000ed00 	.word	0xe000ed00

08004424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f1c3 0307 	rsb	r3, r3, #7
 800443e:	2b04      	cmp	r3, #4
 8004440:	bf28      	it	cs
 8004442:	2304      	movcs	r3, #4
 8004444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3304      	adds	r3, #4
 800444a:	2b06      	cmp	r3, #6
 800444c:	d902      	bls.n	8004454 <NVIC_EncodePriority+0x30>
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3b03      	subs	r3, #3
 8004452:	e000      	b.n	8004456 <NVIC_EncodePriority+0x32>
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004458:	f04f 32ff 	mov.w	r2, #4294967295
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43da      	mvns	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	401a      	ands	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800446c:	f04f 31ff 	mov.w	r1, #4294967295
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	43d9      	mvns	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800447c:	4313      	orrs	r3, r2
         );
}
 800447e:	4618      	mov	r0, r3
 8004480:	3724      	adds	r7, #36	; 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3b01      	subs	r3, #1
 8004494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004498:	d301      	bcc.n	800449e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800449a:	2301      	movs	r3, #1
 800449c:	e00f      	b.n	80044be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800449e:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <SysTick_Config+0x40>)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044a6:	210f      	movs	r1, #15
 80044a8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ac:	f7ff ff90 	bl	80043d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <SysTick_Config+0x40>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044b6:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <SysTick_Config+0x40>)
 80044b8:	2207      	movs	r2, #7
 80044ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	e000e010 	.word	0xe000e010

080044cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff ff2d 	bl	8004334 <__NVIC_SetPriorityGrouping>
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	4603      	mov	r3, r0
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044f4:	f7ff ff42 	bl	800437c <__NVIC_GetPriorityGrouping>
 80044f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	6978      	ldr	r0, [r7, #20]
 8004500:	f7ff ff90 	bl	8004424 <NVIC_EncodePriority>
 8004504:	4602      	mov	r2, r0
 8004506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ff5f 	bl	80043d0 <__NVIC_SetPriority>
}
 8004512:	bf00      	nop
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	4603      	mov	r3, r0
 8004522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff ff35 	bl	8004398 <__NVIC_EnableIRQ>
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff ffa2 	bl	8004488 <SysTick_Config>
 8004544:	4603      	mov	r3, r0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800455c:	f7ff fab2 	bl	8003ac4 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e099      	b.n	80046a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800458c:	e00f      	b.n	80045ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800458e:	f7ff fa99 	bl	8003ac4 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b05      	cmp	r3, #5
 800459a:	d908      	bls.n	80045ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2203      	movs	r2, #3
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e078      	b.n	80046a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e8      	bne.n	800458e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4b38      	ldr	r3, [pc, #224]	; (80046a8 <HAL_DMA_Init+0x158>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	2b04      	cmp	r3, #4
 8004606:	d107      	bne.n	8004618 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	4313      	orrs	r3, r2
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f023 0307 	bic.w	r3, r3, #7
 800462e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b04      	cmp	r3, #4
 8004640:	d117      	bne.n	8004672 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00e      	beq.n	8004672 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fadd 	bl	8004c14 <DMA_CheckFifoParam>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2240      	movs	r2, #64	; 0x40
 8004664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800466e:	2301      	movs	r3, #1
 8004670:	e016      	b.n	80046a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fa96 	bl	8004bac <DMA_CalcBaseAndBitshift>
 8004680:	4603      	mov	r3, r0
 8004682:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	223f      	movs	r2, #63	; 0x3f
 800468a:	409a      	lsls	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	f010803f 	.word	0xf010803f

080046ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_DMA_Start_IT+0x26>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e040      	b.n	8004754 <HAL_DMA_Start_IT+0xa8>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d12f      	bne.n	8004746 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fa28 	bl	8004b50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	223f      	movs	r2, #63	; 0x3f
 8004706:	409a      	lsls	r2, r3
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0216 	orr.w	r2, r2, #22
 800471a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0208 	orr.w	r2, r2, #8
 8004732:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	e005      	b.n	8004752 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800474e:	2302      	movs	r3, #2
 8004750:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004752:	7dfb      	ldrb	r3, [r7, #23]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004768:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800476a:	f7ff f9ab 	bl	8003ac4 <HAL_GetTick>
 800476e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d008      	beq.n	800478e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2280      	movs	r2, #128	; 0x80
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e052      	b.n	8004834 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0216 	bic.w	r2, r2, #22
 800479c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d103      	bne.n	80047be <HAL_DMA_Abort+0x62>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0208 	bic.w	r2, r2, #8
 80047cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047de:	e013      	b.n	8004808 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047e0:	f7ff f970 	bl	8003ac4 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d90c      	bls.n	8004808 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2203      	movs	r2, #3
 80047f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e015      	b.n	8004834 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e4      	bne.n	80047e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	223f      	movs	r2, #63	; 0x3f
 800481c:	409a      	lsls	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004848:	4b8e      	ldr	r3, [pc, #568]	; (8004a84 <HAL_DMA_IRQHandler+0x248>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a8e      	ldr	r2, [pc, #568]	; (8004a88 <HAL_DMA_IRQHandler+0x24c>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	0a9b      	lsrs	r3, r3, #10
 8004854:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004866:	2208      	movs	r2, #8
 8004868:	409a      	lsls	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d01a      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d013      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0204 	bic.w	r2, r2, #4
 800488e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	2208      	movs	r2, #8
 8004896:	409a      	lsls	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	f043 0201 	orr.w	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ac:	2201      	movs	r2, #1
 80048ae:	409a      	lsls	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d012      	beq.n	80048de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00b      	beq.n	80048de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	2201      	movs	r2, #1
 80048cc:	409a      	lsls	r2, r3
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f043 0202 	orr.w	r2, r3, #2
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e2:	2204      	movs	r2, #4
 80048e4:	409a      	lsls	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d012      	beq.n	8004914 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004900:	2204      	movs	r2, #4
 8004902:	409a      	lsls	r2, r3
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490c:	f043 0204 	orr.w	r2, r3, #4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004918:	2210      	movs	r2, #16
 800491a:	409a      	lsls	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d043      	beq.n	80049ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d03c      	beq.n	80049ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	2210      	movs	r2, #16
 8004938:	409a      	lsls	r2, r3
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d018      	beq.n	800497e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d108      	bne.n	800496c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d024      	beq.n	80049ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
 800496a:	e01f      	b.n	80049ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01b      	beq.n	80049ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	4798      	blx	r3
 800497c:	e016      	b.n	80049ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d107      	bne.n	800499c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0208 	bic.w	r2, r2, #8
 800499a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b0:	2220      	movs	r2, #32
 80049b2:	409a      	lsls	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 808f 	beq.w	8004adc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8087 	beq.w	8004adc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d2:	2220      	movs	r2, #32
 80049d4:	409a      	lsls	r2, r3
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d136      	bne.n	8004a54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0216 	bic.w	r2, r2, #22
 80049f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695a      	ldr	r2, [r3, #20]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <HAL_DMA_IRQHandler+0x1da>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0208 	bic.w	r2, r2, #8
 8004a24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2a:	223f      	movs	r2, #63	; 0x3f
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d07e      	beq.n	8004b48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	4798      	blx	r3
        }
        return;
 8004a52:	e079      	b.n	8004b48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01d      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10d      	bne.n	8004a8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d031      	beq.n	8004adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
 8004a80:	e02c      	b.n	8004adc <HAL_DMA_IRQHandler+0x2a0>
 8004a82:	bf00      	nop
 8004a84:	20000008 	.word	0x20000008
 8004a88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d023      	beq.n	8004adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	4798      	blx	r3
 8004a9c:	e01e      	b.n	8004adc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10f      	bne.n	8004acc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0210 	bic.w	r2, r2, #16
 8004aba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d032      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d022      	beq.n	8004b36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2205      	movs	r2, #5
 8004af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d307      	bcc.n	8004b24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f2      	bne.n	8004b08 <HAL_DMA_IRQHandler+0x2cc>
 8004b22:	e000      	b.n	8004b26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
 8004b46:	e000      	b.n	8004b4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b48:	bf00      	nop
    }
  }
}
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d108      	bne.n	8004b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b8e:	e007      	b.n	8004ba0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
	...

08004bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	3b10      	subs	r3, #16
 8004bbc:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <DMA_CalcBaseAndBitshift+0x60>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bc6:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <DMA_CalcBaseAndBitshift+0x64>)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d909      	bls.n	8004bee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	659a      	str	r2, [r3, #88]	; 0x58
 8004bec:	e007      	b.n	8004bfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	aaaaaaab 	.word	0xaaaaaaab
 8004c10:	080067cc 	.word	0x080067cc

08004c14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11f      	bne.n	8004c6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d856      	bhi.n	8004ce2 <DMA_CheckFifoParam+0xce>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <DMA_CheckFifoParam+0x28>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004c5f 	.word	0x08004c5f
 8004c44:	08004c4d 	.word	0x08004c4d
 8004c48:	08004ce3 	.word	0x08004ce3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d046      	beq.n	8004ce6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c5c:	e043      	b.n	8004ce6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c66:	d140      	bne.n	8004cea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c6c:	e03d      	b.n	8004cea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	d121      	bne.n	8004cbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d837      	bhi.n	8004cee <DMA_CheckFifoParam+0xda>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <DMA_CheckFifoParam+0x70>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	08004c9b 	.word	0x08004c9b
 8004c8c:	08004c95 	.word	0x08004c95
 8004c90:	08004cad 	.word	0x08004cad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
      break;
 8004c98:	e030      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d025      	beq.n	8004cf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004caa:	e022      	b.n	8004cf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb4:	d11f      	bne.n	8004cf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cba:	e01c      	b.n	8004cf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d903      	bls.n	8004cca <DMA_CheckFifoParam+0xb6>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d003      	beq.n	8004cd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cc8:	e018      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8004cce:	e015      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00e      	beq.n	8004cfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce0:	e00b      	b.n	8004cfa <DMA_CheckFifoParam+0xe6>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e00a      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e008      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cea:	bf00      	nop
 8004cec:	e006      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cee:	bf00      	nop
 8004cf0:	e004      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;   
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cfa:	bf00      	nop
    }
  } 
  
  return status; 
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d16:	e16f      	b.n	8004ff8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8161 	beq.w	8004ff2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d005      	beq.n	8004d48 <HAL_GPIO_Init+0x40>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d130      	bne.n	8004daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	2203      	movs	r2, #3
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d7e:	2201      	movs	r2, #1
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	f003 0201 	and.w	r2, r3, #1
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d017      	beq.n	8004de6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d123      	bne.n	8004e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	08da      	lsrs	r2, r3, #3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3208      	adds	r2, #8
 8004dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	220f      	movs	r2, #15
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4013      	ands	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	08da      	lsrs	r2, r3, #3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3208      	adds	r2, #8
 8004e34:	6939      	ldr	r1, [r7, #16]
 8004e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	2203      	movs	r2, #3
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 0203 	and.w	r2, r3, #3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 80bb 	beq.w	8004ff2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	4b64      	ldr	r3, [pc, #400]	; (8005014 <HAL_GPIO_Init+0x30c>)
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	4a63      	ldr	r2, [pc, #396]	; (8005014 <HAL_GPIO_Init+0x30c>)
 8004e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e8a:	6453      	str	r3, [r2, #68]	; 0x44
 8004e8c:	4b61      	ldr	r3, [pc, #388]	; (8005014 <HAL_GPIO_Init+0x30c>)
 8004e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e98:	4a5f      	ldr	r2, [pc, #380]	; (8005018 <HAL_GPIO_Init+0x310>)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	220f      	movs	r2, #15
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a57      	ldr	r2, [pc, #348]	; (800501c <HAL_GPIO_Init+0x314>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d031      	beq.n	8004f28 <HAL_GPIO_Init+0x220>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a56      	ldr	r2, [pc, #344]	; (8005020 <HAL_GPIO_Init+0x318>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d02b      	beq.n	8004f24 <HAL_GPIO_Init+0x21c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a55      	ldr	r2, [pc, #340]	; (8005024 <HAL_GPIO_Init+0x31c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d025      	beq.n	8004f20 <HAL_GPIO_Init+0x218>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a54      	ldr	r2, [pc, #336]	; (8005028 <HAL_GPIO_Init+0x320>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d01f      	beq.n	8004f1c <HAL_GPIO_Init+0x214>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a53      	ldr	r2, [pc, #332]	; (800502c <HAL_GPIO_Init+0x324>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d019      	beq.n	8004f18 <HAL_GPIO_Init+0x210>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a52      	ldr	r2, [pc, #328]	; (8005030 <HAL_GPIO_Init+0x328>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d013      	beq.n	8004f14 <HAL_GPIO_Init+0x20c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a51      	ldr	r2, [pc, #324]	; (8005034 <HAL_GPIO_Init+0x32c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00d      	beq.n	8004f10 <HAL_GPIO_Init+0x208>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a50      	ldr	r2, [pc, #320]	; (8005038 <HAL_GPIO_Init+0x330>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d007      	beq.n	8004f0c <HAL_GPIO_Init+0x204>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a4f      	ldr	r2, [pc, #316]	; (800503c <HAL_GPIO_Init+0x334>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d101      	bne.n	8004f08 <HAL_GPIO_Init+0x200>
 8004f04:	2308      	movs	r3, #8
 8004f06:	e010      	b.n	8004f2a <HAL_GPIO_Init+0x222>
 8004f08:	2309      	movs	r3, #9
 8004f0a:	e00e      	b.n	8004f2a <HAL_GPIO_Init+0x222>
 8004f0c:	2307      	movs	r3, #7
 8004f0e:	e00c      	b.n	8004f2a <HAL_GPIO_Init+0x222>
 8004f10:	2306      	movs	r3, #6
 8004f12:	e00a      	b.n	8004f2a <HAL_GPIO_Init+0x222>
 8004f14:	2305      	movs	r3, #5
 8004f16:	e008      	b.n	8004f2a <HAL_GPIO_Init+0x222>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	e006      	b.n	8004f2a <HAL_GPIO_Init+0x222>
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e004      	b.n	8004f2a <HAL_GPIO_Init+0x222>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e002      	b.n	8004f2a <HAL_GPIO_Init+0x222>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_GPIO_Init+0x222>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	f002 0203 	and.w	r2, r2, #3
 8004f30:	0092      	lsls	r2, r2, #2
 8004f32:	4093      	lsls	r3, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f3c:	4936      	ldr	r1, [pc, #216]	; (8005018 <HAL_GPIO_Init+0x310>)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	089b      	lsrs	r3, r3, #2
 8004f42:	3302      	adds	r3, #2
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f4a:	4b3d      	ldr	r3, [pc, #244]	; (8005040 <HAL_GPIO_Init+0x338>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	43db      	mvns	r3, r3
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f6e:	4a34      	ldr	r2, [pc, #208]	; (8005040 <HAL_GPIO_Init+0x338>)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f74:	4b32      	ldr	r3, [pc, #200]	; (8005040 <HAL_GPIO_Init+0x338>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4013      	ands	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f98:	4a29      	ldr	r2, [pc, #164]	; (8005040 <HAL_GPIO_Init+0x338>)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f9e:	4b28      	ldr	r3, [pc, #160]	; (8005040 <HAL_GPIO_Init+0x338>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4013      	ands	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004fc2:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <HAL_GPIO_Init+0x338>)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <HAL_GPIO_Init+0x338>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004fec:	4a14      	ldr	r2, [pc, #80]	; (8005040 <HAL_GPIO_Init+0x338>)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	f47f ae88 	bne.w	8004d18 <HAL_GPIO_Init+0x10>
  }
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	40023800 	.word	0x40023800
 8005018:	40013800 	.word	0x40013800
 800501c:	40020000 	.word	0x40020000
 8005020:	40020400 	.word	0x40020400
 8005024:	40020800 	.word	0x40020800
 8005028:	40020c00 	.word	0x40020c00
 800502c:	40021000 	.word	0x40021000
 8005030:	40021400 	.word	0x40021400
 8005034:	40021800 	.word	0x40021800
 8005038:	40021c00 	.word	0x40021c00
 800503c:	40022000 	.word	0x40022000
 8005040:	40013c00 	.word	0x40013c00

08005044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	887b      	ldrh	r3, [r7, #2]
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e001      	b.n	8005066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr

08005072 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	460b      	mov	r3, r1
 800507c:	807b      	strh	r3, [r7, #2]
 800507e:	4613      	mov	r3, r2
 8005080:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005082:	787b      	ldrb	r3, [r7, #1]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800508e:	e003      	b.n	8005098 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	041a      	lsls	r2, r3, #16
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	619a      	str	r2, [r3, #24]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr
	...

080050a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08a      	sub	sp, #40	; 0x28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e236      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d050      	beq.n	8005164 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050c2:	4b9e      	ldr	r3, [pc, #632]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d00c      	beq.n	80050e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ce:	4b9b      	ldr	r3, [pc, #620]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d112      	bne.n	8005100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050da:	4b98      	ldr	r3, [pc, #608]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e6:	d10b      	bne.n	8005100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e8:	4b94      	ldr	r3, [pc, #592]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d036      	beq.n	8005162 <HAL_RCC_OscConfig+0xbe>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d132      	bne.n	8005162 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e211      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	4b8e      	ldr	r3, [pc, #568]	; (8005340 <HAL_RCC_OscConfig+0x29c>)
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d013      	beq.n	800513a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005112:	f7fe fcd7 	bl	8003ac4 <HAL_GetTick>
 8005116:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800511a:	f7fe fcd3 	bl	8003ac4 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b64      	cmp	r3, #100	; 0x64
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e1fb      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512c:	4b83      	ldr	r3, [pc, #524]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x76>
 8005138:	e014      	b.n	8005164 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513a:	f7fe fcc3 	bl	8003ac4 <HAL_GetTick>
 800513e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005142:	f7fe fcbf 	bl	8003ac4 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b64      	cmp	r3, #100	; 0x64
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e1e7      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005154:	4b79      	ldr	r3, [pc, #484]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1f0      	bne.n	8005142 <HAL_RCC_OscConfig+0x9e>
 8005160:	e000      	b.n	8005164 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005162:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d077      	beq.n	8005260 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005170:	4b72      	ldr	r3, [pc, #456]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00b      	beq.n	8005194 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800517c:	4b6f      	ldr	r3, [pc, #444]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005184:	2b08      	cmp	r3, #8
 8005186:	d126      	bne.n	80051d6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005188:	4b6c      	ldr	r3, [pc, #432]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d120      	bne.n	80051d6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005194:	4b69      	ldr	r3, [pc, #420]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCC_OscConfig+0x108>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e1bb      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ac:	4b63      	ldr	r3, [pc, #396]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	21f8      	movs	r1, #248	; 0xf8
 80051ba:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051bc:	69b9      	ldr	r1, [r7, #24]
 80051be:	fa91 f1a1 	rbit	r1, r1
 80051c2:	6179      	str	r1, [r7, #20]
  return result;
 80051c4:	6979      	ldr	r1, [r7, #20]
 80051c6:	fab1 f181 	clz	r1, r1
 80051ca:	b2c9      	uxtb	r1, r1
 80051cc:	408b      	lsls	r3, r1
 80051ce:	495b      	ldr	r1, [pc, #364]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d4:	e044      	b.n	8005260 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d02a      	beq.n	8005234 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051de:	4b59      	ldr	r3, [pc, #356]	; (8005344 <HAL_RCC_OscConfig+0x2a0>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e4:	f7fe fc6e 	bl	8003ac4 <HAL_GetTick>
 80051e8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ec:	f7fe fc6a 	bl	8003ac4 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e192      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fe:	4b4f      	ldr	r3, [pc, #316]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520a:	4b4c      	ldr	r3, [pc, #304]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	21f8      	movs	r1, #248	; 0xf8
 8005218:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521a:	6939      	ldr	r1, [r7, #16]
 800521c:	fa91 f1a1 	rbit	r1, r1
 8005220:	60f9      	str	r1, [r7, #12]
  return result;
 8005222:	68f9      	ldr	r1, [r7, #12]
 8005224:	fab1 f181 	clz	r1, r1
 8005228:	b2c9      	uxtb	r1, r1
 800522a:	408b      	lsls	r3, r1
 800522c:	4943      	ldr	r1, [pc, #268]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800522e:	4313      	orrs	r3, r2
 8005230:	600b      	str	r3, [r1, #0]
 8005232:	e015      	b.n	8005260 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005234:	4b43      	ldr	r3, [pc, #268]	; (8005344 <HAL_RCC_OscConfig+0x2a0>)
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523a:	f7fe fc43 	bl	8003ac4 <HAL_GetTick>
 800523e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005242:	f7fe fc3f 	bl	8003ac4 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e167      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005254:	4b39      	ldr	r3, [pc, #228]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f0      	bne.n	8005242 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d030      	beq.n	80052ce <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d016      	beq.n	80052a2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005274:	4b34      	ldr	r3, [pc, #208]	; (8005348 <HAL_RCC_OscConfig+0x2a4>)
 8005276:	2201      	movs	r2, #1
 8005278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800527a:	f7fe fc23 	bl	8003ac4 <HAL_GetTick>
 800527e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005282:	f7fe fc1f 	bl	8003ac4 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e147      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005294:	4b29      	ldr	r3, [pc, #164]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x1de>
 80052a0:	e015      	b.n	80052ce <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a2:	4b29      	ldr	r3, [pc, #164]	; (8005348 <HAL_RCC_OscConfig+0x2a4>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a8:	f7fe fc0c 	bl	8003ac4 <HAL_GetTick>
 80052ac:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b0:	f7fe fc08 	bl	8003ac4 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e130      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c2:	4b1e      	ldr	r3, [pc, #120]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80052c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 8087 	beq.w	80053ea <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052dc:	2300      	movs	r3, #0
 80052de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e2:	4b16      	ldr	r3, [pc, #88]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d110      	bne.n	8005310 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	4b12      	ldr	r3, [pc, #72]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	4a11      	ldr	r2, [pc, #68]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fc:	6413      	str	r3, [r2, #64]	; 0x40
 80052fe:	4b0f      	ldr	r3, [pc, #60]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005306:	60bb      	str	r3, [r7, #8]
 8005308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005310:	4b0e      	ldr	r3, [pc, #56]	; (800534c <HAL_RCC_OscConfig+0x2a8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a0d      	ldr	r2, [pc, #52]	; (800534c <HAL_RCC_OscConfig+0x2a8>)
 8005316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <HAL_RCC_OscConfig+0x2a8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d122      	bne.n	800536e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <HAL_RCC_OscConfig+0x2a8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a07      	ldr	r2, [pc, #28]	; (800534c <HAL_RCC_OscConfig+0x2a8>)
 800532e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005332:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005334:	f7fe fbc6 	bl	8003ac4 <HAL_GetTick>
 8005338:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533a:	e012      	b.n	8005362 <HAL_RCC_OscConfig+0x2be>
 800533c:	40023800 	.word	0x40023800
 8005340:	40023802 	.word	0x40023802
 8005344:	42470000 	.word	0x42470000
 8005348:	42470e80 	.word	0x42470e80
 800534c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005350:	f7fe fbb8 	bl	8003ac4 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0e0      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005362:	4b72      	ldr	r3, [pc, #456]	; (800552c <HAL_RCC_OscConfig+0x488>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	4b6f      	ldr	r3, [pc, #444]	; (8005530 <HAL_RCC_OscConfig+0x48c>)
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d015      	beq.n	80053ac <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005380:	f7fe fba0 	bl	8003ac4 <HAL_GetTick>
 8005384:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005386:	e00a      	b.n	800539e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005388:	f7fe fb9c 	bl	8003ac4 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	; 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e0c2      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539e:	4b65      	ldr	r3, [pc, #404]	; (8005534 <HAL_RCC_OscConfig+0x490>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ee      	beq.n	8005388 <HAL_RCC_OscConfig+0x2e4>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ac:	f7fe fb8a 	bl	8003ac4 <HAL_GetTick>
 80053b0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b4:	f7fe fb86 	bl	8003ac4 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e0ac      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ca:	4b5a      	ldr	r3, [pc, #360]	; (8005534 <HAL_RCC_OscConfig+0x490>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1ee      	bne.n	80053b4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d105      	bne.n	80053ea <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053de:	4b55      	ldr	r3, [pc, #340]	; (8005534 <HAL_RCC_OscConfig+0x490>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	4a54      	ldr	r2, [pc, #336]	; (8005534 <HAL_RCC_OscConfig+0x490>)
 80053e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 8097 	beq.w	8005522 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053f4:	4b4f      	ldr	r3, [pc, #316]	; (8005534 <HAL_RCC_OscConfig+0x490>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 030c 	and.w	r3, r3, #12
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d061      	beq.n	80054c4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d146      	bne.n	8005496 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005408:	4b4b      	ldr	r3, [pc, #300]	; (8005538 <HAL_RCC_OscConfig+0x494>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540e:	f7fe fb59 	bl	8003ac4 <HAL_GetTick>
 8005412:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005416:	f7fe fb55 	bl	8003ac4 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b64      	cmp	r3, #100	; 0x64
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e07d      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005428:	4b42      	ldr	r3, [pc, #264]	; (8005534 <HAL_RCC_OscConfig+0x490>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f0      	bne.n	8005416 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005434:	4b3f      	ldr	r3, [pc, #252]	; (8005534 <HAL_RCC_OscConfig+0x490>)
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	4b40      	ldr	r3, [pc, #256]	; (800553c <HAL_RCC_OscConfig+0x498>)
 800543a:	4013      	ands	r3, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	69d1      	ldr	r1, [r2, #28]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6a12      	ldr	r2, [r2, #32]
 8005444:	4311      	orrs	r1, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800544a:	0192      	lsls	r2, r2, #6
 800544c:	4311      	orrs	r1, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005452:	0612      	lsls	r2, r2, #24
 8005454:	4311      	orrs	r1, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800545a:	0852      	lsrs	r2, r2, #1
 800545c:	3a01      	subs	r2, #1
 800545e:	0412      	lsls	r2, r2, #16
 8005460:	430a      	orrs	r2, r1
 8005462:	4934      	ldr	r1, [pc, #208]	; (8005534 <HAL_RCC_OscConfig+0x490>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005468:	4b33      	ldr	r3, [pc, #204]	; (8005538 <HAL_RCC_OscConfig+0x494>)
 800546a:	2201      	movs	r2, #1
 800546c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546e:	f7fe fb29 	bl	8003ac4 <HAL_GetTick>
 8005472:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005476:	f7fe fb25 	bl	8003ac4 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b64      	cmp	r3, #100	; 0x64
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e04d      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005488:	4b2a      	ldr	r3, [pc, #168]	; (8005534 <HAL_RCC_OscConfig+0x490>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_OscConfig+0x3d2>
 8005494:	e045      	b.n	8005522 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005496:	4b28      	ldr	r3, [pc, #160]	; (8005538 <HAL_RCC_OscConfig+0x494>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fe fb12 	bl	8003ac4 <HAL_GetTick>
 80054a0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a4:	f7fe fb0e 	bl	8003ac4 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e036      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b6:	4b1f      	ldr	r3, [pc, #124]	; (8005534 <HAL_RCC_OscConfig+0x490>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x400>
 80054c2:	e02e      	b.n	8005522 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e029      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80054d0:	4b18      	ldr	r3, [pc, #96]	; (8005534 <HAL_RCC_OscConfig+0x490>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d11c      	bne.n	800551e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d115      	bne.n	800551e <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	099b      	lsrs	r3, r3, #6
 80054f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d10d      	bne.n	800551e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800550c:	429a      	cmp	r2, r3
 800550e:	d106      	bne.n	800551e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d001      	beq.n	8005522 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3728      	adds	r7, #40	; 0x28
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40007000 	.word	0x40007000
 8005530:	40023870 	.word	0x40023870
 8005534:	40023800 	.word	0x40023800
 8005538:	42470060 	.word	0x42470060
 800553c:	f0bc8000 	.word	0xf0bc8000

08005540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0d2      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005554:	4b6b      	ldr	r3, [pc, #428]	; (8005704 <HAL_RCC_ClockConfig+0x1c4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d90c      	bls.n	800557c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005562:	4b68      	ldr	r3, [pc, #416]	; (8005704 <HAL_RCC_ClockConfig+0x1c4>)
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800556a:	4b66      	ldr	r3, [pc, #408]	; (8005704 <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d001      	beq.n	800557c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0be      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d020      	beq.n	80055ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005594:	4b5c      	ldr	r3, [pc, #368]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	4a5b      	ldr	r2, [pc, #364]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 800559a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800559e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80055ac:	4b56      	ldr	r3, [pc, #344]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4a55      	ldr	r2, [pc, #340]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80055b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b8:	4b53      	ldr	r3, [pc, #332]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4950      	ldr	r1, [pc, #320]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d040      	beq.n	8005658 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d107      	bne.n	80055ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055de:	4b4a      	ldr	r3, [pc, #296]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d115      	bne.n	8005616 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e085      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d107      	bne.n	8005606 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f6:	4b44      	ldr	r3, [pc, #272]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e079      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005606:	4b40      	ldr	r3, [pc, #256]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e071      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005616:	4b3c      	ldr	r3, [pc, #240]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 0203 	bic.w	r2, r3, #3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4939      	ldr	r1, [pc, #228]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 8005624:	4313      	orrs	r3, r2
 8005626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005628:	f7fe fa4c 	bl	8003ac4 <HAL_GetTick>
 800562c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562e:	e00a      	b.n	8005646 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005630:	f7fe fa48 	bl	8003ac4 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f241 3288 	movw	r2, #5000	; 0x1388
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e059      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005646:	4b30      	ldr	r3, [pc, #192]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 020c 	and.w	r2, r3, #12
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	429a      	cmp	r2, r3
 8005656:	d1eb      	bne.n	8005630 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005658:	4b2a      	ldr	r3, [pc, #168]	; (8005704 <HAL_RCC_ClockConfig+0x1c4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d20c      	bcs.n	8005680 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005666:	4b27      	ldr	r3, [pc, #156]	; (8005704 <HAL_RCC_ClockConfig+0x1c4>)
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b25      	ldr	r3, [pc, #148]	; (8005704 <HAL_RCC_ClockConfig+0x1c4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d001      	beq.n	8005680 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e03c      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800568c:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	491b      	ldr	r1, [pc, #108]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 800569a:	4313      	orrs	r3, r2
 800569c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056aa:	4b17      	ldr	r3, [pc, #92]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4913      	ldr	r1, [pc, #76]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80056be:	f000 f82b 	bl	8005718 <HAL_RCC_GetSysClockFreq>
 80056c2:	4601      	mov	r1, r0
 80056c4:	4b10      	ldr	r3, [pc, #64]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056cc:	22f0      	movs	r2, #240	; 0xf0
 80056ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	fa92 f2a2 	rbit	r2, r2
 80056d6:	60fa      	str	r2, [r7, #12]
  return result;
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	fab2 f282 	clz	r2, r2
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	40d3      	lsrs	r3, r2
 80056e2:	4a0a      	ldr	r2, [pc, #40]	; (800570c <HAL_RCC_ClockConfig+0x1cc>)
 80056e4:	5cd3      	ldrb	r3, [r2, r3]
 80056e6:	fa21 f303 	lsr.w	r3, r1, r3
 80056ea:	4a09      	ldr	r2, [pc, #36]	; (8005710 <HAL_RCC_ClockConfig+0x1d0>)
 80056ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <HAL_RCC_ClockConfig+0x1d4>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fe f9a4 	bl	8003a40 <HAL_InitTick>

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40023c00 	.word	0x40023c00
 8005708:	40023800 	.word	0x40023800
 800570c:	080067bc 	.word	0x080067bc
 8005710:	20000008 	.word	0x20000008
 8005714:	20000014 	.word	0x20000014

08005718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800571c:	b090      	sub	sp, #64	; 0x40
 800571e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
 8005724:	2300      	movs	r3, #0
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005728:	2300      	movs	r3, #0
 800572a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005730:	4b59      	ldr	r3, [pc, #356]	; (8005898 <HAL_RCC_GetSysClockFreq+0x180>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b08      	cmp	r3, #8
 800573a:	d00d      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x40>
 800573c:	2b08      	cmp	r3, #8
 800573e:	f200 80a2 	bhi.w	8005886 <HAL_RCC_GetSysClockFreq+0x16e>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x34>
 8005746:	2b04      	cmp	r3, #4
 8005748:	d003      	beq.n	8005752 <HAL_RCC_GetSysClockFreq+0x3a>
 800574a:	e09c      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800574c:	4b53      	ldr	r3, [pc, #332]	; (800589c <HAL_RCC_GetSysClockFreq+0x184>)
 800574e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005750:	e09c      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005752:	4b53      	ldr	r3, [pc, #332]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005756:	e099      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005758:	4b4f      	ldr	r3, [pc, #316]	; (8005898 <HAL_RCC_GetSysClockFreq+0x180>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005762:	4b4d      	ldr	r3, [pc, #308]	; (8005898 <HAL_RCC_GetSysClockFreq+0x180>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d027      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800576e:	4b4a      	ldr	r3, [pc, #296]	; (8005898 <HAL_RCC_GetSysClockFreq+0x180>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	099b      	lsrs	r3, r3, #6
 8005774:	2200      	movs	r2, #0
 8005776:	623b      	str	r3, [r7, #32]
 8005778:	627a      	str	r2, [r7, #36]	; 0x24
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005780:	2100      	movs	r1, #0
 8005782:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005784:	fb03 f201 	mul.w	r2, r3, r1
 8005788:	2300      	movs	r3, #0
 800578a:	fb00 f303 	mul.w	r3, r0, r3
 800578e:	4413      	add	r3, r2
 8005790:	4a43      	ldr	r2, [pc, #268]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005792:	fba0 2102 	umull	r2, r1, r0, r2
 8005796:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005798:	62ba      	str	r2, [r7, #40]	; 0x28
 800579a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800579c:	4413      	add	r3, r2
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a2:	2200      	movs	r2, #0
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	61fa      	str	r2, [r7, #28]
 80057a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80057b0:	f7fb fbbc 	bl	8000f2c <__aeabi_uldivmod>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4613      	mov	r3, r2
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057bc:	e055      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057be:	4b36      	ldr	r3, [pc, #216]	; (8005898 <HAL_RCC_GetSysClockFreq+0x180>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	099b      	lsrs	r3, r3, #6
 80057c4:	2200      	movs	r2, #0
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	617a      	str	r2, [r7, #20]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057d0:	f04f 0b00 	mov.w	fp, #0
 80057d4:	4652      	mov	r2, sl
 80057d6:	465b      	mov	r3, fp
 80057d8:	f04f 0000 	mov.w	r0, #0
 80057dc:	f04f 0100 	mov.w	r1, #0
 80057e0:	0159      	lsls	r1, r3, #5
 80057e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057e6:	0150      	lsls	r0, r2, #5
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	ebb2 080a 	subs.w	r8, r2, sl
 80057f0:	eb63 090b 	sbc.w	r9, r3, fp
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005800:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005804:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005808:	ebb2 0408 	subs.w	r4, r2, r8
 800580c:	eb63 0509 	sbc.w	r5, r3, r9
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	00eb      	lsls	r3, r5, #3
 800581a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800581e:	00e2      	lsls	r2, r4, #3
 8005820:	4614      	mov	r4, r2
 8005822:	461d      	mov	r5, r3
 8005824:	eb14 030a 	adds.w	r3, r4, sl
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	eb45 030b 	adc.w	r3, r5, fp
 800582e:	607b      	str	r3, [r7, #4]
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	e9d7 4500 	ldrd	r4, r5, [r7]
 800583c:	4629      	mov	r1, r5
 800583e:	028b      	lsls	r3, r1, #10
 8005840:	4620      	mov	r0, r4
 8005842:	4629      	mov	r1, r5
 8005844:	4604      	mov	r4, r0
 8005846:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800584a:	4601      	mov	r1, r0
 800584c:	028a      	lsls	r2, r1, #10
 800584e:	4610      	mov	r0, r2
 8005850:	4619      	mov	r1, r3
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	2200      	movs	r2, #0
 8005856:	60bb      	str	r3, [r7, #8]
 8005858:	60fa      	str	r2, [r7, #12]
 800585a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800585e:	f7fb fb65 	bl	8000f2c <__aeabi_uldivmod>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4613      	mov	r3, r2
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800586a:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCC_GetSysClockFreq+0x180>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	0c1b      	lsrs	r3, r3, #16
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	3301      	adds	r3, #1
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800587a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005882:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005884:	e002      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <HAL_RCC_GetSysClockFreq+0x184>)
 8005888:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800588a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800588e:	4618      	mov	r0, r3
 8005890:	3740      	adds	r7, #64	; 0x40
 8005892:	46bd      	mov	sp, r7
 8005894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005898:	40023800 	.word	0x40023800
 800589c:	00f42400 	.word	0x00f42400
 80058a0:	017d7840 	.word	0x017d7840

080058a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e041      	b.n	800593a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fd fe76 	bl	80035bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3304      	adds	r3, #4
 80058e0:	4619      	mov	r1, r3
 80058e2:	4610      	mov	r0, r2
 80058e4:	f000 fae8 	bl	8005eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <HAL_TIM_PWM_Start+0x24>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	e022      	b.n	80059ae <HAL_TIM_PWM_Start+0x6a>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b04      	cmp	r3, #4
 800596c:	d109      	bne.n	8005982 <HAL_TIM_PWM_Start+0x3e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b01      	cmp	r3, #1
 8005978:	bf14      	ite	ne
 800597a:	2301      	movne	r3, #1
 800597c:	2300      	moveq	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	e015      	b.n	80059ae <HAL_TIM_PWM_Start+0x6a>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b08      	cmp	r3, #8
 8005986:	d109      	bne.n	800599c <HAL_TIM_PWM_Start+0x58>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e008      	b.n	80059ae <HAL_TIM_PWM_Start+0x6a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e07c      	b.n	8005ab0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <HAL_TIM_PWM_Start+0x82>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c4:	e013      	b.n	80059ee <HAL_TIM_PWM_Start+0xaa>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d104      	bne.n	80059d6 <HAL_TIM_PWM_Start+0x92>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d4:	e00b      	b.n	80059ee <HAL_TIM_PWM_Start+0xaa>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d104      	bne.n	80059e6 <HAL_TIM_PWM_Start+0xa2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e4:	e003      	b.n	80059ee <HAL_TIM_PWM_Start+0xaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2202      	movs	r2, #2
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2201      	movs	r2, #1
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fca8 	bl	800634c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a2d      	ldr	r2, [pc, #180]	; (8005ab8 <HAL_TIM_PWM_Start+0x174>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIM_PWM_Start+0xcc>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2c      	ldr	r2, [pc, #176]	; (8005abc <HAL_TIM_PWM_Start+0x178>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d101      	bne.n	8005a14 <HAL_TIM_PWM_Start+0xd0>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <HAL_TIM_PWM_Start+0xd2>
 8005a14:	2300      	movs	r3, #0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d007      	beq.n	8005a2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a22      	ldr	r2, [pc, #136]	; (8005ab8 <HAL_TIM_PWM_Start+0x174>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d022      	beq.n	8005a7a <HAL_TIM_PWM_Start+0x136>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3c:	d01d      	beq.n	8005a7a <HAL_TIM_PWM_Start+0x136>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <HAL_TIM_PWM_Start+0x17c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d018      	beq.n	8005a7a <HAL_TIM_PWM_Start+0x136>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_TIM_PWM_Start+0x180>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d013      	beq.n	8005a7a <HAL_TIM_PWM_Start+0x136>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1c      	ldr	r2, [pc, #112]	; (8005ac8 <HAL_TIM_PWM_Start+0x184>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00e      	beq.n	8005a7a <HAL_TIM_PWM_Start+0x136>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a16      	ldr	r2, [pc, #88]	; (8005abc <HAL_TIM_PWM_Start+0x178>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_TIM_PWM_Start+0x136>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a18      	ldr	r2, [pc, #96]	; (8005acc <HAL_TIM_PWM_Start+0x188>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_TIM_PWM_Start+0x136>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <HAL_TIM_PWM_Start+0x18c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d111      	bne.n	8005a9e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b06      	cmp	r3, #6
 8005a8a:	d010      	beq.n	8005aae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9c:	e007      	b.n	8005aae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0201 	orr.w	r2, r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40010400 	.word	0x40010400
 8005ac0:	40000400 	.word	0x40000400
 8005ac4:	40000800 	.word	0x40000800
 8005ac8:	40000c00 	.word	0x40000c00
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40001800 	.word	0x40001800

08005ad4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e097      	b.n	8005c18 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7fd fd7d 	bl	80035fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b18:	f023 0307 	bic.w	r3, r3, #7
 8005b1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f000 f9c5 	bl	8005eb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	4313      	orrs	r3, r2
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b74:	f023 030c 	bic.w	r3, r3, #12
 8005b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	4313      	orrs	r3, r2
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	011a      	lsls	r2, r3, #4
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	031b      	lsls	r3, r3, #12
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d110      	bne.n	8005c72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d102      	bne.n	8005c5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c56:	7b7b      	ldrb	r3, [r7, #13]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d001      	beq.n	8005c60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e069      	b.n	8005d34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c70:	e031      	b.n	8005cd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d110      	bne.n	8005c9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d102      	bne.n	8005c84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c7e:	7b3b      	ldrb	r3, [r7, #12]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d001      	beq.n	8005c88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e055      	b.n	8005d34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c98:	e01d      	b.n	8005cd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d108      	bne.n	8005cb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d105      	bne.n	8005cb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca6:	7b7b      	ldrb	r3, [r7, #13]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d102      	bne.n	8005cb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cac:	7b3b      	ldrb	r3, [r7, #12]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d001      	beq.n	8005cb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e03e      	b.n	8005d34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_TIM_Encoder_Start+0xc4>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d008      	beq.n	8005cf4 <HAL_TIM_Encoder_Start+0xd4>
 8005ce2:	e00f      	b.n	8005d04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fb2d 	bl	800634c <TIM_CCxChannelCmd>
      break;
 8005cf2:	e016      	b.n	8005d22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	2104      	movs	r1, #4
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fb25 	bl	800634c <TIM_CCxChannelCmd>
      break;
 8005d02:	e00e      	b.n	8005d22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fb1d 	bl	800634c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2201      	movs	r2, #1
 8005d18:	2104      	movs	r1, #4
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fb16 	bl	800634c <TIM_CCxChannelCmd>
      break;
 8005d20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0201 	orr.w	r2, r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d52:	2302      	movs	r3, #2
 8005d54:	e0ac      	b.n	8005eb0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b0c      	cmp	r3, #12
 8005d62:	f200 809f 	bhi.w	8005ea4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005d66:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005da1 	.word	0x08005da1
 8005d70:	08005ea5 	.word	0x08005ea5
 8005d74:	08005ea5 	.word	0x08005ea5
 8005d78:	08005ea5 	.word	0x08005ea5
 8005d7c:	08005de1 	.word	0x08005de1
 8005d80:	08005ea5 	.word	0x08005ea5
 8005d84:	08005ea5 	.word	0x08005ea5
 8005d88:	08005ea5 	.word	0x08005ea5
 8005d8c:	08005e23 	.word	0x08005e23
 8005d90:	08005ea5 	.word	0x08005ea5
 8005d94:	08005ea5 	.word	0x08005ea5
 8005d98:	08005ea5 	.word	0x08005ea5
 8005d9c:	08005e63 	.word	0x08005e63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68b9      	ldr	r1, [r7, #8]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 f924 	bl	8005ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0208 	orr.w	r2, r2, #8
 8005dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0204 	bic.w	r2, r2, #4
 8005dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6999      	ldr	r1, [r3, #24]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	619a      	str	r2, [r3, #24]
      break;
 8005dde:	e062      	b.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 f974 	bl	80060d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6999      	ldr	r1, [r3, #24]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	021a      	lsls	r2, r3, #8
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	619a      	str	r2, [r3, #24]
      break;
 8005e20:	e041      	b.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 f9c7 	bl	80061bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0208 	orr.w	r2, r2, #8
 8005e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0204 	bic.w	r2, r2, #4
 8005e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69d9      	ldr	r1, [r3, #28]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	61da      	str	r2, [r3, #28]
      break;
 8005e60:	e021      	b.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fa1b 	bl	80062a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69d9      	ldr	r1, [r3, #28]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	021a      	lsls	r2, r3, #8
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	61da      	str	r2, [r3, #28]
      break;
 8005ea2:	e000      	b.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005ea4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a3f      	ldr	r2, [pc, #252]	; (8005fc8 <TIM_Base_SetConfig+0x110>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <TIM_Base_SetConfig+0x40>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed6:	d00f      	beq.n	8005ef8 <TIM_Base_SetConfig+0x40>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a3c      	ldr	r2, [pc, #240]	; (8005fcc <TIM_Base_SetConfig+0x114>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00b      	beq.n	8005ef8 <TIM_Base_SetConfig+0x40>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a3b      	ldr	r2, [pc, #236]	; (8005fd0 <TIM_Base_SetConfig+0x118>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d007      	beq.n	8005ef8 <TIM_Base_SetConfig+0x40>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a3a      	ldr	r2, [pc, #232]	; (8005fd4 <TIM_Base_SetConfig+0x11c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_Base_SetConfig+0x40>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a39      	ldr	r2, [pc, #228]	; (8005fd8 <TIM_Base_SetConfig+0x120>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d108      	bne.n	8005f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a2e      	ldr	r2, [pc, #184]	; (8005fc8 <TIM_Base_SetConfig+0x110>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d02b      	beq.n	8005f6a <TIM_Base_SetConfig+0xb2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f18:	d027      	beq.n	8005f6a <TIM_Base_SetConfig+0xb2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a2b      	ldr	r2, [pc, #172]	; (8005fcc <TIM_Base_SetConfig+0x114>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d023      	beq.n	8005f6a <TIM_Base_SetConfig+0xb2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a2a      	ldr	r2, [pc, #168]	; (8005fd0 <TIM_Base_SetConfig+0x118>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d01f      	beq.n	8005f6a <TIM_Base_SetConfig+0xb2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a29      	ldr	r2, [pc, #164]	; (8005fd4 <TIM_Base_SetConfig+0x11c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d01b      	beq.n	8005f6a <TIM_Base_SetConfig+0xb2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a28      	ldr	r2, [pc, #160]	; (8005fd8 <TIM_Base_SetConfig+0x120>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d017      	beq.n	8005f6a <TIM_Base_SetConfig+0xb2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a27      	ldr	r2, [pc, #156]	; (8005fdc <TIM_Base_SetConfig+0x124>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <TIM_Base_SetConfig+0xb2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a26      	ldr	r2, [pc, #152]	; (8005fe0 <TIM_Base_SetConfig+0x128>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00f      	beq.n	8005f6a <TIM_Base_SetConfig+0xb2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a25      	ldr	r2, [pc, #148]	; (8005fe4 <TIM_Base_SetConfig+0x12c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00b      	beq.n	8005f6a <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a24      	ldr	r2, [pc, #144]	; (8005fe8 <TIM_Base_SetConfig+0x130>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d007      	beq.n	8005f6a <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a23      	ldr	r2, [pc, #140]	; (8005fec <TIM_Base_SetConfig+0x134>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d003      	beq.n	8005f6a <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a22      	ldr	r2, [pc, #136]	; (8005ff0 <TIM_Base_SetConfig+0x138>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d108      	bne.n	8005f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <TIM_Base_SetConfig+0x110>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_Base_SetConfig+0xf8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a0b      	ldr	r2, [pc, #44]	; (8005fd8 <TIM_Base_SetConfig+0x120>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d103      	bne.n	8005fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	615a      	str	r2, [r3, #20]
}
 8005fbe:	bf00      	nop
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40000400 	.word	0x40000400
 8005fd0:	40000800 	.word	0x40000800
 8005fd4:	40000c00 	.word	0x40000c00
 8005fd8:	40010400 	.word	0x40010400
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40014400 	.word	0x40014400
 8005fe4:	40014800 	.word	0x40014800
 8005fe8:	40001800 	.word	0x40001800
 8005fec:	40001c00 	.word	0x40001c00
 8005ff0:	40002000 	.word	0x40002000

08005ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f023 0201 	bic.w	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f023 0302 	bic.w	r3, r3, #2
 800603c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a20      	ldr	r2, [pc, #128]	; (80060cc <TIM_OC1_SetConfig+0xd8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC1_SetConfig+0x64>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a1f      	ldr	r2, [pc, #124]	; (80060d0 <TIM_OC1_SetConfig+0xdc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d10c      	bne.n	8006072 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f023 0308 	bic.w	r3, r3, #8
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f023 0304 	bic.w	r3, r3, #4
 8006070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a15      	ldr	r2, [pc, #84]	; (80060cc <TIM_OC1_SetConfig+0xd8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_OC1_SetConfig+0x8e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <TIM_OC1_SetConfig+0xdc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d111      	bne.n	80060a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	621a      	str	r2, [r3, #32]
}
 80060c0:	bf00      	nop
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40010000 	.word	0x40010000
 80060d0:	40010400 	.word	0x40010400

080060d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0210 	bic.w	r2, r3, #16
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	021b      	lsls	r3, r3, #8
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 0320 	bic.w	r3, r3, #32
 800611e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a21      	ldr	r2, [pc, #132]	; (80061b4 <TIM_OC2_SetConfig+0xe0>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_OC2_SetConfig+0x68>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a20      	ldr	r2, [pc, #128]	; (80061b8 <TIM_OC2_SetConfig+0xe4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d10d      	bne.n	8006158 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a16      	ldr	r2, [pc, #88]	; (80061b4 <TIM_OC2_SetConfig+0xe0>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d003      	beq.n	8006168 <TIM_OC2_SetConfig+0x94>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a15      	ldr	r2, [pc, #84]	; (80061b8 <TIM_OC2_SetConfig+0xe4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d113      	bne.n	8006190 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800616e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40010400 	.word	0x40010400

080061bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0303 	bic.w	r3, r3, #3
 80061f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a21      	ldr	r2, [pc, #132]	; (800629c <TIM_OC3_SetConfig+0xe0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_OC3_SetConfig+0x66>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a20      	ldr	r2, [pc, #128]	; (80062a0 <TIM_OC3_SetConfig+0xe4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d10d      	bne.n	800623e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800623c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a16      	ldr	r2, [pc, #88]	; (800629c <TIM_OC3_SetConfig+0xe0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d003      	beq.n	800624e <TIM_OC3_SetConfig+0x92>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <TIM_OC3_SetConfig+0xe4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d113      	bne.n	8006276 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800625c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	621a      	str	r2, [r3, #32]
}
 8006290:	bf00      	nop
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40010000 	.word	0x40010000
 80062a0:	40010400 	.word	0x40010400

080062a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	031b      	lsls	r3, r3, #12
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a11      	ldr	r2, [pc, #68]	; (8006344 <TIM_OC4_SetConfig+0xa0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_OC4_SetConfig+0x68>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a10      	ldr	r2, [pc, #64]	; (8006348 <TIM_OC4_SetConfig+0xa4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d109      	bne.n	8006320 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	019b      	lsls	r3, r3, #6
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr
 8006344:	40010000 	.word	0x40010000
 8006348:	40010400 	.word	0x40010400

0800634c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	2201      	movs	r2, #1
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1a      	ldr	r2, [r3, #32]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	43db      	mvns	r3, r3
 800636e:	401a      	ands	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	fa01 f303 	lsl.w	r3, r1, r3
 8006384:	431a      	orrs	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr

08006394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e05a      	b.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a20      	ldr	r2, [pc, #128]	; (800646c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d022      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f8:	d01d      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1c      	ldr	r2, [pc, #112]	; (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d018      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1a      	ldr	r2, [pc, #104]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a19      	ldr	r2, [pc, #100]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00e      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a17      	ldr	r2, [pc, #92]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d009      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a16      	ldr	r2, [pc, #88]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d004      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a14      	ldr	r2, [pc, #80]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d10c      	bne.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800643c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	4313      	orrs	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	bc80      	pop	{r7}
 800646a:	4770      	bx	lr
 800646c:	40010000 	.word	0x40010000
 8006470:	40000400 	.word	0x40000400
 8006474:	40000800 	.word	0x40000800
 8006478:	40000c00 	.word	0x40000c00
 800647c:	40010400 	.word	0x40010400
 8006480:	40014000 	.word	0x40014000
 8006484:	40001800 	.word	0x40001800

08006488 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e03d      	b.n	8006520 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr
	...

0800652c <__errno>:
 800652c:	4b01      	ldr	r3, [pc, #4]	; (8006534 <__errno+0x8>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	2000001c 	.word	0x2000001c

08006538 <__libc_init_array>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	2600      	movs	r6, #0
 800653c:	4d0c      	ldr	r5, [pc, #48]	; (8006570 <__libc_init_array+0x38>)
 800653e:	4c0d      	ldr	r4, [pc, #52]	; (8006574 <__libc_init_array+0x3c>)
 8006540:	1b64      	subs	r4, r4, r5
 8006542:	10a4      	asrs	r4, r4, #2
 8006544:	42a6      	cmp	r6, r4
 8006546:	d109      	bne.n	800655c <__libc_init_array+0x24>
 8006548:	f000 f92c 	bl	80067a4 <_init>
 800654c:	2600      	movs	r6, #0
 800654e:	4d0a      	ldr	r5, [pc, #40]	; (8006578 <__libc_init_array+0x40>)
 8006550:	4c0a      	ldr	r4, [pc, #40]	; (800657c <__libc_init_array+0x44>)
 8006552:	1b64      	subs	r4, r4, r5
 8006554:	10a4      	asrs	r4, r4, #2
 8006556:	42a6      	cmp	r6, r4
 8006558:	d105      	bne.n	8006566 <__libc_init_array+0x2e>
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006560:	4798      	blx	r3
 8006562:	3601      	adds	r6, #1
 8006564:	e7ee      	b.n	8006544 <__libc_init_array+0xc>
 8006566:	f855 3b04 	ldr.w	r3, [r5], #4
 800656a:	4798      	blx	r3
 800656c:	3601      	adds	r6, #1
 800656e:	e7f2      	b.n	8006556 <__libc_init_array+0x1e>
 8006570:	080067dc 	.word	0x080067dc
 8006574:	080067dc 	.word	0x080067dc
 8006578:	080067dc 	.word	0x080067dc
 800657c:	080067e0 	.word	0x080067e0

08006580 <malloc>:
 8006580:	4b02      	ldr	r3, [pc, #8]	; (800658c <malloc+0xc>)
 8006582:	4601      	mov	r1, r0
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	f000 b87b 	b.w	8006680 <_malloc_r>
 800658a:	bf00      	nop
 800658c:	2000001c 	.word	0x2000001c

08006590 <free>:
 8006590:	4b02      	ldr	r3, [pc, #8]	; (800659c <free+0xc>)
 8006592:	4601      	mov	r1, r0
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	f000 b80b 	b.w	80065b0 <_free_r>
 800659a:	bf00      	nop
 800659c:	2000001c 	.word	0x2000001c

080065a0 <memset>:
 80065a0:	4603      	mov	r3, r0
 80065a2:	4402      	add	r2, r0
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d100      	bne.n	80065aa <memset+0xa>
 80065a8:	4770      	bx	lr
 80065aa:	f803 1b01 	strb.w	r1, [r3], #1
 80065ae:	e7f9      	b.n	80065a4 <memset+0x4>

080065b0 <_free_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4605      	mov	r5, r0
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d040      	beq.n	800663a <_free_r+0x8a>
 80065b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065bc:	1f0c      	subs	r4, r1, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bfb8      	it	lt
 80065c2:	18e4      	addlt	r4, r4, r3
 80065c4:	f000 f8e0 	bl	8006788 <__malloc_lock>
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <_free_r+0x8c>)
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	b933      	cbnz	r3, 80065dc <_free_r+0x2c>
 80065ce:	6063      	str	r3, [r4, #4]
 80065d0:	6014      	str	r4, [r2, #0]
 80065d2:	4628      	mov	r0, r5
 80065d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065d8:	f000 b8dc 	b.w	8006794 <__malloc_unlock>
 80065dc:	42a3      	cmp	r3, r4
 80065de:	d908      	bls.n	80065f2 <_free_r+0x42>
 80065e0:	6820      	ldr	r0, [r4, #0]
 80065e2:	1821      	adds	r1, r4, r0
 80065e4:	428b      	cmp	r3, r1
 80065e6:	bf01      	itttt	eq
 80065e8:	6819      	ldreq	r1, [r3, #0]
 80065ea:	685b      	ldreq	r3, [r3, #4]
 80065ec:	1809      	addeq	r1, r1, r0
 80065ee:	6021      	streq	r1, [r4, #0]
 80065f0:	e7ed      	b.n	80065ce <_free_r+0x1e>
 80065f2:	461a      	mov	r2, r3
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	b10b      	cbz	r3, 80065fc <_free_r+0x4c>
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	d9fa      	bls.n	80065f2 <_free_r+0x42>
 80065fc:	6811      	ldr	r1, [r2, #0]
 80065fe:	1850      	adds	r0, r2, r1
 8006600:	42a0      	cmp	r0, r4
 8006602:	d10b      	bne.n	800661c <_free_r+0x6c>
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	4401      	add	r1, r0
 8006608:	1850      	adds	r0, r2, r1
 800660a:	4283      	cmp	r3, r0
 800660c:	6011      	str	r1, [r2, #0]
 800660e:	d1e0      	bne.n	80065d2 <_free_r+0x22>
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	4401      	add	r1, r0
 8006616:	6011      	str	r1, [r2, #0]
 8006618:	6053      	str	r3, [r2, #4]
 800661a:	e7da      	b.n	80065d2 <_free_r+0x22>
 800661c:	d902      	bls.n	8006624 <_free_r+0x74>
 800661e:	230c      	movs	r3, #12
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	e7d6      	b.n	80065d2 <_free_r+0x22>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	1821      	adds	r1, r4, r0
 8006628:	428b      	cmp	r3, r1
 800662a:	bf01      	itttt	eq
 800662c:	6819      	ldreq	r1, [r3, #0]
 800662e:	685b      	ldreq	r3, [r3, #4]
 8006630:	1809      	addeq	r1, r1, r0
 8006632:	6021      	streq	r1, [r4, #0]
 8006634:	6063      	str	r3, [r4, #4]
 8006636:	6054      	str	r4, [r2, #4]
 8006638:	e7cb      	b.n	80065d2 <_free_r+0x22>
 800663a:	bd38      	pop	{r3, r4, r5, pc}
 800663c:	200018c8 	.word	0x200018c8

08006640 <sbrk_aligned>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	4e0e      	ldr	r6, [pc, #56]	; (800667c <sbrk_aligned+0x3c>)
 8006644:	460c      	mov	r4, r1
 8006646:	6831      	ldr	r1, [r6, #0]
 8006648:	4605      	mov	r5, r0
 800664a:	b911      	cbnz	r1, 8006652 <sbrk_aligned+0x12>
 800664c:	f000 f88c 	bl	8006768 <_sbrk_r>
 8006650:	6030      	str	r0, [r6, #0]
 8006652:	4621      	mov	r1, r4
 8006654:	4628      	mov	r0, r5
 8006656:	f000 f887 	bl	8006768 <_sbrk_r>
 800665a:	1c43      	adds	r3, r0, #1
 800665c:	d00a      	beq.n	8006674 <sbrk_aligned+0x34>
 800665e:	1cc4      	adds	r4, r0, #3
 8006660:	f024 0403 	bic.w	r4, r4, #3
 8006664:	42a0      	cmp	r0, r4
 8006666:	d007      	beq.n	8006678 <sbrk_aligned+0x38>
 8006668:	1a21      	subs	r1, r4, r0
 800666a:	4628      	mov	r0, r5
 800666c:	f000 f87c 	bl	8006768 <_sbrk_r>
 8006670:	3001      	adds	r0, #1
 8006672:	d101      	bne.n	8006678 <sbrk_aligned+0x38>
 8006674:	f04f 34ff 	mov.w	r4, #4294967295
 8006678:	4620      	mov	r0, r4
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	200018cc 	.word	0x200018cc

08006680 <_malloc_r>:
 8006680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006684:	1ccd      	adds	r5, r1, #3
 8006686:	f025 0503 	bic.w	r5, r5, #3
 800668a:	3508      	adds	r5, #8
 800668c:	2d0c      	cmp	r5, #12
 800668e:	bf38      	it	cc
 8006690:	250c      	movcc	r5, #12
 8006692:	2d00      	cmp	r5, #0
 8006694:	4607      	mov	r7, r0
 8006696:	db01      	blt.n	800669c <_malloc_r+0x1c>
 8006698:	42a9      	cmp	r1, r5
 800669a:	d905      	bls.n	80066a8 <_malloc_r+0x28>
 800669c:	230c      	movs	r3, #12
 800669e:	2600      	movs	r6, #0
 80066a0:	603b      	str	r3, [r7, #0]
 80066a2:	4630      	mov	r0, r6
 80066a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a8:	4e2e      	ldr	r6, [pc, #184]	; (8006764 <_malloc_r+0xe4>)
 80066aa:	f000 f86d 	bl	8006788 <__malloc_lock>
 80066ae:	6833      	ldr	r3, [r6, #0]
 80066b0:	461c      	mov	r4, r3
 80066b2:	bb34      	cbnz	r4, 8006702 <_malloc_r+0x82>
 80066b4:	4629      	mov	r1, r5
 80066b6:	4638      	mov	r0, r7
 80066b8:	f7ff ffc2 	bl	8006640 <sbrk_aligned>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	4604      	mov	r4, r0
 80066c0:	d14d      	bne.n	800675e <_malloc_r+0xde>
 80066c2:	6834      	ldr	r4, [r6, #0]
 80066c4:	4626      	mov	r6, r4
 80066c6:	2e00      	cmp	r6, #0
 80066c8:	d140      	bne.n	800674c <_malloc_r+0xcc>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	4631      	mov	r1, r6
 80066ce:	4638      	mov	r0, r7
 80066d0:	eb04 0803 	add.w	r8, r4, r3
 80066d4:	f000 f848 	bl	8006768 <_sbrk_r>
 80066d8:	4580      	cmp	r8, r0
 80066da:	d13a      	bne.n	8006752 <_malloc_r+0xd2>
 80066dc:	6821      	ldr	r1, [r4, #0]
 80066de:	3503      	adds	r5, #3
 80066e0:	1a6d      	subs	r5, r5, r1
 80066e2:	f025 0503 	bic.w	r5, r5, #3
 80066e6:	3508      	adds	r5, #8
 80066e8:	2d0c      	cmp	r5, #12
 80066ea:	bf38      	it	cc
 80066ec:	250c      	movcc	r5, #12
 80066ee:	4638      	mov	r0, r7
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7ff ffa5 	bl	8006640 <sbrk_aligned>
 80066f6:	3001      	adds	r0, #1
 80066f8:	d02b      	beq.n	8006752 <_malloc_r+0xd2>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	442b      	add	r3, r5
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	e00e      	b.n	8006720 <_malloc_r+0xa0>
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	1b52      	subs	r2, r2, r5
 8006706:	d41e      	bmi.n	8006746 <_malloc_r+0xc6>
 8006708:	2a0b      	cmp	r2, #11
 800670a:	d916      	bls.n	800673a <_malloc_r+0xba>
 800670c:	1961      	adds	r1, r4, r5
 800670e:	42a3      	cmp	r3, r4
 8006710:	6025      	str	r5, [r4, #0]
 8006712:	bf18      	it	ne
 8006714:	6059      	strne	r1, [r3, #4]
 8006716:	6863      	ldr	r3, [r4, #4]
 8006718:	bf08      	it	eq
 800671a:	6031      	streq	r1, [r6, #0]
 800671c:	5162      	str	r2, [r4, r5]
 800671e:	604b      	str	r3, [r1, #4]
 8006720:	4638      	mov	r0, r7
 8006722:	f104 060b 	add.w	r6, r4, #11
 8006726:	f000 f835 	bl	8006794 <__malloc_unlock>
 800672a:	f026 0607 	bic.w	r6, r6, #7
 800672e:	1d23      	adds	r3, r4, #4
 8006730:	1af2      	subs	r2, r6, r3
 8006732:	d0b6      	beq.n	80066a2 <_malloc_r+0x22>
 8006734:	1b9b      	subs	r3, r3, r6
 8006736:	50a3      	str	r3, [r4, r2]
 8006738:	e7b3      	b.n	80066a2 <_malloc_r+0x22>
 800673a:	6862      	ldr	r2, [r4, #4]
 800673c:	42a3      	cmp	r3, r4
 800673e:	bf0c      	ite	eq
 8006740:	6032      	streq	r2, [r6, #0]
 8006742:	605a      	strne	r2, [r3, #4]
 8006744:	e7ec      	b.n	8006720 <_malloc_r+0xa0>
 8006746:	4623      	mov	r3, r4
 8006748:	6864      	ldr	r4, [r4, #4]
 800674a:	e7b2      	b.n	80066b2 <_malloc_r+0x32>
 800674c:	4634      	mov	r4, r6
 800674e:	6876      	ldr	r6, [r6, #4]
 8006750:	e7b9      	b.n	80066c6 <_malloc_r+0x46>
 8006752:	230c      	movs	r3, #12
 8006754:	4638      	mov	r0, r7
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	f000 f81c 	bl	8006794 <__malloc_unlock>
 800675c:	e7a1      	b.n	80066a2 <_malloc_r+0x22>
 800675e:	6025      	str	r5, [r4, #0]
 8006760:	e7de      	b.n	8006720 <_malloc_r+0xa0>
 8006762:	bf00      	nop
 8006764:	200018c8 	.word	0x200018c8

08006768 <_sbrk_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	2300      	movs	r3, #0
 800676c:	4d05      	ldr	r5, [pc, #20]	; (8006784 <_sbrk_r+0x1c>)
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fd f82e 	bl	80037d4 <_sbrk>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_sbrk_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_sbrk_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	200018d0 	.word	0x200018d0

08006788 <__malloc_lock>:
 8006788:	4801      	ldr	r0, [pc, #4]	; (8006790 <__malloc_lock+0x8>)
 800678a:	f000 b809 	b.w	80067a0 <__retarget_lock_acquire_recursive>
 800678e:	bf00      	nop
 8006790:	200018d4 	.word	0x200018d4

08006794 <__malloc_unlock>:
 8006794:	4801      	ldr	r0, [pc, #4]	; (800679c <__malloc_unlock+0x8>)
 8006796:	f000 b804 	b.w	80067a2 <__retarget_lock_release_recursive>
 800679a:	bf00      	nop
 800679c:	200018d4 	.word	0x200018d4

080067a0 <__retarget_lock_acquire_recursive>:
 80067a0:	4770      	bx	lr

080067a2 <__retarget_lock_release_recursive>:
 80067a2:	4770      	bx	lr

080067a4 <_init>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr

080067b0 <_fini>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	bf00      	nop
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr
