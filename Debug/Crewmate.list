
Crewmate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006774  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006914  08006914  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800691c  0800691c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017d4  2000007c  080069a0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001850  080069a0  00021850  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d663  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d1  00000000  00000000  0002d708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0002ffe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00030d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fcb1  00000000  00000000  000319b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115fa  00000000  00000000  00051669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb9a3  00000000  00000000  00062c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be0  00000000  00000000  0011e658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080068e4 	.word	0x080068e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080068e4 	.word	0x080068e4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	; 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fmul>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d06f      	beq.n	8000e28 <__aeabi_fmul+0xf8>
 8000d48:	441a      	add	r2, r3
 8000d4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d56:	d01e      	beq.n	8000d96 <__aeabi_fmul+0x66>
 8000d58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d64:	fba0 3101 	umull	r3, r1, r0, r1
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d6c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d70:	bf3e      	ittt	cc
 8000d72:	0049      	lslcc	r1, r1, #1
 8000d74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	ea40 0001 	orr.w	r0, r0, r1
 8000d7e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d82:	2afd      	cmp	r2, #253	; 0xfd
 8000d84:	d81d      	bhi.n	8000dc2 <__aeabi_fmul+0x92>
 8000d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	0249      	lsleq	r1, r1, #9
 8000da2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000daa:	3a7f      	subs	r2, #127	; 0x7f
 8000dac:	bfc2      	ittt	gt
 8000dae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db6:	4770      	bxgt	lr
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	dc5d      	bgt.n	8000e80 <__aeabi_fmul+0x150>
 8000dc4:	f112 0f19 	cmn.w	r2, #25
 8000dc8:	bfdc      	itt	le
 8000dca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dce:	4770      	bxle	lr
 8000dd0:	f1c2 0200 	rsb	r2, r2, #0
 8000dd4:	0041      	lsls	r1, r0, #1
 8000dd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dda:	f1c2 0220 	rsb	r2, r2, #32
 8000dde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de6:	f140 0000 	adc.w	r0, r0, #0
 8000dea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dee:	bf08      	it	eq
 8000df0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df4:	4770      	bx	lr
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xce>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xe6>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fmul+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	bf18      	it	ne
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d00a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1d8      	bne.n	8000df6 <__aeabi_fmul+0xc6>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	bf17      	itett	ne
 8000e54:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e58:	4608      	moveq	r0, r1
 8000e5a:	f091 0f00 	teqne	r1, #0
 8000e5e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e62:	d014      	beq.n	8000e8e <__aeabi_fmul+0x15e>
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	d101      	bne.n	8000e6e <__aeabi_fmul+0x13e>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d10f      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e6e:	ea93 0f0c 	teq	r3, ip
 8000e72:	d103      	bne.n	8000e7c <__aeabi_fmul+0x14c>
 8000e74:	024b      	lsls	r3, r1, #9
 8000e76:	bf18      	it	ne
 8000e78:	4608      	movne	r0, r1
 8000e7a:	d108      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e8c:	4770      	bx	lr
 8000e8e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e92:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fdiv>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d069      	beq.n	8000f84 <__aeabi_fdiv+0xec>
 8000eb0:	eba2 0203 	sub.w	r2, r2, r3
 8000eb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ebe:	d037      	beq.n	8000f30 <__aeabi_fdiv+0x98>
 8000ec0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ecc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf38      	it	cc
 8000ed4:	005b      	lslcc	r3, r3, #1
 8000ed6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eda:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	bf24      	itt	cs
 8000ee2:	1a5b      	subcs	r3, r3, r1
 8000ee4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efa:	bf24      	itt	cs
 8000efc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	bf18      	it	ne
 8000f16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1a:	d1e0      	bne.n	8000ede <__aeabi_fdiv+0x46>
 8000f1c:	2afd      	cmp	r2, #253	; 0xfd
 8000f1e:	f63f af50 	bhi.w	8000dc2 <__aeabi_fmul+0x92>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f28:	bf08      	it	eq
 8000f2a:	f020 0001 	biceq.w	r0, r0, #1
 8000f2e:	4770      	bx	lr
 8000f30:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f38:	327f      	adds	r2, #127	; 0x7f
 8000f3a:	bfc2      	ittt	gt
 8000f3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f44:	4770      	bxgt	lr
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	e737      	b.n	8000dc2 <__aeabi_fmul+0x92>
 8000f52:	f092 0f00 	teq	r2, #0
 8000f56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0040      	lsleq	r0, r0, #1
 8000f5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f62:	3a01      	subeq	r2, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xc2>
 8000f66:	ea40 000c 	orr.w	r0, r0, ip
 8000f6a:	f093 0f00 	teq	r3, #0
 8000f6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0049      	lsleq	r1, r1, #1
 8000f76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7a:	3b01      	subeq	r3, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xda>
 8000f7e:	ea41 010c 	orr.w	r1, r1, ip
 8000f82:	e795      	b.n	8000eb0 <__aeabi_fdiv+0x18>
 8000f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d108      	bne.n	8000fa0 <__aeabi_fdiv+0x108>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	f47f af7d 	bne.w	8000e8e <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	f47f af70 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e776      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	d104      	bne.n	8000fb0 <__aeabi_fdiv+0x118>
 8000fa6:	024b      	lsls	r3, r1, #9
 8000fa8:	f43f af4c 	beq.w	8000e44 <__aeabi_fmul+0x114>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e76e      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb4:	bf18      	it	ne
 8000fb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fba:	d1ca      	bne.n	8000f52 <__aeabi_fdiv+0xba>
 8000fbc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc0:	f47f af5c 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000fc4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fc8:	f47f af3c 	bne.w	8000e44 <__aeabi_fmul+0x114>
 8000fcc:	e75f      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fce:	bf00      	nop

08000fd0 <__gesf2>:
 8000fd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd4:	e006      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fd6:	bf00      	nop

08000fd8 <__lesf2>:
 8000fd8:	f04f 0c01 	mov.w	ip, #1
 8000fdc:	e002      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__cmpsf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff4:	bf18      	it	ne
 8000ff6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffa:	d011      	beq.n	8001020 <__cmpsf2+0x40>
 8000ffc:	b001      	add	sp, #4
 8000ffe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001002:	bf18      	it	ne
 8001004:	ea90 0f01 	teqne	r0, r1
 8001008:	bf58      	it	pl
 800100a:	ebb2 0003 	subspl.w	r0, r2, r3
 800100e:	bf88      	it	hi
 8001010:	17c8      	asrhi	r0, r1, #31
 8001012:	bf38      	it	cc
 8001014:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001018:	bf18      	it	ne
 800101a:	f040 0001 	orrne.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001024:	d102      	bne.n	800102c <__cmpsf2+0x4c>
 8001026:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102a:	d105      	bne.n	8001038 <__cmpsf2+0x58>
 800102c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001030:	d1e4      	bne.n	8000ffc <__cmpsf2+0x1c>
 8001032:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001036:	d0e1      	beq.n	8000ffc <__cmpsf2+0x1c>
 8001038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__aeabi_cfrcmple>:
 8001040:	4684      	mov	ip, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4661      	mov	r1, ip
 8001046:	e7ff      	b.n	8001048 <__aeabi_cfcmpeq>

08001048 <__aeabi_cfcmpeq>:
 8001048:	b50f      	push	{r0, r1, r2, r3, lr}
 800104a:	f7ff ffc9 	bl	8000fe0 <__cmpsf2>
 800104e:	2800      	cmp	r0, #0
 8001050:	bf48      	it	mi
 8001052:	f110 0f00 	cmnmi.w	r0, #0
 8001056:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001058 <__aeabi_fcmpeq>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff fff4 	bl	8001048 <__aeabi_cfcmpeq>
 8001060:	bf0c      	ite	eq
 8001062:	2001      	moveq	r0, #1
 8001064:	2000      	movne	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmplt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffea 	bl	8001048 <__aeabi_cfcmpeq>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmple>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffe0 	bl	8001048 <__aeabi_cfcmpeq>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpge>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffd2 	bl	8001040 <__aeabi_cfrcmple>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpgt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffc8 	bl	8001040 <__aeabi_cfrcmple>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <__aeabi_uldivmod>:
 80010fc:	b953      	cbnz	r3, 8001114 <__aeabi_uldivmod+0x18>
 80010fe:	b94a      	cbnz	r2, 8001114 <__aeabi_uldivmod+0x18>
 8001100:	2900      	cmp	r1, #0
 8001102:	bf08      	it	eq
 8001104:	2800      	cmpeq	r0, #0
 8001106:	bf1c      	itt	ne
 8001108:	f04f 31ff 	movne.w	r1, #4294967295
 800110c:	f04f 30ff 	movne.w	r0, #4294967295
 8001110:	f000 b976 	b.w	8001400 <__aeabi_idiv0>
 8001114:	f1ad 0c08 	sub.w	ip, sp, #8
 8001118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800111c:	f000 f806 	bl	800112c <__udivmoddi4>
 8001120:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001128:	b004      	add	sp, #16
 800112a:	4770      	bx	lr

0800112c <__udivmoddi4>:
 800112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001130:	9e08      	ldr	r6, [sp, #32]
 8001132:	460d      	mov	r5, r1
 8001134:	4604      	mov	r4, r0
 8001136:	4688      	mov	r8, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d14d      	bne.n	80011d8 <__udivmoddi4+0xac>
 800113c:	428a      	cmp	r2, r1
 800113e:	4694      	mov	ip, r2
 8001140:	d968      	bls.n	8001214 <__udivmoddi4+0xe8>
 8001142:	fab2 f282 	clz	r2, r2
 8001146:	b152      	cbz	r2, 800115e <__udivmoddi4+0x32>
 8001148:	fa01 f302 	lsl.w	r3, r1, r2
 800114c:	f1c2 0120 	rsb	r1, r2, #32
 8001150:	fa20 f101 	lsr.w	r1, r0, r1
 8001154:	fa0c fc02 	lsl.w	ip, ip, r2
 8001158:	ea41 0803 	orr.w	r8, r1, r3
 800115c:	4094      	lsls	r4, r2
 800115e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001162:	fbb8 f7f1 	udiv	r7, r8, r1
 8001166:	fa1f fe8c 	uxth.w	lr, ip
 800116a:	fb01 8817 	mls	r8, r1, r7, r8
 800116e:	fb07 f00e 	mul.w	r0, r7, lr
 8001172:	0c23      	lsrs	r3, r4, #16
 8001174:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001178:	4298      	cmp	r0, r3
 800117a:	d90a      	bls.n	8001192 <__udivmoddi4+0x66>
 800117c:	eb1c 0303 	adds.w	r3, ip, r3
 8001180:	f107 35ff 	add.w	r5, r7, #4294967295
 8001184:	f080 811e 	bcs.w	80013c4 <__udivmoddi4+0x298>
 8001188:	4298      	cmp	r0, r3
 800118a:	f240 811b 	bls.w	80013c4 <__udivmoddi4+0x298>
 800118e:	3f02      	subs	r7, #2
 8001190:	4463      	add	r3, ip
 8001192:	1a1b      	subs	r3, r3, r0
 8001194:	fbb3 f0f1 	udiv	r0, r3, r1
 8001198:	fb01 3310 	mls	r3, r1, r0, r3
 800119c:	fb00 fe0e 	mul.w	lr, r0, lr
 80011a0:	b2a4      	uxth	r4, r4
 80011a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011a6:	45a6      	cmp	lr, r4
 80011a8:	d90a      	bls.n	80011c0 <__udivmoddi4+0x94>
 80011aa:	eb1c 0404 	adds.w	r4, ip, r4
 80011ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80011b2:	f080 8109 	bcs.w	80013c8 <__udivmoddi4+0x29c>
 80011b6:	45a6      	cmp	lr, r4
 80011b8:	f240 8106 	bls.w	80013c8 <__udivmoddi4+0x29c>
 80011bc:	4464      	add	r4, ip
 80011be:	3802      	subs	r0, #2
 80011c0:	2100      	movs	r1, #0
 80011c2:	eba4 040e 	sub.w	r4, r4, lr
 80011c6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011ca:	b11e      	cbz	r6, 80011d4 <__udivmoddi4+0xa8>
 80011cc:	2300      	movs	r3, #0
 80011ce:	40d4      	lsrs	r4, r2
 80011d0:	e9c6 4300 	strd	r4, r3, [r6]
 80011d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d8:	428b      	cmp	r3, r1
 80011da:	d908      	bls.n	80011ee <__udivmoddi4+0xc2>
 80011dc:	2e00      	cmp	r6, #0
 80011de:	f000 80ee 	beq.w	80013be <__udivmoddi4+0x292>
 80011e2:	2100      	movs	r1, #0
 80011e4:	e9c6 0500 	strd	r0, r5, [r6]
 80011e8:	4608      	mov	r0, r1
 80011ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ee:	fab3 f183 	clz	r1, r3
 80011f2:	2900      	cmp	r1, #0
 80011f4:	d14a      	bne.n	800128c <__udivmoddi4+0x160>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d302      	bcc.n	8001200 <__udivmoddi4+0xd4>
 80011fa:	4282      	cmp	r2, r0
 80011fc:	f200 80fc 	bhi.w	80013f8 <__udivmoddi4+0x2cc>
 8001200:	1a84      	subs	r4, r0, r2
 8001202:	eb65 0303 	sbc.w	r3, r5, r3
 8001206:	2001      	movs	r0, #1
 8001208:	4698      	mov	r8, r3
 800120a:	2e00      	cmp	r6, #0
 800120c:	d0e2      	beq.n	80011d4 <__udivmoddi4+0xa8>
 800120e:	e9c6 4800 	strd	r4, r8, [r6]
 8001212:	e7df      	b.n	80011d4 <__udivmoddi4+0xa8>
 8001214:	b902      	cbnz	r2, 8001218 <__udivmoddi4+0xec>
 8001216:	deff      	udf	#255	; 0xff
 8001218:	fab2 f282 	clz	r2, r2
 800121c:	2a00      	cmp	r2, #0
 800121e:	f040 8091 	bne.w	8001344 <__udivmoddi4+0x218>
 8001222:	eba1 000c 	sub.w	r0, r1, ip
 8001226:	2101      	movs	r1, #1
 8001228:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800122c:	fa1f fe8c 	uxth.w	lr, ip
 8001230:	fbb0 f3f7 	udiv	r3, r0, r7
 8001234:	fb07 0013 	mls	r0, r7, r3, r0
 8001238:	0c25      	lsrs	r5, r4, #16
 800123a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800123e:	fb0e f003 	mul.w	r0, lr, r3
 8001242:	42a8      	cmp	r0, r5
 8001244:	d908      	bls.n	8001258 <__udivmoddi4+0x12c>
 8001246:	eb1c 0505 	adds.w	r5, ip, r5
 800124a:	f103 38ff 	add.w	r8, r3, #4294967295
 800124e:	d202      	bcs.n	8001256 <__udivmoddi4+0x12a>
 8001250:	42a8      	cmp	r0, r5
 8001252:	f200 80ce 	bhi.w	80013f2 <__udivmoddi4+0x2c6>
 8001256:	4643      	mov	r3, r8
 8001258:	1a2d      	subs	r5, r5, r0
 800125a:	fbb5 f0f7 	udiv	r0, r5, r7
 800125e:	fb07 5510 	mls	r5, r7, r0, r5
 8001262:	fb0e fe00 	mul.w	lr, lr, r0
 8001266:	b2a4      	uxth	r4, r4
 8001268:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800126c:	45a6      	cmp	lr, r4
 800126e:	d908      	bls.n	8001282 <__udivmoddi4+0x156>
 8001270:	eb1c 0404 	adds.w	r4, ip, r4
 8001274:	f100 35ff 	add.w	r5, r0, #4294967295
 8001278:	d202      	bcs.n	8001280 <__udivmoddi4+0x154>
 800127a:	45a6      	cmp	lr, r4
 800127c:	f200 80b6 	bhi.w	80013ec <__udivmoddi4+0x2c0>
 8001280:	4628      	mov	r0, r5
 8001282:	eba4 040e 	sub.w	r4, r4, lr
 8001286:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800128a:	e79e      	b.n	80011ca <__udivmoddi4+0x9e>
 800128c:	f1c1 0720 	rsb	r7, r1, #32
 8001290:	408b      	lsls	r3, r1
 8001292:	fa22 fc07 	lsr.w	ip, r2, r7
 8001296:	ea4c 0c03 	orr.w	ip, ip, r3
 800129a:	fa25 fa07 	lsr.w	sl, r5, r7
 800129e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012a2:	fbba f8f9 	udiv	r8, sl, r9
 80012a6:	fa20 f307 	lsr.w	r3, r0, r7
 80012aa:	fb09 aa18 	mls	sl, r9, r8, sl
 80012ae:	408d      	lsls	r5, r1
 80012b0:	fa1f fe8c 	uxth.w	lr, ip
 80012b4:	431d      	orrs	r5, r3
 80012b6:	fa00 f301 	lsl.w	r3, r0, r1
 80012ba:	fb08 f00e 	mul.w	r0, r8, lr
 80012be:	0c2c      	lsrs	r4, r5, #16
 80012c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012c4:	42a0      	cmp	r0, r4
 80012c6:	fa02 f201 	lsl.w	r2, r2, r1
 80012ca:	d90b      	bls.n	80012e4 <__udivmoddi4+0x1b8>
 80012cc:	eb1c 0404 	adds.w	r4, ip, r4
 80012d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80012d4:	f080 8088 	bcs.w	80013e8 <__udivmoddi4+0x2bc>
 80012d8:	42a0      	cmp	r0, r4
 80012da:	f240 8085 	bls.w	80013e8 <__udivmoddi4+0x2bc>
 80012de:	f1a8 0802 	sub.w	r8, r8, #2
 80012e2:	4464      	add	r4, ip
 80012e4:	1a24      	subs	r4, r4, r0
 80012e6:	fbb4 f0f9 	udiv	r0, r4, r9
 80012ea:	fb09 4410 	mls	r4, r9, r0, r4
 80012ee:	fb00 fe0e 	mul.w	lr, r0, lr
 80012f2:	b2ad      	uxth	r5, r5
 80012f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012f8:	45a6      	cmp	lr, r4
 80012fa:	d908      	bls.n	800130e <__udivmoddi4+0x1e2>
 80012fc:	eb1c 0404 	adds.w	r4, ip, r4
 8001300:	f100 35ff 	add.w	r5, r0, #4294967295
 8001304:	d26c      	bcs.n	80013e0 <__udivmoddi4+0x2b4>
 8001306:	45a6      	cmp	lr, r4
 8001308:	d96a      	bls.n	80013e0 <__udivmoddi4+0x2b4>
 800130a:	3802      	subs	r0, #2
 800130c:	4464      	add	r4, ip
 800130e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001312:	fba0 9502 	umull	r9, r5, r0, r2
 8001316:	eba4 040e 	sub.w	r4, r4, lr
 800131a:	42ac      	cmp	r4, r5
 800131c:	46c8      	mov	r8, r9
 800131e:	46ae      	mov	lr, r5
 8001320:	d356      	bcc.n	80013d0 <__udivmoddi4+0x2a4>
 8001322:	d053      	beq.n	80013cc <__udivmoddi4+0x2a0>
 8001324:	2e00      	cmp	r6, #0
 8001326:	d069      	beq.n	80013fc <__udivmoddi4+0x2d0>
 8001328:	ebb3 0208 	subs.w	r2, r3, r8
 800132c:	eb64 040e 	sbc.w	r4, r4, lr
 8001330:	fa22 f301 	lsr.w	r3, r2, r1
 8001334:	fa04 f707 	lsl.w	r7, r4, r7
 8001338:	431f      	orrs	r7, r3
 800133a:	40cc      	lsrs	r4, r1
 800133c:	e9c6 7400 	strd	r7, r4, [r6]
 8001340:	2100      	movs	r1, #0
 8001342:	e747      	b.n	80011d4 <__udivmoddi4+0xa8>
 8001344:	fa0c fc02 	lsl.w	ip, ip, r2
 8001348:	f1c2 0120 	rsb	r1, r2, #32
 800134c:	fa25 f301 	lsr.w	r3, r5, r1
 8001350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001354:	fa20 f101 	lsr.w	r1, r0, r1
 8001358:	4095      	lsls	r5, r2
 800135a:	430d      	orrs	r5, r1
 800135c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001360:	fb07 3311 	mls	r3, r7, r1, r3
 8001364:	fa1f fe8c 	uxth.w	lr, ip
 8001368:	0c28      	lsrs	r0, r5, #16
 800136a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800136e:	fb01 f30e 	mul.w	r3, r1, lr
 8001372:	4283      	cmp	r3, r0
 8001374:	fa04 f402 	lsl.w	r4, r4, r2
 8001378:	d908      	bls.n	800138c <__udivmoddi4+0x260>
 800137a:	eb1c 0000 	adds.w	r0, ip, r0
 800137e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001382:	d22f      	bcs.n	80013e4 <__udivmoddi4+0x2b8>
 8001384:	4283      	cmp	r3, r0
 8001386:	d92d      	bls.n	80013e4 <__udivmoddi4+0x2b8>
 8001388:	3902      	subs	r1, #2
 800138a:	4460      	add	r0, ip
 800138c:	1ac0      	subs	r0, r0, r3
 800138e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001392:	fb07 0013 	mls	r0, r7, r3, r0
 8001396:	b2ad      	uxth	r5, r5
 8001398:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800139c:	fb03 f00e 	mul.w	r0, r3, lr
 80013a0:	42a8      	cmp	r0, r5
 80013a2:	d908      	bls.n	80013b6 <__udivmoddi4+0x28a>
 80013a4:	eb1c 0505 	adds.w	r5, ip, r5
 80013a8:	f103 38ff 	add.w	r8, r3, #4294967295
 80013ac:	d216      	bcs.n	80013dc <__udivmoddi4+0x2b0>
 80013ae:	42a8      	cmp	r0, r5
 80013b0:	d914      	bls.n	80013dc <__udivmoddi4+0x2b0>
 80013b2:	3b02      	subs	r3, #2
 80013b4:	4465      	add	r5, ip
 80013b6:	1a28      	subs	r0, r5, r0
 80013b8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013bc:	e738      	b.n	8001230 <__udivmoddi4+0x104>
 80013be:	4631      	mov	r1, r6
 80013c0:	4630      	mov	r0, r6
 80013c2:	e707      	b.n	80011d4 <__udivmoddi4+0xa8>
 80013c4:	462f      	mov	r7, r5
 80013c6:	e6e4      	b.n	8001192 <__udivmoddi4+0x66>
 80013c8:	4618      	mov	r0, r3
 80013ca:	e6f9      	b.n	80011c0 <__udivmoddi4+0x94>
 80013cc:	454b      	cmp	r3, r9
 80013ce:	d2a9      	bcs.n	8001324 <__udivmoddi4+0x1f8>
 80013d0:	ebb9 0802 	subs.w	r8, r9, r2
 80013d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013d8:	3801      	subs	r0, #1
 80013da:	e7a3      	b.n	8001324 <__udivmoddi4+0x1f8>
 80013dc:	4643      	mov	r3, r8
 80013de:	e7ea      	b.n	80013b6 <__udivmoddi4+0x28a>
 80013e0:	4628      	mov	r0, r5
 80013e2:	e794      	b.n	800130e <__udivmoddi4+0x1e2>
 80013e4:	4641      	mov	r1, r8
 80013e6:	e7d1      	b.n	800138c <__udivmoddi4+0x260>
 80013e8:	46d0      	mov	r8, sl
 80013ea:	e77b      	b.n	80012e4 <__udivmoddi4+0x1b8>
 80013ec:	4464      	add	r4, ip
 80013ee:	3802      	subs	r0, #2
 80013f0:	e747      	b.n	8001282 <__udivmoddi4+0x156>
 80013f2:	3b02      	subs	r3, #2
 80013f4:	4465      	add	r5, ip
 80013f6:	e72f      	b.n	8001258 <__udivmoddi4+0x12c>
 80013f8:	4608      	mov	r0, r1
 80013fa:	e706      	b.n	800120a <__udivmoddi4+0xde>
 80013fc:	4631      	mov	r1, r6
 80013fe:	e6e9      	b.n	80011d4 <__udivmoddi4+0xa8>

08001400 <__aeabi_idiv0>:
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop

08001404 <turn>:

	resetPID();

}

void turn(int8_t n) {	// Make n 90 degree turns (no acceleration)
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]

	setPIDGoalD(0);
 800140e:	2000      	movs	r0, #0
 8001410:	f000 fe4e 	bl	80020b0 <setPIDGoalD>
	setPIDGoalA(turn_counts*n);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	b29b      	uxth	r3, r3
 800141a:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 800141e:	b292      	uxth	r2, r2
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	b29b      	uxth	r3, r3
 8001426:	b21b      	sxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fe55 	bl	80020d8 <setPIDGoalA>

	setState(TURNING);
 800142e:	2002      	movs	r0, #2
 8001430:	f000 fe66 	bl	8002100 <setState>

	while(!PIDdone())
 8001434:	bf00      	nop
 8001436:	f001 fbdb 	bl	8002bf0 <PIDdone>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0fa      	beq.n	8001436 <turn+0x32>
	{

	}

	resetPID();
 8001440:	f000 ff44 	bl	80022cc <resetPID>

}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <explore>:

	resetPID();

}

void explore() {	// Move forward at a constant speed until a turn is needed
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0

	setPIDGoalA(0);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 fe40 	bl	80020d8 <setPIDGoalA>

	setState(EXPLORING);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 fe51 	bl	8002100 <setState>

	resetEncoders();
 800145e:	f000 f8cf 	bl	8001600 <resetEncoders>

	int16_t explore_done = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	80fb      	strh	r3, [r7, #6]

	while(!explore_done)
 8001466:	bf00      	nop
 8001468:	e065      	b.n	8001536 <explore+0xea>
	{
		setIRAngle(readIR(IR_LEFT), readIR(IR_RIGHT));
 800146a:	2001      	movs	r0, #1
 800146c:	f000 f8d8 	bl	8001620 <readIR>
 8001470:	4603      	mov	r3, r0
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc04 	bl	8000c80 <__aeabi_ui2f>
 8001478:	4606      	mov	r6, r0
 800147a:	2002      	movs	r0, #2
 800147c:	f000 f8d0 	bl	8001620 <readIR>
 8001480:	4603      	mov	r3, r0
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fbfc 	bl	8000c80 <__aeabi_ui2f>
 8001488:	4603      	mov	r3, r0
 800148a:	4619      	mov	r1, r3
 800148c:	4630      	mov	r0, r6
 800148e:	f000 fe79 	bl	8002184 <setIRAngle>

		distance = getLeftEncoderCounts();
 8001492:	f000 f8a7 	bl	80015e4 <getLeftEncoderCounts>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <explore+0x100>)
 800149c:	601a      	str	r2, [r3, #0]
//			explore_done = 1;
//			resetPID();
//			break;
//			}

		if (fabs(((getLeftEncoderCounts() + getRightEncoderCounts())/2) - move_counts) < 20)
 800149e:	f000 f8a1 	bl	80015e4 <getLeftEncoderCounts>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461e      	mov	r6, r3
 80014a6:	f000 f88f 	bl	80015c8 <getRightEncoderCounts>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4433      	add	r3, r6
 80014ae:	0fda      	lsrs	r2, r3, #31
 80014b0:	4413      	add	r3, r2
 80014b2:	105b      	asrs	r3, r3, #1
 80014b4:	461a      	mov	r2, r3
 80014b6:	f44f 7319 	mov.w	r3, #612	; 0x264
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ffd5 	bl	800046c <__aeabi_i2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4614      	mov	r4, r2
 80014c8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <explore+0x104>)
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7ff faa5 	bl	8000a24 <__aeabi_dcmplt>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d100      	bne.n	80014e2 <explore+0x96>
 80014e0:	e029      	b.n	8001536 <explore+0xea>
		{
			Action nextMove = solver(DEAD);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f001 fed4 	bl	8003290 <solver>
 80014e8:	4603      	mov	r3, r0
 80014ea:	717b      	strb	r3, [r7, #5]
			switch(nextMove)
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d821      	bhi.n	8001536 <explore+0xea>
 80014f2:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <explore+0xac>)
 80014f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f8:	0800150f 	.word	0x0800150f
 80014fc:	08001509 	.word	0x08001509
 8001500:	08001521 	.word	0x08001521
 8001504:	08001531 	.word	0x08001531
			{
				case FORWARD:
					resetEncoders();
 8001508:	f000 f87a 	bl	8001600 <resetEncoders>
					break;
 800150c:	e013      	b.n	8001536 <explore+0xea>
				case LEFT:
//					moveEncoderCount(move_counts/2);
					resetPID();
 800150e:	f000 fedd 	bl	80022cc <resetPID>
					turn(-1);
 8001512:	f04f 30ff 	mov.w	r0, #4294967295
 8001516:	f7ff ff75 	bl	8001404 <turn>
					explore_done = 1;
 800151a:	2301      	movs	r3, #1
 800151c:	80fb      	strh	r3, [r7, #6]
					break;
 800151e:	e00a      	b.n	8001536 <explore+0xea>
				case RIGHT:
//					moveEncoderCount(move_counts/2);
					resetPID();
 8001520:	f000 fed4 	bl	80022cc <resetPID>
					turn(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff ff6d 	bl	8001404 <turn>
					explore_done = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	80fb      	strh	r3, [r7, #6]
					break;
 800152e:	e002      	b.n	8001536 <explore+0xea>
				case IDLE:
					explore_done = 1;
 8001530:	2301      	movs	r3, #1
 8001532:	80fb      	strh	r3, [r7, #6]
					break;
 8001534:	bf00      	nop
	while(!explore_done)
 8001536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d095      	beq.n	800146a <explore+0x1e>
			}
		}
	}

	resetPID();
 800153e:	f000 fec5 	bl	80022cc <resetPID>

}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	bf00      	nop
 800154c:	20000098 	.word	0x20000098
 8001550:	40340000 	.word	0x40340000

08001554 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <Delay_Init+0x38>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10e      	bne.n	8001582 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <Delay_Init+0x38>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4a08      	ldr	r2, [pc, #32]	; (800158c <Delay_Init+0x38>)
 800156a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156e:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <Delay_Init+0x3c>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <Delay_Init+0x3c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <Delay_Init+0x3c>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6013      	str	r3, [r2, #0]
    }
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000edf0 	.word	0xe000edf0
 8001590:	e0001000 	.word	0xe0001000

08001594 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <delayMicroseconds+0x30>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80015a8:	bf00      	nop
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <delayMicroseconds+0x30>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f8      	bhi.n	80015aa <delayMicroseconds+0x16>
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	e0001000 	.word	0xe0001000

080015c8 <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <getRightEncoderCounts+0x18>)
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	425b      	negs	r3, r3
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b21b      	sxth	r3, r3
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40000400 	.word	0x40000400

080015e4 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <getLeftEncoderCounts+0x18>)
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	425b      	negs	r3, r3
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b21b      	sxth	r3, r3
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	40010400 	.word	0x40010400

08001600 <resetEncoders>:

void resetEncoders() {
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <resetEncoders+0x18>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = (int16_t) 0;
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <resetEncoders+0x1c>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	40000400 	.word	0x40000400
 800161c:	40010400 	.word	0x40010400

08001620 <readIR>:
uint8_t complete = 0;

uint32_t usDelay = 100;

uint16_t readIR(IR ir)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue;

	switch(ir)
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d869      	bhi.n	8001704 <readIR+0xe4>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <readIR+0x18>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001649 	.word	0x08001649
 800163c:	08001677 	.word	0x08001677
 8001640:	080016a5 	.word	0x080016a5
 8001644:	080016d3 	.word	0x080016d3
	    {
	        case IR_FORWARD_LEFT:
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	4830      	ldr	r0, [pc, #192]	; (8001710 <readIR+0xf0>)
 800164e:	f003 fdb0 	bl	80051b2 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <readIR+0xf4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff9c 	bl	8001594 <delayMicroseconds>
	        	readValue = analogRead(ir);
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f85c 	bl	800171c <analogRead>
 8001664:	4603      	mov	r3, r0
 8001666:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	4828      	ldr	r0, [pc, #160]	; (8001710 <readIR+0xf0>)
 800166e:	f003 fda0 	bl	80051b2 <HAL_GPIO_WritePin>
	        	return readValue;
 8001672:	89fb      	ldrh	r3, [r7, #14]
 8001674:	e047      	b.n	8001706 <readIR+0xe6>
	            break;
	        case IR_LEFT:
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	2110      	movs	r1, #16
 800167a:	4825      	ldr	r0, [pc, #148]	; (8001710 <readIR+0xf0>)
 800167c:	f003 fd99 	bl	80051b2 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <readIR+0xf4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff85 	bl	8001594 <delayMicroseconds>
	        	readValue = analogRead(ir);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	4618      	mov	r0, r3
 800168e:	f000 f845 	bl	800171c <analogRead>
 8001692:	4603      	mov	r3, r0
 8001694:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2110      	movs	r1, #16
 800169a:	481d      	ldr	r0, [pc, #116]	; (8001710 <readIR+0xf0>)
 800169c:	f003 fd89 	bl	80051b2 <HAL_GPIO_WritePin>
	        	return readValue;
 80016a0:	89fb      	ldrh	r3, [r7, #14]
 80016a2:	e030      	b.n	8001706 <readIR+0xe6>
	            break;
	        case IR_RIGHT:
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2104      	movs	r1, #4
 80016a8:	4819      	ldr	r0, [pc, #100]	; (8001710 <readIR+0xf0>)
 80016aa:	f003 fd82 	bl	80051b2 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <readIR+0xf4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff6e 	bl	8001594 <delayMicroseconds>
	        	readValue = analogRead(ir);
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f82e 	bl	800171c <analogRead>
 80016c0:	4603      	mov	r3, r0
 80016c2:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2104      	movs	r1, #4
 80016c8:	4811      	ldr	r0, [pc, #68]	; (8001710 <readIR+0xf0>)
 80016ca:	f003 fd72 	bl	80051b2 <HAL_GPIO_WritePin>
	        	return readValue;
 80016ce:	89fb      	ldrh	r3, [r7, #14]
 80016d0:	e019      	b.n	8001706 <readIR+0xe6>
	            break;
	        case IR_FORWARD_RIGHT:
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d8:	480f      	ldr	r0, [pc, #60]	; (8001718 <readIR+0xf8>)
 80016da:	f003 fd6a 	bl	80051b2 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <readIR+0xf4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff56 	bl	8001594 <delayMicroseconds>
	        	readValue = analogRead(ir);
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f816 	bl	800171c <analogRead>
 80016f0:	4603      	mov	r3, r0
 80016f2:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fa:	4807      	ldr	r0, [pc, #28]	; (8001718 <readIR+0xf8>)
 80016fc:	f003 fd59 	bl	80051b2 <HAL_GPIO_WritePin>
	        	return readValue;
 8001700:	89fb      	ldrh	r3, [r7, #14]
 8001702:	e000      	b.n	8001706 <readIR+0xe6>
	            break;
	        default:
	            return 0;
 8001704:	2300      	movs	r3, #0
	    }
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40020000 	.word	0x40020000
 8001714:	20000000 	.word	0x20000000
 8001718:	40020400 	.word	0x40020400

0800171c <analogRead>:
{
	return readIR(IR_FORWARD_RIGHT);
}

uint16_t analogRead(IR ir)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 8001734:	f000 fbf8 	bl	8001f28 <Get_HADC1_Ptr>
 8001738:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b03      	cmp	r3, #3
 800173e:	d817      	bhi.n	8001770 <analogRead+0x54>
 8001740:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <analogRead+0x2c>)
 8001742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001746:	bf00      	nop
 8001748:	08001759 	.word	0x08001759
 800174c:	0800175f 	.word	0x0800175f
 8001750:	08001765 	.word	0x08001765
 8001754:	0800176b 	.word	0x0800176b
    {
        case IR_FORWARD_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 8001758:	2306      	movs	r3, #6
 800175a:	60fb      	str	r3, [r7, #12]
            break;
 800175c:	e00a      	b.n	8001774 <analogRead+0x58>
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_5;
 800175e:	2305      	movs	r3, #5
 8001760:	60fb      	str	r3, [r7, #12]
            break;
 8001762:	e007      	b.n	8001774 <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 8001764:	230b      	movs	r3, #11
 8001766:	60fb      	str	r3, [r7, #12]
            break;
 8001768:	e004      	b.n	8001774 <analogRead+0x58>
        case IR_FORWARD_RIGHT:
            sConfig.Channel = ADC_CHANNEL_10;
 800176a:	230a      	movs	r3, #10
 800176c:	60fb      	str	r3, [r7, #12]
            break;
 800176e:	e001      	b.n	8001774 <analogRead+0x58>
        default:
            return 0;
 8001770:	2300      	movs	r3, #0
 8001772:	e032      	b.n	80017da <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	4619      	mov	r1, r3
 8001782:	69f8      	ldr	r0, [r7, #28]
 8001784:	f002 fbce 	bl	8003f24 <HAL_ADC_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <analogRead+0x76>
    {
        return 0;
 800178e:	2300      	movs	r3, #0
 8001790:	e023      	b.n	80017da <analogRead+0xbe>
    }

    complete = 0;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <analogRead+0xc8>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	4913      	ldr	r1, [pc, #76]	; (80017e8 <analogRead+0xcc>)
 800179c:	69f8      	ldr	r0, [r7, #28]
 800179e:	f002 fa7f 	bl	8003ca0 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 80017a2:	e000      	b.n	80017a6 <analogRead+0x8a>
    {
        continue;
 80017a4:	bf00      	nop
    while (complete == 0)
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <analogRead+0xc8>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0fa      	beq.n	80017a4 <analogRead+0x88>
    }

    uint32_t sum = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 80017b6:	e00a      	b.n	80017ce <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 80017b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <analogRead+0xcc>)
 80017bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c0:	461a      	mov	r2, r3
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	4413      	add	r3, r2
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
        ++measurement;
 80017c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017ca:	3301      	adds	r3, #1
 80017cc:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 80017ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017d0:	2b7f      	cmp	r3, #127	; 0x7f
 80017d2:	d9f1      	bls.n	80017b8 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	09db      	lsrs	r3, r3, #7
 80017d8:	b29b      	uxth	r3, r3
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000019c 	.word	0x2000019c
 80017e8:	2000009c 	.word	0x2000009c

080017ec <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f002 fb31 	bl	8003e5c <HAL_ADC_Stop_DMA>
    complete = 1;
 80017fa:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_ADC_ConvCpltCallback+0x1c>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000019c 	.word	0x2000019c

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001810:	f002 f994 	bl	8003b3c <HAL_Init>

  /* USER CODE BEGIN Init */

  Delay_Init();
 8001814:	f7ff fe9e 	bl	8001554 <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001818:	f000 f8a0 	bl	800195c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181c:	f000 faa0 	bl	8001d60 <MX_GPIO_Init>
  MX_DMA_Init();
 8001820:	f000 fa7e 	bl	8001d20 <MX_DMA_Init>
  MX_ADC1_Init();
 8001824:	f000 f8d6 	bl	80019d4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001828:	f000 f926 	bl	8001a78 <MX_TIM1_Init>
  MX_TIM3_Init();
 800182c:	f000 f9cc 	bl	8001bc8 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001830:	f000 fa1e 	bl	8001c70 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001834:	213c      	movs	r1, #60	; 0x3c
 8001836:	483c      	ldr	r0, [pc, #240]	; (8001928 <main+0x11c>)
 8001838:	f004 fa92 	bl	8005d60 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800183c:	213c      	movs	r1, #60	; 0x3c
 800183e:	483b      	ldr	r0, [pc, #236]	; (800192c <main+0x120>)
 8001840:	f004 fa8e 	bl	8005d60 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001844:	2100      	movs	r1, #0
 8001846:	483a      	ldr	r0, [pc, #232]	; (8001930 <main+0x124>)
 8001848:	f004 f91c 	bl	8005a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800184c:	2104      	movs	r1, #4
 800184e:	4838      	ldr	r0, [pc, #224]	; (8001930 <main+0x124>)
 8001850:	f004 f918 	bl	8005a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001854:	2108      	movs	r1, #8
 8001856:	4836      	ldr	r0, [pc, #216]	; (8001930 <main+0x124>)
 8001858:	f004 f914 	bl	8005a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800185c:	210c      	movs	r1, #12
 800185e:	4834      	ldr	r0, [pc, #208]	; (8001930 <main+0x124>)
 8001860:	f004 f910 	bl	8005a84 <HAL_TIM_PWM_Start>

  HAL_Init();
 8001864:	f002 f96a 	bl	8003b3c <HAL_Init>

  HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800186e:	4831      	ldr	r0, [pc, #196]	; (8001934 <main+0x128>)
 8001870:	f003 fc9f 	bl	80051b2 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fed3 	bl	8001620 <readIR>
 800187a:	4603      	mov	r3, r0
 800187c:	b21a      	sxth	r2, r3
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <main+0x12c>)
 8001880:	801a      	strh	r2, [r3, #0]
	  leftIRvalue = readIR(IR_LEFT);
 8001882:	2001      	movs	r0, #1
 8001884:	f7ff fecc 	bl	8001620 <readIR>
 8001888:	4603      	mov	r3, r0
 800188a:	b21a      	sxth	r2, r3
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <main+0x130>)
 800188e:	801a      	strh	r2, [r3, #0]
	  rightIRvalue = readIR(IR_RIGHT);
 8001890:	2002      	movs	r0, #2
 8001892:	f7ff fec5 	bl	8001620 <readIR>
 8001896:	4603      	mov	r3, r0
 8001898:	b21a      	sxth	r2, r3
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <main+0x134>)
 800189c:	801a      	strh	r2, [r3, #0]
	  forwardRightIRvalue = readIR(IR_FORWARD_RIGHT);
 800189e:	2003      	movs	r0, #3
 80018a0:	f7ff febe 	bl	8001620 <readIR>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	4b26      	ldr	r3, [pc, #152]	; (8001944 <main+0x138>)
 80018aa:	801a      	strh	r2, [r3, #0]

	  left_counts = getLeftEncoderCounts();
 80018ac:	f7ff fe9a 	bl	80015e4 <getLeftEncoderCounts>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <main+0x13c>)
 80018b6:	801a      	strh	r2, [r3, #0]
	  right_counts = getRightEncoderCounts();
 80018b8:	f7ff fe86 	bl	80015c8 <getRightEncoderCounts>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <main+0x140>)
 80018c2:	801a      	strh	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(LeftButton_GPIO_Port, LeftButton_Pin))
 80018c4:	2101      	movs	r1, #1
 80018c6:	4822      	ldr	r0, [pc, #136]	; (8001950 <main+0x144>)
 80018c8:	f003 fc5c 	bl	8005184 <HAL_GPIO_ReadPin>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01b      	beq.n	800190a <main+0xfe>
	  {
		  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff fea4 	bl	8001620 <readIR>
 80018d8:	4603      	mov	r3, r0
 80018da:	b21c      	sxth	r4, r3
 80018dc:	2003      	movs	r0, #3
 80018de:	f7ff fe9f 	bl	8001620 <readIR>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b21d      	sxth	r5, r3
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff fe9a 	bl	8001620 <readIR>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b21e      	sxth	r6, r3
 80018f0:	2002      	movs	r0, #2
 80018f2:	f7ff fe95 	bl	8001620 <readIR>
 80018f6:	4603      	mov	r3, r0
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	4632      	mov	r2, r6
 80018fc:	4629      	mov	r1, r5
 80018fe:	4620      	mov	r0, r4
 8001900:	f000 fc0e 	bl	8002120 <setIRGoals>
		  irOffset_Set = 1;
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <main+0x148>)
 8001906:	2201      	movs	r2, #1
 8001908:	801a      	strh	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(RightButton_GPIO_Port, RightButton_Pin))
 800190a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800190e:	4809      	ldr	r0, [pc, #36]	; (8001934 <main+0x128>)
 8001910:	f003 fc38 	bl	8005184 <HAL_GPIO_ReadPin>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0ac      	beq.n	8001874 <main+0x68>
	  {
		  explore();
 800191a:	f7ff fd97 	bl	800144c <explore>
		  start_pressed = 1;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <main+0x14c>)
 8001920:	2201      	movs	r2, #1
 8001922:	801a      	strh	r2, [r3, #0]
	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 8001924:	e7a6      	b.n	8001874 <main+0x68>
 8001926:	bf00      	nop
 8001928:	20000290 	.word	0x20000290
 800192c:	200002d8 	.word	0x200002d8
 8001930:	20000248 	.word	0x20000248
 8001934:	40020800 	.word	0x40020800
 8001938:	20000326 	.word	0x20000326
 800193c:	20000328 	.word	0x20000328
 8001940:	2000032a 	.word	0x2000032a
 8001944:	2000032c 	.word	0x2000032c
 8001948:	20000322 	.word	0x20000322
 800194c:	20000324 	.word	0x20000324
 8001950:	40020400 	.word	0x40020400
 8001954:	2000032e 	.word	0x2000032e
 8001958:	20000320 	.word	0x20000320

0800195c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b092      	sub	sp, #72	; 0x48
 8001960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001962:	f107 0318 	add.w	r3, r7, #24
 8001966:	2230      	movs	r2, #48	; 0x30
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f004 feb8 	bl	80066e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001982:	2301      	movs	r3, #1
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001986:	2310      	movs	r3, #16
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800198a:	2300      	movs	r3, #0
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fc26 	bl	80051e4 <HAL_RCC_OscConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800199e:	f000 facd 	bl	8001f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a2:	230f      	movs	r3, #15
 80019a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fe60 	bl	8005680 <HAL_RCC_ClockConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019c6:	f000 fab9 	bl	8001f3c <Error_Handler>
  }
}
 80019ca:	bf00      	nop
 80019cc:	3748      	adds	r7, #72	; 0x48
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019da:	463b      	mov	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <MX_ADC1_Init+0x98>)
 80019e8:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <MX_ADC1_Init+0x9c>)
 80019ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <MX_ADC1_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <MX_ADC1_Init+0x98>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019f8:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <MX_ADC1_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a14:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <MX_ADC1_Init+0xa0>)
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a32:	480e      	ldr	r0, [pc, #56]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a34:	f002 f8f0 	bl	8003c18 <HAL_ADC_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a3e:	f000 fa7d 	bl	8001f3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a42:	2305      	movs	r3, #5
 8001a44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a54:	f002 fa66 	bl	8003f24 <HAL_ADC_ConfigChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a5e:	f000 fa6d 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200001a0 	.word	0x200001a0
 8001a70:	40012000 	.word	0x40012000
 8001a74:	0f000001 	.word	0x0f000001

08001a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b092      	sub	sp, #72	; 0x48
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f004 fe1c 	bl	80066e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aa8:	4b45      	ldr	r3, [pc, #276]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001aaa:	4a46      	ldr	r2, [pc, #280]	; (8001bc4 <MX_TIM1_Init+0x14c>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aae:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001abc:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001ac0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac8:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ad4:	483a      	ldr	r0, [pc, #232]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001ad6:	f003 ff85 	bl	80059e4 <HAL_TIM_PWM_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001ae0:	f000 fa2c 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001af0:	4619      	mov	r1, r3
 8001af2:	4833      	ldr	r0, [pc, #204]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001af4:	f004 fcee 	bl	80064d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001afe:	f000 fa1d 	bl	8001f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b02:	2360      	movs	r3, #96	; 0x60
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	2200      	movs	r2, #0
 8001b24:	4619      	mov	r1, r3
 8001b26:	4826      	ldr	r0, [pc, #152]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001b28:	f004 f9a8 	bl	8005e7c <HAL_TIM_PWM_ConfigChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001b32:	f000 fa03 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4820      	ldr	r0, [pc, #128]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001b40:	f004 f99c 	bl	8005e7c <HAL_TIM_PWM_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001b4a:	f000 f9f7 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b52:	2208      	movs	r2, #8
 8001b54:	4619      	mov	r1, r3
 8001b56:	481a      	ldr	r0, [pc, #104]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001b58:	f004 f990 	bl	8005e7c <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001b62:	f000 f9eb 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001b70:	f004 f984 	bl	8005e7c <HAL_TIM_PWM_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001b7a:	f000 f9df 	bl	8001f3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001ba2:	f004 fd11 	bl	80065c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001bac:	f000 f9c6 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <MX_TIM1_Init+0x148>)
 8001bb2:	f001 fe41 	bl	8003838 <HAL_TIM_MspPostInit>

}
 8001bb6:	bf00      	nop
 8001bb8:	3748      	adds	r7, #72	; 0x48
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000248 	.word	0x20000248
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	; 0x30
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	2224      	movs	r2, #36	; 0x24
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f004 fd82 	bl	80066e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <MX_TIM3_Init+0xa0>)
 8001be6:	4a21      	ldr	r2, [pc, #132]	; (8001c6c <MX_TIM3_Init+0xa4>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <MX_TIM3_Init+0xa0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_TIM3_Init+0xa0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <MX_TIM3_Init+0xa0>)
 8001bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_TIM3_Init+0xa0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_TIM3_Init+0xa0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c12:	2301      	movs	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c22:	2301      	movs	r3, #1
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <MX_TIM3_Init+0xa0>)
 8001c36:	f003 ffed 	bl	8005c14 <HAL_TIM_Encoder_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c40:	f000 f97c 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_TIM3_Init+0xa0>)
 8001c52:	f004 fc3f 	bl	80064d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c5c:	f000 f96e 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	3730      	adds	r7, #48	; 0x30
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000290 	.word	0x20000290
 8001c6c:	40000400 	.word	0x40000400

08001c70 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2224      	movs	r2, #36	; 0x24
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 fd2e 	bl	80066e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c8c:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <MX_TIM8_Init+0xa8>)
 8001c8e:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <MX_TIM8_Init+0xac>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <MX_TIM8_Init+0xa8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <MX_TIM8_Init+0xa8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <MX_TIM8_Init+0xa8>)
 8001ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <MX_TIM8_Init+0xa8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MX_TIM8_Init+0xa8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <MX_TIM8_Init+0xa8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <MX_TIM8_Init+0xa8>)
 8001ce4:	f003 ff96 	bl	8005c14 <HAL_TIM_Encoder_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001cee:	f000 f925 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <MX_TIM8_Init+0xa8>)
 8001d00:	f004 fbe8 	bl	80064d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001d0a:	f000 f917 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	3730      	adds	r7, #48	; 0x30
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200002d8 	.word	0x200002d8
 8001d1c:	40010400 	.word	0x40010400

08001d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_DMA_Init+0x3c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <MX_DMA_Init+0x3c>)
 8001d30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_DMA_Init+0x3c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2038      	movs	r0, #56	; 0x38
 8001d48:	f002 fc6b 	bl	8004622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d4c:	2038      	movs	r0, #56	; 0x38
 8001d4e:	f002 fc84 	bl	800465a <HAL_NVIC_EnableIRQ>

}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a65      	ldr	r2, [pc, #404]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a5e      	ldr	r2, [pc, #376]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b5c      	ldr	r3, [pc, #368]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a57      	ldr	r2, [pc, #348]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b55      	ldr	r3, [pc, #340]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b51      	ldr	r3, [pc, #324]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a50      	ldr	r2, [pc, #320]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <MX_GPIO_Init+0x1b4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_LED_Pin|Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001dec:	484a      	ldr	r0, [pc, #296]	; (8001f18 <MX_GPIO_Init+0x1b8>)
 8001dee:	f003 f9e0 	bl	80051b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2194      	movs	r1, #148	; 0x94
 8001df6:	4849      	ldr	r0, [pc, #292]	; (8001f1c <MX_GPIO_Init+0x1bc>)
 8001df8:	f003 f9db 	bl	80051b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e02:	4847      	ldr	r0, [pc, #284]	; (8001f20 <MX_GPIO_Init+0x1c0>)
 8001e04:	f003 f9d5 	bl	80051b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_LED_Pin Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|Y_LED_Pin|G_LED_Pin;
 8001e08:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	483d      	ldr	r0, [pc, #244]	; (8001f18 <MX_GPIO_Init+0x1b8>)
 8001e22:	f003 f811 	bl	8004e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 8001e26:	2394      	movs	r3, #148	; 0x94
 8001e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4837      	ldr	r0, [pc, #220]	; (8001f1c <MX_GPIO_Init+0x1bc>)
 8001e3e:	f003 f803 	bl	8004e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001e42:	2308      	movs	r3, #8
 8001e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e52:	2301      	movs	r3, #1
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	482f      	ldr	r0, [pc, #188]	; (8001f1c <MX_GPIO_Init+0x1bc>)
 8001e5e:	f002 fff3 	bl	8004e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftButton_Pin Switch3_Pin */
  GPIO_InitStruct.Pin = LeftButton_Pin|Switch3_Pin;
 8001e62:	2309      	movs	r3, #9
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	482a      	ldr	r0, [pc, #168]	; (8001f20 <MX_GPIO_Init+0x1c0>)
 8001e76:	f002 ffe7 	bl	8004e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e8c:	2307      	movs	r3, #7
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4822      	ldr	r0, [pc, #136]	; (8001f20 <MX_GPIO_Init+0x1c0>)
 8001e98:	f002 ffd6 	bl	8004e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightButton_Pin Switch1_Pin */
  GPIO_InitStruct.Pin = RightButton_Pin|Switch1_Pin;
 8001e9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4819      	ldr	r0, [pc, #100]	; (8001f18 <MX_GPIO_Init+0x1b8>)
 8001eb2:	f002 ffc9 	bl	8004e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4816      	ldr	r0, [pc, #88]	; (8001f24 <MX_GPIO_Init+0x1c4>)
 8001eca:	f002 ffbd 	bl	8004e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001ece:	23c0      	movs	r3, #192	; 0xc0
 8001ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed2:	2312      	movs	r3, #18
 8001ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <MX_GPIO_Init+0x1c0>)
 8001eea:	f002 ffad 	bl	8004e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8001eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	4806      	ldr	r0, [pc, #24]	; (8001f20 <MX_GPIO_Init+0x1c0>)
 8001f08:	f002 ff9e 	bl	8004e48 <HAL_GPIO_Init>

}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	; 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020c00 	.word	0x40020c00

08001f28 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */

ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
	return &hadc1;
 8001f2c:	4b02      	ldr	r3, [pc, #8]	; (8001f38 <Get_HADC1_Ptr+0x10>)
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	200001a0 	.word	0x200001a0

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
}
 8001f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <Error_Handler+0x8>
	...

08001f48 <limitPWM>:
 * motors.c
 */

#include "motors.h"

float limitPWM(float pwm) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe fa9d 	bl	8000490 <__aeabi_f2d>
 8001f56:	a30e      	add	r3, pc, #56	; (adr r3, 8001f90 <limitPWM+0x48>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe fd80 	bl	8000a60 <__aeabi_dcmpgt>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <limitPWM+0x22>
		return PWM_MAX;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <limitPWM+0x58>)
 8001f68:	e00d      	b.n	8001f86 <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fa90 	bl	8000490 <__aeabi_f2d>
 8001f70:	a309      	add	r3, pc, #36	; (adr r3, 8001f98 <limitPWM+0x50>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fd55 	bl	8000a24 <__aeabi_dcmplt>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <limitPWM+0x3c>
		return -PWM_MAX;
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <limitPWM+0x5c>)
 8001f82:	e000      	b.n	8001f86 <limitPWM+0x3e>
	else
		return pwm;
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	9999999a 	.word	0x9999999a
 8001f94:	3fe99999 	.word	0x3fe99999
 8001f98:	9999999a 	.word	0x9999999a
 8001f9c:	bfe99999 	.word	0xbfe99999
 8001fa0:	3f4ccccd 	.word	0x3f4ccccd
 8001fa4:	bf4ccccd 	.word	0xbf4ccccd

08001fa8 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8001fb0:	f04f 0100 	mov.w	r1, #0
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff f86d 	bl	8001094 <__aeabi_fcmpge>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d012      	beq.n	8001fe6 <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8001fc0:	4b15      	ldr	r3, [pc, #84]	; (8002018 <setMotorLPWM+0x70>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ffbe 	bl	8001f48 <limitPWM>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4913      	ldr	r1, [pc, #76]	; (800201c <setMotorLPWM+0x74>)
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fead 	bl	8000d30 <__aeabi_fmul>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4c0f      	ldr	r4, [pc, #60]	; (8002018 <setMotorLPWM+0x70>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f86e 	bl	80010bc <__aeabi_f2uiz>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	63a3      	str	r3, [r4, #56]	; 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 8001fe4:	e013      	b.n	800200e <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <setMotorLPWM+0x70>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ffab 	bl	8001f48 <limitPWM>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <setMotorLPWM+0x74>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fe9a 	bl	8000d30 <__aeabi_fmul>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002002:	4c05      	ldr	r4, [pc, #20]	; (8002018 <setMotorLPWM+0x70>)
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f859 	bl	80010bc <__aeabi_f2uiz>
 800200a:	4603      	mov	r3, r0
 800200c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}
 8002016:	bf00      	nop
 8002018:	40010000 	.word	0x40010000
 800201c:	4547f000 	.word	0x4547f000

08002020 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8002028:	f04f 0100 	mov.w	r1, #0
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff f831 	bl	8001094 <__aeabi_fcmpge>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d012      	beq.n	800205e <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <setMotorRPWM+0x70>)
 800203a:	2200      	movs	r2, #0
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ff82 	bl	8001f48 <limitPWM>
 8002044:	4603      	mov	r3, r0
 8002046:	4913      	ldr	r1, [pc, #76]	; (8002094 <setMotorRPWM+0x74>)
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fe71 	bl	8000d30 <__aeabi_fmul>
 800204e:	4603      	mov	r3, r0
 8002050:	4c0f      	ldr	r4, [pc, #60]	; (8002090 <setMotorRPWM+0x70>)
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f832 	bl	80010bc <__aeabi_f2uiz>
 8002058:	4603      	mov	r3, r0
 800205a:	63e3      	str	r3, [r4, #60]	; 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800205c:	e013      	b.n	8002086 <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <setMotorRPWM+0x70>)
 8002060:	2200      	movs	r2, #0
 8002062:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff6f 	bl	8001f48 <limitPWM>
 800206a:	4603      	mov	r3, r0
 800206c:	4909      	ldr	r1, [pc, #36]	; (8002094 <setMotorRPWM+0x74>)
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fe5e 	bl	8000d30 <__aeabi_fmul>
 8002074:	4603      	mov	r3, r0
 8002076:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800207a:	4c05      	ldr	r4, [pc, #20]	; (8002090 <setMotorRPWM+0x70>)
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff f81d 	bl	80010bc <__aeabi_f2uiz>
 8002082:	4603      	mov	r3, r0
 8002084:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bd90      	pop	{r4, r7, pc}
 800208e:	bf00      	nop
 8002090:	40010000 	.word	0x40010000
 8002094:	4547f000 	.word	0x4547f000

08002098 <resetMotors>:

void resetMotors() {
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 800209c:	f04f 0000 	mov.w	r0, #0
 80020a0:	f7ff ff82 	bl	8001fa8 <setMotorLPWM>
	setMotorRPWM(0);
 80020a4:	f04f 0000 	mov.w	r0, #0
 80020a8:	f7ff ffba 	bl	8002020 <setMotorRPWM>
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <setPIDGoalD>:
STATE state = REST;
float left_PWM_value = 0;
float right_PWM_value = 0;
int goal_reached_timer = 0;

void setPIDGoalD(int16_t distance) { goalDistance = distance; }
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
 80020ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fde2 	bl	8000c88 <__aeabi_i2f>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a03      	ldr	r2, [pc, #12]	; (80020d4 <setPIDGoalD+0x24>)
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000338 	.word	0x20000338

080020d8 <setPIDGoalA>:
void setPIDGoalA(int16_t angle) { goalAngle = angle; }
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
 80020e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fdce 	bl	8000c88 <__aeabi_i2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4a03      	ldr	r2, [pc, #12]	; (80020fc <setPIDGoalA+0x24>)
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000033c 	.word	0x2000033c

08002100 <setState>:
void setState(STATE curr_state) { state = curr_state; }
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	4a04      	ldr	r2, [pc, #16]	; (800211c <setState+0x1c>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	7013      	strb	r3, [r2, #0]
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2000038c 	.word	0x2000038c

08002120 <setIRGoals>:
void setIRGoals(int16_t frontLeftGoal, int16_t frontRightGoal, int16_t leftGoal, int16_t rightGoal) {
 8002120:	b490      	push	{r4, r7}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4604      	mov	r4, r0
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4623      	mov	r3, r4
 8002130:	80fb      	strh	r3, [r7, #6]
 8002132:	4603      	mov	r3, r0
 8002134:	80bb      	strh	r3, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	807b      	strh	r3, [r7, #2]
 800213a:	4613      	mov	r3, r2
 800213c:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = leftGoal - rightGoal;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	883b      	ldrh	r3, [r7, #0]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	b29b      	uxth	r3, r3
 8002146:	b21a      	sxth	r2, r3
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <setIRGoals+0x50>)
 800214a:	801a      	strh	r2, [r3, #0]
	goal_forward_left = frontLeftGoal;
 800214c:	4a09      	ldr	r2, [pc, #36]	; (8002174 <setIRGoals+0x54>)
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	8013      	strh	r3, [r2, #0]
	goal_forward_right = frontRightGoal;
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <setIRGoals+0x58>)
 8002154:	88bb      	ldrh	r3, [r7, #4]
 8002156:	8013      	strh	r3, [r2, #0]
	goal_left = leftGoal;
 8002158:	4a08      	ldr	r2, [pc, #32]	; (800217c <setIRGoals+0x5c>)
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	8013      	strh	r3, [r2, #0]
	goal_right = rightGoal;
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <setIRGoals+0x60>)
 8002160:	883b      	ldrh	r3, [r7, #0]
 8002162:	8013      	strh	r3, [r2, #0]

}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bc90      	pop	{r4, r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000340 	.word	0x20000340
 8002174:	20000330 	.word	0x20000330
 8002178:	20000332 	.word	0x20000332
 800217c:	20000334 	.word	0x20000334
 8002180:	20000336 	.word	0x20000336

08002184 <setIRAngle>:
	setPIDGoalD(front_kPx * ((goal_forward_left - curr_forward_left + goal_forward_right - curr_forward_left)/2));

}

// TODO: CHANGE TO USE WALL CHECK FUNCTIONS
void setIRAngle(float left, float right){
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]

	if (left > 600 && right > 600 && goalAngle == 0)
 800218e:	4947      	ldr	r1, [pc, #284]	; (80022ac <setIRAngle+0x128>)
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7fe ff89 	bl	80010a8 <__aeabi_fcmpgt>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d02d      	beq.n	80021f8 <setIRAngle+0x74>
 800219c:	4943      	ldr	r1, [pc, #268]	; (80022ac <setIRAngle+0x128>)
 800219e:	6838      	ldr	r0, [r7, #0]
 80021a0:	f7fe ff82 	bl	80010a8 <__aeabi_fcmpgt>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d026      	beq.n	80021f8 <setIRAngle+0x74>
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <setIRAngle+0x12c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f04f 0100 	mov.w	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe ff50 	bl	8001058 <__aeabi_fcmpeq>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01c      	beq.n	80021f8 <setIRAngle+0x74>
	{
		IRadjustment = (kPir * ((left - right) - IRAngleOffset));
 80021be:	6839      	ldr	r1, [r7, #0]
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7fe fcab 	bl	8000b1c <__aeabi_fsub>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461c      	mov	r4, r3
 80021ca:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <setIRAngle+0x130>)
 80021cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fd59 	bl	8000c88 <__aeabi_i2f>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4619      	mov	r1, r3
 80021da:	4620      	mov	r0, r4
 80021dc:	f7fe fc9e 	bl	8000b1c <__aeabi_fsub>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <setIRAngle+0x134>)
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f7fe fda1 	bl	8000d30 <__aeabi_fmul>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <setIRAngle+0x138>)
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e054      	b.n	80022a2 <setIRAngle+0x11e>
	}
	else if (left > 600 && goalAngle == 0)
 80021f8:	492c      	ldr	r1, [pc, #176]	; (80022ac <setIRAngle+0x128>)
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe ff54 	bl	80010a8 <__aeabi_fcmpgt>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d020      	beq.n	8002248 <setIRAngle+0xc4>
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <setIRAngle+0x12c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f04f 0100 	mov.w	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe ff22 	bl	8001058 <__aeabi_fcmpeq>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <setIRAngle+0xc4>
	{
		IRadjustment = (kPir2 * (left - goal_left));
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <setIRAngle+0x13c>)
 800221c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fd31 	bl	8000c88 <__aeabi_i2f>
 8002226:	4603      	mov	r3, r0
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fc76 	bl	8000b1c <__aeabi_fsub>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <setIRAngle+0x140>)
 8002236:	4619      	mov	r1, r3
 8002238:	4610      	mov	r0, r2
 800223a:	f7fe fd79 	bl	8000d30 <__aeabi_fmul>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <setIRAngle+0x138>)
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e02c      	b.n	80022a2 <setIRAngle+0x11e>
	}
	else if (right > 600 && goalAngle == 0)
 8002248:	4918      	ldr	r1, [pc, #96]	; (80022ac <setIRAngle+0x128>)
 800224a:	6838      	ldr	r0, [r7, #0]
 800224c:	f7fe ff2c 	bl	80010a8 <__aeabi_fcmpgt>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d020      	beq.n	8002298 <setIRAngle+0x114>
 8002256:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <setIRAngle+0x12c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f04f 0100 	mov.w	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fefa 	bl	8001058 <__aeabi_fcmpeq>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d016      	beq.n	8002298 <setIRAngle+0x114>
	{
		IRadjustment = (kPir2 * (goal_right - right));
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <setIRAngle+0x144>)
 800226c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fd09 	bl	8000c88 <__aeabi_i2f>
 8002276:	4603      	mov	r3, r0
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fc4e 	bl	8000b1c <__aeabi_fsub>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <setIRAngle+0x140>)
 8002286:	4619      	mov	r1, r3
 8002288:	4610      	mov	r0, r2
 800228a:	f7fe fd51 	bl	8000d30 <__aeabi_fmul>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <setIRAngle+0x138>)
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e004      	b.n	80022a2 <setIRAngle+0x11e>
	}
	else
		IRadjustment = 0;
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <setIRAngle+0x138>)
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	44160000 	.word	0x44160000
 80022b0:	2000033c 	.word	0x2000033c
 80022b4:	20000340 	.word	0x20000340
 80022b8:	3ca64c30 	.word	0x3ca64c30
 80022bc:	20000388 	.word	0x20000388
 80022c0:	20000334 	.word	0x20000334
 80022c4:	3c28c155 	.word	0x3c28c155
 80022c8:	20000336 	.word	0x20000336

080022cc <resetPID>:

void resetPID() {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0

//////////////	RESET ALL ANGLE AND DISTANCE ERRORS TO 0	////////////////
	angleError = 0;
 80022d2:	4b28      	ldr	r3, [pc, #160]	; (8002374 <resetPID+0xa8>)
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
	oldAngleError = 0;
 80022da:	4b27      	ldr	r3, [pc, #156]	; (8002378 <resetPID+0xac>)
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
	angleCorrection = 0;
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <resetPID+0xb0>)
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

	for (int k = 0; k < 5; k++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	e008      	b.n	8002302 <resetPID+0x36>
		oldAngleErrors[k] = 0;
 80022f0:	4a23      	ldr	r2, [pc, #140]	; (8002380 <resetPID+0xb4>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f04f 0100 	mov.w	r1, #0
 80022f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int k = 0; k < 5; k++)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3301      	adds	r3, #1
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b04      	cmp	r3, #4
 8002306:	ddf3      	ble.n	80022f0 <resetPID+0x24>

	distanceError = 0;
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <resetPID+0xb8>)
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
	oldDistanceError = 0;
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <resetPID+0xbc>)
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
	distanceCorrection = 0;
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <resetPID+0xc0>)
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 5; i++)
 8002320:	2300      	movs	r3, #0
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	e008      	b.n	8002338 <resetPID+0x6c>
		oldDistanceErrors[i] = 0;
 8002326:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <resetPID+0xc4>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 5; i++)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b04      	cmp	r3, #4
 800233c:	ddf3      	ble.n	8002326 <resetPID+0x5a>

	IRadjustment = 0;
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <resetPID+0xc8>)
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	601a      	str	r2, [r3, #0]

////////////// 	RESET ALL GOALS AND ENCODER COUNTS TO 0 	///////////////////
	goalAngle = 0;
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <resetPID+0xcc>)
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
	goalDistance = 0;
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <resetPID+0xd0>)
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
	goal_reached_timer = 0;
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <resetPID+0xd4>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

	resetEncoders();
 800235c:	f7ff f950 	bl	8001600 <resetEncoders>
	resetMotors();
 8002360:	f7ff fe9a 	bl	8002098 <resetMotors>

	setState(REST);
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff fecb 	bl	8002100 <setState>

}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000344 	.word	0x20000344
 8002378:	20000348 	.word	0x20000348
 800237c:	20000360 	.word	0x20000360
 8002380:	2000034c 	.word	0x2000034c
 8002384:	20000364 	.word	0x20000364
 8002388:	20000368 	.word	0x20000368
 800238c:	20000380 	.word	0x20000380
 8002390:	2000036c 	.word	0x2000036c
 8002394:	20000388 	.word	0x20000388
 8002398:	2000033c 	.word	0x2000033c
 800239c:	20000338 	.word	0x20000338
 80023a0:	20000398 	.word	0x20000398
 80023a4:	00000000 	.word	0x00000000

080023a8 <updatePID>:

void updatePID() {
 80023a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ac:	b088      	sub	sp, #32
 80023ae:	af00      	add	r7, sp, #0

///// CALCULATE AVERAGE OF PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////
	float angleErrorTotal;
	float distanceErrorTotal;

	for(int k = 0; k < 5; k++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	e00c      	b.n	80023d0 <updatePID+0x28>
	{
		angleErrorTotal += oldAngleErrors[k];		// Finds the total for the previous 10 error values
 80023b6:	4a68      	ldr	r2, [pc, #416]	; (8002558 <updatePID+0x1b0>)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	4619      	mov	r1, r3
 80023c0:	69f8      	ldr	r0, [r7, #28]
 80023c2:	f7fe fbad 	bl	8000b20 <__addsf3>
 80023c6:	4603      	mov	r3, r0
 80023c8:	61fb      	str	r3, [r7, #28]
	for(int k = 0; k < 5; k++)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	ddef      	ble.n	80023b6 <updatePID+0xe>
	}

	oldAngleError = angleErrorTotal/5.0;				// oldAngleError = Average of previous 10 error values
 80023d6:	4961      	ldr	r1, [pc, #388]	; (800255c <updatePID+0x1b4>)
 80023d8:	69f8      	ldr	r0, [r7, #28]
 80023da:	f7fe fd5d 	bl	8000e98 <__aeabi_fdiv>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b5f      	ldr	r3, [pc, #380]	; (8002560 <updatePID+0x1b8>)
 80023e4:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	e00c      	b.n	8002406 <updatePID+0x5e>
	{
		distanceErrorTotal += oldDistanceErrors[i];		// Finds the total for the previous 10 error values
 80023ec:	4a5d      	ldr	r2, [pc, #372]	; (8002564 <updatePID+0x1bc>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	4619      	mov	r1, r3
 80023f6:	69b8      	ldr	r0, [r7, #24]
 80023f8:	f7fe fb92 	bl	8000b20 <__addsf3>
 80023fc:	4603      	mov	r3, r0
 80023fe:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < 5; i++)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	3301      	adds	r3, #1
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b04      	cmp	r3, #4
 800240a:	ddef      	ble.n	80023ec <updatePID+0x44>
	}

	oldDistanceError = distanceErrorTotal/5;			// oldDistanceError = Average of previous 10 error values
 800240c:	4953      	ldr	r1, [pc, #332]	; (800255c <updatePID+0x1b4>)
 800240e:	69b8      	ldr	r0, [r7, #24]
 8002410:	f7fe fd42 	bl	8000e98 <__aeabi_fdiv>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <updatePID+0x1c0>)
 800241a:	601a      	str	r2, [r3, #0]

//////////	CALCULATE ANGLE CORRECTION AND DISTANCE CORRECTION	/////////////////////

	float adjustedAngle = goalAngle + IRadjustment;
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <updatePID+0x1c4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a53      	ldr	r2, [pc, #332]	; (8002570 <updatePID+0x1c8>)
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fb7a 	bl	8000b20 <__addsf3>
 800242c:	4603      	mov	r3, r0
 800242e:	607b      	str	r3, [r7, #4]

	angleError = adjustedAngle - (getLeftEncoderCounts() - getRightEncoderCounts());
 8002430:	f7ff f8d8 	bl	80015e4 <getLeftEncoderCounts>
 8002434:	4603      	mov	r3, r0
 8002436:	461c      	mov	r4, r3
 8002438:	f7ff f8c6 	bl	80015c8 <getRightEncoderCounts>
 800243c:	4603      	mov	r3, r0
 800243e:	1ae3      	subs	r3, r4, r3
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fc21 	bl	8000c88 <__aeabi_i2f>
 8002446:	4603      	mov	r3, r0
 8002448:	4619      	mov	r1, r3
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe fb66 	bl	8000b1c <__aeabi_fsub>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	4b47      	ldr	r3, [pc, #284]	; (8002574 <updatePID+0x1cc>)
 8002456:	601a      	str	r2, [r3, #0]
	angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 8002458:	4a47      	ldr	r2, [pc, #284]	; (8002578 <updatePID+0x1d0>)
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <updatePID+0x1cc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	4610      	mov	r0, r2
 8002462:	f7fe fc65 	bl	8000d30 <__aeabi_fmul>
 8002466:	4603      	mov	r3, r0
 8002468:	461c      	mov	r4, r3
 800246a:	4b42      	ldr	r3, [pc, #264]	; (8002574 <updatePID+0x1cc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a3c      	ldr	r2, [pc, #240]	; (8002560 <updatePID+0x1b8>)
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe fb51 	bl	8000b1c <__aeabi_fsub>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	4619      	mov	r1, r3
 8002484:	4610      	mov	r0, r2
 8002486:	f7fe fc53 	bl	8000d30 <__aeabi_fmul>
 800248a:	4603      	mov	r3, r0
 800248c:	4619      	mov	r1, r3
 800248e:	4620      	mov	r0, r4
 8002490:	f7fe fb46 	bl	8000b20 <__addsf3>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	4b38      	ldr	r3, [pc, #224]	; (800257c <updatePID+0x1d4>)
 800249a:	601a      	str	r2, [r3, #0]

	distanceError = goalDistance - ((getLeftEncoderCounts() + getRightEncoderCounts())/2);
 800249c:	4b38      	ldr	r3, [pc, #224]	; (8002580 <updatePID+0x1d8>)
 800249e:	681c      	ldr	r4, [r3, #0]
 80024a0:	f7ff f8a0 	bl	80015e4 <getLeftEncoderCounts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461d      	mov	r5, r3
 80024a8:	f7ff f88e 	bl	80015c8 <getRightEncoderCounts>
 80024ac:	4603      	mov	r3, r0
 80024ae:	442b      	add	r3, r5
 80024b0:	0fda      	lsrs	r2, r3, #31
 80024b2:	4413      	add	r3, r2
 80024b4:	105b      	asrs	r3, r3, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe fbe6 	bl	8000c88 <__aeabi_i2f>
 80024bc:	4603      	mov	r3, r0
 80024be:	4619      	mov	r1, r3
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7fe fb2b 	bl	8000b1c <__aeabi_fsub>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <updatePID+0x1dc>)
 80024cc:	601a      	str	r2, [r3, #0]

	distanceCorrection = kPx * distanceError + kDx * (distanceError - oldDistanceError);
 80024ce:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <updatePID+0x1d0>)
 80024d0:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <updatePID+0x1dc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f7fe fc2a 	bl	8000d30 <__aeabi_fmul>
 80024dc:	4603      	mov	r3, r0
 80024de:	461c      	mov	r4, r3
 80024e0:	4b28      	ldr	r3, [pc, #160]	; (8002584 <updatePID+0x1dc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a20      	ldr	r2, [pc, #128]	; (8002568 <updatePID+0x1c0>)
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fb16 	bl	8000b1c <__aeabi_fsub>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f7fe fc18 	bl	8000d30 <__aeabi_fmul>
 8002500:	4603      	mov	r3, r0
 8002502:	4619      	mov	r1, r3
 8002504:	4620      	mov	r0, r4
 8002506:	f7fe fb0b 	bl	8000b20 <__addsf3>
 800250a:	4603      	mov	r3, r0
 800250c:	461a      	mov	r2, r3
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <updatePID+0x1e0>)
 8002510:	601a      	str	r2, [r3, #0]

	if (state == EXPLORING)
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <updatePID+0x1e4>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d105      	bne.n	8002526 <updatePID+0x17e>
	{
		distanceError = 306;
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <updatePID+0x1dc>)
 800251c:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <updatePID+0x1e8>)
 800251e:	601a      	str	r2, [r3, #0]
		distanceCorrection = explore_speed;
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <updatePID+0x1ec>)
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <updatePID+0x1e0>)
 8002524:	601a      	str	r2, [r3, #0]
	}

	for(int k = 4; k > 0; k--)
 8002526:	2304      	movs	r3, #4
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	e00b      	b.n	8002544 <updatePID+0x19c>
		oldAngleErrors[k] = oldAngleErrors[k-1];	// Adds the newest angleError to array and shifts everything to the right
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3b01      	subs	r3, #1
 8002530:	4a09      	ldr	r2, [pc, #36]	; (8002558 <updatePID+0x1b0>)
 8002532:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <updatePID+0x1b0>)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int k = 4; k > 0; k--)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3b01      	subs	r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	dcf0      	bgt.n	800252c <updatePID+0x184>
	oldAngleErrors[0] = angleError;
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <updatePID+0x1cc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a02      	ldr	r2, [pc, #8]	; (8002558 <updatePID+0x1b0>)
 8002550:	6013      	str	r3, [r2, #0]

	for(int i = 4; i > 0; i--)
 8002552:	2304      	movs	r3, #4
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	e02b      	b.n	80025b0 <updatePID+0x208>
 8002558:	2000034c 	.word	0x2000034c
 800255c:	40a00000 	.word	0x40a00000
 8002560:	20000348 	.word	0x20000348
 8002564:	2000036c 	.word	0x2000036c
 8002568:	20000368 	.word	0x20000368
 800256c:	2000033c 	.word	0x2000033c
 8002570:	20000388 	.word	0x20000388
 8002574:	20000344 	.word	0x20000344
 8002578:	3a83126f 	.word	0x3a83126f
 800257c:	20000360 	.word	0x20000360
 8002580:	20000338 	.word	0x20000338
 8002584:	20000364 	.word	0x20000364
 8002588:	20000380 	.word	0x20000380
 800258c:	2000038c 	.word	0x2000038c
 8002590:	43990000 	.word	0x43990000
 8002594:	3e99999a 	.word	0x3e99999a
		oldDistanceErrors[i] = oldDistanceErrors[i-1];	// Adds the newest distanceError to array and shifts everything right
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	3b01      	subs	r3, #1
 800259c:	4a96      	ldr	r2, [pc, #600]	; (80027f8 <updatePID+0x450>)
 800259e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025a2:	4995      	ldr	r1, [pc, #596]	; (80027f8 <updatePID+0x450>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 4; i > 0; i--)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	dcf0      	bgt.n	8002598 <updatePID+0x1f0>
	oldDistanceErrors[0] = distanceError;
 80025b6:	4b91      	ldr	r3, [pc, #580]	; (80027fc <updatePID+0x454>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a8f      	ldr	r2, [pc, #572]	; (80027f8 <updatePID+0x450>)
 80025bc:	6013      	str	r3, [r2, #0]

////////// 	CALCULATE AND SET MOTOR PWM VALUES	////////////////////////////

	if (fabs(distanceCorrection) > PWMMaxx)		// Upper Limit for PWM
 80025be:	4b90      	ldr	r3, [pc, #576]	; (8002800 <updatePID+0x458>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025c6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fd6b 	bl	80010a8 <__aeabi_fcmpgt>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <updatePID+0x258>
		distanceCorrection = sign(distanceCorrection) * PWMMaxx;
 80025d8:	4b89      	ldr	r3, [pc, #548]	; (8002800 <updatePID+0x458>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 fa65 	bl	8003aac <sign>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fb4f 	bl	8000c88 <__aeabi_i2f>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fb9c 	bl	8000d30 <__aeabi_fmul>
 80025f8:	4603      	mov	r3, r0
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b80      	ldr	r3, [pc, #512]	; (8002800 <updatePID+0x458>)
 80025fe:	601a      	str	r2, [r3, #0]

	if (fabs(angleCorrection) > PWMMaxw)
 8002600:	4b80      	ldr	r3, [pc, #512]	; (8002804 <updatePID+0x45c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002608:	4a7f      	ldr	r2, [pc, #508]	; (8002808 <updatePID+0x460>)
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fd4b 	bl	80010a8 <__aeabi_fcmpgt>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <updatePID+0x296>
		angleCorrection = sign(angleCorrection) * PWMMaxw;
 8002618:	4b7a      	ldr	r3, [pc, #488]	; (8002804 <updatePID+0x45c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f001 fa45 	bl	8003aac <sign>
 8002622:	4603      	mov	r3, r0
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fb2f 	bl	8000c88 <__aeabi_i2f>
 800262a:	4603      	mov	r3, r0
 800262c:	4a76      	ldr	r2, [pc, #472]	; (8002808 <updatePID+0x460>)
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fb7d 	bl	8000d30 <__aeabi_fmul>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	4b72      	ldr	r3, [pc, #456]	; (8002804 <updatePID+0x45c>)
 800263c:	601a      	str	r2, [r3, #0]

	if (state == MOVING && fabs(distanceError) > 100)
 800263e:	4b73      	ldr	r3, [pc, #460]	; (800280c <updatePID+0x464>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d15c      	bne.n	8002700 <updatePID+0x358>
 8002646:	4b6d      	ldr	r3, [pc, #436]	; (80027fc <updatePID+0x454>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800264e:	4970      	ldr	r1, [pc, #448]	; (8002810 <updatePID+0x468>)
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fd29 	bl	80010a8 <__aeabi_fcmpgt>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d051      	beq.n	8002700 <updatePID+0x358>
	{		// If we're going straight and not at the end, apply acceleration

		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 800265c:	4b68      	ldr	r3, [pc, #416]	; (8002800 <updatePID+0x458>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a6c      	ldr	r2, [pc, #432]	; (8002814 <updatePID+0x46c>)
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fa58 	bl	8000b1c <__aeabi_fsub>
 800266c:	4603      	mov	r3, r0
 800266e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002672:	4a69      	ldr	r2, [pc, #420]	; (8002818 <updatePID+0x470>)
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fd16 	bl	80010a8 <__aeabi_fcmpgt>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d03e      	beq.n	8002700 <updatePID+0x358>
					distanceCorrection = oldDistanceCorrection + (xacceleration *
 8002682:	4b64      	ldr	r3, [pc, #400]	; (8002814 <updatePID+0x46c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd ff02 	bl	8000490 <__aeabi_f2d>
 800268c:	4604      	mov	r4, r0
 800268e:	460d      	mov	r5, r1
							(distanceCorrection - oldDistanceCorrection)/fabs(distanceCorrection - oldDistanceCorrection));
 8002690:	4b5b      	ldr	r3, [pc, #364]	; (8002800 <updatePID+0x458>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a5f      	ldr	r2, [pc, #380]	; (8002814 <updatePID+0x46c>)
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fa3e 	bl	8000b1c <__aeabi_fsub>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
					distanceCorrection = oldDistanceCorrection + (xacceleration *
 80026a4:	4b5c      	ldr	r3, [pc, #368]	; (8002818 <updatePID+0x470>)
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f7fe fb41 	bl	8000d30 <__aeabi_fmul>
 80026ae:	4603      	mov	r3, r0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd feed 	bl	8000490 <__aeabi_f2d>
 80026b6:	4680      	mov	r8, r0
 80026b8:	4689      	mov	r9, r1
							(distanceCorrection - oldDistanceCorrection)/fabs(distanceCorrection - oldDistanceCorrection));
 80026ba:	4b51      	ldr	r3, [pc, #324]	; (8002800 <updatePID+0x458>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a55      	ldr	r2, [pc, #340]	; (8002814 <updatePID+0x46c>)
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fa29 	bl	8000b1c <__aeabi_fsub>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd fedd 	bl	8000490 <__aeabi_f2d>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4640      	mov	r0, r8
 80026dc:	4649      	mov	r1, r9
 80026de:	f7fe f859 	bl	8000794 <__aeabi_ddiv>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
					distanceCorrection = oldDistanceCorrection + (xacceleration *
 80026e6:	4620      	mov	r0, r4
 80026e8:	4629      	mov	r1, r5
 80026ea:	f7fd fd73 	bl	80001d4 <__adddf3>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7fe f9bd 	bl	8000a74 <__aeabi_d2f>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a40      	ldr	r2, [pc, #256]	; (8002800 <updatePID+0x458>)
 80026fe:	6013      	str	r3, [r2, #0]
	}

	if (state == EXPLORING)
 8002700:	4b42      	ldr	r3, [pc, #264]	; (800280c <updatePID+0x464>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d11d      	bne.n	8002744 <updatePID+0x39c>
	{
		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 8002708:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <updatePID+0x458>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a41      	ldr	r2, [pc, #260]	; (8002814 <updatePID+0x46c>)
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fa02 	bl	8000b1c <__aeabi_fsub>
 8002718:	4603      	mov	r3, r0
 800271a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800271e:	4a3e      	ldr	r2, [pc, #248]	; (8002818 <updatePID+0x470>)
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fcc0 	bl	80010a8 <__aeabi_fcmpgt>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <updatePID+0x39c>
		{
			distanceCorrection = oldDistanceCorrection + xacceleration;
 800272e:	4b39      	ldr	r3, [pc, #228]	; (8002814 <updatePID+0x46c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a39      	ldr	r2, [pc, #228]	; (8002818 <updatePID+0x470>)
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe f9f2 	bl	8000b20 <__addsf3>
 800273c:	4603      	mov	r3, r0
 800273e:	461a      	mov	r2, r3
 8002740:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <updatePID+0x458>)
 8002742:	601a      	str	r2, [r3, #0]
		}
	}

	switch(state) {		// Apply lower limits of PWM for various states
 8002744:	4b31      	ldr	r3, [pc, #196]	; (800280c <updatePID+0x464>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d002      	beq.n	8002752 <updatePID+0x3aa>
 800274c:	2b02      	cmp	r3, #2
 800274e:	d031      	beq.n	80027b4 <updatePID+0x40c>
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
				angleCorrection = sign(angleCorrection) * PWMMinw;
			break;

		default:
			break;
 8002750:	e07a      	b.n	8002848 <updatePID+0x4a0>
			if (fabs(distanceCorrection) > 0.01 && fabs(distanceCorrection) < PWMMinx)
 8002752:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <updatePID+0x458>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800275a:	4618      	mov	r0, r3
 800275c:	f7fd fe98 	bl	8000490 <__aeabi_f2d>
 8002760:	a323      	add	r3, pc, #140	; (adr r3, 80027f0 <updatePID+0x448>)
 8002762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002766:	f7fe f97b 	bl	8000a60 <__aeabi_dcmpgt>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d100      	bne.n	8002772 <updatePID+0x3ca>
			break;
 8002770:	e06a      	b.n	8002848 <updatePID+0x4a0>
			if (fabs(distanceCorrection) > 0.01 && fabs(distanceCorrection) < PWMMinx)
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <updatePID+0x458>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800277a:	4a28      	ldr	r2, [pc, #160]	; (800281c <updatePID+0x474>)
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fc74 	bl	800106c <__aeabi_fcmplt>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d100      	bne.n	800278c <updatePID+0x3e4>
			break;
 800278a:	e05d      	b.n	8002848 <updatePID+0x4a0>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
 800278c:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <updatePID+0x458>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f001 f98b 	bl	8003aac <sign>
 8002796:	4603      	mov	r3, r0
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fa75 	bl	8000c88 <__aeabi_i2f>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a1e      	ldr	r2, [pc, #120]	; (800281c <updatePID+0x474>)
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fac3 	bl	8000d30 <__aeabi_fmul>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <updatePID+0x458>)
 80027b0:	601a      	str	r2, [r3, #0]
			break;
 80027b2:	e049      	b.n	8002848 <updatePID+0x4a0>
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <updatePID+0x45c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fe67 	bl	8000490 <__aeabi_f2d>
 80027c2:	a30b      	add	r3, pc, #44	; (adr r3, 80027f0 <updatePID+0x448>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fe f94a 	bl	8000a60 <__aeabi_dcmpgt>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d100      	bne.n	80027d4 <updatePID+0x42c>
			break;
 80027d2:	e038      	b.n	8002846 <updatePID+0x49e>
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <updatePID+0x45c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027dc:	4a0f      	ldr	r2, [pc, #60]	; (800281c <updatePID+0x474>)
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fc43 	bl	800106c <__aeabi_fcmplt>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d119      	bne.n	8002820 <updatePID+0x478>
			break;
 80027ec:	e02b      	b.n	8002846 <updatePID+0x49e>
 80027ee:	bf00      	nop
 80027f0:	47ae147b 	.word	0x47ae147b
 80027f4:	3f847ae1 	.word	0x3f847ae1
 80027f8:	2000036c 	.word	0x2000036c
 80027fc:	20000364 	.word	0x20000364
 8002800:	20000380 	.word	0x20000380
 8002804:	20000360 	.word	0x20000360
 8002808:	3ecccccd 	.word	0x3ecccccd
 800280c:	2000038c 	.word	0x2000038c
 8002810:	42c80000 	.word	0x42c80000
 8002814:	20000384 	.word	0x20000384
 8002818:	3a83126f 	.word	0x3a83126f
 800281c:	3eb33333 	.word	0x3eb33333
				angleCorrection = sign(angleCorrection) * PWMMinw;
 8002820:	4b57      	ldr	r3, [pc, #348]	; (8002980 <updatePID+0x5d8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f001 f941 	bl	8003aac <sign>
 800282a:	4603      	mov	r3, r0
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fa2b 	bl	8000c88 <__aeabi_i2f>
 8002832:	4603      	mov	r3, r0
 8002834:	4a53      	ldr	r2, [pc, #332]	; (8002984 <updatePID+0x5dc>)
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fa79 	bl	8000d30 <__aeabi_fmul>
 800283e:	4603      	mov	r3, r0
 8002840:	461a      	mov	r2, r3
 8002842:	4b4f      	ldr	r3, [pc, #316]	; (8002980 <updatePID+0x5d8>)
 8002844:	601a      	str	r2, [r3, #0]
			break;
 8002846:	bf00      	nop
	}

	left_PWM_value = (distanceCorrection + angleCorrection);
 8002848:	4b4f      	ldr	r3, [pc, #316]	; (8002988 <updatePID+0x5e0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a4c      	ldr	r2, [pc, #304]	; (8002980 <updatePID+0x5d8>)
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe f964 	bl	8000b20 <__addsf3>
 8002858:	4603      	mov	r3, r0
 800285a:	461a      	mov	r2, r3
 800285c:	4b4b      	ldr	r3, [pc, #300]	; (800298c <updatePID+0x5e4>)
 800285e:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distanceCorrection - angleCorrection);
 8002860:	4b49      	ldr	r3, [pc, #292]	; (8002988 <updatePID+0x5e0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a46      	ldr	r2, [pc, #280]	; (8002980 <updatePID+0x5d8>)
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe f956 	bl	8000b1c <__aeabi_fsub>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4b46      	ldr	r3, [pc, #280]	; (8002990 <updatePID+0x5e8>)
 8002876:	601a      	str	r2, [r3, #0]

	oldDistanceCorrection = distanceCorrection;
 8002878:	4b43      	ldr	r3, [pc, #268]	; (8002988 <updatePID+0x5e0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a45      	ldr	r2, [pc, #276]	; (8002994 <updatePID+0x5ec>)
 800287e:	6013      	str	r3, [r2, #0]

	// Apply lower PWM limits for small adjustments
	if (state == REST || fabs(distanceError) < 60 || fabs (angleError) < 60)
 8002880:	4b45      	ldr	r3, [pc, #276]	; (8002998 <updatePID+0x5f0>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <updatePID+0x50c>
 8002888:	4b44      	ldr	r3, [pc, #272]	; (800299c <updatePID+0x5f4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002890:	4943      	ldr	r1, [pc, #268]	; (80029a0 <updatePID+0x5f8>)
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fbea 	bl	800106c <__aeabi_fcmplt>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10a      	bne.n	80028b4 <updatePID+0x50c>
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <updatePID+0x5fc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028a6:	493e      	ldr	r1, [pc, #248]	; (80029a0 <updatePID+0x5f8>)
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe fbdf 	bl	800106c <__aeabi_fcmplt>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d07b      	beq.n	80029ac <updatePID+0x604>
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <updatePID+0x5e4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fde7 	bl	8000490 <__aeabi_f2d>
 80028c2:	a32d      	add	r3, pc, #180	; (adr r3, 8002978 <updatePID+0x5d0>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fe f8ca 	bl	8000a60 <__aeabi_dcmpgt>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01e      	beq.n	8002910 <updatePID+0x568>
 80028d2:	4b2e      	ldr	r3, [pc, #184]	; (800298c <updatePID+0x5e4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028da:	4a33      	ldr	r2, [pc, #204]	; (80029a8 <updatePID+0x600>)
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fbc4 	bl	800106c <__aeabi_fcmplt>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d012      	beq.n	8002910 <updatePID+0x568>
		{
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <updatePID+0x5e4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f8dc 	bl	8003aac <sign>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe f9c6 	bl	8000c88 <__aeabi_i2f>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4a2a      	ldr	r2, [pc, #168]	; (80029a8 <updatePID+0x600>)
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fa14 	bl	8000d30 <__aeabi_fmul>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	4b1f      	ldr	r3, [pc, #124]	; (800298c <updatePID+0x5e4>)
 800290e:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 8002910:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <updatePID+0x5e8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002918:	4618      	mov	r0, r3
 800291a:	f7fd fdb9 	bl	8000490 <__aeabi_f2d>
 800291e:	a316      	add	r3, pc, #88	; (adr r3, 8002978 <updatePID+0x5d0>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f7fe f89c 	bl	8000a60 <__aeabi_dcmpgt>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 810e 	beq.w	8002b4c <updatePID+0x7a4>
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <updatePID+0x5e8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002938:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <updatePID+0x600>)
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fb95 	bl	800106c <__aeabi_fcmplt>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d100      	bne.n	800294a <updatePID+0x5a2>
 8002948:	e100      	b.n	8002b4c <updatePID+0x7a4>
		{
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <updatePID+0x5e8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f001 f8ac 	bl	8003aac <sign>
 8002954:	4603      	mov	r3, r0
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe f996 	bl	8000c88 <__aeabi_i2f>
 800295c:	4603      	mov	r3, r0
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <updatePID+0x600>)
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe f9e4 	bl	8000d30 <__aeabi_fmul>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <updatePID+0x5e8>)
 800296e:	601a      	str	r2, [r3, #0]
		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 8002970:	e0ec      	b.n	8002b4c <updatePID+0x7a4>
 8002972:	bf00      	nop
 8002974:	f3af 8000 	nop.w
 8002978:	47ae147b 	.word	0x47ae147b
 800297c:	3f847ae1 	.word	0x3f847ae1
 8002980:	20000360 	.word	0x20000360
 8002984:	3eb33333 	.word	0x3eb33333
 8002988:	20000380 	.word	0x20000380
 800298c:	20000390 	.word	0x20000390
 8002990:	20000394 	.word	0x20000394
 8002994:	20000384 	.word	0x20000384
 8002998:	2000038c 	.word	0x2000038c
 800299c:	20000364 	.word	0x20000364
 80029a0:	42700000 	.word	0x42700000
 80029a4:	20000344 	.word	0x20000344
 80029a8:	3e99999a 	.word	0x3e99999a
		}
	}
	else	// If under PWM limits, normalize values
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 80029ac:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <updatePID+0x828>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fd6b 	bl	8000490 <__aeabi_f2d>
 80029ba:	a383      	add	r3, pc, #524	; (adr r3, 8002bc8 <updatePID+0x820>)
 80029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c0:	f7fe f84e 	bl	8000a60 <__aeabi_dcmpgt>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d058      	beq.n	8002a7c <updatePID+0x6d4>
 80029ca:	4b81      	ldr	r3, [pc, #516]	; (8002bd0 <updatePID+0x828>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029d2:	4a80      	ldr	r2, [pc, #512]	; (8002bd4 <updatePID+0x82c>)
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fb48 	bl	800106c <__aeabi_fcmplt>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d04c      	beq.n	8002a7c <updatePID+0x6d4>
		{
			right_PWM_value = right_PWM_value - (sign(right_PWM_value) * (PWMMin - fabs(left_PWM_value)));
 80029e2:	4b7d      	ldr	r3, [pc, #500]	; (8002bd8 <updatePID+0x830>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fd52 	bl	8000490 <__aeabi_f2d>
 80029ec:	4604      	mov	r4, r0
 80029ee:	460d      	mov	r5, r1
 80029f0:	4b79      	ldr	r3, [pc, #484]	; (8002bd8 <updatePID+0x830>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 f859 	bl	8003aac <sign>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fd35 	bl	800046c <__aeabi_i2d>
 8002a02:	4680      	mov	r8, r0
 8002a04:	4689      	mov	r9, r1
 8002a06:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <updatePID+0x82c>)
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fd41 	bl	8000490 <__aeabi_f2d>
 8002a0e:	4682      	mov	sl, r0
 8002a10:	468b      	mov	fp, r1
 8002a12:	4b6f      	ldr	r3, [pc, #444]	; (8002bd0 <updatePID+0x828>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd38 	bl	8000490 <__aeabi_f2d>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4650      	mov	r0, sl
 8002a26:	4659      	mov	r1, fp
 8002a28:	f7fd fbd2 	bl	80001d0 <__aeabi_dsub>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4640      	mov	r0, r8
 8002a32:	4649      	mov	r1, r9
 8002a34:	f7fd fd84 	bl	8000540 <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	4629      	mov	r1, r5
 8002a40:	f7fd fbc6 	bl	80001d0 <__aeabi_dsub>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7fe f812 	bl	8000a74 <__aeabi_d2f>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a61      	ldr	r2, [pc, #388]	; (8002bd8 <updatePID+0x830>)
 8002a54:	6013      	str	r3, [r2, #0]
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 8002a56:	4b5e      	ldr	r3, [pc, #376]	; (8002bd0 <updatePID+0x828>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 f826 	bl	8003aac <sign>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f910 	bl	8000c88 <__aeabi_i2f>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4a5a      	ldr	r2, [pc, #360]	; (8002bd4 <updatePID+0x82c>)
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe f95e 	bl	8000d30 <__aeabi_fmul>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b55      	ldr	r3, [pc, #340]	; (8002bd0 <updatePID+0x828>)
 8002a7a:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 8002a7c:	4b56      	ldr	r3, [pc, #344]	; (8002bd8 <updatePID+0x830>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd03 	bl	8000490 <__aeabi_f2d>
 8002a8a:	a34f      	add	r3, pc, #316	; (adr r3, 8002bc8 <updatePID+0x820>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd ffe6 	bl	8000a60 <__aeabi_dcmpgt>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d058      	beq.n	8002b4c <updatePID+0x7a4>
 8002a9a:	4b4f      	ldr	r3, [pc, #316]	; (8002bd8 <updatePID+0x830>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aa2:	4a4c      	ldr	r2, [pc, #304]	; (8002bd4 <updatePID+0x82c>)
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fae0 	bl	800106c <__aeabi_fcmplt>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d04c      	beq.n	8002b4c <updatePID+0x7a4>
		{
			left_PWM_value = left_PWM_value - (sign(left_PWM_value) * (PWMMin - fabs(right_PWM_value)));
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <updatePID+0x828>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fcea 	bl	8000490 <__aeabi_f2d>
 8002abc:	4604      	mov	r4, r0
 8002abe:	460d      	mov	r5, r1
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <updatePID+0x828>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fff1 	bl	8003aac <sign>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fccd 	bl	800046c <__aeabi_i2d>
 8002ad2:	4680      	mov	r8, r0
 8002ad4:	4689      	mov	r9, r1
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <updatePID+0x82c>)
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fcd9 	bl	8000490 <__aeabi_f2d>
 8002ade:	4682      	mov	sl, r0
 8002ae0:	468b      	mov	fp, r1
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <updatePID+0x830>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fcd0 	bl	8000490 <__aeabi_f2d>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4650      	mov	r0, sl
 8002af6:	4659      	mov	r1, fp
 8002af8:	f7fd fb6a 	bl	80001d0 <__aeabi_dsub>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4640      	mov	r0, r8
 8002b02:	4649      	mov	r1, r9
 8002b04:	f7fd fd1c 	bl	8000540 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fb5e 	bl	80001d0 <__aeabi_dsub>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7fd ffaa 	bl	8000a74 <__aeabi_d2f>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <updatePID+0x828>)
 8002b24:	6013      	str	r3, [r2, #0]
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 8002b26:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <updatePID+0x830>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 ffbe 	bl	8003aac <sign>
 8002b30:	4603      	mov	r3, r0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe f8a8 	bl	8000c88 <__aeabi_i2f>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <updatePID+0x82c>)
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe f8f6 	bl	8000d30 <__aeabi_fmul>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <updatePID+0x830>)
 8002b4a:	601a      	str	r2, [r3, #0]
		}
	}

	setMotorLPWM(left_PWM_value);
 8002b4c:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <updatePID+0x828>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fa29 	bl	8001fa8 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <updatePID+0x830>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fa60 	bl	8002020 <setMotorRPWM>

	if(angleError < 30 && angleError > -30 && distanceError < 30 && distanceError > -30)
 8002b60:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <updatePID+0x834>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	491e      	ldr	r1, [pc, #120]	; (8002be0 <updatePID+0x838>)
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fa80 	bl	800106c <__aeabi_fcmplt>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d020      	beq.n	8002bb4 <updatePID+0x80c>
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <updatePID+0x834>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	491b      	ldr	r1, [pc, #108]	; (8002be4 <updatePID+0x83c>)
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe fa95 	bl	80010a8 <__aeabi_fcmpgt>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d017      	beq.n	8002bb4 <updatePID+0x80c>
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <updatePID+0x840>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4915      	ldr	r1, [pc, #84]	; (8002be0 <updatePID+0x838>)
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fa6e 	bl	800106c <__aeabi_fcmplt>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00e      	beq.n	8002bb4 <updatePID+0x80c>
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <updatePID+0x840>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4912      	ldr	r1, [pc, #72]	; (8002be4 <updatePID+0x83c>)
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fa83 	bl	80010a8 <__aeabi_fcmpgt>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <updatePID+0x80c>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <updatePID+0x844>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <updatePID+0x844>)
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e003      	b.n	8002bbc <updatePID+0x814>

	else
		goal_reached_timer = 0;
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <updatePID+0x844>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

}
 8002bba:	bf00      	nop
 8002bbc:	bf00      	nop
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bc6:	bf00      	nop
 8002bc8:	47ae147b 	.word	0x47ae147b
 8002bcc:	3f847ae1 	.word	0x3f847ae1
 8002bd0:	20000390 	.word	0x20000390
 8002bd4:	3e99999a 	.word	0x3e99999a
 8002bd8:	20000394 	.word	0x20000394
 8002bdc:	20000344 	.word	0x20000344
 8002be0:	41f00000 	.word	0x41f00000
 8002be4:	c1f00000 	.word	0xc1f00000
 8002be8:	20000364 	.word	0x20000364
 8002bec:	20000398 	.word	0x20000398

08002bf0 <PIDdone>:

int8_t PIDdone(){ // There is no bool type in C. True/False values are represented as 1 or 0.
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0

	if (goal_reached_timer >= 50)
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <PIDdone+0x20>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b31      	cmp	r3, #49	; 0x31
 8002bfa:	dd06      	ble.n	8002c0a <PIDdone+0x1a>
	{
		resetPID();
 8002bfc:	f7ff fb66 	bl	80022cc <resetPID>
		setState(REST);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7ff fa7d 	bl	8002100 <setState>
		return 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <PIDdone+0x1c>
	}
	else
		return 0;
 8002c0a:	2300      	movs	r3, #0

}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000398 	.word	0x20000398

08002c14 <newCell>:
extern int16_t rightIRvalue;
extern int16_t frontLeftIRvalue;
extern int16_t frontRightIRvalue; // TODO: IS THIS NECESSARY?

struct Cell* newCell(int r, int c)           // Acts as a constructor for a cell cuz C is annoying
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
    struct Cell* p = malloc(sizeof(struct Cell));
 8002c1e:	2008      	movs	r0, #8
 8002c20:	f003 fd4e 	bl	80066c0 <malloc>
 8002c24:	4603      	mov	r3, r0
 8002c26:	60fb      	str	r3, [r7, #12]
    p->row = r;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	601a      	str	r2, [r3, #0]
    p->col = c;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	605a      	str	r2, [r3, #4]
}
 8002c34:	bf00      	nop
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <insertQueue>:

void insertQueue(struct Cell* input) {
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
    queue[queueEnd] = input;
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <insertQueue+0x38>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	490b      	ldr	r1, [pc, #44]	; (8002c7c <insertQueue+0x3c>)
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    queueEnd++;
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <insertQueue+0x38>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <insertQueue+0x38>)
 8002c5c:	6013      	str	r3, [r2, #0]

    if (queueEnd == 512) {
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <insertQueue+0x38>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c66:	d102      	bne.n	8002c6e <insertQueue+0x2e>
        queueEnd = 0;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <insertQueue+0x38>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
        //reset cause circular queue
    }
    //check me on this i might've messed up on pointers, i'm doing this right off of github and not from a compiler lol
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	20000fac 	.word	0x20000fac
 8002c7c:	200007a8 	.word	0x200007a8

08002c80 <popQueueFront>:

void popQueueFront()
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
    free(queueFront());
 8002c84:	f000 f816 	bl	8002cb4 <queueFront>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 fd20 	bl	80066d0 <free>

    queueStart++;
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <popQueueFront+0x30>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3301      	adds	r3, #1
 8002c96:	4a06      	ldr	r2, [pc, #24]	; (8002cb0 <popQueueFront+0x30>)
 8002c98:	6013      	str	r3, [r2, #0]
    if (queueStart == 512) {
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <popQueueFront+0x30>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca2:	d102      	bne.n	8002caa <popQueueFront+0x2a>
        queueStart = 0;
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <popQueueFront+0x30>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000fa8 	.word	0x20000fa8

08002cb4 <queueFront>:

struct Cell* queueFront()
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
    return queue[queueStart];
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <queueFront+0x18>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <queueFront+0x1c>)
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000fa8 	.word	0x20000fa8
 8002cd0:	200007a8 	.word	0x200007a8

08002cd4 <initElements>:

void initElements()
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
    currPos = newCell(15, 0);           // Sets current position to row 15, column 0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	200f      	movs	r0, #15
 8002cde:	f7ff ff99 	bl	8002c14 <newCell>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a47      	ldr	r2, [pc, #284]	; (8002e04 <initElements+0x130>)
 8002ce6:	6013      	str	r3, [r2, #0]
    currHead = NORTH;                    // Sets current heading to north
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <initElements+0x134>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 8; j++)                // Initializes default Manhattan distances for empty maze
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e043      	b.n	8002d7c <initElements+0xa8>
    {
        for (int i = 0; i < 8; i++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	e03a      	b.n	8002d70 <initElements+0x9c>
        {
            Manhattans[i][j] = 14 - i - j;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f1c3 020e 	rsb	r2, r3, #14
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	1ad2      	subs	r2, r2, r3
 8002d04:	4841      	ldr	r0, [pc, #260]	; (8002e0c <initElements+0x138>)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	0119      	lsls	r1, r3, #4
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            Manhattans[15 - i][j] = 14 - i - j;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f1c3 010e 	rsb	r1, r3, #14
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f1c3 030f 	rsb	r3, r3, #15
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	1a8a      	subs	r2, r1, r2
 8002d22:	483a      	ldr	r0, [pc, #232]	; (8002e0c <initElements+0x138>)
 8002d24:	0119      	lsls	r1, r3, #4
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	440b      	add	r3, r1
 8002d2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            Manhattans[i][15 - j] = 14 - i - j;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f1c3 010e 	rsb	r1, r3, #14
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f1c3 030f 	rsb	r3, r3, #15
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	1a8a      	subs	r2, r1, r2
 8002d3e:	4833      	ldr	r0, [pc, #204]	; (8002e0c <initElements+0x138>)
 8002d40:	6939      	ldr	r1, [r7, #16]
 8002d42:	0109      	lsls	r1, r1, #4
 8002d44:	440b      	add	r3, r1
 8002d46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            Manhattans[15 - i][15 - j] = 14 - i - j;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f1c3 000e 	rsb	r0, r3, #14
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f1c3 010f 	rsb	r1, r3, #15
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f1c3 030f 	rsb	r3, r3, #15
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	1a82      	subs	r2, r0, r2
 8002d60:	482a      	ldr	r0, [pc, #168]	; (8002e0c <initElements+0x138>)
 8002d62:	0109      	lsls	r1, r1, #4
 8002d64:	440b      	add	r3, r1
 8002d66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (int i = 0; i < 8; i++)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b07      	cmp	r3, #7
 8002d74:	ddc1      	ble.n	8002cfa <initElements+0x26>
    for (int j = 0; j < 8; j++)                // Initializes default Manhattan distances for empty maze
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b07      	cmp	r3, #7
 8002d80:	ddb8      	ble.n	8002cf4 <initElements+0x20>
        }
    }

    for (int i = 0; i < 17; i++) {
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e013      	b.n	8002db0 <initElements+0xdc>
        for (int j = 0; j < 16; j++) {
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	e00a      	b.n	8002da4 <initElements+0xd0>
            horzWall[i][j] = 0;
 8002d8e:	4920      	ldr	r1, [pc, #128]	; (8002e10 <initElements+0x13c>)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	011a      	lsls	r2, r3, #4
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4413      	add	r3, r2
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < 16; j++) {
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	3301      	adds	r3, #1
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b0f      	cmp	r3, #15
 8002da8:	ddf1      	ble.n	8002d8e <initElements+0xba>
    for (int i = 0; i < 17; i++) {
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3301      	adds	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	dde8      	ble.n	8002d88 <initElements+0xb4>
        }
    }

    for (int i = 0; i < 16; i++) {
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	e015      	b.n	8002de8 <initElements+0x114>
        for (int j = 0; j < 17; j++) {
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	e00c      	b.n	8002ddc <initElements+0x108>
            vertWall[i][j] = 0;
 8002dc2:	4914      	ldr	r1, [pc, #80]	; (8002e14 <initElements+0x140>)
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	4413      	add	r3, r2
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < 17; j++) {
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	ddef      	ble.n	8002dc2 <initElements+0xee>
    for (int i = 0; i < 16; i++) {
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3301      	adds	r3, #1
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	dde6      	ble.n	8002dbc <initElements+0xe8>
        }
    }

    queueStart = 0;
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <initElements+0x144>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
    queueEnd = 0;
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <initElements+0x148>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200003a0 	.word	0x200003a0
 8002e08:	200003a4 	.word	0x200003a4
 8002e0c:	200003a8 	.word	0x200003a8
 8002e10:	20000fb0 	.word	0x20000fb0
 8002e14:	200013f0 	.word	0x200013f0
 8002e18:	20000fa8 	.word	0x20000fa8
 8002e1c:	20000fac 	.word	0x20000fac

08002e20 <displayManhatttans>:
//	running = 0;
//
//}

void displayManhatttans()       // Displays all current manhattan distances in grid
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
//        {
//            char str[4];
//            sprintf(str, "%d", Manhattans[row][col]);
//            API_setText(col, 15 - row, str);
//        }
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <setWall>:

void setWall(int dir)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
    int currX = currPos->col;
 8002e34:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <setWall+0xb8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	60fb      	str	r3, [r7, #12]
    int currY = 15 - currPos->row;
 8002e3c:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <setWall+0xb8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1c3 030f 	rsb	r3, r3, #15
 8002e46:	60bb      	str	r3, [r7, #8]

    switch (dir)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d844      	bhi.n	8002ed8 <setWall+0xac>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <setWall+0x28>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e65 	.word	0x08002e65
 8002e58:	08002e7f 	.word	0x08002e7f
 8002e5c:	08002e9f 	.word	0x08002e9f
 8002e60:	08002ebb 	.word	0x08002ebb
    {
    case NORTH:
        horzWall[currPos->row][currPos->col] = 1;   // Sets the 2D array value to 1 to represent true (there's no bool type in C)
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <setWall+0xb8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <setWall+0xb8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	491d      	ldr	r1, [pc, #116]	; (8002ee8 <setWall+0xbc>)
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	4413      	add	r3, r2
 8002e76:	2201      	movs	r2, #1
 8002e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        //API_setWall(currX, currY, 'n');             // Light up the discovered wall in the simulator
        break;
 8002e7c:	e02c      	b.n	8002ed8 <setWall+0xac>
    case EAST:
        vertWall[currPos->row][currPos->col + 1] = 1;   // May need to check 2D array logic my head hurts lol
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <setWall+0xb8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <setWall+0xb8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	1c59      	adds	r1, r3, #1
 8002e8c:	4817      	ldr	r0, [pc, #92]	; (8002eec <setWall+0xc0>)
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	4413      	add	r3, r2
 8002e94:	440b      	add	r3, r1
 8002e96:	2201      	movs	r2, #1
 8002e98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        //API_setWall(currX, currY, 'e');
        break;
 8002e9c:	e01c      	b.n	8002ed8 <setWall+0xac>
    case SOUTH:
        horzWall[currPos->row + 1][currPos->col] = 1;
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <setWall+0xb8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <setWall+0xb8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <setWall+0xbc>)
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	4413      	add	r3, r2
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        //API_setWall(currX, currY, 's');
        break;
 8002eb8:	e00e      	b.n	8002ed8 <setWall+0xac>
    case WEST:
        vertWall[currPos->row][currPos->col] = 1;
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <setWall+0xb8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <setWall+0xb8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	4809      	ldr	r0, [pc, #36]	; (8002eec <setWall+0xc0>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	4413      	add	r3, r2
 8002ece:	440b      	add	r3, r1
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        //API_setWall(currX, currY, 'w');
        break;
 8002ed6:	bf00      	nop
    }
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	200003a0 	.word	0x200003a0
 8002ee8:	20000fb0 	.word	0x20000fb0
 8002eec:	200013f0 	.word	0x200013f0

08002ef0 <detectWalls>:

void detectWalls()
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
    switch (currHead)
 8002ef4:	4b3e      	ldr	r3, [pc, #248]	; (8002ff0 <detectWalls+0x100>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d876      	bhi.n	8002fea <detectWalls+0xfa>
 8002efc:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <detectWalls+0x14>)
 8002efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f02:	bf00      	nop
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f47 	.word	0x08002f47
 8002f0c:	08002f79 	.word	0x08002f79
 8002f10:	08002fab 	.word	0x08002fab
    {
    case NORTH:
        if (frontWallCheck())
 8002f14:	f000 fdae 	bl	8003a74 <frontWallCheck>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <detectWalls+0x34>
        {
            setWall(NORTH);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7ff ff84 	bl	8002e2c <setWall>
        }
        if (leftWallCheck())
 8002f24:	f000 fd6e 	bl	8003a04 <leftWallCheck>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <detectWalls+0x44>
        {
            setWall(WEST);
 8002f2e:	2003      	movs	r0, #3
 8002f30:	f7ff ff7c 	bl	8002e2c <setWall>
        }
        if (rightWallCheck())
 8002f34:	f000 fd82 	bl	8003a3c <rightWallCheck>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d04e      	beq.n	8002fdc <detectWalls+0xec>
        {
            setWall(EAST);
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f7ff ff74 	bl	8002e2c <setWall>
        }
        break;
 8002f44:	e04a      	b.n	8002fdc <detectWalls+0xec>
    case EAST:
        if (frontWallCheck())
 8002f46:	f000 fd95 	bl	8003a74 <frontWallCheck>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <detectWalls+0x66>
        {
            setWall(EAST);
 8002f50:	2001      	movs	r0, #1
 8002f52:	f7ff ff6b 	bl	8002e2c <setWall>
        }
        if (leftWallCheck())
 8002f56:	f000 fd55 	bl	8003a04 <leftWallCheck>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <detectWalls+0x76>
        {
            setWall(NORTH);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7ff ff63 	bl	8002e2c <setWall>
        }
        if (rightWallCheck())
 8002f66:	f000 fd69 	bl	8003a3c <rightWallCheck>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d037      	beq.n	8002fe0 <detectWalls+0xf0>
        {
            setWall(SOUTH);
 8002f70:	2002      	movs	r0, #2
 8002f72:	f7ff ff5b 	bl	8002e2c <setWall>
        }
        break;
 8002f76:	e033      	b.n	8002fe0 <detectWalls+0xf0>
    case SOUTH:
        if (frontWallCheck())
 8002f78:	f000 fd7c 	bl	8003a74 <frontWallCheck>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <detectWalls+0x98>
        {
            setWall(SOUTH);
 8002f82:	2002      	movs	r0, #2
 8002f84:	f7ff ff52 	bl	8002e2c <setWall>
        }
        if (leftWallCheck())
 8002f88:	f000 fd3c 	bl	8003a04 <leftWallCheck>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <detectWalls+0xa8>
        {
            setWall(EAST);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f7ff ff4a 	bl	8002e2c <setWall>
        }
        if (rightWallCheck())
 8002f98:	f000 fd50 	bl	8003a3c <rightWallCheck>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d020      	beq.n	8002fe4 <detectWalls+0xf4>
        {
            setWall(WEST);
 8002fa2:	2003      	movs	r0, #3
 8002fa4:	f7ff ff42 	bl	8002e2c <setWall>
        }
        break;
 8002fa8:	e01c      	b.n	8002fe4 <detectWalls+0xf4>
    case WEST:
        if (frontWallCheck())
 8002faa:	f000 fd63 	bl	8003a74 <frontWallCheck>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <detectWalls+0xca>
        {
            setWall(WEST);
 8002fb4:	2003      	movs	r0, #3
 8002fb6:	f7ff ff39 	bl	8002e2c <setWall>
        }
        if (leftWallCheck())
 8002fba:	f000 fd23 	bl	8003a04 <leftWallCheck>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <detectWalls+0xda>
        {
            setWall(SOUTH);
 8002fc4:	2002      	movs	r0, #2
 8002fc6:	f7ff ff31 	bl	8002e2c <setWall>
        }
        if (rightWallCheck())
 8002fca:	f000 fd37 	bl	8003a3c <rightWallCheck>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d009      	beq.n	8002fe8 <detectWalls+0xf8>
        {
            setWall(NORTH);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7ff ff29 	bl	8002e2c <setWall>
        }
        break;
 8002fda:	e005      	b.n	8002fe8 <detectWalls+0xf8>
        break;
 8002fdc:	bf00      	nop
 8002fde:	e004      	b.n	8002fea <detectWalls+0xfa>
        break;
 8002fe0:	bf00      	nop
 8002fe2:	e002      	b.n	8002fea <detectWalls+0xfa>
        break;
 8002fe4:	bf00      	nop
 8002fe6:	e000      	b.n	8002fea <detectWalls+0xfa>
        break;
 8002fe8:	bf00      	nop
    }
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	200003a4 	.word	0x200003a4

08002ff4 <recalculate>:

void recalculate()
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0

    insertQueue(newCell(currPos->row, currPos->col));
 8002ffa:	4b9f      	ldr	r3, [pc, #636]	; (8003278 <recalculate+0x284>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b9d      	ldr	r3, [pc, #628]	; (8003278 <recalculate+0x284>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f7ff fe03 	bl	8002c14 <newCell>
 800300e:	4603      	mov	r3, r0
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fe15 	bl	8002c40 <insertQueue>

    //while queue is not empty
    while (queueStart != queueEnd) {
 8003016:	e122      	b.n	800325e <recalculate+0x26a>

        //Take front cell in queue “out of line” for consideration

        struct Cell* currElement = queueFront(); //has the current compared
 8003018:	f7ff fe4c 	bl	8002cb4 <queueFront>
 800301c:	6038      	str	r0, [r7, #0]
//        sprintf(str, "Calculating distances at row %d, column %d", currElement->row, currElement->col);
//        debug_log(str);

        //Get the front cell’s minimum value amongst accessible neighbors.

        int neighborMinimum = -1;       //uninitialized or uncompared state when less than 0
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
 8003022:	607b      	str	r3, [r7, #4]
        if (horzWall[currElement->row][currElement->col] != 1) {        //north wall
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4993      	ldr	r1, [pc, #588]	; (800327c <recalculate+0x288>)
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	4413      	add	r3, r2
 8003032:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d01a      	beq.n	8003070 <recalculate+0x7c>
            if (neighborMinimum < 0 || neighborMinimum > Manhattans[currElement->row - 1][currElement->col]) {
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0c      	blt.n	800305a <recalculate+0x66>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1e5a      	subs	r2, r3, #1
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	498d      	ldr	r1, [pc, #564]	; (8003280 <recalculate+0x28c>)
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	4413      	add	r3, r2
 8003050:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	dd0a      	ble.n	8003070 <recalculate+0x7c>
                neighborMinimum = Manhattans[currElement->row - 1][currElement->col];
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	1e5a      	subs	r2, r3, #1
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4986      	ldr	r1, [pc, #536]	; (8003280 <recalculate+0x28c>)
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	4413      	add	r3, r2
 800306a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800306e:	607b      	str	r3, [r7, #4]
            }
        }
        if (vertWall[currElement->row][currElement->col + 1] != 1) {        //east wall
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	1c59      	adds	r1, r3, #1
 800307a:	4882      	ldr	r0, [pc, #520]	; (8003284 <recalculate+0x290>)
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	4413      	add	r3, r2
 8003082:	440b      	add	r3, r1
 8003084:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d01a      	beq.n	80030c2 <recalculate+0xce>
            if (neighborMinimum < 0 || neighborMinimum > Manhattans[currElement->row][currElement->col + 1]) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	db0c      	blt.n	80030ac <recalculate+0xb8>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	3301      	adds	r3, #1
 800309c:	4978      	ldr	r1, [pc, #480]	; (8003280 <recalculate+0x28c>)
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	4413      	add	r3, r2
 80030a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	dd0a      	ble.n	80030c2 <recalculate+0xce>
                neighborMinimum = Manhattans[currElement->row][currElement->col + 1];
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4972      	ldr	r1, [pc, #456]	; (8003280 <recalculate+0x28c>)
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	4413      	add	r3, r2
 80030bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030c0:	607b      	str	r3, [r7, #4]
            }
        }
        if (horzWall[currElement->row + 1][currElement->col] != 1) {        //south wall
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	496b      	ldr	r1, [pc, #428]	; (800327c <recalculate+0x288>)
 80030ce:	0112      	lsls	r2, r2, #4
 80030d0:	4413      	add	r3, r2
 80030d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d01a      	beq.n	8003110 <recalculate+0x11c>
            if (neighborMinimum < 0 || neighborMinimum > Manhattans[currElement->row + 1][currElement->col]) {
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0c      	blt.n	80030fa <recalculate+0x106>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4965      	ldr	r1, [pc, #404]	; (8003280 <recalculate+0x28c>)
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	4413      	add	r3, r2
 80030f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	dd0a      	ble.n	8003110 <recalculate+0x11c>
                neighborMinimum = Manhattans[currElement->row + 1][currElement->col];
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	495e      	ldr	r1, [pc, #376]	; (8003280 <recalculate+0x28c>)
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	4413      	add	r3, r2
 800310a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800310e:	607b      	str	r3, [r7, #4]
            }
        }
        if (vertWall[currElement->row][currElement->col] != 1) {        //west wall
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	485a      	ldr	r0, [pc, #360]	; (8003284 <recalculate+0x290>)
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	4413      	add	r3, r2
 8003120:	440b      	add	r3, r1
 8003122:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d01a      	beq.n	8003160 <recalculate+0x16c>
            if (neighborMinimum < 0 || neighborMinimum > Manhattans[currElement->row][currElement->col - 1]) {
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0c      	blt.n	800314a <recalculate+0x156>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	3b01      	subs	r3, #1
 800313a:	4951      	ldr	r1, [pc, #324]	; (8003280 <recalculate+0x28c>)
 800313c:	0112      	lsls	r2, r2, #4
 800313e:	4413      	add	r3, r2
 8003140:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	dd0a      	ble.n	8003160 <recalculate+0x16c>
                neighborMinimum = Manhattans[currElement->row][currElement->col - 1];
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	494a      	ldr	r1, [pc, #296]	; (8003280 <recalculate+0x28c>)
 8003156:	0112      	lsls	r2, r2, #4
 8003158:	4413      	add	r3, r2
 800315a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800315e:	607b      	str	r3, [r7, #4]
            }
        }
        //If the front cell’s value ≤ minimum of its neighbors,
        //set the front cell’s value to minimum + 1 and add all accessible neighbors to the queue.
        if (Manhattans[currElement->row][currElement->col] <= neighborMinimum) {
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4945      	ldr	r1, [pc, #276]	; (8003280 <recalculate+0x28c>)
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	4413      	add	r3, r2
 800316e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	db70      	blt.n	800325a <recalculate+0x266>
            Manhattans[currElement->row][currElement->col] = neighborMinimum + 1;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6819      	ldr	r1, [r3, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	3201      	adds	r2, #1
 8003184:	483e      	ldr	r0, [pc, #248]	; (8003280 <recalculate+0x28c>)
 8003186:	0109      	lsls	r1, r1, #4
 8003188:	440b      	add	r3, r1
 800318a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

            //again set through the accessible ones and add to queue
            if (horzWall[currElement->row][currElement->col] != 1) {        //north wall
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4939      	ldr	r1, [pc, #228]	; (800327c <recalculate+0x288>)
 8003198:	0112      	lsls	r2, r2, #4
 800319a:	4413      	add	r3, r2
 800319c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d00c      	beq.n	80031be <recalculate+0x1ca>
                insertQueue(newCell(currElement->row - 1, currElement->col));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f7ff fd2f 	bl	8002c14 <newCell>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fd41 	bl	8002c40 <insertQueue>
                //char str[50];
                //sprintf(str, "Added row %d, column %d to the queue", currElement->row - 1, currElement->col);
                //debug_log(str);
            }
            if (vertWall[currElement->row][currElement->col + 1] != 1) {        //east wall
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	1c59      	adds	r1, r3, #1
 80031c8:	482e      	ldr	r0, [pc, #184]	; (8003284 <recalculate+0x290>)
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	4413      	add	r3, r2
 80031d0:	440b      	add	r3, r1
 80031d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d00c      	beq.n	80031f4 <recalculate+0x200>
                insertQueue(newCell(currElement->row, currElement->col + 1));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	3301      	adds	r3, #1
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f7ff fd14 	bl	8002c14 <newCell>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fd26 	bl	8002c40 <insertQueue>
                //char str[50];
                //sprintf(str, "Added row %d, column %d to the queue", currElement->row, currElement->col + 1);
                //debug_log(str);
            }
            if (horzWall[currElement->row + 1][currElement->col] != 1) {        //south wall
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	491f      	ldr	r1, [pc, #124]	; (800327c <recalculate+0x288>)
 8003200:	0112      	lsls	r2, r2, #4
 8003202:	4413      	add	r3, r2
 8003204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d00c      	beq.n	8003226 <recalculate+0x232>
                insertQueue(newCell(currElement->row + 1, currElement->col));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f7ff fcfb 	bl	8002c14 <newCell>
 800321e:	4603      	mov	r3, r0
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fd0d 	bl	8002c40 <insertQueue>
                //char str[50];
                //sprintf(str, "Added row %d, column %d to the queue", currElement->row + 1, currElement->col);
                //debug_log(str);
            }
            if (vertWall[currElement->row][currElement->col] != 1) {        //west wall
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6859      	ldr	r1, [r3, #4]
 800322e:	4815      	ldr	r0, [pc, #84]	; (8003284 <recalculate+0x290>)
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	4413      	add	r3, r2
 8003236:	440b      	add	r3, r1
 8003238:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d00c      	beq.n	800325a <recalculate+0x266>
                insertQueue(newCell(currElement->row, currElement->col - 1));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	3b01      	subs	r3, #1
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f7ff fce1 	bl	8002c14 <newCell>
 8003252:	4603      	mov	r3, r0
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fcf3 	bl	8002c40 <insertQueue>
                //debug_log(str);
            }
            //we might have to check edge conditions (i.e. checking that we don't access -1 rows or something)
        }

        popQueueFront();      // Deletes cell from queue and frees memory
 800325a:	f7ff fd11 	bl	8002c80 <popQueueFront>
    while (queueStart != queueEnd) {
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <recalculate+0x294>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <recalculate+0x298>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	f47f aed6 	bne.w	8003018 <recalculate+0x24>

        //Else, continue!
    }
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200003a0 	.word	0x200003a0
 800327c:	20000fb0 	.word	0x20000fb0
 8003280:	200003a8 	.word	0x200003a8
 8003284:	200013f0 	.word	0x200013f0
 8003288:	20000fa8 	.word	0x20000fa8
 800328c:	20000fac 	.word	0x20000fac

08003290 <solver>:

Action solver(Algorithm alg) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
    switch (alg)
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <solver+0x16>
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d004      	beq.n	80032ae <solver+0x1e>
 80032a4:	e007      	b.n	80032b6 <solver+0x26>
    {
    case DEAD:
    	return deadReckoning();
 80032a6:	f000 f80a 	bl	80032be <deadReckoning>
 80032aa:	4603      	mov	r3, r0
 80032ac:	e003      	b.n	80032b6 <solver+0x26>
    	break;
    case FLOODFILL:
    	return floodFill();
 80032ae:	f000 f819 	bl	80032e4 <floodFill>
 80032b2:	4603      	mov	r3, r0
 80032b4:	e7ff      	b.n	80032b6 <solver+0x26>
    	break;
    }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <deadReckoning>:

Action deadReckoning() {       // The simple left wall following algorithm that they provided
 80032be:	b580      	push	{r7, lr}
 80032c0:	af00      	add	r7, sp, #0
	if (!frontWallCheck())
 80032c2:	f000 fbd7 	bl	8003a74 <frontWallCheck>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <deadReckoning+0x12>
	{
		return FORWARD;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e007      	b.n	80032e0 <deadReckoning+0x22>
	}
	else if (!rightWallCheck())
 80032d0:	f000 fbb4 	bl	8003a3c <rightWallCheck>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <deadReckoning+0x20>
	{
		return RIGHT;
 80032da:	2302      	movs	r3, #2
 80032dc:	e000      	b.n	80032e0 <deadReckoning+0x22>
	}
	else
	{
		return LEFT;
 80032de:	2300      	movs	r3, #0
	}
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <floodFill>:

Action floodFill() {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
    if (!initialized)           // Initializes all the elements once (there might be a better way to do this idk)
 80032ea:	4b9a      	ldr	r3, [pc, #616]	; (8003554 <floodFill+0x270>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <floodFill+0x18>
    {
        initElements();
 80032f2:	f7ff fcef 	bl	8002cd4 <initElements>
        initialized = 1;
 80032f6:	4b97      	ldr	r3, [pc, #604]	; (8003554 <floodFill+0x270>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    }

    detectWalls();  // Lights up detected walls and adds them to the 2D wall arrays
 80032fc:	f7ff fdf8 	bl	8002ef0 <detectWalls>
    displayManhatttans();
 8003300:	f7ff fd8e 	bl	8002e20 <displayManhatttans>

    int nextHead = -1;
 8003304:	f04f 33ff 	mov.w	r3, #4294967295
 8003308:	61fb      	str	r3, [r7, #28]
    int row = currPos->row;
 800330a:	4b93      	ldr	r3, [pc, #588]	; (8003558 <floodFill+0x274>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	61bb      	str	r3, [r7, #24]
    int col = currPos->col;
 8003312:	4b91      	ldr	r3, [pc, #580]	; (8003558 <floodFill+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	617b      	str	r3, [r7, #20]

    if (Manhattans[row][col] == 0)
 800331a:	4990      	ldr	r1, [pc, #576]	; (800355c <floodFill+0x278>)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	011a      	lsls	r2, r3, #4
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4413      	add	r3, r2
 8003324:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <floodFill+0x4c>
    {
//		restart();
    	return IDLE;
 800332c:	2303      	movs	r3, #3
 800332e:	e124      	b.n	800357a <floodFill+0x296>
    }


    int northBlocked = horzWall[currPos->row][currPos->col];
 8003330:	4b89      	ldr	r3, [pc, #548]	; (8003558 <floodFill+0x274>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b88      	ldr	r3, [pc, #544]	; (8003558 <floodFill+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4988      	ldr	r1, [pc, #544]	; (8003560 <floodFill+0x27c>)
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	4413      	add	r3, r2
 8003342:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003346:	613b      	str	r3, [r7, #16]
    int eastBlocked = vertWall[currPos->row][currPos->col + 1];
 8003348:	4b83      	ldr	r3, [pc, #524]	; (8003558 <floodFill+0x274>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b82      	ldr	r3, [pc, #520]	; (8003558 <floodFill+0x274>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	1c59      	adds	r1, r3, #1
 8003356:	4883      	ldr	r0, [pc, #524]	; (8003564 <floodFill+0x280>)
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	4413      	add	r3, r2
 800335e:	440b      	add	r3, r1
 8003360:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003364:	60fb      	str	r3, [r7, #12]
    int southBlocked = horzWall[currPos->row + 1][currPos->col];
 8003366:	4b7c      	ldr	r3, [pc, #496]	; (8003558 <floodFill+0x274>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	4b7a      	ldr	r3, [pc, #488]	; (8003558 <floodFill+0x274>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	497a      	ldr	r1, [pc, #488]	; (8003560 <floodFill+0x27c>)
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	4413      	add	r3, r2
 800337a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800337e:	60bb      	str	r3, [r7, #8]
    int westBlocked = vertWall[currPos->row][currPos->col];
 8003380:	4b75      	ldr	r3, [pc, #468]	; (8003558 <floodFill+0x274>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b74      	ldr	r3, [pc, #464]	; (8003558 <floodFill+0x274>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	4875      	ldr	r0, [pc, #468]	; (8003564 <floodFill+0x280>)
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	4413      	add	r3, r2
 8003394:	440b      	add	r3, r1
 8003396:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800339a:	607b      	str	r3, [r7, #4]

    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d015      	beq.n	80033ce <floodFill+0xea>
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	496d      	ldr	r1, [pc, #436]	; (800355c <floodFill+0x278>)
 80033a8:	011a      	lsls	r2, r3, #4
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	4413      	add	r3, r2
 80033ae:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80033b2:	486a      	ldr	r0, [pc, #424]	; (800355c <floodFill+0x278>)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	0119      	lsls	r1, r3, #4
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	440b      	add	r3, r1
 80033bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	da04      	bge.n	80033ce <floodFill+0xea>
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <floodFill+0xea>
        nextHead = NORTH;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
    if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b0f      	cmp	r3, #15
 80033d2:	d015      	beq.n	8003400 <floodFill+0x11c>
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3301      	adds	r3, #1
 80033d8:	4960      	ldr	r1, [pc, #384]	; (800355c <floodFill+0x278>)
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	4413      	add	r3, r2
 80033e0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80033e4:	485d      	ldr	r0, [pc, #372]	; (800355c <floodFill+0x278>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	0119      	lsls	r1, r3, #4
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	440b      	add	r3, r1
 80033ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	da04      	bge.n	8003400 <floodFill+0x11c>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <floodFill+0x11c>
        nextHead = EAST;
 80033fc:	2301      	movs	r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
    if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b0f      	cmp	r3, #15
 8003404:	d015      	beq.n	8003432 <floodFill+0x14e>
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	3301      	adds	r3, #1
 800340a:	4954      	ldr	r1, [pc, #336]	; (800355c <floodFill+0x278>)
 800340c:	011a      	lsls	r2, r3, #4
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	4413      	add	r3, r2
 8003412:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003416:	4851      	ldr	r0, [pc, #324]	; (800355c <floodFill+0x278>)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	0119      	lsls	r1, r3, #4
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	440b      	add	r3, r1
 8003420:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003424:	429a      	cmp	r2, r3
 8003426:	da04      	bge.n	8003432 <floodFill+0x14e>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <floodFill+0x14e>
        nextHead = SOUTH;
 800342e:	2302      	movs	r3, #2
 8003430:	61fb      	str	r3, [r7, #28]
    if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)       // Find next heading
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d015      	beq.n	8003464 <floodFill+0x180>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3b01      	subs	r3, #1
 800343c:	4947      	ldr	r1, [pc, #284]	; (800355c <floodFill+0x278>)
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	0112      	lsls	r2, r2, #4
 8003442:	4413      	add	r3, r2
 8003444:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003448:	4844      	ldr	r0, [pc, #272]	; (800355c <floodFill+0x278>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	0119      	lsls	r1, r3, #4
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	440b      	add	r3, r1
 8003452:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003456:	429a      	cmp	r2, r3
 8003458:	da04      	bge.n	8003464 <floodFill+0x180>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <floodFill+0x180>
        nextHead = WEST;
 8003460:	2303      	movs	r3, #3
 8003462:	61fb      	str	r3, [r7, #28]

    if (nextHead == -1)                     // If no path available, then recalculta
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346a:	d103      	bne.n	8003474 <floodFill+0x190>
    {
        recalculate();
 800346c:	f7ff fdc2 	bl	8002ff4 <recalculate>
        return IDLE;
 8003470:	2303      	movs	r3, #3
 8003472:	e082      	b.n	800357a <floodFill+0x296>
    }

    if (nextHead == currHead)               // If next heading is in same direction, move forward
 8003474:	4b3c      	ldr	r3, [pc, #240]	; (8003568 <floodFill+0x284>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4293      	cmp	r3, r2
 800347e:	d129      	bne.n	80034d4 <floodFill+0x1f0>
    {
        switch (currHead)
 8003480:	4b39      	ldr	r3, [pc, #228]	; (8003568 <floodFill+0x284>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d823      	bhi.n	80034d0 <floodFill+0x1ec>
 8003488:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <floodFill+0x1ac>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034a1 	.word	0x080034a1
 8003494:	080034ad 	.word	0x080034ad
 8003498:	080034b9 	.word	0x080034b9
 800349c:	080034c5 	.word	0x080034c5
        {
        case NORTH:
            currPos->row--;
 80034a0:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <floodFill+0x274>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	3a01      	subs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
            break;
 80034aa:	e011      	b.n	80034d0 <floodFill+0x1ec>
        case EAST:
            currPos->col++;
 80034ac:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <floodFill+0x274>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	3201      	adds	r2, #1
 80034b4:	605a      	str	r2, [r3, #4]
            break;
 80034b6:	e00b      	b.n	80034d0 <floodFill+0x1ec>
        case SOUTH:
            currPos->row++;
 80034b8:	4b27      	ldr	r3, [pc, #156]	; (8003558 <floodFill+0x274>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	3201      	adds	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
            break;
 80034c2:	e005      	b.n	80034d0 <floodFill+0x1ec>
        case WEST:
            currPos->col--;
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <floodFill+0x274>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	3a01      	subs	r2, #1
 80034cc:	605a      	str	r2, [r3, #4]
            break;
 80034ce:	bf00      	nop
        }
        return FORWARD;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e052      	b.n	800357a <floodFill+0x296>
    }

    if ((nextHead - currHead) % 2 == 0)         // If next heading is in opposite direction, turn right
 80034d4:	4b24      	ldr	r3, [pc, #144]	; (8003568 <floodFill+0x284>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10f      	bne.n	8003506 <floodFill+0x222>
    {
        if (currHead == WEST)
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <floodFill+0x284>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d103      	bne.n	80034f6 <floodFill+0x212>
            currHead = NORTH;
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <floodFill+0x284>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	e005      	b.n	8003502 <floodFill+0x21e>
        else
            currHead++;
 80034f6:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <floodFill+0x284>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	3301      	adds	r3, #1
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <floodFill+0x284>)
 8003500:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 8003502:	2302      	movs	r3, #2
 8003504:	e039      	b.n	800357a <floodFill+0x296>
    }

    if ((nextHead - currHead) == 1 || nextHead - currHead == -3)  // If next heading is right, turn right
 8003506:	4b18      	ldr	r3, [pc, #96]	; (8003568 <floodFill+0x284>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	2b01      	cmp	r3, #1
 8003512:	d007      	beq.n	8003524 <floodFill+0x240>
 8003514:	4b14      	ldr	r3, [pc, #80]	; (8003568 <floodFill+0x284>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	f113 0f03 	cmn.w	r3, #3
 8003522:	d10f      	bne.n	8003544 <floodFill+0x260>
    {
        if (currHead == WEST)
 8003524:	4b10      	ldr	r3, [pc, #64]	; (8003568 <floodFill+0x284>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d103      	bne.n	8003534 <floodFill+0x250>
            currHead = NORTH;
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <floodFill+0x284>)
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	e005      	b.n	8003540 <floodFill+0x25c>
        else
            currHead++;
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <floodFill+0x284>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <floodFill+0x284>)
 800353e:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 8003540:	2302      	movs	r3, #2
 8003542:	e01a      	b.n	800357a <floodFill+0x296>
    }

    if (currHead == NORTH)  // else, turn left
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <floodFill+0x284>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10f      	bne.n	800356c <floodFill+0x288>
        currHead = WEST;
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <floodFill+0x284>)
 800354e:	2203      	movs	r2, #3
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e011      	b.n	8003578 <floodFill+0x294>
 8003554:	2000039c 	.word	0x2000039c
 8003558:	200003a0 	.word	0x200003a0
 800355c:	200003a8 	.word	0x200003a8
 8003560:	20000fb0 	.word	0x20000fb0
 8003564:	200013f0 	.word	0x200013f0
 8003568:	200003a4 	.word	0x200003a4
    else
        currHead--;
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <floodFill+0x2a0>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	3b01      	subs	r3, #1
 8003572:	b2da      	uxtb	r2, r3
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <floodFill+0x2a0>)
 8003576:	701a      	strb	r2, [r3, #0]
    return LEFT;
 8003578:	2300      	movs	r3, #0
    //while (queueStart != queueEnd)
    //{
    //    API_setColor(queueFront()->row, queueFront()->col, 'g');
    //    popQueueFront();
    //}
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200003a4 	.word	0x200003a4

08003588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_MspInit+0x48>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	4a0e      	ldr	r2, [pc, #56]	; (80035d0 <HAL_MspInit+0x48>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800359c:	6453      	str	r3, [r2, #68]	; 0x44
 800359e:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <HAL_MspInit+0x48>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <HAL_MspInit+0x48>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_MspInit+0x48>)
 80035b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_MspInit+0x48>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	40023800 	.word	0x40023800

080035d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a3c      	ldr	r2, [pc, #240]	; (80036e4 <HAL_ADC_MspInit+0x110>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d171      	bne.n	80036da <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <HAL_ADC_MspInit+0x114>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	4a3a      	ldr	r2, [pc, #232]	; (80036e8 <HAL_ADC_MspInit+0x114>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003604:	6453      	str	r3, [r2, #68]	; 0x44
 8003606:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <HAL_ADC_MspInit+0x114>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_ADC_MspInit+0x114>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a33      	ldr	r2, [pc, #204]	; (80036e8 <HAL_ADC_MspInit+0x114>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <HAL_ADC_MspInit+0x114>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <HAL_ADC_MspInit+0x114>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a2c      	ldr	r2, [pc, #176]	; (80036e8 <HAL_ADC_MspInit+0x114>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_ADC_MspInit+0x114>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 800364a:	2303      	movs	r3, #3
 800364c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800364e:	2303      	movs	r3, #3
 8003650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	4619      	mov	r1, r3
 800365c:	4823      	ldr	r0, [pc, #140]	; (80036ec <HAL_ADC_MspInit+0x118>)
 800365e:	f001 fbf3 	bl	8004e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 8003662:	2360      	movs	r3, #96	; 0x60
 8003664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003666:	2303      	movs	r3, #3
 8003668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366e:	f107 0314 	add.w	r3, r7, #20
 8003672:	4619      	mov	r1, r3
 8003674:	481e      	ldr	r0, [pc, #120]	; (80036f0 <HAL_ADC_MspInit+0x11c>)
 8003676:	f001 fbe7 	bl	8004e48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800367a:	4b1e      	ldr	r3, [pc, #120]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 800367c:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <HAL_ADC_MspInit+0x124>)
 800367e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003680:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 8003682:	2200      	movs	r2, #0
 8003684:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 800368e:	2200      	movs	r2, #0
 8003690:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 8003694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003698:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800369a:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 800369c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036a2:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 80036a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 80036ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036be:	480d      	ldr	r0, [pc, #52]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 80036c0:	f000 ffe6 	bl	8004690 <HAL_DMA_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80036ca:	f7fe fc37 	bl	8001f3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <HAL_ADC_MspInit+0x120>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036da:	bf00      	nop
 80036dc:	3728      	adds	r7, #40	; 0x28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40012000 	.word	0x40012000
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40020800 	.word	0x40020800
 80036f0:	40020000 	.word	0x40020000
 80036f4:	200001e8 	.word	0x200001e8
 80036f8:	40026410 	.word	0x40026410

080036fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <HAL_TIM_PWM_MspInit+0x38>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d10d      	bne.n	800372a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_TIM_PWM_MspInit+0x3c>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	4a08      	ldr	r2, [pc, #32]	; (8003738 <HAL_TIM_PWM_MspInit+0x3c>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6453      	str	r3, [r2, #68]	; 0x44
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_TIM_PWM_MspInit+0x3c>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	40010000 	.word	0x40010000
 8003738:	40023800 	.word	0x40023800

0800373c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	; 0x30
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 031c 	add.w	r3, r7, #28
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a32      	ldr	r2, [pc, #200]	; (8003824 <HAL_TIM_Encoder_MspInit+0xe8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d12c      	bne.n	80037b8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	4b31      	ldr	r3, [pc, #196]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	4a30      	ldr	r2, [pc, #192]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6413      	str	r3, [r2, #64]	; 0x40
 800376e:	4b2e      	ldr	r3, [pc, #184]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a29      	ldr	r2, [pc, #164]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8003796:	2330      	movs	r3, #48	; 0x30
 8003798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379a:	2302      	movs	r3, #2
 800379c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a2:	2300      	movs	r3, #0
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037a6:	2302      	movs	r3, #2
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037aa:	f107 031c 	add.w	r3, r7, #28
 80037ae:	4619      	mov	r1, r3
 80037b0:	481e      	ldr	r0, [pc, #120]	; (800382c <HAL_TIM_Encoder_MspInit+0xf0>)
 80037b2:	f001 fb49 	bl	8004e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80037b6:	e030      	b.n	800381a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <HAL_TIM_Encoder_MspInit+0xf4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d12b      	bne.n	800381a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	6453      	str	r3, [r2, #68]	; 0x44
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	4b11      	ldr	r3, [pc, #68]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a10      	ldr	r2, [pc, #64]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 80037e8:	f043 0304 	orr.w	r3, r3, #4
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <HAL_TIM_Encoder_MspInit+0xec>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 80037fa:	23c0      	movs	r3, #192	; 0xc0
 80037fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fe:	2302      	movs	r3, #2
 8003800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003806:	2300      	movs	r3, #0
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800380a:	2303      	movs	r3, #3
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800380e:	f107 031c 	add.w	r3, r7, #28
 8003812:	4619      	mov	r1, r3
 8003814:	4807      	ldr	r0, [pc, #28]	; (8003834 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003816:	f001 fb17 	bl	8004e48 <HAL_GPIO_Init>
}
 800381a:	bf00      	nop
 800381c:	3730      	adds	r7, #48	; 0x30
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40000400 	.word	0x40000400
 8003828:	40023800 	.word	0x40023800
 800382c:	40020400 	.word	0x40020400
 8003830:	40010400 	.word	0x40010400
 8003834:	40020800 	.word	0x40020800

08003838 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <HAL_TIM_MspPostInit+0x68>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d11e      	bne.n	8003898 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <HAL_TIM_MspPostInit+0x6c>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <HAL_TIM_MspPostInit+0x6c>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <HAL_TIM_MspPostInit+0x6c>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8003876:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800387a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	2302      	movs	r3, #2
 800387e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003888:	2301      	movs	r3, #1
 800388a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	4619      	mov	r1, r3
 8003892:	4805      	ldr	r0, [pc, #20]	; (80038a8 <HAL_TIM_MspPostInit+0x70>)
 8003894:	f001 fad8 	bl	8004e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003898:	bf00      	nop
 800389a:	3720      	adds	r7, #32
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40020000 	.word	0x40020000

080038ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <NMI_Handler+0x4>

080038b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b6:	e7fe      	b.n	80038b6 <HardFault_Handler+0x4>

080038b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <MemManage_Handler+0x4>

080038be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c2:	e7fe      	b.n	80038c2 <BusFault_Handler+0x4>

080038c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c8:	e7fe      	b.n	80038c8 <UsageFault_Handler+0x4>

080038ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f2:	f000 f975 	bl	8003be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  SysTickFunction();
 80038f6:	f000 f849 	bl	800398c <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <DMA2_Stream0_IRQHandler+0x10>)
 8003906:	f001 f839 	bl	800497c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200001e8 	.word	0x200001e8

08003914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800391c:	4a14      	ldr	r2, [pc, #80]	; (8003970 <_sbrk+0x5c>)
 800391e:	4b15      	ldr	r3, [pc, #84]	; (8003974 <_sbrk+0x60>)
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <_sbrk+0x64>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d102      	bne.n	8003936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <_sbrk+0x64>)
 8003932:	4a12      	ldr	r2, [pc, #72]	; (800397c <_sbrk+0x68>)
 8003934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <_sbrk+0x64>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	429a      	cmp	r2, r3
 8003942:	d207      	bcs.n	8003954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003944:	f002 fe92 	bl	800666c <__errno>
 8003948:	4603      	mov	r3, r0
 800394a:	220c      	movs	r2, #12
 800394c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	e009      	b.n	8003968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <_sbrk+0x64>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <_sbrk+0x64>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <_sbrk+0x64>)
 8003964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003966:	68fb      	ldr	r3, [r7, #12]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20020000 	.word	0x20020000
 8003974:	00000400 	.word	0x00000400
 8003978:	20001830 	.word	0x20001830
 800397c:	20001850 	.word	0x20001850

08003980 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <SysTickFunction>:

#include "main.h"
#include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 8003992:	f7fe fd09 	bl	80023a8 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8003996:	f7fd fe17 	bl	80015c8 <getRightEncoderCounts>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	f647 1318 	movw	r3, #31000	; 0x7918
 80039a2:	429a      	cmp	r2, r3
 80039a4:	dc15      	bgt.n	80039d2 <SysTickFunction+0x46>
 80039a6:	f7fd fe1d 	bl	80015e4 <getLeftEncoderCounts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	461a      	mov	r2, r3
 80039ae:	f647 1318 	movw	r3, #31000	; 0x7918
 80039b2:	429a      	cmp	r2, r3
 80039b4:	dc0d      	bgt.n	80039d2 <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 80039b6:	f7fd fe07 	bl	80015c8 <getRightEncoderCounts>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461a      	mov	r2, r3
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <SysTickFunction+0x74>)
 80039c0:	429a      	cmp	r2, r3
 80039c2:	db06      	blt.n	80039d2 <SysTickFunction+0x46>
 80039c4:	f7fd fe0e 	bl	80015e4 <getLeftEncoderCounts>
 80039c8:	4603      	mov	r3, r0
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <SysTickFunction+0x74>)
 80039ce:	429a      	cmp	r2, r3
 80039d0:	da11      	bge.n	80039f6 <SysTickFunction+0x6a>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 80039d2:	f7fd fdf9 	bl	80015c8 <getRightEncoderCounts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	b29c      	uxth	r4, r3
 80039da:	f7fd fe03 	bl	80015e4 <getLeftEncoderCounts>
 80039de:	4603      	mov	r3, r0
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	1ae3      	subs	r3, r4, r3
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 80039e8:	f7fd fe0a 	bl	8001600 <resetEncoders>
		TIM2->CNT = (int16_t) difference;
 80039ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039f4:	6253      	str	r3, [r2, #36]	; 0x24
	}
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd90      	pop	{r4, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	ffff86e8 	.word	0xffff86e8

08003a04 <leftWallCheck>:

void setLeftWall(int wall) { left_wall_threshold = wall; }
void setRightWall(int wall) { right_wall_threshold = wall; }
void setFrontWall(int wall) { front_wall_threshold = wall; }

int16_t leftWallCheck() {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
	if (readIR(IR_LEFT) > left_wall_threshold) {
 8003a08:	2001      	movs	r0, #1
 8003a0a:	f7fd fe09 	bl	8001620 <readIR>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <leftWallCheck+0x30>)
 8003a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	dd03      	ble.n	8003a24 <leftWallCheck+0x20>
		left_wall = 1;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <leftWallCheck+0x34>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	801a      	strh	r2, [r3, #0]
 8003a22:	e002      	b.n	8003a2a <leftWallCheck+0x26>
	}
	else {
		left_wall = 0;
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <leftWallCheck+0x34>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	801a      	strh	r2, [r3, #0]
	}
	return left_wall;
 8003a2a:	4b03      	ldr	r3, [pc, #12]	; (8003a38 <leftWallCheck+0x34>)
 8003a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000008 	.word	0x20000008
 8003a38:	20001834 	.word	0x20001834

08003a3c <rightWallCheck>:

int16_t rightWallCheck() {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	if (readIR(IR_RIGHT) > right_wall_threshold) {
 8003a40:	2002      	movs	r0, #2
 8003a42:	f7fd fded 	bl	8001620 <readIR>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <rightWallCheck+0x30>)
 8003a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	dd03      	ble.n	8003a5c <rightWallCheck+0x20>
		right_wall = 1;
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <rightWallCheck+0x34>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	801a      	strh	r2, [r3, #0]
 8003a5a:	e002      	b.n	8003a62 <rightWallCheck+0x26>
	}
	else {
		right_wall = 0;
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <rightWallCheck+0x34>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	801a      	strh	r2, [r3, #0]
	}
	return right_wall;
 8003a62:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <rightWallCheck+0x34>)
 8003a64:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	2000000a 	.word	0x2000000a
 8003a70:	20001836 	.word	0x20001836

08003a74 <frontWallCheck>:

int16_t frontWallCheck() {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
	if (readIR(IR_FORWARD_LEFT) > front_wall_threshold) {
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f7fd fdd1 	bl	8001620 <readIR>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <frontWallCheck+0x30>)
 8003a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	dd03      	ble.n	8003a94 <frontWallCheck+0x20>
		front_wall = 1;
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <frontWallCheck+0x34>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	e002      	b.n	8003a9a <frontWallCheck+0x26>
	}
	else {
		front_wall = 0;
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <frontWallCheck+0x34>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	801a      	strh	r2, [r3, #0]
	}
	return front_wall;
 8003a9a:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <frontWallCheck+0x34>)
 8003a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	2000000c 	.word	0x2000000c
 8003aa8:	20001838 	.word	0x20001838

08003aac <sign>:

int16_t sign(float x) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	if (x > 0)
 8003ab4:	f04f 0100 	mov.w	r1, #0
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fd faf5 	bl	80010a8 <__aeabi_fcmpgt>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <sign+0x1c>
	{
		return 1;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e00b      	b.n	8003ae0 <sign+0x34>
	}
	else if (x < 0)
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fd facd 	bl	800106c <__aeabi_fcmplt>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <sign+0x32>
	{
		return -1;
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8003adc:	e000      	b.n	8003ae0 <sign+0x34>
	}
	else
	{
		return 0;
 8003ade:	2300      	movs	r3, #0
	}
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003aec:	480d      	ldr	r0, [pc, #52]	; (8003b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003aee:	490e      	ldr	r1, [pc, #56]	; (8003b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003af0:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003af4:	e002      	b.n	8003afc <LoopCopyDataInit>

08003af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003afa:	3304      	adds	r3, #4

08003afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b00:	d3f9      	bcc.n	8003af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b02:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b04:	4c0b      	ldr	r4, [pc, #44]	; (8003b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b08:	e001      	b.n	8003b0e <LoopFillZerobss>

08003b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b0c:	3204      	adds	r2, #4

08003b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b10:	d3fb      	bcc.n	8003b0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b12:	f7ff ff35 	bl	8003980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b16:	f002 fdaf 	bl	8006678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b1a:	f7fd fe77 	bl	800180c <main>
  bx  lr    
 8003b1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b28:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003b2c:	08006924 	.word	0x08006924
  ldr r2, =_sbss
 8003b30:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003b34:	20001850 	.word	0x20001850

08003b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b38:	e7fe      	b.n	8003b38 <ADC_IRQHandler>
	...

08003b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <HAL_Init+0x40>)
 8003b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_Init+0x40>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <HAL_Init+0x40>)
 8003b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b58:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_Init+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a07      	ldr	r2, [pc, #28]	; (8003b7c <HAL_Init+0x40>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b64:	2003      	movs	r0, #3
 8003b66:	f000 fd51 	bl	800460c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b6a:	200f      	movs	r0, #15
 8003b6c:	f000 f808 	bl	8003b80 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003b70:	f7ff fd0a 	bl	8003588 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023c00 	.word	0x40023c00

08003b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b88:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_InitTick+0x54>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <HAL_InitTick+0x58>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	4619      	mov	r1, r3
 8003b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fd69 	bl	8004676 <HAL_SYSTICK_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00e      	b.n	8003bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b0f      	cmp	r3, #15
 8003bb2:	d80a      	bhi.n	8003bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	f000 fd31 	bl	8004622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc0:	4a06      	ldr	r2, [pc, #24]	; (8003bdc <HAL_InitTick+0x5c>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000004 	.word	0x20000004
 8003bd8:	20000014 	.word	0x20000014
 8003bdc:	20000010 	.word	0x20000010

08003be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_IncTick+0x1c>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_IncTick+0x20>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	4a03      	ldr	r2, [pc, #12]	; (8003c00 <HAL_IncTick+0x20>)
 8003bf2:	6013      	str	r3, [r2, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	20000014 	.word	0x20000014
 8003c00:	2000183c 	.word	0x2000183c

08003c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return uwTick;
 8003c08:	4b02      	ldr	r3, [pc, #8]	; (8003c14 <HAL_GetTick+0x10>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	2000183c 	.word	0x2000183c

08003c18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e033      	b.n	8003c96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fccc 	bl	80035d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d118      	bne.n	8003c88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c5e:	f023 0302 	bic.w	r3, r3, #2
 8003c62:	f043 0202 	orr.w	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa7a 	bl	8004164 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f023 0303 	bic.w	r3, r3, #3
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
 8003c86:	e001      	b.n	8003c8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_Start_DMA+0x1e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0bc      	b.n	8003e38 <HAL_ADC_Start_DMA+0x198>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d018      	beq.n	8003d06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ce4:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_ADC_Start_DMA+0x1a0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a56      	ldr	r2, [pc, #344]	; (8003e44 <HAL_ADC_Start_DMA+0x1a4>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	0c9a      	lsrs	r2, r3, #18
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003cf8:	e002      	b.n	8003d00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f9      	bne.n	8003cfa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	f040 8084 	bne.w	8003e1e <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d54:	d106      	bne.n	8003d64 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	f023 0206 	bic.w	r2, r3, #6
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
 8003d62:	e002      	b.n	8003d6a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	4a34      	ldr	r2, [pc, #208]	; (8003e48 <HAL_ADC_Start_DMA+0x1a8>)
 8003d78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	4a33      	ldr	r2, [pc, #204]	; (8003e4c <HAL_ADC_Start_DMA+0x1ac>)
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	4a32      	ldr	r2, [pc, #200]	; (8003e50 <HAL_ADC_Start_DMA+0x1b0>)
 8003d88:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003da2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	334c      	adds	r3, #76	; 0x4c
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f000 fd12 	bl	80047ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003dc8:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_ADC_Start_DMA+0x1b4>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10f      	bne.n	8003df4 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d129      	bne.n	8003e36 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003df0:	609a      	str	r2, [r3, #8]
 8003df2:	e020      	b.n	8003e36 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <HAL_ADC_Start_DMA+0x1b8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d11b      	bne.n	8003e36 <HAL_ADC_Start_DMA+0x196>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d114      	bne.n	8003e36 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	e00b      	b.n	8003e36 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20000004 	.word	0x20000004
 8003e44:	431bde83 	.word	0x431bde83
 8003e48:	08004371 	.word	0x08004371
 8003e4c:	0800442b 	.word	0x0800442b
 8003e50:	08004447 	.word	0x08004447
 8003e54:	40012300 	.word	0x40012300
 8003e58:	40012000 	.word	0x40012000

08003e5c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_ADC_Stop_DMA+0x1a>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e03f      	b.n	8003ef6 <HAL_ADC_Stop_DMA+0x9a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d127      	bne.n	8003eec <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eaa:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d118      	bne.n	8003eec <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fcec 	bl	800489c <HAL_DMA_Abort>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003ed6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ee0:	f023 0301 	bic.w	r3, r3, #1
 8003ee4:	f043 0201 	orr.w	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr
	...

08003f24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x1c>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e103      	b.n	8004148 <HAL_ADC_ConfigChannel+0x224>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b09      	cmp	r3, #9
 8003f4e:	d925      	bls.n	8003f9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68d9      	ldr	r1, [r3, #12]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4613      	mov	r3, r2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4413      	add	r3, r2
 8003f64:	3b1e      	subs	r3, #30
 8003f66:	2207      	movs	r2, #7
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43da      	mvns	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	400a      	ands	r2, r1
 8003f74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68d9      	ldr	r1, [r3, #12]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	4618      	mov	r0, r3
 8003f88:	4603      	mov	r3, r0
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	4403      	add	r3, r0
 8003f8e:	3b1e      	subs	r3, #30
 8003f90:	409a      	lsls	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	e022      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6919      	ldr	r1, [r3, #16]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4613      	mov	r3, r2
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	4413      	add	r3, r2
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	400a      	ands	r2, r1
 8003fbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6919      	ldr	r1, [r3, #16]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	4403      	add	r3, r0
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b06      	cmp	r3, #6
 8003fe8:	d824      	bhi.n	8004034 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3b05      	subs	r3, #5
 8003ffc:	221f      	movs	r2, #31
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43da      	mvns	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	400a      	ands	r2, r1
 800400a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	b29b      	uxth	r3, r3
 8004018:	4618      	mov	r0, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	3b05      	subs	r3, #5
 8004026:	fa00 f203 	lsl.w	r2, r0, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	635a      	str	r2, [r3, #52]	; 0x34
 8004032:	e04c      	b.n	80040ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b0c      	cmp	r3, #12
 800403a:	d824      	bhi.n	8004086 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	3b23      	subs	r3, #35	; 0x23
 800404e:	221f      	movs	r2, #31
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43da      	mvns	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	400a      	ands	r2, r1
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	4618      	mov	r0, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	3b23      	subs	r3, #35	; 0x23
 8004078:	fa00 f203 	lsl.w	r2, r0, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
 8004084:	e023      	b.n	80040ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	3b41      	subs	r3, #65	; 0x41
 8004098:	221f      	movs	r2, #31
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43da      	mvns	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	400a      	ands	r2, r1
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4618      	mov	r0, r3
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	3b41      	subs	r3, #65	; 0x41
 80040c2:	fa00 f203 	lsl.w	r2, r0, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a20      	ldr	r2, [pc, #128]	; (8004154 <HAL_ADC_ConfigChannel+0x230>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d109      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x1c8>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b12      	cmp	r3, #18
 80040de:	d105      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_ADC_ConfigChannel+0x234>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <HAL_ADC_ConfigChannel+0x234>)
 80040e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040ea:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a18      	ldr	r2, [pc, #96]	; (8004154 <HAL_ADC_ConfigChannel+0x230>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d123      	bne.n	800413e <HAL_ADC_ConfigChannel+0x21a>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d003      	beq.n	8004106 <HAL_ADC_ConfigChannel+0x1e2>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b11      	cmp	r3, #17
 8004104:	d11b      	bne.n	800413e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_ADC_ConfigChannel+0x234>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <HAL_ADC_ConfigChannel+0x234>)
 800410c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004110:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b10      	cmp	r3, #16
 8004118:	d111      	bne.n	800413e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <HAL_ADC_ConfigChannel+0x238>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a10      	ldr	r2, [pc, #64]	; (8004160 <HAL_ADC_ConfigChannel+0x23c>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	0c9a      	lsrs	r2, r3, #18
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004130:	e002      	b.n	8004138 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b01      	subs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f9      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40012000 	.word	0x40012000
 8004158:	40012300 	.word	0x40012300
 800415c:	20000004 	.word	0x20000004
 8004160:	431bde83 	.word	0x431bde83

08004164 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800416c:	4b7e      	ldr	r3, [pc, #504]	; (8004368 <ADC_Init+0x204>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4a7d      	ldr	r2, [pc, #500]	; (8004368 <ADC_Init+0x204>)
 8004172:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004176:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004178:	4b7b      	ldr	r3, [pc, #492]	; (8004368 <ADC_Init+0x204>)
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4979      	ldr	r1, [pc, #484]	; (8004368 <ADC_Init+0x204>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	021a      	lsls	r2, r3, #8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6899      	ldr	r1, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	4a5e      	ldr	r2, [pc, #376]	; (800436c <ADC_Init+0x208>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d022      	beq.n	800423e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004206:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6899      	ldr	r1, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6899      	ldr	r1, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	e00f      	b.n	800425e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800424c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800425c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0202 	bic.w	r2, r2, #2
 800426c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6899      	ldr	r1, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7e1b      	ldrb	r3, [r3, #24]
 8004278:	005a      	lsls	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d027      	beq.n	80042dc <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800429a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	3b01      	subs	r3, #1
 80042b2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80042b6:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	fa92 f2a2 	rbit	r2, r2
 80042be:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	fab2 f282 	clz	r2, r2
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	fa03 f102 	lsl.w	r1, r3, r2
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	e007      	b.n	80042ec <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	3b01      	subs	r3, #1
 8004308:	051a      	lsls	r2, r3, #20
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004320:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6899      	ldr	r1, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800432e:	025a      	lsls	r2, r3, #9
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004346:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6899      	ldr	r1, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	029a      	lsls	r2, r3, #10
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40012300 	.word	0x40012300
 800436c:	0f000001 	.word	0x0f000001

08004370 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004386:	2b00      	cmp	r3, #0
 8004388:	d13c      	bne.n	8004404 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d12b      	bne.n	80043fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d127      	bne.n	80043fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d006      	beq.n	80043c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d119      	bne.n	80043fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0220 	bic.w	r2, r2, #32
 80043d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d105      	bne.n	80043fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	f043 0201 	orr.w	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7fd f9f5 	bl	80017ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004402:	e00e      	b.n	8004422 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff fd7d 	bl	8003f10 <HAL_ADC_ErrorCallback>
}
 8004416:	e004      	b.n	8004422 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
}
 8004422:	bf00      	nop
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff fd60 	bl	8003efe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2240      	movs	r2, #64	; 0x40
 8004458:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	f043 0204 	orr.w	r2, r3, #4
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff fd52 	bl	8003f10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004490:	4013      	ands	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800449c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a6:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <__NVIC_SetPriorityGrouping+0x44>)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	60d3      	str	r3, [r2, #12]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <__NVIC_GetPriorityGrouping+0x18>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	f003 0307 	and.w	r3, r3, #7
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	db0b      	blt.n	8004502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	f003 021f 	and.w	r2, r3, #31
 80044f0:	4906      	ldr	r1, [pc, #24]	; (800450c <__NVIC_EnableIRQ+0x34>)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	2001      	movs	r0, #1
 80044fa:	fa00 f202 	lsl.w	r2, r0, r2
 80044fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	e000e100 	.word	0xe000e100

08004510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	6039      	str	r1, [r7, #0]
 800451a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004520:	2b00      	cmp	r3, #0
 8004522:	db0a      	blt.n	800453a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	490c      	ldr	r1, [pc, #48]	; (800455c <__NVIC_SetPriority+0x4c>)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	0112      	lsls	r2, r2, #4
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	440b      	add	r3, r1
 8004534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004538:	e00a      	b.n	8004550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	4908      	ldr	r1, [pc, #32]	; (8004560 <__NVIC_SetPriority+0x50>)
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	3b04      	subs	r3, #4
 8004548:	0112      	lsls	r2, r2, #4
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	440b      	add	r3, r1
 800454e:	761a      	strb	r2, [r3, #24]
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	e000e100 	.word	0xe000e100
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004564:	b480      	push	{r7}
 8004566:	b089      	sub	sp, #36	; 0x24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f1c3 0307 	rsb	r3, r3, #7
 800457e:	2b04      	cmp	r3, #4
 8004580:	bf28      	it	cs
 8004582:	2304      	movcs	r3, #4
 8004584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3304      	adds	r3, #4
 800458a:	2b06      	cmp	r3, #6
 800458c:	d902      	bls.n	8004594 <NVIC_EncodePriority+0x30>
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3b03      	subs	r3, #3
 8004592:	e000      	b.n	8004596 <NVIC_EncodePriority+0x32>
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004598:	f04f 32ff 	mov.w	r2, #4294967295
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43da      	mvns	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	401a      	ands	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ac:	f04f 31ff 	mov.w	r1, #4294967295
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	43d9      	mvns	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045bc:	4313      	orrs	r3, r2
         );
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3724      	adds	r7, #36	; 0x24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045d8:	d301      	bcc.n	80045de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045da:	2301      	movs	r3, #1
 80045dc:	e00f      	b.n	80045fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045de:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <SysTick_Config+0x40>)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045e6:	210f      	movs	r1, #15
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	f7ff ff90 	bl	8004510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <SysTick_Config+0x40>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045f6:	4b04      	ldr	r3, [pc, #16]	; (8004608 <SysTick_Config+0x40>)
 80045f8:	2207      	movs	r2, #7
 80045fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	e000e010 	.word	0xe000e010

0800460c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff2d 	bl	8004474 <__NVIC_SetPriorityGrouping>
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004622:	b580      	push	{r7, lr}
 8004624:	b086      	sub	sp, #24
 8004626:	af00      	add	r7, sp, #0
 8004628:	4603      	mov	r3, r0
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
 800462e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004634:	f7ff ff42 	bl	80044bc <__NVIC_GetPriorityGrouping>
 8004638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	6978      	ldr	r0, [r7, #20]
 8004640:	f7ff ff90 	bl	8004564 <NVIC_EncodePriority>
 8004644:	4602      	mov	r2, r0
 8004646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800464a:	4611      	mov	r1, r2
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff ff5f 	bl	8004510 <__NVIC_SetPriority>
}
 8004652:	bf00      	nop
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	4603      	mov	r3, r0
 8004662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff35 	bl	80044d8 <__NVIC_EnableIRQ>
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff ffa2 	bl	80045c8 <SysTick_Config>
 8004684:	4603      	mov	r3, r0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800469c:	f7ff fab2 	bl	8003c04 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e099      	b.n	80047e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046cc:	e00f      	b.n	80046ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046ce:	f7ff fa99 	bl	8003c04 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b05      	cmp	r3, #5
 80046da:	d908      	bls.n	80046ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2203      	movs	r2, #3
 80046e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e078      	b.n	80047e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e8      	bne.n	80046ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4b38      	ldr	r3, [pc, #224]	; (80047e8 <HAL_DMA_Init+0x158>)
 8004708:	4013      	ands	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800471a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	2b04      	cmp	r3, #4
 8004746:	d107      	bne.n	8004758 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	4313      	orrs	r3, r2
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f023 0307 	bic.w	r3, r3, #7
 800476e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b04      	cmp	r3, #4
 8004780:	d117      	bne.n	80047b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00e      	beq.n	80047b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fadd 	bl	8004d54 <DMA_CheckFifoParam>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2240      	movs	r2, #64	; 0x40
 80047a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047ae:	2301      	movs	r3, #1
 80047b0:	e016      	b.n	80047e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa96 	bl	8004cec <DMA_CalcBaseAndBitshift>
 80047c0:	4603      	mov	r3, r0
 80047c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c8:	223f      	movs	r2, #63	; 0x3f
 80047ca:	409a      	lsls	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	f010803f 	.word	0xf010803f

080047ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004802:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_DMA_Start_IT+0x26>
 800480e:	2302      	movs	r3, #2
 8004810:	e040      	b.n	8004894 <HAL_DMA_Start_IT+0xa8>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d12f      	bne.n	8004886 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fa28 	bl	8004c90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	223f      	movs	r2, #63	; 0x3f
 8004846:	409a      	lsls	r2, r3
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0216 	orr.w	r2, r2, #22
 800485a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0208 	orr.w	r2, r2, #8
 8004872:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	e005      	b.n	8004892 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800488e:	2302      	movs	r3, #2
 8004890:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004892:	7dfb      	ldrb	r3, [r7, #23]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048aa:	f7ff f9ab 	bl	8003c04 <HAL_GetTick>
 80048ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d008      	beq.n	80048ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2280      	movs	r2, #128	; 0x80
 80048c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e052      	b.n	8004974 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0216 	bic.w	r2, r2, #22
 80048dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695a      	ldr	r2, [r3, #20]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d103      	bne.n	80048fe <HAL_DMA_Abort+0x62>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0208 	bic.w	r2, r2, #8
 800490c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800491e:	e013      	b.n	8004948 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004920:	f7ff f970 	bl	8003c04 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b05      	cmp	r3, #5
 800492c:	d90c      	bls.n	8004948 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2203      	movs	r2, #3
 8004938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e015      	b.n	8004974 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e4      	bne.n	8004920 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	223f      	movs	r2, #63	; 0x3f
 800495c:	409a      	lsls	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004988:	4b8e      	ldr	r3, [pc, #568]	; (8004bc4 <HAL_DMA_IRQHandler+0x248>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a8e      	ldr	r2, [pc, #568]	; (8004bc8 <HAL_DMA_IRQHandler+0x24c>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	2208      	movs	r2, #8
 80049a8:	409a      	lsls	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01a      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d013      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0204 	bic.w	r2, r2, #4
 80049ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	2208      	movs	r2, #8
 80049d6:	409a      	lsls	r2, r3
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f043 0201 	orr.w	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ec:	2201      	movs	r2, #1
 80049ee:	409a      	lsls	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d012      	beq.n	8004a1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00b      	beq.n	8004a1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	f043 0202 	orr.w	r2, r3, #2
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	2204      	movs	r2, #4
 8004a24:	409a      	lsls	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d012      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	2204      	movs	r2, #4
 8004a42:	409a      	lsls	r2, r3
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	f043 0204 	orr.w	r2, r3, #4
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a58:	2210      	movs	r2, #16
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d043      	beq.n	8004aec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d03c      	beq.n	8004aec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	2210      	movs	r2, #16
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d018      	beq.n	8004abe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d108      	bne.n	8004aac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d024      	beq.n	8004aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
 8004aaa:	e01f      	b.n	8004aec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01b      	beq.n	8004aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
 8004abc:	e016      	b.n	8004aec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0208 	bic.w	r2, r2, #8
 8004ada:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	2220      	movs	r2, #32
 8004af2:	409a      	lsls	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 808f 	beq.w	8004c1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8087 	beq.w	8004c1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	2220      	movs	r2, #32
 8004b14:	409a      	lsls	r2, r3
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b05      	cmp	r3, #5
 8004b24:	d136      	bne.n	8004b94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0216 	bic.w	r2, r2, #22
 8004b34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695a      	ldr	r2, [r3, #20]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d103      	bne.n	8004b56 <HAL_DMA_IRQHandler+0x1da>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0208 	bic.w	r2, r2, #8
 8004b64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6a:	223f      	movs	r2, #63	; 0x3f
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d07e      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	4798      	blx	r3
        }
        return;
 8004b92:	e079      	b.n	8004c88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01d      	beq.n	8004bde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10d      	bne.n	8004bcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d031      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	4798      	blx	r3
 8004bc0:	e02c      	b.n	8004c1c <HAL_DMA_IRQHandler+0x2a0>
 8004bc2:	bf00      	nop
 8004bc4:	20000004 	.word	0x20000004
 8004bc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d023      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
 8004bdc:	e01e      	b.n	8004c1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10f      	bne.n	8004c0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0210 	bic.w	r2, r2, #16
 8004bfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d032      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d022      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2205      	movs	r2, #5
 8004c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0201 	bic.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d307      	bcc.n	8004c64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f2      	bne.n	8004c48 <HAL_DMA_IRQHandler+0x2cc>
 8004c62:	e000      	b.n	8004c66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
 8004c86:	e000      	b.n	8004c8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c88:	bf00      	nop
    }
  }
}
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d108      	bne.n	8004cd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cce:	e007      	b.n	8004ce0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	60da      	str	r2, [r3, #12]
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr
	...

08004cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	3b10      	subs	r3, #16
 8004cfc:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <DMA_CalcBaseAndBitshift+0x60>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d06:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <DMA_CalcBaseAndBitshift+0x64>)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d909      	bls.n	8004d2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	1d1a      	adds	r2, r3, #4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d2c:	e007      	b.n	8004d3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	aaaaaaab 	.word	0xaaaaaaab
 8004d50:	0800690c 	.word	0x0800690c

08004d54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d11f      	bne.n	8004dae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d856      	bhi.n	8004e22 <DMA_CheckFifoParam+0xce>
 8004d74:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <DMA_CheckFifoParam+0x28>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004d8d 	.word	0x08004d8d
 8004d80:	08004d9f 	.word	0x08004d9f
 8004d84:	08004d8d 	.word	0x08004d8d
 8004d88:	08004e23 	.word	0x08004e23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d046      	beq.n	8004e26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d9c:	e043      	b.n	8004e26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004da6:	d140      	bne.n	8004e2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dac:	e03d      	b.n	8004e2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db6:	d121      	bne.n	8004dfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d837      	bhi.n	8004e2e <DMA_CheckFifoParam+0xda>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <DMA_CheckFifoParam+0x70>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004dd5 	.word	0x08004dd5
 8004dc8:	08004ddb 	.word	0x08004ddb
 8004dcc:	08004dd5 	.word	0x08004dd5
 8004dd0:	08004ded 	.word	0x08004ded
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd8:	e030      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d025      	beq.n	8004e32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dea:	e022      	b.n	8004e32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004df4:	d11f      	bne.n	8004e36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004dfa:	e01c      	b.n	8004e36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d903      	bls.n	8004e0a <DMA_CheckFifoParam+0xb6>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d003      	beq.n	8004e10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e08:	e018      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0e:	e015      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00e      	beq.n	8004e3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	e00b      	b.n	8004e3a <DMA_CheckFifoParam+0xe6>
      break;
 8004e22:	bf00      	nop
 8004e24:	e00a      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
      break;
 8004e26:	bf00      	nop
 8004e28:	e008      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
      break;
 8004e2a:	bf00      	nop
 8004e2c:	e006      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
      break;
 8004e2e:	bf00      	nop
 8004e30:	e004      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
      break;
 8004e32:	bf00      	nop
 8004e34:	e002      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
      break;   
 8004e36:	bf00      	nop
 8004e38:	e000      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
      break;
 8004e3a:	bf00      	nop
    }
  } 
  
  return status; 
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e56:	e16f      	b.n	8005138 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	fa01 f303 	lsl.w	r3, r1, r3
 8004e64:	4013      	ands	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8161 	beq.w	8005132 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d005      	beq.n	8004e88 <HAL_GPIO_Init+0x40>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d130      	bne.n	8004eea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	2203      	movs	r2, #3
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	091b      	lsrs	r3, r3, #4
 8004ed4:	f003 0201 	and.w	r2, r3, #1
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d017      	beq.n	8004f26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	2203      	movs	r2, #3
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d123      	bne.n	8004f7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	08da      	lsrs	r2, r3, #3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3208      	adds	r2, #8
 8004f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	220f      	movs	r2, #15
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4013      	ands	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	08da      	lsrs	r2, r3, #3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3208      	adds	r2, #8
 8004f74:	6939      	ldr	r1, [r7, #16]
 8004f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	2203      	movs	r2, #3
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f003 0203 	and.w	r2, r3, #3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 80bb 	beq.w	8005132 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	4b64      	ldr	r3, [pc, #400]	; (8005154 <HAL_GPIO_Init+0x30c>)
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	4a63      	ldr	r2, [pc, #396]	; (8005154 <HAL_GPIO_Init+0x30c>)
 8004fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fca:	6453      	str	r3, [r2, #68]	; 0x44
 8004fcc:	4b61      	ldr	r3, [pc, #388]	; (8005154 <HAL_GPIO_Init+0x30c>)
 8004fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fd8:	4a5f      	ldr	r2, [pc, #380]	; (8005158 <HAL_GPIO_Init+0x310>)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	089b      	lsrs	r3, r3, #2
 8004fde:	3302      	adds	r3, #2
 8004fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	220f      	movs	r2, #15
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a57      	ldr	r2, [pc, #348]	; (800515c <HAL_GPIO_Init+0x314>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d031      	beq.n	8005068 <HAL_GPIO_Init+0x220>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a56      	ldr	r2, [pc, #344]	; (8005160 <HAL_GPIO_Init+0x318>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d02b      	beq.n	8005064 <HAL_GPIO_Init+0x21c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a55      	ldr	r2, [pc, #340]	; (8005164 <HAL_GPIO_Init+0x31c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d025      	beq.n	8005060 <HAL_GPIO_Init+0x218>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a54      	ldr	r2, [pc, #336]	; (8005168 <HAL_GPIO_Init+0x320>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d01f      	beq.n	800505c <HAL_GPIO_Init+0x214>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a53      	ldr	r2, [pc, #332]	; (800516c <HAL_GPIO_Init+0x324>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d019      	beq.n	8005058 <HAL_GPIO_Init+0x210>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a52      	ldr	r2, [pc, #328]	; (8005170 <HAL_GPIO_Init+0x328>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <HAL_GPIO_Init+0x20c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a51      	ldr	r2, [pc, #324]	; (8005174 <HAL_GPIO_Init+0x32c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00d      	beq.n	8005050 <HAL_GPIO_Init+0x208>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a50      	ldr	r2, [pc, #320]	; (8005178 <HAL_GPIO_Init+0x330>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d007      	beq.n	800504c <HAL_GPIO_Init+0x204>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a4f      	ldr	r2, [pc, #316]	; (800517c <HAL_GPIO_Init+0x334>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d101      	bne.n	8005048 <HAL_GPIO_Init+0x200>
 8005044:	2308      	movs	r3, #8
 8005046:	e010      	b.n	800506a <HAL_GPIO_Init+0x222>
 8005048:	2309      	movs	r3, #9
 800504a:	e00e      	b.n	800506a <HAL_GPIO_Init+0x222>
 800504c:	2307      	movs	r3, #7
 800504e:	e00c      	b.n	800506a <HAL_GPIO_Init+0x222>
 8005050:	2306      	movs	r3, #6
 8005052:	e00a      	b.n	800506a <HAL_GPIO_Init+0x222>
 8005054:	2305      	movs	r3, #5
 8005056:	e008      	b.n	800506a <HAL_GPIO_Init+0x222>
 8005058:	2304      	movs	r3, #4
 800505a:	e006      	b.n	800506a <HAL_GPIO_Init+0x222>
 800505c:	2303      	movs	r3, #3
 800505e:	e004      	b.n	800506a <HAL_GPIO_Init+0x222>
 8005060:	2302      	movs	r3, #2
 8005062:	e002      	b.n	800506a <HAL_GPIO_Init+0x222>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <HAL_GPIO_Init+0x222>
 8005068:	2300      	movs	r3, #0
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	f002 0203 	and.w	r2, r2, #3
 8005070:	0092      	lsls	r2, r2, #2
 8005072:	4093      	lsls	r3, r2
 8005074:	461a      	mov	r2, r3
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800507c:	4936      	ldr	r1, [pc, #216]	; (8005158 <HAL_GPIO_Init+0x310>)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	089b      	lsrs	r3, r3, #2
 8005082:	3302      	adds	r3, #2
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800508a:	4b3d      	ldr	r3, [pc, #244]	; (8005180 <HAL_GPIO_Init+0x338>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	43db      	mvns	r3, r3
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4013      	ands	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80050ae:	4a34      	ldr	r2, [pc, #208]	; (8005180 <HAL_GPIO_Init+0x338>)
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050b4:	4b32      	ldr	r3, [pc, #200]	; (8005180 <HAL_GPIO_Init+0x338>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	43db      	mvns	r3, r3
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4013      	ands	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80050d8:	4a29      	ldr	r2, [pc, #164]	; (8005180 <HAL_GPIO_Init+0x338>)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050de:	4b28      	ldr	r3, [pc, #160]	; (8005180 <HAL_GPIO_Init+0x338>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	43db      	mvns	r3, r3
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4013      	ands	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005102:	4a1f      	ldr	r2, [pc, #124]	; (8005180 <HAL_GPIO_Init+0x338>)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005108:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <HAL_GPIO_Init+0x338>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	43db      	mvns	r3, r3
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4013      	ands	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <HAL_GPIO_Init+0x338>)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	3301      	adds	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	fa22 f303 	lsr.w	r3, r2, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	f47f ae88 	bne.w	8004e58 <HAL_GPIO_Init+0x10>
  }
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr
 8005154:	40023800 	.word	0x40023800
 8005158:	40013800 	.word	0x40013800
 800515c:	40020000 	.word	0x40020000
 8005160:	40020400 	.word	0x40020400
 8005164:	40020800 	.word	0x40020800
 8005168:	40020c00 	.word	0x40020c00
 800516c:	40021000 	.word	0x40021000
 8005170:	40021400 	.word	0x40021400
 8005174:	40021800 	.word	0x40021800
 8005178:	40021c00 	.word	0x40021c00
 800517c:	40022000 	.word	0x40022000
 8005180:	40013c00 	.word	0x40013c00

08005184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	887b      	ldrh	r3, [r7, #2]
 8005196:	4013      	ands	r3, r2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
 80051a0:	e001      	b.n	80051a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	807b      	strh	r3, [r7, #2]
 80051be:	4613      	mov	r3, r2
 80051c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051c2:	787b      	ldrb	r3, [r7, #1]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051c8:	887a      	ldrh	r2, [r7, #2]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051ce:	e003      	b.n	80051d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051d0:	887b      	ldrh	r3, [r7, #2]
 80051d2:	041a      	lsls	r2, r3, #16
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	619a      	str	r2, [r3, #24]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr
	...

080051e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08a      	sub	sp, #40	; 0x28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e236      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d050      	beq.n	80052a4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005202:	4b9e      	ldr	r3, [pc, #632]	; (800547c <HAL_RCC_OscConfig+0x298>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b04      	cmp	r3, #4
 800520c:	d00c      	beq.n	8005228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800520e:	4b9b      	ldr	r3, [pc, #620]	; (800547c <HAL_RCC_OscConfig+0x298>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005216:	2b08      	cmp	r3, #8
 8005218:	d112      	bne.n	8005240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800521a:	4b98      	ldr	r3, [pc, #608]	; (800547c <HAL_RCC_OscConfig+0x298>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005226:	d10b      	bne.n	8005240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005228:	4b94      	ldr	r3, [pc, #592]	; (800547c <HAL_RCC_OscConfig+0x298>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d036      	beq.n	80052a2 <HAL_RCC_OscConfig+0xbe>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d132      	bne.n	80052a2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e211      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	4b8e      	ldr	r3, [pc, #568]	; (8005480 <HAL_RCC_OscConfig+0x29c>)
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d013      	beq.n	800527a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005252:	f7fe fcd7 	bl	8003c04 <HAL_GetTick>
 8005256:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800525a:	f7fe fcd3 	bl	8003c04 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b64      	cmp	r3, #100	; 0x64
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e1fb      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526c:	4b83      	ldr	r3, [pc, #524]	; (800547c <HAL_RCC_OscConfig+0x298>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCC_OscConfig+0x76>
 8005278:	e014      	b.n	80052a4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fe fcc3 	bl	8003c04 <HAL_GetTick>
 800527e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005282:	f7fe fcbf 	bl	8003c04 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b64      	cmp	r3, #100	; 0x64
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e1e7      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005294:	4b79      	ldr	r3, [pc, #484]	; (800547c <HAL_RCC_OscConfig+0x298>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <HAL_RCC_OscConfig+0x9e>
 80052a0:	e000      	b.n	80052a4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d077      	beq.n	80053a0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052b0:	4b72      	ldr	r3, [pc, #456]	; (800547c <HAL_RCC_OscConfig+0x298>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 030c 	and.w	r3, r3, #12
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00b      	beq.n	80052d4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052bc:	4b6f      	ldr	r3, [pc, #444]	; (800547c <HAL_RCC_OscConfig+0x298>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d126      	bne.n	8005316 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052c8:	4b6c      	ldr	r3, [pc, #432]	; (800547c <HAL_RCC_OscConfig+0x298>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d120      	bne.n	8005316 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d4:	4b69      	ldr	r3, [pc, #420]	; (800547c <HAL_RCC_OscConfig+0x298>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCC_OscConfig+0x108>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e1bb      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ec:	4b63      	ldr	r3, [pc, #396]	; (800547c <HAL_RCC_OscConfig+0x298>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	21f8      	movs	r1, #248	; 0xf8
 80052fa:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fc:	69b9      	ldr	r1, [r7, #24]
 80052fe:	fa91 f1a1 	rbit	r1, r1
 8005302:	6179      	str	r1, [r7, #20]
  return result;
 8005304:	6979      	ldr	r1, [r7, #20]
 8005306:	fab1 f181 	clz	r1, r1
 800530a:	b2c9      	uxtb	r1, r1
 800530c:	408b      	lsls	r3, r1
 800530e:	495b      	ldr	r1, [pc, #364]	; (800547c <HAL_RCC_OscConfig+0x298>)
 8005310:	4313      	orrs	r3, r2
 8005312:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005314:	e044      	b.n	80053a0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02a      	beq.n	8005374 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800531e:	4b59      	ldr	r3, [pc, #356]	; (8005484 <HAL_RCC_OscConfig+0x2a0>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fe fc6e 	bl	8003c04 <HAL_GetTick>
 8005328:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800532c:	f7fe fc6a 	bl	8003c04 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e192      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533e:	4b4f      	ldr	r3, [pc, #316]	; (800547c <HAL_RCC_OscConfig+0x298>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534a:	4b4c      	ldr	r3, [pc, #304]	; (800547c <HAL_RCC_OscConfig+0x298>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	21f8      	movs	r1, #248	; 0xf8
 8005358:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535a:	6939      	ldr	r1, [r7, #16]
 800535c:	fa91 f1a1 	rbit	r1, r1
 8005360:	60f9      	str	r1, [r7, #12]
  return result;
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	fab1 f181 	clz	r1, r1
 8005368:	b2c9      	uxtb	r1, r1
 800536a:	408b      	lsls	r3, r1
 800536c:	4943      	ldr	r1, [pc, #268]	; (800547c <HAL_RCC_OscConfig+0x298>)
 800536e:	4313      	orrs	r3, r2
 8005370:	600b      	str	r3, [r1, #0]
 8005372:	e015      	b.n	80053a0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005374:	4b43      	ldr	r3, [pc, #268]	; (8005484 <HAL_RCC_OscConfig+0x2a0>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537a:	f7fe fc43 	bl	8003c04 <HAL_GetTick>
 800537e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005382:	f7fe fc3f 	bl	8003c04 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e167      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005394:	4b39      	ldr	r3, [pc, #228]	; (800547c <HAL_RCC_OscConfig+0x298>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f0      	bne.n	8005382 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d030      	beq.n	800540e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d016      	beq.n	80053e2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053b4:	4b34      	ldr	r3, [pc, #208]	; (8005488 <HAL_RCC_OscConfig+0x2a4>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ba:	f7fe fc23 	bl	8003c04 <HAL_GetTick>
 80053be:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c2:	f7fe fc1f 	bl	8003c04 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e147      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053d4:	4b29      	ldr	r3, [pc, #164]	; (800547c <HAL_RCC_OscConfig+0x298>)
 80053d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x1de>
 80053e0:	e015      	b.n	800540e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e2:	4b29      	ldr	r3, [pc, #164]	; (8005488 <HAL_RCC_OscConfig+0x2a4>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053e8:	f7fe fc0c 	bl	8003c04 <HAL_GetTick>
 80053ec:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053f0:	f7fe fc08 	bl	8003c04 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e130      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005402:	4b1e      	ldr	r3, [pc, #120]	; (800547c <HAL_RCC_OscConfig+0x298>)
 8005404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 8087 	beq.w	800552a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 800541c:	2300      	movs	r3, #0
 800541e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005422:	4b16      	ldr	r3, [pc, #88]	; (800547c <HAL_RCC_OscConfig+0x298>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d110      	bne.n	8005450 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800542e:	2300      	movs	r3, #0
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	4b12      	ldr	r3, [pc, #72]	; (800547c <HAL_RCC_OscConfig+0x298>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	4a11      	ldr	r2, [pc, #68]	; (800547c <HAL_RCC_OscConfig+0x298>)
 8005438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800543c:	6413      	str	r3, [r2, #64]	; 0x40
 800543e:	4b0f      	ldr	r3, [pc, #60]	; (800547c <HAL_RCC_OscConfig+0x298>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005446:	60bb      	str	r3, [r7, #8]
 8005448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800544a:	2301      	movs	r3, #1
 800544c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005450:	4b0e      	ldr	r3, [pc, #56]	; (800548c <HAL_RCC_OscConfig+0x2a8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a0d      	ldr	r2, [pc, #52]	; (800548c <HAL_RCC_OscConfig+0x2a8>)
 8005456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <HAL_RCC_OscConfig+0x2a8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d122      	bne.n	80054ae <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005468:	4b08      	ldr	r3, [pc, #32]	; (800548c <HAL_RCC_OscConfig+0x2a8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a07      	ldr	r2, [pc, #28]	; (800548c <HAL_RCC_OscConfig+0x2a8>)
 800546e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005472:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005474:	f7fe fbc6 	bl	8003c04 <HAL_GetTick>
 8005478:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547a:	e012      	b.n	80054a2 <HAL_RCC_OscConfig+0x2be>
 800547c:	40023800 	.word	0x40023800
 8005480:	40023802 	.word	0x40023802
 8005484:	42470000 	.word	0x42470000
 8005488:	42470e80 	.word	0x42470e80
 800548c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005490:	f7fe fbb8 	bl	8003c04 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e0e0      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a2:	4b72      	ldr	r3, [pc, #456]	; (800566c <HAL_RCC_OscConfig+0x488>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0f0      	beq.n	8005490 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	4b6f      	ldr	r3, [pc, #444]	; (8005670 <HAL_RCC_OscConfig+0x48c>)
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d015      	beq.n	80054ec <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c0:	f7fe fba0 	bl	8003c04 <HAL_GetTick>
 80054c4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c6:	e00a      	b.n	80054de <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c8:	f7fe fb9c 	bl	8003c04 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e0c2      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054de:	4b65      	ldr	r3, [pc, #404]	; (8005674 <HAL_RCC_OscConfig+0x490>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0ee      	beq.n	80054c8 <HAL_RCC_OscConfig+0x2e4>
 80054ea:	e014      	b.n	8005516 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ec:	f7fe fb8a 	bl	8003c04 <HAL_GetTick>
 80054f0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054f2:	e00a      	b.n	800550a <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f4:	f7fe fb86 	bl	8003c04 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e0ac      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800550a:	4b5a      	ldr	r3, [pc, #360]	; (8005674 <HAL_RCC_OscConfig+0x490>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1ee      	bne.n	80054f4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800551a:	2b01      	cmp	r3, #1
 800551c:	d105      	bne.n	800552a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800551e:	4b55      	ldr	r3, [pc, #340]	; (8005674 <HAL_RCC_OscConfig+0x490>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	4a54      	ldr	r2, [pc, #336]	; (8005674 <HAL_RCC_OscConfig+0x490>)
 8005524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005528:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8097 	beq.w	8005662 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005534:	4b4f      	ldr	r3, [pc, #316]	; (8005674 <HAL_RCC_OscConfig+0x490>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 030c 	and.w	r3, r3, #12
 800553c:	2b08      	cmp	r3, #8
 800553e:	d061      	beq.n	8005604 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d146      	bne.n	80055d6 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005548:	4b4b      	ldr	r3, [pc, #300]	; (8005678 <HAL_RCC_OscConfig+0x494>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554e:	f7fe fb59 	bl	8003c04 <HAL_GetTick>
 8005552:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005556:	f7fe fb55 	bl	8003c04 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b64      	cmp	r3, #100	; 0x64
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e07d      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005568:	4b42      	ldr	r3, [pc, #264]	; (8005674 <HAL_RCC_OscConfig+0x490>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f0      	bne.n	8005556 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005574:	4b3f      	ldr	r3, [pc, #252]	; (8005674 <HAL_RCC_OscConfig+0x490>)
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	4b40      	ldr	r3, [pc, #256]	; (800567c <HAL_RCC_OscConfig+0x498>)
 800557a:	4013      	ands	r3, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	69d1      	ldr	r1, [r2, #28]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6a12      	ldr	r2, [r2, #32]
 8005584:	4311      	orrs	r1, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800558a:	0192      	lsls	r2, r2, #6
 800558c:	4311      	orrs	r1, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005592:	0612      	lsls	r2, r2, #24
 8005594:	4311      	orrs	r1, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800559a:	0852      	lsrs	r2, r2, #1
 800559c:	3a01      	subs	r2, #1
 800559e:	0412      	lsls	r2, r2, #16
 80055a0:	430a      	orrs	r2, r1
 80055a2:	4934      	ldr	r1, [pc, #208]	; (8005674 <HAL_RCC_OscConfig+0x490>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a8:	4b33      	ldr	r3, [pc, #204]	; (8005678 <HAL_RCC_OscConfig+0x494>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ae:	f7fe fb29 	bl	8003c04 <HAL_GetTick>
 80055b2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b6:	f7fe fb25 	bl	8003c04 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b64      	cmp	r3, #100	; 0x64
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e04d      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c8:	4b2a      	ldr	r3, [pc, #168]	; (8005674 <HAL_RCC_OscConfig+0x490>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f0      	beq.n	80055b6 <HAL_RCC_OscConfig+0x3d2>
 80055d4:	e045      	b.n	8005662 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d6:	4b28      	ldr	r3, [pc, #160]	; (8005678 <HAL_RCC_OscConfig+0x494>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055dc:	f7fe fb12 	bl	8003c04 <HAL_GetTick>
 80055e0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fe fb0e 	bl	8003c04 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b64      	cmp	r3, #100	; 0x64
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e036      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f6:	4b1f      	ldr	r3, [pc, #124]	; (8005674 <HAL_RCC_OscConfig+0x490>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x400>
 8005602:	e02e      	b.n	8005662 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e029      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005610:	4b18      	ldr	r3, [pc, #96]	; (8005674 <HAL_RCC_OscConfig+0x490>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	429a      	cmp	r2, r3
 8005622:	d11c      	bne.n	800565e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d115      	bne.n	800565e <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	099b      	lsrs	r3, r3, #6
 8005636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d10d      	bne.n	800565e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800564c:	429a      	cmp	r2, r3
 800564e:	d106      	bne.n	800565e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800565a:	429a      	cmp	r2, r3
 800565c:	d001      	beq.n	8005662 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3728      	adds	r7, #40	; 0x28
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40007000 	.word	0x40007000
 8005670:	40023870 	.word	0x40023870
 8005674:	40023800 	.word	0x40023800
 8005678:	42470060 	.word	0x42470060
 800567c:	f0bc8000 	.word	0xf0bc8000

08005680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0d2      	b.n	800583a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005694:	4b6b      	ldr	r3, [pc, #428]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 030f 	and.w	r3, r3, #15
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d90c      	bls.n	80056bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a2:	4b68      	ldr	r3, [pc, #416]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056aa:	4b66      	ldr	r3, [pc, #408]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0be      	b.n	800583a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d020      	beq.n	800570a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056d4:	4b5c      	ldr	r3, [pc, #368]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	4a5b      	ldr	r2, [pc, #364]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 80056da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80056ec:	4b56      	ldr	r3, [pc, #344]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4a55      	ldr	r2, [pc, #340]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 80056f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f8:	4b53      	ldr	r3, [pc, #332]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	4950      	ldr	r1, [pc, #320]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 8005706:	4313      	orrs	r3, r2
 8005708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d040      	beq.n	8005798 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d107      	bne.n	800572e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571e:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d115      	bne.n	8005756 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e085      	b.n	800583a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d107      	bne.n	8005746 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005736:	4b44      	ldr	r3, [pc, #272]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e079      	b.n	800583a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005746:	4b40      	ldr	r3, [pc, #256]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e071      	b.n	800583a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005756:	4b3c      	ldr	r3, [pc, #240]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f023 0203 	bic.w	r2, r3, #3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4939      	ldr	r1, [pc, #228]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 8005764:	4313      	orrs	r3, r2
 8005766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005768:	f7fe fa4c 	bl	8003c04 <HAL_GetTick>
 800576c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576e:	e00a      	b.n	8005786 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005770:	f7fe fa48 	bl	8003c04 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	; 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e059      	b.n	800583a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005786:	4b30      	ldr	r3, [pc, #192]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 020c 	and.w	r2, r3, #12
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	429a      	cmp	r2, r3
 8005796:	d1eb      	bne.n	8005770 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005798:	4b2a      	ldr	r3, [pc, #168]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d20c      	bcs.n	80057c0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a6:	4b27      	ldr	r3, [pc, #156]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ae:	4b25      	ldr	r3, [pc, #148]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d001      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e03c      	b.n	800583a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d008      	beq.n	80057de <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057cc:	4b1e      	ldr	r3, [pc, #120]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	491b      	ldr	r1, [pc, #108]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057ea:	4b17      	ldr	r3, [pc, #92]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	4913      	ldr	r1, [pc, #76]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80057fe:	f000 f82b 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8005802:	4601      	mov	r1, r0
 8005804:	4b10      	ldr	r3, [pc, #64]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800580c:	22f0      	movs	r2, #240	; 0xf0
 800580e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	fa92 f2a2 	rbit	r2, r2
 8005816:	60fa      	str	r2, [r7, #12]
  return result;
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	fab2 f282 	clz	r2, r2
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	40d3      	lsrs	r3, r2
 8005822:	4a0a      	ldr	r2, [pc, #40]	; (800584c <HAL_RCC_ClockConfig+0x1cc>)
 8005824:	5cd3      	ldrb	r3, [r2, r3]
 8005826:	fa21 f303 	lsr.w	r3, r1, r3
 800582a:	4a09      	ldr	r2, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1d0>)
 800582c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_RCC_ClockConfig+0x1d4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe f9a4 	bl	8003b80 <HAL_InitTick>

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40023c00 	.word	0x40023c00
 8005848:	40023800 	.word	0x40023800
 800584c:	080068fc 	.word	0x080068fc
 8005850:	20000004 	.word	0x20000004
 8005854:	20000010 	.word	0x20000010

08005858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800585c:	b090      	sub	sp, #64	; 0x40
 800585e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
 8005864:	2300      	movs	r3, #0
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005868:	2300      	movs	r3, #0
 800586a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005870:	4b59      	ldr	r3, [pc, #356]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b08      	cmp	r3, #8
 800587a:	d00d      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x40>
 800587c:	2b08      	cmp	r3, #8
 800587e:	f200 80a2 	bhi.w	80059c6 <HAL_RCC_GetSysClockFreq+0x16e>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x34>
 8005886:	2b04      	cmp	r3, #4
 8005888:	d003      	beq.n	8005892 <HAL_RCC_GetSysClockFreq+0x3a>
 800588a:	e09c      	b.n	80059c6 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800588c:	4b53      	ldr	r3, [pc, #332]	; (80059dc <HAL_RCC_GetSysClockFreq+0x184>)
 800588e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005890:	e09c      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005892:	4b53      	ldr	r3, [pc, #332]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005894:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005896:	e099      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005898:	4b4f      	ldr	r3, [pc, #316]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058a2:	4b4d      	ldr	r3, [pc, #308]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d027      	beq.n	80058fe <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ae:	4b4a      	ldr	r3, [pc, #296]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	099b      	lsrs	r3, r3, #6
 80058b4:	2200      	movs	r2, #0
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	627a      	str	r2, [r7, #36]	; 0x24
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80058c0:	2100      	movs	r1, #0
 80058c2:	4b47      	ldr	r3, [pc, #284]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80058c4:	fb03 f201 	mul.w	r2, r3, r1
 80058c8:	2300      	movs	r3, #0
 80058ca:	fb00 f303 	mul.w	r3, r0, r3
 80058ce:	4413      	add	r3, r2
 80058d0:	4a43      	ldr	r2, [pc, #268]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80058d2:	fba0 2102 	umull	r2, r1, r0, r2
 80058d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058d8:	62ba      	str	r2, [r7, #40]	; 0x28
 80058da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058dc:	4413      	add	r3, r2
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	2200      	movs	r2, #0
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	61fa      	str	r2, [r7, #28]
 80058e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80058f0:	f7fb fc04 	bl	80010fc <__aeabi_uldivmod>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4613      	mov	r3, r2
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fc:	e055      	b.n	80059aa <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058fe:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	099b      	lsrs	r3, r3, #6
 8005904:	2200      	movs	r2, #0
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	617a      	str	r2, [r7, #20]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005910:	f04f 0b00 	mov.w	fp, #0
 8005914:	4652      	mov	r2, sl
 8005916:	465b      	mov	r3, fp
 8005918:	f04f 0000 	mov.w	r0, #0
 800591c:	f04f 0100 	mov.w	r1, #0
 8005920:	0159      	lsls	r1, r3, #5
 8005922:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005926:	0150      	lsls	r0, r2, #5
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	ebb2 080a 	subs.w	r8, r2, sl
 8005930:	eb63 090b 	sbc.w	r9, r3, fp
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005940:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005944:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005948:	ebb2 0408 	subs.w	r4, r2, r8
 800594c:	eb63 0509 	sbc.w	r5, r3, r9
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	00eb      	lsls	r3, r5, #3
 800595a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800595e:	00e2      	lsls	r2, r4, #3
 8005960:	4614      	mov	r4, r2
 8005962:	461d      	mov	r5, r3
 8005964:	eb14 030a 	adds.w	r3, r4, sl
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	eb45 030b 	adc.w	r3, r5, fp
 800596e:	607b      	str	r3, [r7, #4]
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	e9d7 4500 	ldrd	r4, r5, [r7]
 800597c:	4629      	mov	r1, r5
 800597e:	028b      	lsls	r3, r1, #10
 8005980:	4620      	mov	r0, r4
 8005982:	4629      	mov	r1, r5
 8005984:	4604      	mov	r4, r0
 8005986:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800598a:	4601      	mov	r1, r0
 800598c:	028a      	lsls	r2, r1, #10
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005994:	2200      	movs	r2, #0
 8005996:	60bb      	str	r3, [r7, #8]
 8005998:	60fa      	str	r2, [r7, #12]
 800599a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800599e:	f7fb fbad 	bl	80010fc <__aeabi_uldivmod>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4613      	mov	r3, r2
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	0c1b      	lsrs	r3, r3, #16
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	3301      	adds	r3, #1
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80059ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059c4:	e002      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <HAL_RCC_GetSysClockFreq+0x184>)
 80059c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3740      	adds	r7, #64	; 0x40
 80059d2:	46bd      	mov	sp, r7
 80059d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d8:	40023800 	.word	0x40023800
 80059dc:	00f42400 	.word	0x00f42400
 80059e0:	017d7840 	.word	0x017d7840

080059e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e041      	b.n	8005a7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fd fe76 	bl	80036fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4610      	mov	r0, r2
 8005a24:	f000 fae8 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <HAL_TIM_PWM_Start+0x24>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	e022      	b.n	8005aee <HAL_TIM_PWM_Start+0x6a>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d109      	bne.n	8005ac2 <HAL_TIM_PWM_Start+0x3e>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	bf14      	ite	ne
 8005aba:	2301      	movne	r3, #1
 8005abc:	2300      	moveq	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	e015      	b.n	8005aee <HAL_TIM_PWM_Start+0x6a>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d109      	bne.n	8005adc <HAL_TIM_PWM_Start+0x58>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	bf14      	ite	ne
 8005ad4:	2301      	movne	r3, #1
 8005ad6:	2300      	moveq	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	e008      	b.n	8005aee <HAL_TIM_PWM_Start+0x6a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	bf14      	ite	ne
 8005ae8:	2301      	movne	r3, #1
 8005aea:	2300      	moveq	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e07c      	b.n	8005bf0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_PWM_Start+0x82>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b04:	e013      	b.n	8005b2e <HAL_TIM_PWM_Start+0xaa>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_PWM_Start+0x92>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b14:	e00b      	b.n	8005b2e <HAL_TIM_PWM_Start+0xaa>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d104      	bne.n	8005b26 <HAL_TIM_PWM_Start+0xa2>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b24:	e003      	b.n	8005b2e <HAL_TIM_PWM_Start+0xaa>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2201      	movs	r2, #1
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fca8 	bl	800648c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a2d      	ldr	r2, [pc, #180]	; (8005bf8 <HAL_TIM_PWM_Start+0x174>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d004      	beq.n	8005b50 <HAL_TIM_PWM_Start+0xcc>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2c      	ldr	r2, [pc, #176]	; (8005bfc <HAL_TIM_PWM_Start+0x178>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d101      	bne.n	8005b54 <HAL_TIM_PWM_Start+0xd0>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <HAL_TIM_PWM_Start+0xd2>
 8005b54:	2300      	movs	r3, #0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a22      	ldr	r2, [pc, #136]	; (8005bf8 <HAL_TIM_PWM_Start+0x174>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d022      	beq.n	8005bba <HAL_TIM_PWM_Start+0x136>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7c:	d01d      	beq.n	8005bba <HAL_TIM_PWM_Start+0x136>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <HAL_TIM_PWM_Start+0x17c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d018      	beq.n	8005bba <HAL_TIM_PWM_Start+0x136>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1d      	ldr	r2, [pc, #116]	; (8005c04 <HAL_TIM_PWM_Start+0x180>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_TIM_PWM_Start+0x136>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <HAL_TIM_PWM_Start+0x184>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIM_PWM_Start+0x136>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a16      	ldr	r2, [pc, #88]	; (8005bfc <HAL_TIM_PWM_Start+0x178>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIM_PWM_Start+0x136>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <HAL_TIM_PWM_Start+0x188>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIM_PWM_Start+0x136>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <HAL_TIM_PWM_Start+0x18c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d111      	bne.n	8005bde <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b06      	cmp	r3, #6
 8005bca:	d010      	beq.n	8005bee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bdc:	e007      	b.n	8005bee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0201 	orr.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40010000 	.word	0x40010000
 8005bfc:	40010400 	.word	0x40010400
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40014000 	.word	0x40014000
 8005c10:	40001800 	.word	0x40001800

08005c14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e097      	b.n	8005d58 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7fd fd7d 	bl	800373c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c58:	f023 0307 	bic.w	r3, r3, #7
 8005c5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3304      	adds	r3, #4
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f000 f9c5 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c96:	f023 0303 	bic.w	r3, r3, #3
 8005c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005cb4:	f023 030c 	bic.w	r3, r3, #12
 8005cb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	011a      	lsls	r2, r3, #4
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	031b      	lsls	r3, r3, #12
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	4313      	orrs	r3, r2
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d88:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d110      	bne.n	8005db2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d102      	bne.n	8005d9c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d96:	7b7b      	ldrb	r3, [r7, #13]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d001      	beq.n	8005da0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e069      	b.n	8005e74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db0:	e031      	b.n	8005e16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d110      	bne.n	8005dda <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005db8:	7bbb      	ldrb	r3, [r7, #14]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d102      	bne.n	8005dc4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dbe:	7b3b      	ldrb	r3, [r7, #12]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d001      	beq.n	8005dc8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e055      	b.n	8005e74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dd8:	e01d      	b.n	8005e16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d108      	bne.n	8005df2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de0:	7bbb      	ldrb	r3, [r7, #14]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d105      	bne.n	8005df2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de6:	7b7b      	ldrb	r3, [r7, #13]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d102      	bne.n	8005df2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dec:	7b3b      	ldrb	r3, [r7, #12]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d001      	beq.n	8005df6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e03e      	b.n	8005e74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2202      	movs	r2, #2
 8005e02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_TIM_Encoder_Start+0xc4>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d008      	beq.n	8005e34 <HAL_TIM_Encoder_Start+0xd4>
 8005e22:	e00f      	b.n	8005e44 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fb2d 	bl	800648c <TIM_CCxChannelCmd>
      break;
 8005e32:	e016      	b.n	8005e62 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	2104      	movs	r1, #4
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fb25 	bl	800648c <TIM_CCxChannelCmd>
      break;
 8005e42:	e00e      	b.n	8005e62 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fb1d 	bl	800648c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2201      	movs	r2, #1
 8005e58:	2104      	movs	r1, #4
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fb16 	bl	800648c <TIM_CCxChannelCmd>
      break;
 8005e60:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0201 	orr.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e0ac      	b.n	8005ff0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b0c      	cmp	r3, #12
 8005ea2:	f200 809f 	bhi.w	8005fe4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ee1 	.word	0x08005ee1
 8005eb0:	08005fe5 	.word	0x08005fe5
 8005eb4:	08005fe5 	.word	0x08005fe5
 8005eb8:	08005fe5 	.word	0x08005fe5
 8005ebc:	08005f21 	.word	0x08005f21
 8005ec0:	08005fe5 	.word	0x08005fe5
 8005ec4:	08005fe5 	.word	0x08005fe5
 8005ec8:	08005fe5 	.word	0x08005fe5
 8005ecc:	08005f63 	.word	0x08005f63
 8005ed0:	08005fe5 	.word	0x08005fe5
 8005ed4:	08005fe5 	.word	0x08005fe5
 8005ed8:	08005fe5 	.word	0x08005fe5
 8005edc:	08005fa3 	.word	0x08005fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f924 	bl	8006134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0208 	orr.w	r2, r2, #8
 8005efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0204 	bic.w	r2, r2, #4
 8005f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6999      	ldr	r1, [r3, #24]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	619a      	str	r2, [r3, #24]
      break;
 8005f1e:	e062      	b.n	8005fe6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f974 	bl	8006214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6999      	ldr	r1, [r3, #24]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	021a      	lsls	r2, r3, #8
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	619a      	str	r2, [r3, #24]
      break;
 8005f60:	e041      	b.n	8005fe6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 f9c7 	bl	80062fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0208 	orr.w	r2, r2, #8
 8005f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0204 	bic.w	r2, r2, #4
 8005f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69d9      	ldr	r1, [r3, #28]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	61da      	str	r2, [r3, #28]
      break;
 8005fa0:	e021      	b.n	8005fe6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fa1b 	bl	80063e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69d9      	ldr	r1, [r3, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	021a      	lsls	r2, r3, #8
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	61da      	str	r2, [r3, #28]
      break;
 8005fe2:	e000      	b.n	8005fe6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005fe4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a3f      	ldr	r2, [pc, #252]	; (8006108 <TIM_Base_SetConfig+0x110>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006016:	d00f      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a3c      	ldr	r2, [pc, #240]	; (800610c <TIM_Base_SetConfig+0x114>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00b      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3b      	ldr	r2, [pc, #236]	; (8006110 <TIM_Base_SetConfig+0x118>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a3a      	ldr	r2, [pc, #232]	; (8006114 <TIM_Base_SetConfig+0x11c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a39      	ldr	r2, [pc, #228]	; (8006118 <TIM_Base_SetConfig+0x120>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d108      	bne.n	800604a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2e      	ldr	r2, [pc, #184]	; (8006108 <TIM_Base_SetConfig+0x110>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02b      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006058:	d027      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2b      	ldr	r2, [pc, #172]	; (800610c <TIM_Base_SetConfig+0x114>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d023      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <TIM_Base_SetConfig+0x118>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01f      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a29      	ldr	r2, [pc, #164]	; (8006114 <TIM_Base_SetConfig+0x11c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01b      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a28      	ldr	r2, [pc, #160]	; (8006118 <TIM_Base_SetConfig+0x120>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d017      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a27      	ldr	r2, [pc, #156]	; (800611c <TIM_Base_SetConfig+0x124>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a26      	ldr	r2, [pc, #152]	; (8006120 <TIM_Base_SetConfig+0x128>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00f      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a25      	ldr	r2, [pc, #148]	; (8006124 <TIM_Base_SetConfig+0x12c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00b      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a24      	ldr	r2, [pc, #144]	; (8006128 <TIM_Base_SetConfig+0x130>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d007      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a23      	ldr	r2, [pc, #140]	; (800612c <TIM_Base_SetConfig+0x134>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a22      	ldr	r2, [pc, #136]	; (8006130 <TIM_Base_SetConfig+0x138>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d108      	bne.n	80060bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a09      	ldr	r2, [pc, #36]	; (8006108 <TIM_Base_SetConfig+0x110>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_Base_SetConfig+0xf8>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a0b      	ldr	r2, [pc, #44]	; (8006118 <TIM_Base_SetConfig+0x120>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d103      	bne.n	80060f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	615a      	str	r2, [r3, #20]
}
 80060fe:	bf00      	nop
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	bc80      	pop	{r7}
 8006106:	4770      	bx	lr
 8006108:	40010000 	.word	0x40010000
 800610c:	40000400 	.word	0x40000400
 8006110:	40000800 	.word	0x40000800
 8006114:	40000c00 	.word	0x40000c00
 8006118:	40010400 	.word	0x40010400
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800
 8006128:	40001800 	.word	0x40001800
 800612c:	40001c00 	.word	0x40001c00
 8006130:	40002000 	.word	0x40002000

08006134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 0302 	bic.w	r3, r3, #2
 800617c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a20      	ldr	r2, [pc, #128]	; (800620c <TIM_OC1_SetConfig+0xd8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_OC1_SetConfig+0x64>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <TIM_OC1_SetConfig+0xdc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10c      	bne.n	80061b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0308 	bic.w	r3, r3, #8
 800619e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 0304 	bic.w	r3, r3, #4
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a15      	ldr	r2, [pc, #84]	; (800620c <TIM_OC1_SetConfig+0xd8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_OC1_SetConfig+0x8e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a14      	ldr	r2, [pc, #80]	; (8006210 <TIM_OC1_SetConfig+0xdc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d111      	bne.n	80061e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	621a      	str	r2, [r3, #32]
}
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400

08006214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f023 0210 	bic.w	r2, r3, #16
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0320 	bic.w	r3, r3, #32
 800625e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a21      	ldr	r2, [pc, #132]	; (80062f4 <TIM_OC2_SetConfig+0xe0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_OC2_SetConfig+0x68>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a20      	ldr	r2, [pc, #128]	; (80062f8 <TIM_OC2_SetConfig+0xe4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d10d      	bne.n	8006298 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <TIM_OC2_SetConfig+0xe0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC2_SetConfig+0x94>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <TIM_OC2_SetConfig+0xe4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d113      	bne.n	80062d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40010400 	.word	0x40010400

080062fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a21      	ldr	r2, [pc, #132]	; (80063dc <TIM_OC3_SetConfig+0xe0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d003      	beq.n	8006362 <TIM_OC3_SetConfig+0x66>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a20      	ldr	r2, [pc, #128]	; (80063e0 <TIM_OC3_SetConfig+0xe4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d10d      	bne.n	800637e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	021b      	lsls	r3, r3, #8
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800637c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a16      	ldr	r2, [pc, #88]	; (80063dc <TIM_OC3_SetConfig+0xe0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d003      	beq.n	800638e <TIM_OC3_SetConfig+0x92>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <TIM_OC3_SetConfig+0xe4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d113      	bne.n	80063b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800639c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	621a      	str	r2, [r3, #32]
}
 80063d0:	bf00      	nop
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40010000 	.word	0x40010000
 80063e0:	40010400 	.word	0x40010400

080063e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800642e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	031b      	lsls	r3, r3, #12
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a11      	ldr	r2, [pc, #68]	; (8006484 <TIM_OC4_SetConfig+0xa0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <TIM_OC4_SetConfig+0x68>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a10      	ldr	r2, [pc, #64]	; (8006488 <TIM_OC4_SetConfig+0xa4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d109      	bne.n	8006460 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	019b      	lsls	r3, r3, #6
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	bc80      	pop	{r7}
 8006482:	4770      	bx	lr
 8006484:	40010000 	.word	0x40010000
 8006488:	40010400 	.word	0x40010400

0800648c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	2201      	movs	r2, #1
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1a      	ldr	r2, [r3, #32]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	43db      	mvns	r3, r3
 80064ae:	401a      	ands	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1a      	ldr	r2, [r3, #32]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 031f 	and.w	r3, r3, #31
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	fa01 f303 	lsl.w	r3, r1, r3
 80064c4:	431a      	orrs	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e05a      	b.n	80065a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a20      	ldr	r2, [pc, #128]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d022      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006538:	d01d      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1c      	ldr	r2, [pc, #112]	; (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d018      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a19      	ldr	r2, [pc, #100]	; (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00e      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a17      	ldr	r2, [pc, #92]	; (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d009      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a16      	ldr	r2, [pc, #88]	; (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d004      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a14      	ldr	r2, [pc, #80]	; (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d10c      	bne.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800657c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	4313      	orrs	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr
 80065ac:	40010000 	.word	0x40010000
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40000c00 	.word	0x40000c00
 80065bc:	40010400 	.word	0x40010400
 80065c0:	40014000 	.word	0x40014000
 80065c4:	40001800 	.word	0x40001800

080065c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e03d      	b.n	8006660 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
	...

0800666c <__errno>:
 800666c:	4b01      	ldr	r3, [pc, #4]	; (8006674 <__errno+0x8>)
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20000018 	.word	0x20000018

08006678 <__libc_init_array>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	2600      	movs	r6, #0
 800667c:	4d0c      	ldr	r5, [pc, #48]	; (80066b0 <__libc_init_array+0x38>)
 800667e:	4c0d      	ldr	r4, [pc, #52]	; (80066b4 <__libc_init_array+0x3c>)
 8006680:	1b64      	subs	r4, r4, r5
 8006682:	10a4      	asrs	r4, r4, #2
 8006684:	42a6      	cmp	r6, r4
 8006686:	d109      	bne.n	800669c <__libc_init_array+0x24>
 8006688:	f000 f92c 	bl	80068e4 <_init>
 800668c:	2600      	movs	r6, #0
 800668e:	4d0a      	ldr	r5, [pc, #40]	; (80066b8 <__libc_init_array+0x40>)
 8006690:	4c0a      	ldr	r4, [pc, #40]	; (80066bc <__libc_init_array+0x44>)
 8006692:	1b64      	subs	r4, r4, r5
 8006694:	10a4      	asrs	r4, r4, #2
 8006696:	42a6      	cmp	r6, r4
 8006698:	d105      	bne.n	80066a6 <__libc_init_array+0x2e>
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a0:	4798      	blx	r3
 80066a2:	3601      	adds	r6, #1
 80066a4:	e7ee      	b.n	8006684 <__libc_init_array+0xc>
 80066a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066aa:	4798      	blx	r3
 80066ac:	3601      	adds	r6, #1
 80066ae:	e7f2      	b.n	8006696 <__libc_init_array+0x1e>
 80066b0:	0800691c 	.word	0x0800691c
 80066b4:	0800691c 	.word	0x0800691c
 80066b8:	0800691c 	.word	0x0800691c
 80066bc:	08006920 	.word	0x08006920

080066c0 <malloc>:
 80066c0:	4b02      	ldr	r3, [pc, #8]	; (80066cc <malloc+0xc>)
 80066c2:	4601      	mov	r1, r0
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	f000 b87b 	b.w	80067c0 <_malloc_r>
 80066ca:	bf00      	nop
 80066cc:	20000018 	.word	0x20000018

080066d0 <free>:
 80066d0:	4b02      	ldr	r3, [pc, #8]	; (80066dc <free+0xc>)
 80066d2:	4601      	mov	r1, r0
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	f000 b80b 	b.w	80066f0 <_free_r>
 80066da:	bf00      	nop
 80066dc:	20000018 	.word	0x20000018

080066e0 <memset>:
 80066e0:	4603      	mov	r3, r0
 80066e2:	4402      	add	r2, r0
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d100      	bne.n	80066ea <memset+0xa>
 80066e8:	4770      	bx	lr
 80066ea:	f803 1b01 	strb.w	r1, [r3], #1
 80066ee:	e7f9      	b.n	80066e4 <memset+0x4>

080066f0 <_free_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4605      	mov	r5, r0
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d040      	beq.n	800677a <_free_r+0x8a>
 80066f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066fc:	1f0c      	subs	r4, r1, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bfb8      	it	lt
 8006702:	18e4      	addlt	r4, r4, r3
 8006704:	f000 f8e0 	bl	80068c8 <__malloc_lock>
 8006708:	4a1c      	ldr	r2, [pc, #112]	; (800677c <_free_r+0x8c>)
 800670a:	6813      	ldr	r3, [r2, #0]
 800670c:	b933      	cbnz	r3, 800671c <_free_r+0x2c>
 800670e:	6063      	str	r3, [r4, #4]
 8006710:	6014      	str	r4, [r2, #0]
 8006712:	4628      	mov	r0, r5
 8006714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006718:	f000 b8dc 	b.w	80068d4 <__malloc_unlock>
 800671c:	42a3      	cmp	r3, r4
 800671e:	d908      	bls.n	8006732 <_free_r+0x42>
 8006720:	6820      	ldr	r0, [r4, #0]
 8006722:	1821      	adds	r1, r4, r0
 8006724:	428b      	cmp	r3, r1
 8006726:	bf01      	itttt	eq
 8006728:	6819      	ldreq	r1, [r3, #0]
 800672a:	685b      	ldreq	r3, [r3, #4]
 800672c:	1809      	addeq	r1, r1, r0
 800672e:	6021      	streq	r1, [r4, #0]
 8006730:	e7ed      	b.n	800670e <_free_r+0x1e>
 8006732:	461a      	mov	r2, r3
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	b10b      	cbz	r3, 800673c <_free_r+0x4c>
 8006738:	42a3      	cmp	r3, r4
 800673a:	d9fa      	bls.n	8006732 <_free_r+0x42>
 800673c:	6811      	ldr	r1, [r2, #0]
 800673e:	1850      	adds	r0, r2, r1
 8006740:	42a0      	cmp	r0, r4
 8006742:	d10b      	bne.n	800675c <_free_r+0x6c>
 8006744:	6820      	ldr	r0, [r4, #0]
 8006746:	4401      	add	r1, r0
 8006748:	1850      	adds	r0, r2, r1
 800674a:	4283      	cmp	r3, r0
 800674c:	6011      	str	r1, [r2, #0]
 800674e:	d1e0      	bne.n	8006712 <_free_r+0x22>
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	4401      	add	r1, r0
 8006756:	6011      	str	r1, [r2, #0]
 8006758:	6053      	str	r3, [r2, #4]
 800675a:	e7da      	b.n	8006712 <_free_r+0x22>
 800675c:	d902      	bls.n	8006764 <_free_r+0x74>
 800675e:	230c      	movs	r3, #12
 8006760:	602b      	str	r3, [r5, #0]
 8006762:	e7d6      	b.n	8006712 <_free_r+0x22>
 8006764:	6820      	ldr	r0, [r4, #0]
 8006766:	1821      	adds	r1, r4, r0
 8006768:	428b      	cmp	r3, r1
 800676a:	bf01      	itttt	eq
 800676c:	6819      	ldreq	r1, [r3, #0]
 800676e:	685b      	ldreq	r3, [r3, #4]
 8006770:	1809      	addeq	r1, r1, r0
 8006772:	6021      	streq	r1, [r4, #0]
 8006774:	6063      	str	r3, [r4, #4]
 8006776:	6054      	str	r4, [r2, #4]
 8006778:	e7cb      	b.n	8006712 <_free_r+0x22>
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	20001840 	.word	0x20001840

08006780 <sbrk_aligned>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	4e0e      	ldr	r6, [pc, #56]	; (80067bc <sbrk_aligned+0x3c>)
 8006784:	460c      	mov	r4, r1
 8006786:	6831      	ldr	r1, [r6, #0]
 8006788:	4605      	mov	r5, r0
 800678a:	b911      	cbnz	r1, 8006792 <sbrk_aligned+0x12>
 800678c:	f000 f88c 	bl	80068a8 <_sbrk_r>
 8006790:	6030      	str	r0, [r6, #0]
 8006792:	4621      	mov	r1, r4
 8006794:	4628      	mov	r0, r5
 8006796:	f000 f887 	bl	80068a8 <_sbrk_r>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d00a      	beq.n	80067b4 <sbrk_aligned+0x34>
 800679e:	1cc4      	adds	r4, r0, #3
 80067a0:	f024 0403 	bic.w	r4, r4, #3
 80067a4:	42a0      	cmp	r0, r4
 80067a6:	d007      	beq.n	80067b8 <sbrk_aligned+0x38>
 80067a8:	1a21      	subs	r1, r4, r0
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 f87c 	bl	80068a8 <_sbrk_r>
 80067b0:	3001      	adds	r0, #1
 80067b2:	d101      	bne.n	80067b8 <sbrk_aligned+0x38>
 80067b4:	f04f 34ff 	mov.w	r4, #4294967295
 80067b8:	4620      	mov	r0, r4
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
 80067bc:	20001844 	.word	0x20001844

080067c0 <_malloc_r>:
 80067c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c4:	1ccd      	adds	r5, r1, #3
 80067c6:	f025 0503 	bic.w	r5, r5, #3
 80067ca:	3508      	adds	r5, #8
 80067cc:	2d0c      	cmp	r5, #12
 80067ce:	bf38      	it	cc
 80067d0:	250c      	movcc	r5, #12
 80067d2:	2d00      	cmp	r5, #0
 80067d4:	4607      	mov	r7, r0
 80067d6:	db01      	blt.n	80067dc <_malloc_r+0x1c>
 80067d8:	42a9      	cmp	r1, r5
 80067da:	d905      	bls.n	80067e8 <_malloc_r+0x28>
 80067dc:	230c      	movs	r3, #12
 80067de:	2600      	movs	r6, #0
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	4630      	mov	r0, r6
 80067e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e8:	4e2e      	ldr	r6, [pc, #184]	; (80068a4 <_malloc_r+0xe4>)
 80067ea:	f000 f86d 	bl	80068c8 <__malloc_lock>
 80067ee:	6833      	ldr	r3, [r6, #0]
 80067f0:	461c      	mov	r4, r3
 80067f2:	bb34      	cbnz	r4, 8006842 <_malloc_r+0x82>
 80067f4:	4629      	mov	r1, r5
 80067f6:	4638      	mov	r0, r7
 80067f8:	f7ff ffc2 	bl	8006780 <sbrk_aligned>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	4604      	mov	r4, r0
 8006800:	d14d      	bne.n	800689e <_malloc_r+0xde>
 8006802:	6834      	ldr	r4, [r6, #0]
 8006804:	4626      	mov	r6, r4
 8006806:	2e00      	cmp	r6, #0
 8006808:	d140      	bne.n	800688c <_malloc_r+0xcc>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	4631      	mov	r1, r6
 800680e:	4638      	mov	r0, r7
 8006810:	eb04 0803 	add.w	r8, r4, r3
 8006814:	f000 f848 	bl	80068a8 <_sbrk_r>
 8006818:	4580      	cmp	r8, r0
 800681a:	d13a      	bne.n	8006892 <_malloc_r+0xd2>
 800681c:	6821      	ldr	r1, [r4, #0]
 800681e:	3503      	adds	r5, #3
 8006820:	1a6d      	subs	r5, r5, r1
 8006822:	f025 0503 	bic.w	r5, r5, #3
 8006826:	3508      	adds	r5, #8
 8006828:	2d0c      	cmp	r5, #12
 800682a:	bf38      	it	cc
 800682c:	250c      	movcc	r5, #12
 800682e:	4638      	mov	r0, r7
 8006830:	4629      	mov	r1, r5
 8006832:	f7ff ffa5 	bl	8006780 <sbrk_aligned>
 8006836:	3001      	adds	r0, #1
 8006838:	d02b      	beq.n	8006892 <_malloc_r+0xd2>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	442b      	add	r3, r5
 800683e:	6023      	str	r3, [r4, #0]
 8006840:	e00e      	b.n	8006860 <_malloc_r+0xa0>
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	1b52      	subs	r2, r2, r5
 8006846:	d41e      	bmi.n	8006886 <_malloc_r+0xc6>
 8006848:	2a0b      	cmp	r2, #11
 800684a:	d916      	bls.n	800687a <_malloc_r+0xba>
 800684c:	1961      	adds	r1, r4, r5
 800684e:	42a3      	cmp	r3, r4
 8006850:	6025      	str	r5, [r4, #0]
 8006852:	bf18      	it	ne
 8006854:	6059      	strne	r1, [r3, #4]
 8006856:	6863      	ldr	r3, [r4, #4]
 8006858:	bf08      	it	eq
 800685a:	6031      	streq	r1, [r6, #0]
 800685c:	5162      	str	r2, [r4, r5]
 800685e:	604b      	str	r3, [r1, #4]
 8006860:	4638      	mov	r0, r7
 8006862:	f104 060b 	add.w	r6, r4, #11
 8006866:	f000 f835 	bl	80068d4 <__malloc_unlock>
 800686a:	f026 0607 	bic.w	r6, r6, #7
 800686e:	1d23      	adds	r3, r4, #4
 8006870:	1af2      	subs	r2, r6, r3
 8006872:	d0b6      	beq.n	80067e2 <_malloc_r+0x22>
 8006874:	1b9b      	subs	r3, r3, r6
 8006876:	50a3      	str	r3, [r4, r2]
 8006878:	e7b3      	b.n	80067e2 <_malloc_r+0x22>
 800687a:	6862      	ldr	r2, [r4, #4]
 800687c:	42a3      	cmp	r3, r4
 800687e:	bf0c      	ite	eq
 8006880:	6032      	streq	r2, [r6, #0]
 8006882:	605a      	strne	r2, [r3, #4]
 8006884:	e7ec      	b.n	8006860 <_malloc_r+0xa0>
 8006886:	4623      	mov	r3, r4
 8006888:	6864      	ldr	r4, [r4, #4]
 800688a:	e7b2      	b.n	80067f2 <_malloc_r+0x32>
 800688c:	4634      	mov	r4, r6
 800688e:	6876      	ldr	r6, [r6, #4]
 8006890:	e7b9      	b.n	8006806 <_malloc_r+0x46>
 8006892:	230c      	movs	r3, #12
 8006894:	4638      	mov	r0, r7
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	f000 f81c 	bl	80068d4 <__malloc_unlock>
 800689c:	e7a1      	b.n	80067e2 <_malloc_r+0x22>
 800689e:	6025      	str	r5, [r4, #0]
 80068a0:	e7de      	b.n	8006860 <_malloc_r+0xa0>
 80068a2:	bf00      	nop
 80068a4:	20001840 	.word	0x20001840

080068a8 <_sbrk_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	2300      	movs	r3, #0
 80068ac:	4d05      	ldr	r5, [pc, #20]	; (80068c4 <_sbrk_r+0x1c>)
 80068ae:	4604      	mov	r4, r0
 80068b0:	4608      	mov	r0, r1
 80068b2:	602b      	str	r3, [r5, #0]
 80068b4:	f7fd f82e 	bl	8003914 <_sbrk>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d102      	bne.n	80068c2 <_sbrk_r+0x1a>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	b103      	cbz	r3, 80068c2 <_sbrk_r+0x1a>
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	20001848 	.word	0x20001848

080068c8 <__malloc_lock>:
 80068c8:	4801      	ldr	r0, [pc, #4]	; (80068d0 <__malloc_lock+0x8>)
 80068ca:	f000 b809 	b.w	80068e0 <__retarget_lock_acquire_recursive>
 80068ce:	bf00      	nop
 80068d0:	2000184c 	.word	0x2000184c

080068d4 <__malloc_unlock>:
 80068d4:	4801      	ldr	r0, [pc, #4]	; (80068dc <__malloc_unlock+0x8>)
 80068d6:	f000 b804 	b.w	80068e2 <__retarget_lock_release_recursive>
 80068da:	bf00      	nop
 80068dc:	2000184c 	.word	0x2000184c

080068e0 <__retarget_lock_acquire_recursive>:
 80068e0:	4770      	bx	lr

080068e2 <__retarget_lock_release_recursive>:
 80068e2:	4770      	bx	lr

080068e4 <_init>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	bf00      	nop
 80068e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ea:	bc08      	pop	{r3}
 80068ec:	469e      	mov	lr, r3
 80068ee:	4770      	bx	lr

080068f0 <_fini>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	bf00      	nop
 80068f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f6:	bc08      	pop	{r3}
 80068f8:	469e      	mov	lr, r3
 80068fa:	4770      	bx	lr
