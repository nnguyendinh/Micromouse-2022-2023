
Crewmate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005818  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b8  080059b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c0  080059c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080059c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000010  080059d8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  080059d8  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb6b  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247a  00000000  00000000  0002cba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0002f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  0002fd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027a9  00000000  00000000  000308c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa03  00000000  00000000  00033071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba370  00000000  00000000  00042a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fcde4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003770  00000000  00000000  000fce34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005988 	.word	0x08005988

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005988 	.word	0x08005988

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_fmul>:
 800041c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000420:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000424:	bf1e      	ittt	ne
 8000426:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800042a:	ea92 0f0c 	teqne	r2, ip
 800042e:	ea93 0f0c 	teqne	r3, ip
 8000432:	d06f      	beq.n	8000514 <__aeabi_fmul+0xf8>
 8000434:	441a      	add	r2, r3
 8000436:	ea80 0c01 	eor.w	ip, r0, r1
 800043a:	0240      	lsls	r0, r0, #9
 800043c:	bf18      	it	ne
 800043e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000442:	d01e      	beq.n	8000482 <__aeabi_fmul+0x66>
 8000444:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000448:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800044c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000450:	fba0 3101 	umull	r3, r1, r0, r1
 8000454:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000458:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800045c:	bf3e      	ittt	cc
 800045e:	0049      	lslcc	r1, r1, #1
 8000460:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000464:	005b      	lslcc	r3, r3, #1
 8000466:	ea40 0001 	orr.w	r0, r0, r1
 800046a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800046e:	2afd      	cmp	r2, #253	; 0xfd
 8000470:	d81d      	bhi.n	80004ae <__aeabi_fmul+0x92>
 8000472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000476:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800047a:	bf08      	it	eq
 800047c:	f020 0001 	biceq.w	r0, r0, #1
 8000480:	4770      	bx	lr
 8000482:	f090 0f00 	teq	r0, #0
 8000486:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800048a:	bf08      	it	eq
 800048c:	0249      	lsleq	r1, r1, #9
 800048e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000492:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000496:	3a7f      	subs	r2, #127	; 0x7f
 8000498:	bfc2      	ittt	gt
 800049a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800049e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004a2:	4770      	bxgt	lr
 80004a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004a8:	f04f 0300 	mov.w	r3, #0
 80004ac:	3a01      	subs	r2, #1
 80004ae:	dc5d      	bgt.n	800056c <__aeabi_fmul+0x150>
 80004b0:	f112 0f19 	cmn.w	r2, #25
 80004b4:	bfdc      	itt	le
 80004b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ba:	4770      	bxle	lr
 80004bc:	f1c2 0200 	rsb	r2, r2, #0
 80004c0:	0041      	lsls	r1, r0, #1
 80004c2:	fa21 f102 	lsr.w	r1, r1, r2
 80004c6:	f1c2 0220 	rsb	r2, r2, #32
 80004ca:	fa00 fc02 	lsl.w	ip, r0, r2
 80004ce:	ea5f 0031 	movs.w	r0, r1, rrx
 80004d2:	f140 0000 	adc.w	r0, r0, #0
 80004d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004da:	bf08      	it	eq
 80004dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004e0:	4770      	bx	lr
 80004e2:	f092 0f00 	teq	r2, #0
 80004e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004ea:	bf02      	ittt	eq
 80004ec:	0040      	lsleq	r0, r0, #1
 80004ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004f2:	3a01      	subeq	r2, #1
 80004f4:	d0f9      	beq.n	80004ea <__aeabi_fmul+0xce>
 80004f6:	ea40 000c 	orr.w	r0, r0, ip
 80004fa:	f093 0f00 	teq	r3, #0
 80004fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000502:	bf02      	ittt	eq
 8000504:	0049      	lsleq	r1, r1, #1
 8000506:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800050a:	3b01      	subeq	r3, #1
 800050c:	d0f9      	beq.n	8000502 <__aeabi_fmul+0xe6>
 800050e:	ea41 010c 	orr.w	r1, r1, ip
 8000512:	e78f      	b.n	8000434 <__aeabi_fmul+0x18>
 8000514:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000518:	ea92 0f0c 	teq	r2, ip
 800051c:	bf18      	it	ne
 800051e:	ea93 0f0c 	teqne	r3, ip
 8000522:	d00a      	beq.n	800053a <__aeabi_fmul+0x11e>
 8000524:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000528:	bf18      	it	ne
 800052a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800052e:	d1d8      	bne.n	80004e2 <__aeabi_fmul+0xc6>
 8000530:	ea80 0001 	eor.w	r0, r0, r1
 8000534:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000538:	4770      	bx	lr
 800053a:	f090 0f00 	teq	r0, #0
 800053e:	bf17      	itett	ne
 8000540:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000544:	4608      	moveq	r0, r1
 8000546:	f091 0f00 	teqne	r1, #0
 800054a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800054e:	d014      	beq.n	800057a <__aeabi_fmul+0x15e>
 8000550:	ea92 0f0c 	teq	r2, ip
 8000554:	d101      	bne.n	800055a <__aeabi_fmul+0x13e>
 8000556:	0242      	lsls	r2, r0, #9
 8000558:	d10f      	bne.n	800057a <__aeabi_fmul+0x15e>
 800055a:	ea93 0f0c 	teq	r3, ip
 800055e:	d103      	bne.n	8000568 <__aeabi_fmul+0x14c>
 8000560:	024b      	lsls	r3, r1, #9
 8000562:	bf18      	it	ne
 8000564:	4608      	movne	r0, r1
 8000566:	d108      	bne.n	800057a <__aeabi_fmul+0x15e>
 8000568:	ea80 0001 	eor.w	r0, r0, r1
 800056c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000570:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000578:	4770      	bx	lr
 800057a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800057e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000582:	4770      	bx	lr

08000584 <__aeabi_drsub>:
 8000584:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e002      	b.n	8000590 <__adddf3>
 800058a:	bf00      	nop

0800058c <__aeabi_dsub>:
 800058c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000590 <__adddf3>:
 8000590:	b530      	push	{r4, r5, lr}
 8000592:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000596:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800059a:	ea94 0f05 	teq	r4, r5
 800059e:	bf08      	it	eq
 80005a0:	ea90 0f02 	teqeq	r0, r2
 80005a4:	bf1f      	itttt	ne
 80005a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b6:	f000 80e2 	beq.w	800077e <__adddf3+0x1ee>
 80005ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005c2:	bfb8      	it	lt
 80005c4:	426d      	neglt	r5, r5
 80005c6:	dd0c      	ble.n	80005e2 <__adddf3+0x52>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea80 0202 	eor.w	r2, r0, r2
 80005ce:	ea81 0303 	eor.w	r3, r1, r3
 80005d2:	ea82 0000 	eor.w	r0, r2, r0
 80005d6:	ea83 0101 	eor.w	r1, r3, r1
 80005da:	ea80 0202 	eor.w	r2, r0, r2
 80005de:	ea81 0303 	eor.w	r3, r1, r3
 80005e2:	2d36      	cmp	r5, #54	; 0x36
 80005e4:	bf88      	it	hi
 80005e6:	bd30      	pophi	{r4, r5, pc}
 80005e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005f8:	d002      	beq.n	8000600 <__adddf3+0x70>
 80005fa:	4240      	negs	r0, r0
 80005fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000600:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000604:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000608:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800060c:	d002      	beq.n	8000614 <__adddf3+0x84>
 800060e:	4252      	negs	r2, r2
 8000610:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000614:	ea94 0f05 	teq	r4, r5
 8000618:	f000 80a7 	beq.w	800076a <__adddf3+0x1da>
 800061c:	f1a4 0401 	sub.w	r4, r4, #1
 8000620:	f1d5 0e20 	rsbs	lr, r5, #32
 8000624:	db0d      	blt.n	8000642 <__adddf3+0xb2>
 8000626:	fa02 fc0e 	lsl.w	ip, r2, lr
 800062a:	fa22 f205 	lsr.w	r2, r2, r5
 800062e:	1880      	adds	r0, r0, r2
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	fa03 f20e 	lsl.w	r2, r3, lr
 8000638:	1880      	adds	r0, r0, r2
 800063a:	fa43 f305 	asr.w	r3, r3, r5
 800063e:	4159      	adcs	r1, r3
 8000640:	e00e      	b.n	8000660 <__adddf3+0xd0>
 8000642:	f1a5 0520 	sub.w	r5, r5, #32
 8000646:	f10e 0e20 	add.w	lr, lr, #32
 800064a:	2a01      	cmp	r2, #1
 800064c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000650:	bf28      	it	cs
 8000652:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000656:	fa43 f305 	asr.w	r3, r3, r5
 800065a:	18c0      	adds	r0, r0, r3
 800065c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	d507      	bpl.n	8000676 <__adddf3+0xe6>
 8000666:	f04f 0e00 	mov.w	lr, #0
 800066a:	f1dc 0c00 	rsbs	ip, ip, #0
 800066e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000672:	eb6e 0101 	sbc.w	r1, lr, r1
 8000676:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800067a:	d31b      	bcc.n	80006b4 <__adddf3+0x124>
 800067c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000680:	d30c      	bcc.n	800069c <__adddf3+0x10c>
 8000682:	0849      	lsrs	r1, r1, #1
 8000684:	ea5f 0030 	movs.w	r0, r0, rrx
 8000688:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800068c:	f104 0401 	add.w	r4, r4, #1
 8000690:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000694:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000698:	f080 809a 	bcs.w	80007d0 <__adddf3+0x240>
 800069c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006a0:	bf08      	it	eq
 80006a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006a6:	f150 0000 	adcs.w	r0, r0, #0
 80006aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ae:	ea41 0105 	orr.w	r1, r1, r5
 80006b2:	bd30      	pop	{r4, r5, pc}
 80006b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006b8:	4140      	adcs	r0, r0
 80006ba:	eb41 0101 	adc.w	r1, r1, r1
 80006be:	3c01      	subs	r4, #1
 80006c0:	bf28      	it	cs
 80006c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80006c6:	d2e9      	bcs.n	800069c <__adddf3+0x10c>
 80006c8:	f091 0f00 	teq	r1, #0
 80006cc:	bf04      	itt	eq
 80006ce:	4601      	moveq	r1, r0
 80006d0:	2000      	moveq	r0, #0
 80006d2:	fab1 f381 	clz	r3, r1
 80006d6:	bf08      	it	eq
 80006d8:	3320      	addeq	r3, #32
 80006da:	f1a3 030b 	sub.w	r3, r3, #11
 80006de:	f1b3 0220 	subs.w	r2, r3, #32
 80006e2:	da0c      	bge.n	80006fe <__adddf3+0x16e>
 80006e4:	320c      	adds	r2, #12
 80006e6:	dd08      	ble.n	80006fa <__adddf3+0x16a>
 80006e8:	f102 0c14 	add.w	ip, r2, #20
 80006ec:	f1c2 020c 	rsb	r2, r2, #12
 80006f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006f4:	fa21 f102 	lsr.w	r1, r1, r2
 80006f8:	e00c      	b.n	8000714 <__adddf3+0x184>
 80006fa:	f102 0214 	add.w	r2, r2, #20
 80006fe:	bfd8      	it	le
 8000700:	f1c2 0c20 	rsble	ip, r2, #32
 8000704:	fa01 f102 	lsl.w	r1, r1, r2
 8000708:	fa20 fc0c 	lsr.w	ip, r0, ip
 800070c:	bfdc      	itt	le
 800070e:	ea41 010c 	orrle.w	r1, r1, ip
 8000712:	4090      	lslle	r0, r2
 8000714:	1ae4      	subs	r4, r4, r3
 8000716:	bfa2      	ittt	ge
 8000718:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800071c:	4329      	orrge	r1, r5
 800071e:	bd30      	popge	{r4, r5, pc}
 8000720:	ea6f 0404 	mvn.w	r4, r4
 8000724:	3c1f      	subs	r4, #31
 8000726:	da1c      	bge.n	8000762 <__adddf3+0x1d2>
 8000728:	340c      	adds	r4, #12
 800072a:	dc0e      	bgt.n	800074a <__adddf3+0x1ba>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0220 	rsb	r2, r4, #32
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f302 	lsl.w	r3, r1, r2
 800073c:	ea40 0003 	orr.w	r0, r0, r3
 8000740:	fa21 f304 	lsr.w	r3, r1, r4
 8000744:	ea45 0103 	orr.w	r1, r5, r3
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	f1c4 040c 	rsb	r4, r4, #12
 800074e:	f1c4 0220 	rsb	r2, r4, #32
 8000752:	fa20 f002 	lsr.w	r0, r0, r2
 8000756:	fa01 f304 	lsl.w	r3, r1, r4
 800075a:	ea40 0003 	orr.w	r0, r0, r3
 800075e:	4629      	mov	r1, r5
 8000760:	bd30      	pop	{r4, r5, pc}
 8000762:	fa21 f004 	lsr.w	r0, r1, r4
 8000766:	4629      	mov	r1, r5
 8000768:	bd30      	pop	{r4, r5, pc}
 800076a:	f094 0f00 	teq	r4, #0
 800076e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000772:	bf06      	itte	eq
 8000774:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000778:	3401      	addeq	r4, #1
 800077a:	3d01      	subne	r5, #1
 800077c:	e74e      	b.n	800061c <__adddf3+0x8c>
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf18      	it	ne
 8000784:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000788:	d029      	beq.n	80007de <__adddf3+0x24e>
 800078a:	ea94 0f05 	teq	r4, r5
 800078e:	bf08      	it	eq
 8000790:	ea90 0f02 	teqeq	r0, r2
 8000794:	d005      	beq.n	80007a2 <__adddf3+0x212>
 8000796:	ea54 0c00 	orrs.w	ip, r4, r0
 800079a:	bf04      	itt	eq
 800079c:	4619      	moveq	r1, r3
 800079e:	4610      	moveq	r0, r2
 80007a0:	bd30      	pop	{r4, r5, pc}
 80007a2:	ea91 0f03 	teq	r1, r3
 80007a6:	bf1e      	ittt	ne
 80007a8:	2100      	movne	r1, #0
 80007aa:	2000      	movne	r0, #0
 80007ac:	bd30      	popne	{r4, r5, pc}
 80007ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007b2:	d105      	bne.n	80007c0 <__adddf3+0x230>
 80007b4:	0040      	lsls	r0, r0, #1
 80007b6:	4149      	adcs	r1, r1
 80007b8:	bf28      	it	cs
 80007ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80007be:	bd30      	pop	{r4, r5, pc}
 80007c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80007c4:	bf3c      	itt	cc
 80007c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80007ca:	bd30      	popcc	{r4, r5, pc}
 80007cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d8:	f04f 0000 	mov.w	r0, #0
 80007dc:	bd30      	pop	{r4, r5, pc}
 80007de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007e2:	bf1a      	itte	ne
 80007e4:	4619      	movne	r1, r3
 80007e6:	4610      	movne	r0, r2
 80007e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007ec:	bf1c      	itt	ne
 80007ee:	460b      	movne	r3, r1
 80007f0:	4602      	movne	r2, r0
 80007f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007f6:	bf06      	itte	eq
 80007f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007fc:	ea91 0f03 	teqeq	r1, r3
 8000800:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000804:	bd30      	pop	{r4, r5, pc}
 8000806:	bf00      	nop

08000808 <__aeabi_ui2d>:
 8000808:	f090 0f00 	teq	r0, #0
 800080c:	bf04      	itt	eq
 800080e:	2100      	moveq	r1, #0
 8000810:	4770      	bxeq	lr
 8000812:	b530      	push	{r4, r5, lr}
 8000814:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000818:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081c:	f04f 0500 	mov.w	r5, #0
 8000820:	f04f 0100 	mov.w	r1, #0
 8000824:	e750      	b.n	80006c8 <__adddf3+0x138>
 8000826:	bf00      	nop

08000828 <__aeabi_i2d>:
 8000828:	f090 0f00 	teq	r0, #0
 800082c:	bf04      	itt	eq
 800082e:	2100      	moveq	r1, #0
 8000830:	4770      	bxeq	lr
 8000832:	b530      	push	{r4, r5, lr}
 8000834:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000838:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000840:	bf48      	it	mi
 8000842:	4240      	negmi	r0, r0
 8000844:	f04f 0100 	mov.w	r1, #0
 8000848:	e73e      	b.n	80006c8 <__adddf3+0x138>
 800084a:	bf00      	nop

0800084c <__aeabi_f2d>:
 800084c:	0042      	lsls	r2, r0, #1
 800084e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000852:	ea4f 0131 	mov.w	r1, r1, rrx
 8000856:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800085a:	bf1f      	itttt	ne
 800085c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000860:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000864:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000868:	4770      	bxne	lr
 800086a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800086e:	bf08      	it	eq
 8000870:	4770      	bxeq	lr
 8000872:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000876:	bf04      	itt	eq
 8000878:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800087c:	4770      	bxeq	lr
 800087e:	b530      	push	{r4, r5, lr}
 8000880:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000884:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000888:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800088c:	e71c      	b.n	80006c8 <__adddf3+0x138>
 800088e:	bf00      	nop

08000890 <__aeabi_ul2d>:
 8000890:	ea50 0201 	orrs.w	r2, r0, r1
 8000894:	bf08      	it	eq
 8000896:	4770      	bxeq	lr
 8000898:	b530      	push	{r4, r5, lr}
 800089a:	f04f 0500 	mov.w	r5, #0
 800089e:	e00a      	b.n	80008b6 <__aeabi_l2d+0x16>

080008a0 <__aeabi_l2d>:
 80008a0:	ea50 0201 	orrs.w	r2, r0, r1
 80008a4:	bf08      	it	eq
 80008a6:	4770      	bxeq	lr
 80008a8:	b530      	push	{r4, r5, lr}
 80008aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80008ae:	d502      	bpl.n	80008b6 <__aeabi_l2d+0x16>
 80008b0:	4240      	negs	r0, r0
 80008b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008c2:	f43f aed8 	beq.w	8000676 <__adddf3+0xe6>
 80008c6:	f04f 0203 	mov.w	r2, #3
 80008ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008ce:	bf18      	it	ne
 80008d0:	3203      	addne	r2, #3
 80008d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008d6:	bf18      	it	ne
 80008d8:	3203      	addne	r2, #3
 80008da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008de:	f1c2 0320 	rsb	r3, r2, #32
 80008e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80008e6:	fa20 f002 	lsr.w	r0, r0, r2
 80008ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80008ee:	ea40 000e 	orr.w	r0, r0, lr
 80008f2:	fa21 f102 	lsr.w	r1, r1, r2
 80008f6:	4414      	add	r4, r2
 80008f8:	e6bd      	b.n	8000676 <__adddf3+0xe6>
 80008fa:	bf00      	nop

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	3a01      	subs	r2, #1
 8000b66:	bf28      	it	cs
 8000b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b6c:	d2ed      	bcs.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__gesf2>:
 8000cc8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ccc:	e006      	b.n	8000cdc <__cmpsf2+0x4>
 8000cce:	bf00      	nop

08000cd0 <__lesf2>:
 8000cd0:	f04f 0c01 	mov.w	ip, #1
 8000cd4:	e002      	b.n	8000cdc <__cmpsf2+0x4>
 8000cd6:	bf00      	nop

08000cd8 <__cmpsf2>:
 8000cd8:	f04f 0c01 	mov.w	ip, #1
 8000cdc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ce0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ce4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cec:	bf18      	it	ne
 8000cee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf2:	d011      	beq.n	8000d18 <__cmpsf2+0x40>
 8000cf4:	b001      	add	sp, #4
 8000cf6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cfa:	bf18      	it	ne
 8000cfc:	ea90 0f01 	teqne	r0, r1
 8000d00:	bf58      	it	pl
 8000d02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d06:	bf88      	it	hi
 8000d08:	17c8      	asrhi	r0, r1, #31
 8000d0a:	bf38      	it	cc
 8000d0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d10:	bf18      	it	ne
 8000d12:	f040 0001 	orrne.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d1c:	d102      	bne.n	8000d24 <__cmpsf2+0x4c>
 8000d1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d22:	d105      	bne.n	8000d30 <__cmpsf2+0x58>
 8000d24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d28:	d1e4      	bne.n	8000cf4 <__cmpsf2+0x1c>
 8000d2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d2e:	d0e1      	beq.n	8000cf4 <__cmpsf2+0x1c>
 8000d30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <__aeabi_cfrcmple>:
 8000d38:	4684      	mov	ip, r0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	4661      	mov	r1, ip
 8000d3e:	e7ff      	b.n	8000d40 <__aeabi_cfcmpeq>

08000d40 <__aeabi_cfcmpeq>:
 8000d40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d42:	f7ff ffc9 	bl	8000cd8 <__cmpsf2>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	bf48      	it	mi
 8000d4a:	f110 0f00 	cmnmi.w	r0, #0
 8000d4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d50 <__aeabi_fcmpeq>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff fff4 	bl	8000d40 <__aeabi_cfcmpeq>
 8000d58:	bf0c      	ite	eq
 8000d5a:	2001      	moveq	r0, #1
 8000d5c:	2000      	movne	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_fcmplt>:
 8000d64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d68:	f7ff ffea 	bl	8000d40 <__aeabi_cfcmpeq>
 8000d6c:	bf34      	ite	cc
 8000d6e:	2001      	movcc	r0, #1
 8000d70:	2000      	movcs	r0, #0
 8000d72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d76:	bf00      	nop

08000d78 <__aeabi_fcmple>:
 8000d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d7c:	f7ff ffe0 	bl	8000d40 <__aeabi_cfcmpeq>
 8000d80:	bf94      	ite	ls
 8000d82:	2001      	movls	r0, #1
 8000d84:	2000      	movhi	r0, #0
 8000d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8a:	bf00      	nop

08000d8c <__aeabi_fcmpge>:
 8000d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d90:	f7ff ffd2 	bl	8000d38 <__aeabi_cfrcmple>
 8000d94:	bf94      	ite	ls
 8000d96:	2001      	movls	r0, #1
 8000d98:	2000      	movhi	r0, #0
 8000d9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9e:	bf00      	nop

08000da0 <__aeabi_fcmpgt>:
 8000da0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da4:	f7ff ffc8 	bl	8000d38 <__aeabi_cfrcmple>
 8000da8:	bf34      	ite	cc
 8000daa:	2001      	movcc	r0, #1
 8000dac:	2000      	movcs	r0, #0
 8000dae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db2:	bf00      	nop

08000db4 <__aeabi_f2uiz>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	d20e      	bcs.n	8000dd6 <__aeabi_f2uiz+0x22>
 8000db8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dbc:	d30b      	bcc.n	8000dd6 <__aeabi_f2uiz+0x22>
 8000dbe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dc6:	d409      	bmi.n	8000ddc <__aeabi_f2uiz+0x28>
 8000dc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dd4:	4770      	bx	lr
 8000dd6:	f04f 0000 	mov.w	r0, #0
 8000dda:	4770      	bx	lr
 8000ddc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000de0:	d101      	bne.n	8000de6 <__aeabi_f2uiz+0x32>
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	d102      	bne.n	8000dec <__aeabi_f2uiz+0x38>
 8000de6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dea:	4770      	bx	lr
 8000dec:	f04f 0000 	mov.w	r0, #0
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_uldivmod>:
 8000df4:	b953      	cbnz	r3, 8000e0c <__aeabi_uldivmod+0x18>
 8000df6:	b94a      	cbnz	r2, 8000e0c <__aeabi_uldivmod+0x18>
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	bf08      	it	eq
 8000dfc:	2800      	cmpeq	r0, #0
 8000dfe:	bf1c      	itt	ne
 8000e00:	f04f 31ff 	movne.w	r1, #4294967295
 8000e04:	f04f 30ff 	movne.w	r0, #4294967295
 8000e08:	f000 b976 	b.w	80010f8 <__aeabi_idiv0>
 8000e0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e14:	f000 f806 	bl	8000e24 <__udivmoddi4>
 8000e18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e20:	b004      	add	sp, #16
 8000e22:	4770      	bx	lr

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9e08      	ldr	r6, [sp, #32]
 8000e2a:	460d      	mov	r5, r1
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	4688      	mov	r8, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d14d      	bne.n	8000ed0 <__udivmoddi4+0xac>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	4694      	mov	ip, r2
 8000e38:	d968      	bls.n	8000f0c <__udivmoddi4+0xe8>
 8000e3a:	fab2 f282 	clz	r2, r2
 8000e3e:	b152      	cbz	r2, 8000e56 <__udivmoddi4+0x32>
 8000e40:	fa01 f302 	lsl.w	r3, r1, r2
 8000e44:	f1c2 0120 	rsb	r1, r2, #32
 8000e48:	fa20 f101 	lsr.w	r1, r0, r1
 8000e4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e50:	ea41 0803 	orr.w	r8, r1, r3
 8000e54:	4094      	lsls	r4, r2
 8000e56:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000e5a:	fbb8 f7f1 	udiv	r7, r8, r1
 8000e5e:	fa1f fe8c 	uxth.w	lr, ip
 8000e62:	fb01 8817 	mls	r8, r1, r7, r8
 8000e66:	fb07 f00e 	mul.w	r0, r7, lr
 8000e6a:	0c23      	lsrs	r3, r4, #16
 8000e6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e70:	4298      	cmp	r0, r3
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x66>
 8000e74:	eb1c 0303 	adds.w	r3, ip, r3
 8000e78:	f107 35ff 	add.w	r5, r7, #4294967295
 8000e7c:	f080 811e 	bcs.w	80010bc <__udivmoddi4+0x298>
 8000e80:	4298      	cmp	r0, r3
 8000e82:	f240 811b 	bls.w	80010bc <__udivmoddi4+0x298>
 8000e86:	3f02      	subs	r7, #2
 8000e88:	4463      	add	r3, ip
 8000e8a:	1a1b      	subs	r3, r3, r0
 8000e8c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000e90:	fb01 3310 	mls	r3, r1, r0, r3
 8000e94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e98:	b2a4      	uxth	r4, r4
 8000e9a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	d90a      	bls.n	8000eb8 <__udivmoddi4+0x94>
 8000ea2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eaa:	f080 8109 	bcs.w	80010c0 <__udivmoddi4+0x29c>
 8000eae:	45a6      	cmp	lr, r4
 8000eb0:	f240 8106 	bls.w	80010c0 <__udivmoddi4+0x29c>
 8000eb4:	4464      	add	r4, ip
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	2100      	movs	r1, #0
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ec2:	b11e      	cbz	r6, 8000ecc <__udivmoddi4+0xa8>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	40d4      	lsrs	r4, r2
 8000ec8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0xc2>
 8000ed4:	2e00      	cmp	r6, #0
 8000ed6:	f000 80ee 	beq.w	80010b6 <__udivmoddi4+0x292>
 8000eda:	2100      	movs	r1, #0
 8000edc:	e9c6 0500 	strd	r0, r5, [r6]
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	fab3 f183 	clz	r1, r3
 8000eea:	2900      	cmp	r1, #0
 8000eec:	d14a      	bne.n	8000f84 <__udivmoddi4+0x160>
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	d302      	bcc.n	8000ef8 <__udivmoddi4+0xd4>
 8000ef2:	4282      	cmp	r2, r0
 8000ef4:	f200 80fc 	bhi.w	80010f0 <__udivmoddi4+0x2cc>
 8000ef8:	1a84      	subs	r4, r0, r2
 8000efa:	eb65 0303 	sbc.w	r3, r5, r3
 8000efe:	2001      	movs	r0, #1
 8000f00:	4698      	mov	r8, r3
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	d0e2      	beq.n	8000ecc <__udivmoddi4+0xa8>
 8000f06:	e9c6 4800 	strd	r4, r8, [r6]
 8000f0a:	e7df      	b.n	8000ecc <__udivmoddi4+0xa8>
 8000f0c:	b902      	cbnz	r2, 8000f10 <__udivmoddi4+0xec>
 8000f0e:	deff      	udf	#255	; 0xff
 8000f10:	fab2 f282 	clz	r2, r2
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	f040 8091 	bne.w	800103c <__udivmoddi4+0x218>
 8000f1a:	eba1 000c 	sub.w	r0, r1, ip
 8000f1e:	2101      	movs	r1, #1
 8000f20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f24:	fa1f fe8c 	uxth.w	lr, ip
 8000f28:	fbb0 f3f7 	udiv	r3, r0, r7
 8000f2c:	fb07 0013 	mls	r0, r7, r3, r0
 8000f30:	0c25      	lsrs	r5, r4, #16
 8000f32:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000f36:	fb0e f003 	mul.w	r0, lr, r3
 8000f3a:	42a8      	cmp	r0, r5
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x12c>
 8000f3e:	eb1c 0505 	adds.w	r5, ip, r5
 8000f42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f46:	d202      	bcs.n	8000f4e <__udivmoddi4+0x12a>
 8000f48:	42a8      	cmp	r0, r5
 8000f4a:	f200 80ce 	bhi.w	80010ea <__udivmoddi4+0x2c6>
 8000f4e:	4643      	mov	r3, r8
 8000f50:	1a2d      	subs	r5, r5, r0
 8000f52:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f56:	fb07 5510 	mls	r5, r7, r0, r5
 8000f5a:	fb0e fe00 	mul.w	lr, lr, r0
 8000f5e:	b2a4      	uxth	r4, r4
 8000f60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f64:	45a6      	cmp	lr, r4
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x156>
 8000f68:	eb1c 0404 	adds.w	r4, ip, r4
 8000f6c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f70:	d202      	bcs.n	8000f78 <__udivmoddi4+0x154>
 8000f72:	45a6      	cmp	lr, r4
 8000f74:	f200 80b6 	bhi.w	80010e4 <__udivmoddi4+0x2c0>
 8000f78:	4628      	mov	r0, r5
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f82:	e79e      	b.n	8000ec2 <__udivmoddi4+0x9e>
 8000f84:	f1c1 0720 	rsb	r7, r1, #32
 8000f88:	408b      	lsls	r3, r1
 8000f8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f92:	fa25 fa07 	lsr.w	sl, r5, r7
 8000f96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f9a:	fbba f8f9 	udiv	r8, sl, r9
 8000f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000fa2:	fb09 aa18 	mls	sl, r9, r8, sl
 8000fa6:	408d      	lsls	r5, r1
 8000fa8:	fa1f fe8c 	uxth.w	lr, ip
 8000fac:	431d      	orrs	r5, r3
 8000fae:	fa00 f301 	lsl.w	r3, r0, r1
 8000fb2:	fb08 f00e 	mul.w	r0, r8, lr
 8000fb6:	0c2c      	lsrs	r4, r5, #16
 8000fb8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000fbc:	42a0      	cmp	r0, r4
 8000fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000fc2:	d90b      	bls.n	8000fdc <__udivmoddi4+0x1b8>
 8000fc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fcc:	f080 8088 	bcs.w	80010e0 <__udivmoddi4+0x2bc>
 8000fd0:	42a0      	cmp	r0, r4
 8000fd2:	f240 8085 	bls.w	80010e0 <__udivmoddi4+0x2bc>
 8000fd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fda:	4464      	add	r4, ip
 8000fdc:	1a24      	subs	r4, r4, r0
 8000fde:	fbb4 f0f9 	udiv	r0, r4, r9
 8000fe2:	fb09 4410 	mls	r4, r9, r0, r4
 8000fe6:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fea:	b2ad      	uxth	r5, r5
 8000fec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ff0:	45a6      	cmp	lr, r4
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x1e2>
 8000ff4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ffc:	d26c      	bcs.n	80010d8 <__udivmoddi4+0x2b4>
 8000ffe:	45a6      	cmp	lr, r4
 8001000:	d96a      	bls.n	80010d8 <__udivmoddi4+0x2b4>
 8001002:	3802      	subs	r0, #2
 8001004:	4464      	add	r4, ip
 8001006:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800100a:	fba0 9502 	umull	r9, r5, r0, r2
 800100e:	eba4 040e 	sub.w	r4, r4, lr
 8001012:	42ac      	cmp	r4, r5
 8001014:	46c8      	mov	r8, r9
 8001016:	46ae      	mov	lr, r5
 8001018:	d356      	bcc.n	80010c8 <__udivmoddi4+0x2a4>
 800101a:	d053      	beq.n	80010c4 <__udivmoddi4+0x2a0>
 800101c:	2e00      	cmp	r6, #0
 800101e:	d069      	beq.n	80010f4 <__udivmoddi4+0x2d0>
 8001020:	ebb3 0208 	subs.w	r2, r3, r8
 8001024:	eb64 040e 	sbc.w	r4, r4, lr
 8001028:	fa22 f301 	lsr.w	r3, r2, r1
 800102c:	fa04 f707 	lsl.w	r7, r4, r7
 8001030:	431f      	orrs	r7, r3
 8001032:	40cc      	lsrs	r4, r1
 8001034:	e9c6 7400 	strd	r7, r4, [r6]
 8001038:	2100      	movs	r1, #0
 800103a:	e747      	b.n	8000ecc <__udivmoddi4+0xa8>
 800103c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001040:	f1c2 0120 	rsb	r1, r2, #32
 8001044:	fa25 f301 	lsr.w	r3, r5, r1
 8001048:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800104c:	fa20 f101 	lsr.w	r1, r0, r1
 8001050:	4095      	lsls	r5, r2
 8001052:	430d      	orrs	r5, r1
 8001054:	fbb3 f1f7 	udiv	r1, r3, r7
 8001058:	fb07 3311 	mls	r3, r7, r1, r3
 800105c:	fa1f fe8c 	uxth.w	lr, ip
 8001060:	0c28      	lsrs	r0, r5, #16
 8001062:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001066:	fb01 f30e 	mul.w	r3, r1, lr
 800106a:	4283      	cmp	r3, r0
 800106c:	fa04 f402 	lsl.w	r4, r4, r2
 8001070:	d908      	bls.n	8001084 <__udivmoddi4+0x260>
 8001072:	eb1c 0000 	adds.w	r0, ip, r0
 8001076:	f101 38ff 	add.w	r8, r1, #4294967295
 800107a:	d22f      	bcs.n	80010dc <__udivmoddi4+0x2b8>
 800107c:	4283      	cmp	r3, r0
 800107e:	d92d      	bls.n	80010dc <__udivmoddi4+0x2b8>
 8001080:	3902      	subs	r1, #2
 8001082:	4460      	add	r0, ip
 8001084:	1ac0      	subs	r0, r0, r3
 8001086:	fbb0 f3f7 	udiv	r3, r0, r7
 800108a:	fb07 0013 	mls	r0, r7, r3, r0
 800108e:	b2ad      	uxth	r5, r5
 8001090:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001094:	fb03 f00e 	mul.w	r0, r3, lr
 8001098:	42a8      	cmp	r0, r5
 800109a:	d908      	bls.n	80010ae <__udivmoddi4+0x28a>
 800109c:	eb1c 0505 	adds.w	r5, ip, r5
 80010a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80010a4:	d216      	bcs.n	80010d4 <__udivmoddi4+0x2b0>
 80010a6:	42a8      	cmp	r0, r5
 80010a8:	d914      	bls.n	80010d4 <__udivmoddi4+0x2b0>
 80010aa:	3b02      	subs	r3, #2
 80010ac:	4465      	add	r5, ip
 80010ae:	1a28      	subs	r0, r5, r0
 80010b0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80010b4:	e738      	b.n	8000f28 <__udivmoddi4+0x104>
 80010b6:	4631      	mov	r1, r6
 80010b8:	4630      	mov	r0, r6
 80010ba:	e707      	b.n	8000ecc <__udivmoddi4+0xa8>
 80010bc:	462f      	mov	r7, r5
 80010be:	e6e4      	b.n	8000e8a <__udivmoddi4+0x66>
 80010c0:	4618      	mov	r0, r3
 80010c2:	e6f9      	b.n	8000eb8 <__udivmoddi4+0x94>
 80010c4:	454b      	cmp	r3, r9
 80010c6:	d2a9      	bcs.n	800101c <__udivmoddi4+0x1f8>
 80010c8:	ebb9 0802 	subs.w	r8, r9, r2
 80010cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010d0:	3801      	subs	r0, #1
 80010d2:	e7a3      	b.n	800101c <__udivmoddi4+0x1f8>
 80010d4:	4643      	mov	r3, r8
 80010d6:	e7ea      	b.n	80010ae <__udivmoddi4+0x28a>
 80010d8:	4628      	mov	r0, r5
 80010da:	e794      	b.n	8001006 <__udivmoddi4+0x1e2>
 80010dc:	4641      	mov	r1, r8
 80010de:	e7d1      	b.n	8001084 <__udivmoddi4+0x260>
 80010e0:	46d0      	mov	r8, sl
 80010e2:	e77b      	b.n	8000fdc <__udivmoddi4+0x1b8>
 80010e4:	4464      	add	r4, ip
 80010e6:	3802      	subs	r0, #2
 80010e8:	e747      	b.n	8000f7a <__udivmoddi4+0x156>
 80010ea:	3b02      	subs	r3, #2
 80010ec:	4465      	add	r5, ip
 80010ee:	e72f      	b.n	8000f50 <__udivmoddi4+0x12c>
 80010f0:	4608      	mov	r0, r1
 80010f2:	e706      	b.n	8000f02 <__udivmoddi4+0xde>
 80010f4:	4631      	mov	r1, r6
 80010f6:	e6e9      	b.n	8000ecc <__udivmoddi4+0xa8>

080010f8 <__aeabi_idiv0>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <Delay_Init+0x38>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10e      	bne.n	800112a <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <Delay_Init+0x38>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <Delay_Init+0x38>)
 8001112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001116:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <Delay_Init+0x3c>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <Delay_Init+0x3c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <Delay_Init+0x3c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6013      	str	r3, [r2, #0]
    }
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000edf0 	.word	0xe000edf0
 8001138:	e0001000 	.word	0xe0001000

0800113c <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <delayMicroseconds+0x30>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001150:	bf00      	nop
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <delayMicroseconds+0x30>)
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f8      	bhi.n	8001152 <delayMicroseconds+0x16>
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	e0001000 	.word	0xe0001000

08001170 <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <getRightEncoderCounts+0x18>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	b29b      	uxth	r3, r3
 800117a:	425b      	negs	r3, r3
 800117c:	b29b      	uxth	r3, r3
 800117e:	b21b      	sxth	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	40000400 	.word	0x40000400

0800118c <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <getLeftEncoderCounts+0x18>)
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	b29b      	uxth	r3, r3
 8001196:	425b      	negs	r3, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	b21b      	sxth	r3, r3
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40010400 	.word	0x40010400

080011a8 <resetEncoders>:

void resetEncoders() {
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <resetEncoders+0x18>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = (int16_t) 0;
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <resetEncoders+0x1c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40000400 	.word	0x40000400
 80011c4:	40010400 	.word	0x40010400

080011c8 <readIR>:
uint8_t complete = 0;

uint32_t usDelay = 100;

uint16_t readIR(IR ir)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue;

	switch(ir)
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d869      	bhi.n	80012ac <readIR+0xe4>
 80011d8:	a201      	add	r2, pc, #4	; (adr r2, 80011e0 <readIR+0x18>)
 80011da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011de:	bf00      	nop
 80011e0:	080011f1 	.word	0x080011f1
 80011e4:	0800121f 	.word	0x0800121f
 80011e8:	0800124d 	.word	0x0800124d
 80011ec:	0800127b 	.word	0x0800127b
	    {
	        case IR_FORWARD_LEFT:
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	4830      	ldr	r0, [pc, #192]	; (80012b8 <readIR+0xf0>)
 80011f6:	f003 f93e 	bl	8004476 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <readIR+0xf4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff9c 	bl	800113c <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f85c 	bl	80012c4 <analogRead>
 800120c:	4603      	mov	r3, r0
 800120e:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	4828      	ldr	r0, [pc, #160]	; (80012b8 <readIR+0xf0>)
 8001216:	f003 f92e 	bl	8004476 <HAL_GPIO_WritePin>
	        	return readValue;
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	e047      	b.n	80012ae <readIR+0xe6>
	            break;
	        case IR_LEFT:
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	2110      	movs	r1, #16
 8001222:	4825      	ldr	r0, [pc, #148]	; (80012b8 <readIR+0xf0>)
 8001224:	f003 f927 	bl	8004476 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <readIR+0xf4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff85 	bl	800113c <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f845 	bl	80012c4 <analogRead>
 800123a:	4603      	mov	r3, r0
 800123c:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2110      	movs	r1, #16
 8001242:	481d      	ldr	r0, [pc, #116]	; (80012b8 <readIR+0xf0>)
 8001244:	f003 f917 	bl	8004476 <HAL_GPIO_WritePin>
	        	return readValue;
 8001248:	89fb      	ldrh	r3, [r7, #14]
 800124a:	e030      	b.n	80012ae <readIR+0xe6>
	            break;
	        case IR_RIGHT:
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2104      	movs	r1, #4
 8001250:	4819      	ldr	r0, [pc, #100]	; (80012b8 <readIR+0xf0>)
 8001252:	f003 f910 	bl	8004476 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <readIR+0xf4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff6e 	bl	800113c <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f82e 	bl	80012c4 <analogRead>
 8001268:	4603      	mov	r3, r0
 800126a:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2104      	movs	r1, #4
 8001270:	4811      	ldr	r0, [pc, #68]	; (80012b8 <readIR+0xf0>)
 8001272:	f003 f900 	bl	8004476 <HAL_GPIO_WritePin>
	        	return readValue;
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	e019      	b.n	80012ae <readIR+0xe6>
	            break;
	        case IR_FORWARD_RIGHT:
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001280:	480f      	ldr	r0, [pc, #60]	; (80012c0 <readIR+0xf8>)
 8001282:	f003 f8f8 	bl	8004476 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <readIR+0xf4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff56 	bl	800113c <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f816 	bl	80012c4 <analogRead>
 8001298:	4603      	mov	r3, r0
 800129a:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <readIR+0xf8>)
 80012a4:	f003 f8e7 	bl	8004476 <HAL_GPIO_WritePin>
	        	return readValue;
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	e000      	b.n	80012ae <readIR+0xe6>
	            break;
	        default:
	            return 0;
 80012ac:	2300      	movs	r3, #0
	    }
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020000 	.word	0x40020000
 80012bc:	20000000 	.word	0x20000000
 80012c0:	40020400 	.word	0x40020400

080012c4 <analogRead>:
{
	return readIR(IR_FORWARD_RIGHT);
}

uint16_t analogRead(IR ir)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 80012dc:	f000 fc00 	bl	8001ae0 <Get_HADC1_Ptr>
 80012e0:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d817      	bhi.n	8001318 <analogRead+0x54>
 80012e8:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <analogRead+0x2c>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001301 	.word	0x08001301
 80012f4:	08001307 	.word	0x08001307
 80012f8:	0800130d 	.word	0x0800130d
 80012fc:	08001313 	.word	0x08001313
    {
        case IR_FORWARD_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 8001300:	2306      	movs	r3, #6
 8001302:	60fb      	str	r3, [r7, #12]
            break;
 8001304:	e00a      	b.n	800131c <analogRead+0x58>
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_5;
 8001306:	2305      	movs	r3, #5
 8001308:	60fb      	str	r3, [r7, #12]
            break;
 800130a:	e007      	b.n	800131c <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 800130c:	230b      	movs	r3, #11
 800130e:	60fb      	str	r3, [r7, #12]
            break;
 8001310:	e004      	b.n	800131c <analogRead+0x58>
        case IR_FORWARD_RIGHT:
            sConfig.Channel = ADC_CHANNEL_10;
 8001312:	230a      	movs	r3, #10
 8001314:	60fb      	str	r3, [r7, #12]
            break;
 8001316:	e001      	b.n	800131c <analogRead+0x58>
        default:
            return 0;
 8001318:	2300      	movs	r3, #0
 800131a:	e032      	b.n	8001382 <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 800131c:	2301      	movs	r3, #1
 800131e:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4619      	mov	r1, r3
 800132a:	69f8      	ldr	r0, [r7, #28]
 800132c:	f001 ff5c 	bl	80031e8 <HAL_ADC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <analogRead+0x76>
    {
        return 0;
 8001336:	2300      	movs	r3, #0
 8001338:	e023      	b.n	8001382 <analogRead+0xbe>
    }

    complete = 0;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <analogRead+0xc8>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	4913      	ldr	r1, [pc, #76]	; (8001390 <analogRead+0xcc>)
 8001344:	69f8      	ldr	r0, [r7, #28]
 8001346:	f001 fe0d 	bl	8002f64 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 800134a:	e000      	b.n	800134e <analogRead+0x8a>
    {
        continue;
 800134c:	bf00      	nop
    while (complete == 0)
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <analogRead+0xc8>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0fa      	beq.n	800134c <analogRead+0x88>
    }

    uint32_t sum = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 800135e:	e00a      	b.n	8001376 <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 8001360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <analogRead+0xcc>)
 8001364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001368:	461a      	mov	r2, r3
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	4413      	add	r3, r2
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
        ++measurement;
 8001370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001372:	3301      	adds	r3, #1
 8001374:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 8001376:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001378:	2b7f      	cmp	r3, #127	; 0x7f
 800137a:	d9f1      	bls.n	8001360 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	09db      	lsrs	r3, r3, #7
 8001380:	b29b      	uxth	r3, r3
}
 8001382:	4618      	mov	r0, r3
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000012c 	.word	0x2000012c
 8001390:	2000002c 	.word	0x2000002c

08001394 <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f001 febf 	bl	8003120 <HAL_ADC_Stop_DMA>
    complete = 1;
 80013a2:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000012c 	.word	0x2000012c

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b8:	f001 fd22 	bl	8002e00 <HAL_Init>

  /* USER CODE BEGIN Init */

  Delay_Init();
 80013bc:	f7ff fe9e 	bl	80010fc <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c0:	f000 f8a8 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c4:	f000 faa8 	bl	8001918 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c8:	f000 fa86 	bl	80018d8 <MX_DMA_Init>
  MX_ADC1_Init();
 80013cc:	f000 f8de 	bl	800158c <MX_ADC1_Init>
  MX_TIM1_Init();
 80013d0:	f000 f92e 	bl	8001630 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013d4:	f000 f9d4 	bl	8001780 <MX_TIM3_Init>
  MX_TIM8_Init();
 80013d8:	f000 fa26 	bl	8001828 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013dc:	213c      	movs	r1, #60	; 0x3c
 80013de:	483e      	ldr	r0, [pc, #248]	; (80014d8 <main+0x124>)
 80013e0:	f003 fe20 	bl	8005024 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80013e4:	213c      	movs	r1, #60	; 0x3c
 80013e6:	483d      	ldr	r0, [pc, #244]	; (80014dc <main+0x128>)
 80013e8:	f003 fe1c 	bl	8005024 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013ec:	2100      	movs	r1, #0
 80013ee:	483c      	ldr	r0, [pc, #240]	; (80014e0 <main+0x12c>)
 80013f0:	f003 fcaa 	bl	8004d48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013f4:	2104      	movs	r1, #4
 80013f6:	483a      	ldr	r0, [pc, #232]	; (80014e0 <main+0x12c>)
 80013f8:	f003 fca6 	bl	8004d48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013fc:	2108      	movs	r1, #8
 80013fe:	4838      	ldr	r0, [pc, #224]	; (80014e0 <main+0x12c>)
 8001400:	f003 fca2 	bl	8004d48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001404:	210c      	movs	r1, #12
 8001406:	4836      	ldr	r0, [pc, #216]	; (80014e0 <main+0x12c>)
 8001408:	f003 fc9e 	bl	8004d48 <HAL_TIM_PWM_Start>

  HAL_Init();
 800140c:	f001 fcf8 	bl	8002e00 <HAL_Init>

  HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001416:	4833      	ldr	r0, [pc, #204]	; (80014e4 <main+0x130>)
 8001418:	f003 f82d 	bl	8004476 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fed3 	bl	80011c8 <readIR>
 8001422:	4603      	mov	r3, r0
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <main+0x134>)
 8001428:	801a      	strh	r2, [r3, #0]
	  leftIRvalue = readIR(IR_LEFT);
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff fecc 	bl	80011c8 <readIR>
 8001430:	4603      	mov	r3, r0
 8001432:	b21a      	sxth	r2, r3
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <main+0x138>)
 8001436:	801a      	strh	r2, [r3, #0]
	  rightIRvalue = readIR(IR_RIGHT);
 8001438:	2002      	movs	r0, #2
 800143a:	f7ff fec5 	bl	80011c8 <readIR>
 800143e:	4603      	mov	r3, r0
 8001440:	b21a      	sxth	r2, r3
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <main+0x13c>)
 8001444:	801a      	strh	r2, [r3, #0]
	  forwardRightIRvalue = readIR(IR_FORWARD_RIGHT);
 8001446:	2003      	movs	r0, #3
 8001448:	f7ff febe 	bl	80011c8 <readIR>
 800144c:	4603      	mov	r3, r0
 800144e:	b21a      	sxth	r2, r3
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <main+0x140>)
 8001452:	801a      	strh	r2, [r3, #0]

	  left_counts = getLeftEncoderCounts();
 8001454:	f7ff fe9a 	bl	800118c <getLeftEncoderCounts>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <main+0x144>)
 800145e:	801a      	strh	r2, [r3, #0]
	  right_counts = getRightEncoderCounts();
 8001460:	f7ff fe86 	bl	8001170 <getRightEncoderCounts>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <main+0x148>)
 800146a:	801a      	strh	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(LeftButton_GPIO_Port, LeftButton_Pin))
 800146c:	2101      	movs	r1, #1
 800146e:	4824      	ldr	r0, [pc, #144]	; (8001500 <main+0x14c>)
 8001470:	f002 ffea 	bl	8004448 <HAL_GPIO_ReadPin>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01b      	beq.n	80014b2 <main+0xfe>
	  {
		  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff fea4 	bl	80011c8 <readIR>
 8001480:	4603      	mov	r3, r0
 8001482:	b21c      	sxth	r4, r3
 8001484:	2003      	movs	r0, #3
 8001486:	f7ff fe9f 	bl	80011c8 <readIR>
 800148a:	4603      	mov	r3, r0
 800148c:	b21d      	sxth	r5, r3
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff fe9a 	bl	80011c8 <readIR>
 8001494:	4603      	mov	r3, r0
 8001496:	b21e      	sxth	r6, r3
 8001498:	2002      	movs	r0, #2
 800149a:	f7ff fe95 	bl	80011c8 <readIR>
 800149e:	4603      	mov	r3, r0
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4632      	mov	r2, r6
 80014a4:	4629      	mov	r1, r5
 80014a6:	4620      	mov	r0, r4
 80014a8:	f000 fc02 	bl	8001cb0 <setIRGoals>
		  irOffset_Set = 1;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <main+0x150>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	801a      	strh	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(RightButton_GPIO_Port, RightButton_Pin))
 80014b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b6:	480b      	ldr	r0, [pc, #44]	; (80014e4 <main+0x130>)
 80014b8:	f002 ffc6 	bl	8004448 <HAL_GPIO_ReadPin>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0ac      	beq.n	800141c <main+0x68>
	  {
//		  explore();

		  setLeftVelocity(0.4);
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <main+0x154>)
 80014c4:	f000 fbc4 	bl	8001c50 <setLeftVelocity>
		  setRightVelocity(0.8);
 80014c8:	4810      	ldr	r0, [pc, #64]	; (800150c <main+0x158>)
 80014ca:	f000 fbd1 	bl	8001c70 <setRightVelocity>
//		  move(4);
		  start_pressed = 1;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <main+0x15c>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	801a      	strh	r2, [r3, #0]
	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 80014d4:	e7a2      	b.n	800141c <main+0x68>
 80014d6:	bf00      	nop
 80014d8:	20000220 	.word	0x20000220
 80014dc:	20000268 	.word	0x20000268
 80014e0:	200001d8 	.word	0x200001d8
 80014e4:	40020800 	.word	0x40020800
 80014e8:	200002b6 	.word	0x200002b6
 80014ec:	200002b8 	.word	0x200002b8
 80014f0:	200002ba 	.word	0x200002ba
 80014f4:	200002bc 	.word	0x200002bc
 80014f8:	200002b2 	.word	0x200002b2
 80014fc:	200002b4 	.word	0x200002b4
 8001500:	40020400 	.word	0x40020400
 8001504:	200002be 	.word	0x200002be
 8001508:	3ecccccd 	.word	0x3ecccccd
 800150c:	3f4ccccd 	.word	0x3f4ccccd
 8001510:	200002b0 	.word	0x200002b0

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b092      	sub	sp, #72	; 0x48
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	2230      	movs	r2, #48	; 0x30
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f004 fa28 	bl	8005978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153a:	2301      	movs	r3, #1
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153e:	2310      	movs	r3, #16
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001542:	2300      	movs	r3, #0
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	4618      	mov	r0, r3
 800154c:	f002 ffac 	bl	80044a8 <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001556:	f000 facd 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f003 f9e6 	bl	8004944 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800157e:	f000 fab9 	bl	8001af4 <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3748      	adds	r7, #72	; 0x48
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001592:	463b      	mov	r3, r7
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <MX_ADC1_Init+0x98>)
 80015a0:	4a21      	ldr	r2, [pc, #132]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_ADC1_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <MX_ADC1_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MX_ADC1_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MX_ADC1_Init+0x98>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_ADC1_Init+0x98>)
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_ADC1_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_ADC1_Init+0x98>)
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <MX_ADC1_Init+0xa0>)
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_ADC1_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <MX_ADC1_Init+0x98>)
 80015d8:	2201      	movs	r2, #1
 80015da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_ADC1_Init+0x98>)
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_ADC1_Init+0x98>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ea:	480e      	ldr	r0, [pc, #56]	; (8001624 <MX_ADC1_Init+0x98>)
 80015ec:	f001 fc76 	bl	8002edc <HAL_ADC_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015f6:	f000 fa7d 	bl	8001af4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015fa:	2305      	movs	r3, #5
 80015fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001606:	463b      	mov	r3, r7
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_ADC1_Init+0x98>)
 800160c:	f001 fdec 	bl	80031e8 <HAL_ADC_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001616:	f000 fa6d 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000130 	.word	0x20000130
 8001628:	40012000 	.word	0x40012000
 800162c:	0f000001 	.word	0x0f000001

08001630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b092      	sub	sp, #72	; 0x48
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2220      	movs	r2, #32
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f004 f98c 	bl	8005978 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001660:	4b45      	ldr	r3, [pc, #276]	; (8001778 <MX_TIM1_Init+0x148>)
 8001662:	4a46      	ldr	r2, [pc, #280]	; (800177c <MX_TIM1_Init+0x14c>)
 8001664:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001666:	4b44      	ldr	r3, [pc, #272]	; (8001778 <MX_TIM1_Init+0x148>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <MX_TIM1_Init+0x148>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <MX_TIM1_Init+0x148>)
 8001674:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001678:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <MX_TIM1_Init+0x148>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001680:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <MX_TIM1_Init+0x148>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <MX_TIM1_Init+0x148>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800168c:	483a      	ldr	r0, [pc, #232]	; (8001778 <MX_TIM1_Init+0x148>)
 800168e:	f003 fb0b 	bl	8004ca8 <HAL_TIM_PWM_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001698:	f000 fa2c 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016a8:	4619      	mov	r1, r3
 80016aa:	4833      	ldr	r0, [pc, #204]	; (8001778 <MX_TIM1_Init+0x148>)
 80016ac:	f004 f874 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80016b6:	f000 fa1d 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ba:	2360      	movs	r3, #96	; 0x60
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c6:	2300      	movs	r3, #0
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	4826      	ldr	r0, [pc, #152]	; (8001778 <MX_TIM1_Init+0x148>)
 80016e0:	f003 fd2e 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80016ea:	f000 fa03 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	2204      	movs	r2, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4820      	ldr	r0, [pc, #128]	; (8001778 <MX_TIM1_Init+0x148>)
 80016f8:	f003 fd22 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001702:	f000 f9f7 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	2208      	movs	r2, #8
 800170c:	4619      	mov	r1, r3
 800170e:	481a      	ldr	r0, [pc, #104]	; (8001778 <MX_TIM1_Init+0x148>)
 8001710:	f003 fd16 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800171a:	f000 f9eb 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	220c      	movs	r2, #12
 8001724:	4619      	mov	r1, r3
 8001726:	4814      	ldr	r0, [pc, #80]	; (8001778 <MX_TIM1_Init+0x148>)
 8001728:	f003 fd0a 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001732:	f000 f9df 	bl	8001af4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800174a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	4619      	mov	r1, r3
 8001758:	4807      	ldr	r0, [pc, #28]	; (8001778 <MX_TIM1_Init+0x148>)
 800175a:	f004 f897 	bl	800588c <HAL_TIMEx_ConfigBreakDeadTime>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001764:	f000 f9c6 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <MX_TIM1_Init+0x148>)
 800176a:	f001 fa51 	bl	8002c10 <HAL_TIM_MspPostInit>

}
 800176e:	bf00      	nop
 8001770:	3748      	adds	r7, #72	; 0x48
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200001d8 	.word	0x200001d8
 800177c:	40010000 	.word	0x40010000

08001780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	; 0x30
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	2224      	movs	r2, #36	; 0x24
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f004 f8f2 	bl	8005978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <MX_TIM3_Init+0xa0>)
 800179e:	4a21      	ldr	r2, [pc, #132]	; (8001824 <MX_TIM3_Init+0xa4>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <MX_TIM3_Init+0xa0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <MX_TIM3_Init+0xa0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_TIM3_Init+0xa0>)
 80017b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_TIM3_Init+0xa0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_TIM3_Init+0xa0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017c2:	2303      	movs	r3, #3
 80017c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ca:	2301      	movs	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017da:	2301      	movs	r3, #1
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4619      	mov	r1, r3
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <MX_TIM3_Init+0xa0>)
 80017ee:	f003 fb73 	bl	8004ed8 <HAL_TIM_Encoder_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017f8:	f000 f97c 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_TIM3_Init+0xa0>)
 800180a:	f003 ffc5 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001814:	f000 f96e 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	3730      	adds	r7, #48	; 0x30
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000220 	.word	0x20000220
 8001824:	40000400 	.word	0x40000400

08001828 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	2224      	movs	r2, #36	; 0x24
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f004 f89e 	bl	8005978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <MX_TIM8_Init+0xa8>)
 8001846:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <MX_TIM8_Init+0xac>)
 8001848:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <MX_TIM8_Init+0xa8>)
 800184c:	2200      	movs	r2, #0
 800184e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <MX_TIM8_Init+0xa8>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_TIM8_Init+0xa8>)
 8001858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800185c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <MX_TIM8_Init+0xa8>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_TIM8_Init+0xa8>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_TIM8_Init+0xa8>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001870:	2303      	movs	r3, #3
 8001872:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001878:	2301      	movs	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001888:	2301      	movs	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	4619      	mov	r1, r3
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <MX_TIM8_Init+0xa8>)
 800189c:	f003 fb1c 	bl	8004ed8 <HAL_TIM_Encoder_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80018a6:	f000 f925 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_TIM8_Init+0xa8>)
 80018b8:	f003 ff6e 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80018c2:	f000 f917 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3730      	adds	r7, #48	; 0x30
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000268 	.word	0x20000268
 80018d4:	40010400 	.word	0x40010400

080018d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_DMA_Init+0x3c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <MX_DMA_Init+0x3c>)
 80018e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_DMA_Init+0x3c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2038      	movs	r0, #56	; 0x38
 8001900:	f001 fff1 	bl	80038e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001904:	2038      	movs	r0, #56	; 0x38
 8001906:	f002 f80a 	bl	800391e <HAL_NVIC_EnableIRQ>

}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b66      	ldr	r3, [pc, #408]	; (8001acc <MX_GPIO_Init+0x1b4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a65      	ldr	r2, [pc, #404]	; (8001acc <MX_GPIO_Init+0x1b4>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b63      	ldr	r3, [pc, #396]	; (8001acc <MX_GPIO_Init+0x1b4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b5f      	ldr	r3, [pc, #380]	; (8001acc <MX_GPIO_Init+0x1b4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a5e      	ldr	r2, [pc, #376]	; (8001acc <MX_GPIO_Init+0x1b4>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b5c      	ldr	r3, [pc, #368]	; (8001acc <MX_GPIO_Init+0x1b4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	4b58      	ldr	r3, [pc, #352]	; (8001acc <MX_GPIO_Init+0x1b4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a57      	ldr	r2, [pc, #348]	; (8001acc <MX_GPIO_Init+0x1b4>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b55      	ldr	r3, [pc, #340]	; (8001acc <MX_GPIO_Init+0x1b4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b51      	ldr	r3, [pc, #324]	; (8001acc <MX_GPIO_Init+0x1b4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a50      	ldr	r2, [pc, #320]	; (8001acc <MX_GPIO_Init+0x1b4>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b4e      	ldr	r3, [pc, #312]	; (8001acc <MX_GPIO_Init+0x1b4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_LED_Pin|Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80019a4:	484a      	ldr	r0, [pc, #296]	; (8001ad0 <MX_GPIO_Init+0x1b8>)
 80019a6:	f002 fd66 	bl	8004476 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2194      	movs	r1, #148	; 0x94
 80019ae:	4849      	ldr	r0, [pc, #292]	; (8001ad4 <MX_GPIO_Init+0x1bc>)
 80019b0:	f002 fd61 	bl	8004476 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ba:	4847      	ldr	r0, [pc, #284]	; (8001ad8 <MX_GPIO_Init+0x1c0>)
 80019bc:	f002 fd5b 	bl	8004476 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_LED_Pin Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|Y_LED_Pin|G_LED_Pin;
 80019c0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	483d      	ldr	r0, [pc, #244]	; (8001ad0 <MX_GPIO_Init+0x1b8>)
 80019da:	f002 fb97 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 80019de:	2394      	movs	r3, #148	; 0x94
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4837      	ldr	r0, [pc, #220]	; (8001ad4 <MX_GPIO_Init+0x1bc>)
 80019f6:	f002 fb89 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80019fa:	2308      	movs	r3, #8
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	482f      	ldr	r0, [pc, #188]	; (8001ad4 <MX_GPIO_Init+0x1bc>)
 8001a16:	f002 fb79 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftButton_Pin Switch3_Pin */
  GPIO_InitStruct.Pin = LeftButton_Pin|Switch3_Pin;
 8001a1a:	2309      	movs	r3, #9
 8001a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	482a      	ldr	r0, [pc, #168]	; (8001ad8 <MX_GPIO_Init+0x1c0>)
 8001a2e:	f002 fb6d 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a44:	2307      	movs	r3, #7
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4822      	ldr	r0, [pc, #136]	; (8001ad8 <MX_GPIO_Init+0x1c0>)
 8001a50:	f002 fb5c 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : RightButton_Pin Switch1_Pin */
  GPIO_InitStruct.Pin = RightButton_Pin|Switch1_Pin;
 8001a54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4819      	ldr	r0, [pc, #100]	; (8001ad0 <MX_GPIO_Init+0x1b8>)
 8001a6a:	f002 fb4f 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4816      	ldr	r0, [pc, #88]	; (8001adc <MX_GPIO_Init+0x1c4>)
 8001a82:	f002 fb43 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001a86:	23c0      	movs	r3, #192	; 0xc0
 8001a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8a:	2312      	movs	r3, #18
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a96:	2304      	movs	r3, #4
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <MX_GPIO_Init+0x1c0>)
 8001aa2:	f002 fb33 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8001aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_GPIO_Init+0x1c0>)
 8001ac0:	f002 fb24 	bl	800410c <HAL_GPIO_Init>

}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020c00 	.word	0x40020c00

08001ae0 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */

ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
	return &hadc1;
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <Get_HADC1_Ptr+0x10>)
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000130 	.word	0x20000130

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	e7fe      	b.n	8001afc <Error_Handler+0x8>
	...

08001b00 <limitPWM>:
#include "pid.h"

extern float velocity_left;
extern float velocity_right;

float limitPWM(float pwm) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7fe fe9f 	bl	800084c <__aeabi_f2d>
 8001b0e:	a30e      	add	r3, pc, #56	; (adr r3, 8001b48 <limitPWM+0x48>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe ff70 	bl	80009f8 <__aeabi_dcmpgt>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <limitPWM+0x22>
		return PWM_MAX;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <limitPWM+0x58>)
 8001b20:	e00d      	b.n	8001b3e <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7fe fe92 	bl	800084c <__aeabi_f2d>
 8001b28:	a309      	add	r3, pc, #36	; (adr r3, 8001b50 <limitPWM+0x50>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe ff45 	bl	80009bc <__aeabi_dcmplt>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <limitPWM+0x3c>
		return -PWM_MAX;
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <limitPWM+0x5c>)
 8001b3a:	e000      	b.n	8001b3e <limitPWM+0x3e>
	else
		return pwm;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	9999999a 	.word	0x9999999a
 8001b4c:	3fe99999 	.word	0x3fe99999
 8001b50:	9999999a 	.word	0x9999999a
 8001b54:	bfe99999 	.word	0xbfe99999
 8001b58:	3f4ccccd 	.word	0x3f4ccccd
 8001b5c:	bf4ccccd 	.word	0xbf4ccccd

08001b60 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8001b68:	f04f 0100 	mov.w	r1, #0
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff f90d 	bl	8000d8c <__aeabi_fcmpge>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d012      	beq.n	8001b9e <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <setMotorLPWM+0x70>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffbe 	bl	8001b00 <limitPWM>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4913      	ldr	r1, [pc, #76]	; (8001bd4 <setMotorLPWM+0x74>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fc47 	bl	800041c <__aeabi_fmul>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4c0f      	ldr	r4, [pc, #60]	; (8001bd0 <setMotorLPWM+0x70>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f90e 	bl	8000db4 <__aeabi_f2uiz>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	63a3      	str	r3, [r4, #56]	; 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 8001b9c:	e013      	b.n	8001bc6 <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <setMotorLPWM+0x70>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ffab 	bl	8001b00 <limitPWM>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4909      	ldr	r1, [pc, #36]	; (8001bd4 <setMotorLPWM+0x74>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fc34 	bl	800041c <__aeabi_fmul>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bba:	4c05      	ldr	r4, [pc, #20]	; (8001bd0 <setMotorLPWM+0x70>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f8f9 	bl	8000db4 <__aeabi_f2uiz>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	4547f000 	.word	0x4547f000

08001bd8 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff f8d1 	bl	8000d8c <__aeabi_fcmpge>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d012      	beq.n	8001c16 <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <setMotorRPWM+0x70>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ff82 	bl	8001b00 <limitPWM>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4913      	ldr	r1, [pc, #76]	; (8001c4c <setMotorRPWM+0x74>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc0b 	bl	800041c <__aeabi_fmul>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4c0f      	ldr	r4, [pc, #60]	; (8001c48 <setMotorRPWM+0x70>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f8d2 	bl	8000db4 <__aeabi_f2uiz>
 8001c10:	4603      	mov	r3, r0
 8001c12:	63e3      	str	r3, [r4, #60]	; 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8001c14:	e013      	b.n	8001c3e <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <setMotorRPWM+0x70>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff6f 	bl	8001b00 <limitPWM>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4909      	ldr	r1, [pc, #36]	; (8001c4c <setMotorRPWM+0x74>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fbf8 	bl	800041c <__aeabi_fmul>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c32:	4c05      	ldr	r4, [pc, #20]	; (8001c48 <setMotorRPWM+0x70>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f8bd 	bl	8000db4 <__aeabi_f2uiz>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40010000 	.word	0x40010000
 8001c4c:	4547f000 	.word	0x4547f000

08001c50 <setLeftVelocity>:
void resetMotors() {
	setMotorLPWM(0);
	setMotorRPWM(0);
}

void setLeftVelocity(float v) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

	velocity_left = v;
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <setLeftVelocity+0x1c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
	setState(ACCELERATING);
 8001c5e:	2004      	movs	r0, #4
 8001c60:	f000 f816 	bl	8001c90 <setState>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200002c8 	.word	0x200002c8

08001c70 <setRightVelocity>:
void setRightVelocity(float v) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

	velocity_right = v;
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <setRightVelocity+0x1c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
	setState(ACCELERATING);
 8001c7e:	2004      	movs	r0, #4
 8001c80:	f000 f806 	bl	8001c90 <setState>

}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200002cc 	.word	0x200002cc

08001c90 <setState>:
float right_PWM_value = 0;
int goal_reached_timer = 0;

void setPIDGoalD(int16_t distance) { goal_distance = distance; }
void setPIDGoalA(int16_t angle) { goal_angle = angle; }
void setState(STATE curr_state) { state = curr_state; }
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <setState+0x1c>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	7013      	strb	r3, [r2, #0]
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200003b4 	.word	0x200003b4

08001cb0 <setIRGoals>:

void setIRGoals(int16_t frontLeftGoal, int16_t frontRightGoal, int16_t leftGoal, int16_t rightGoal) {
 8001cb0:	b490      	push	{r4, r7}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	4608      	mov	r0, r1
 8001cba:	4611      	mov	r1, r2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	80fb      	strh	r3, [r7, #6]
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80bb      	strh	r3, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	807b      	strh	r3, [r7, #2]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = leftGoal - rightGoal;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	883b      	ldrh	r3, [r7, #0]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <setIRGoals+0x50>)
 8001cda:	801a      	strh	r2, [r3, #0]
	goal_forward_left = frontLeftGoal;
 8001cdc:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <setIRGoals+0x54>)
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	8013      	strh	r3, [r2, #0]
	goal_forward_right = frontRightGoal;
 8001ce2:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <setIRGoals+0x58>)
 8001ce4:	88bb      	ldrh	r3, [r7, #4]
 8001ce6:	8013      	strh	r3, [r2, #0]
	goal_left = leftGoal;
 8001ce8:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <setIRGoals+0x5c>)
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	8013      	strh	r3, [r2, #0]
	goal_right = rightGoal;
 8001cee:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <setIRGoals+0x60>)
 8001cf0:	883b      	ldrh	r3, [r7, #0]
 8001cf2:	8013      	strh	r3, [r2, #0]

}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc90      	pop	{r4, r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	200002d8 	.word	0x200002d8
 8001d04:	200002c0 	.word	0x200002c0
 8001d08:	200002c2 	.word	0x200002c2
 8001d0c:	200002c4 	.word	0x200002c4
 8001d10:	200002c6 	.word	0x200002c6
 8001d14:	00000000 	.word	0x00000000

08001d18 <accelerateLeft>:

	setState(REST);

}

void accelerateLeft() {
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

	float derivative = left_error - old_left_error; // ticks per ms
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <accelerateLeft+0xe0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <accelerateLeft+0xe4>)
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fec3 	bl	8000ab4 <__aeabi_fsub>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	607b      	str	r3, [r7, #4]

	test1 = derivative;
 8001d32:	4a33      	ldr	r2, [pc, #204]	; (8001e00 <accelerateLeft+0xe8>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6013      	str	r3, [r2, #0]
	if (derivative < velocity_left * 34.0)
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7fe fd87 	bl	800084c <__aeabi_f2d>
 8001d3e:	4604      	mov	r4, r0
 8001d40:	460d      	mov	r5, r1
 8001d42:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <accelerateLeft+0xec>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fd80 	bl	800084c <__aeabi_f2d>
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <accelerateLeft+0xf0>)
 8001d52:	f7fe fa39 	bl	80001c8 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	f7fe fe2d 	bl	80009bc <__aeabi_dcmplt>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d012      	beq.n	8001d8e <accelerateLeft+0x76>
		left_PWM_value += xaccelerationTEST;
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <accelerateLeft+0xf4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fd6d 	bl	800084c <__aeabi_f2d>
 8001d72:	a31f      	add	r3, pc, #124	; (adr r3, 8001df0 <accelerateLeft+0xd8>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fc0a 	bl	8000590 <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f7fe fe42 	bl	8000a0c <__aeabi_d2f>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a20      	ldr	r2, [pc, #128]	; (8001e0c <accelerateLeft+0xf4>)
 8001d8c:	6013      	str	r3, [r2, #0]

	if (derivative > velocity_left * 34.0)
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fd5c 	bl	800084c <__aeabi_f2d>
 8001d94:	4604      	mov	r4, r0
 8001d96:	460d      	mov	r5, r1
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <accelerateLeft+0xec>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fd55 	bl	800084c <__aeabi_f2d>
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <accelerateLeft+0xf0>)
 8001da8:	f7fe fa0e 	bl	80001c8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4620      	mov	r0, r4
 8001db2:	4629      	mov	r1, r5
 8001db4:	f7fe fe20 	bl	80009f8 <__aeabi_dcmpgt>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d100      	bne.n	8001dc0 <accelerateLeft+0xa8>
		left_PWM_value -= xaccelerationTEST;

}
 8001dbe:	e012      	b.n	8001de6 <accelerateLeft+0xce>
		left_PWM_value -= xaccelerationTEST;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <accelerateLeft+0xf4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fd41 	bl	800084c <__aeabi_f2d>
 8001dca:	a309      	add	r3, pc, #36	; (adr r3, 8001df0 <accelerateLeft+0xd8>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fbdc 	bl	800058c <__aeabi_dsub>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe fe16 	bl	8000a0c <__aeabi_d2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <accelerateLeft+0xf4>)
 8001de4:	6013      	str	r3, [r2, #0]
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bdb0      	pop	{r4, r5, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	47ae147b 	.word	0x47ae147b
 8001df4:	3f747ae1 	.word	0x3f747ae1
 8001df8:	20000348 	.word	0x20000348
 8001dfc:	2000034c 	.word	0x2000034c
 8001e00:	200003ac 	.word	0x200003ac
 8001e04:	200002c8 	.word	0x200002c8
 8001e08:	40410000 	.word	0x40410000
 8001e0c:	200003b8 	.word	0x200003b8

08001e10 <accelerateRight>:

void accelerateRight() {
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

	float derivative = right_error - old_right_error;
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <accelerateRight+0xe0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a36      	ldr	r2, [pc, #216]	; (8001ef4 <accelerateRight+0xe4>)
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fe47 	bl	8000ab4 <__aeabi_fsub>
 8001e26:	4603      	mov	r3, r0
 8001e28:	607b      	str	r3, [r7, #4]

	test2 = derivative;
 8001e2a:	4a33      	ldr	r2, [pc, #204]	; (8001ef8 <accelerateRight+0xe8>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6013      	str	r3, [r2, #0]
	if (derivative < velocity_right * 34.0)
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7fe fd0b 	bl	800084c <__aeabi_f2d>
 8001e36:	4604      	mov	r4, r0
 8001e38:	460d      	mov	r5, r1
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <accelerateRight+0xec>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fd04 	bl	800084c <__aeabi_f2d>
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <accelerateRight+0xf0>)
 8001e4a:	f7fe f9bd 	bl	80001c8 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe fdb1 	bl	80009bc <__aeabi_dcmplt>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d012      	beq.n	8001e86 <accelerateRight+0x76>
		right_PWM_value += xaccelerationTEST;
 8001e60:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <accelerateRight+0xf4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fcf1 	bl	800084c <__aeabi_f2d>
 8001e6a:	a31f      	add	r3, pc, #124	; (adr r3, 8001ee8 <accelerateRight+0xd8>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	f7fe fb8e 	bl	8000590 <__adddf3>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fdc6 	bl	8000a0c <__aeabi_d2f>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <accelerateRight+0xf4>)
 8001e84:	6013      	str	r3, [r2, #0]

	if (derivative > velocity_right * 34.0)
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fce0 	bl	800084c <__aeabi_f2d>
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	460d      	mov	r5, r1
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <accelerateRight+0xec>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fcd9 	bl	800084c <__aeabi_f2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <accelerateRight+0xf0>)
 8001ea0:	f7fe f992 	bl	80001c8 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	4629      	mov	r1, r5
 8001eac:	f7fe fda4 	bl	80009f8 <__aeabi_dcmpgt>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d100      	bne.n	8001eb8 <accelerateRight+0xa8>
		right_PWM_value -= xaccelerationTEST;

}
 8001eb6:	e012      	b.n	8001ede <accelerateRight+0xce>
		right_PWM_value -= xaccelerationTEST;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <accelerateRight+0xf4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fcc5 	bl	800084c <__aeabi_f2d>
 8001ec2:	a309      	add	r3, pc, #36	; (adr r3, 8001ee8 <accelerateRight+0xd8>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	f7fe fb60 	bl	800058c <__aeabi_dsub>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7fe fd9a 	bl	8000a0c <__aeabi_d2f>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <accelerateRight+0xf4>)
 8001edc:	6013      	str	r3, [r2, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	47ae147b 	.word	0x47ae147b
 8001eec:	3f747ae1 	.word	0x3f747ae1
 8001ef0:	20000378 	.word	0x20000378
 8001ef4:	2000037c 	.word	0x2000037c
 8001ef8:	200003b0 	.word	0x200003b0
 8001efc:	200002cc 	.word	0x200002cc
 8001f00:	40410000 	.word	0x40410000
 8001f04:	200003bc 	.word	0x200003bc

08001f08 <PDController>:

void PDController() {
 8001f08:	b5b0      	push	{r4, r5, r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0

	float adjustedAngle = goal_angle + IRadjustment;
 8001f0e:	4bb6      	ldr	r3, [pc, #728]	; (80021e8 <PDController+0x2e0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4ab6      	ldr	r2, [pc, #728]	; (80021ec <PDController+0x2e4>)
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fdcd 	bl	8000ab8 <__addsf3>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	607b      	str	r3, [r7, #4]

	angleError = adjustedAngle - (getLeftEncoderCounts() - getRightEncoderCounts());
 8001f22:	f7ff f933 	bl	800118c <getLeftEncoderCounts>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461c      	mov	r4, r3
 8001f2a:	f7ff f921 	bl	8001170 <getRightEncoderCounts>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	1ae3      	subs	r3, r4, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fe74 	bl	8000c20 <__aeabi_i2f>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7fe fdb9 	bl	8000ab4 <__aeabi_fsub>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	4baa      	ldr	r3, [pc, #680]	; (80021f0 <PDController+0x2e8>)
 8001f48:	601a      	str	r2, [r3, #0]
	angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 8001f4a:	4ba9      	ldr	r3, [pc, #676]	; (80021f0 <PDController+0x2e8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fc7c 	bl	800084c <__aeabi_f2d>
 8001f54:	a39c      	add	r3, pc, #624	; (adr r3, 80021c8 <PDController+0x2c0>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe f935 	bl	80001c8 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4614      	mov	r4, r2
 8001f64:	461d      	mov	r5, r3
 8001f66:	4ba2      	ldr	r3, [pc, #648]	; (80021f0 <PDController+0x2e8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4aa2      	ldr	r2, [pc, #648]	; (80021f4 <PDController+0x2ec>)
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fd9f 	bl	8000ab4 <__aeabi_fsub>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fc67 	bl	800084c <__aeabi_f2d>
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	f7fe f91f 	bl	80001c8 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4620      	mov	r0, r4
 8001f90:	4629      	mov	r1, r5
 8001f92:	f7fe fafd 	bl	8000590 <__adddf3>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7fe fd35 	bl	8000a0c <__aeabi_d2f>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a94      	ldr	r2, [pc, #592]	; (80021f8 <PDController+0x2f0>)
 8001fa6:	6013      	str	r3, [r2, #0]

	distanceError = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts())/2);
 8001fa8:	4b94      	ldr	r3, [pc, #592]	; (80021fc <PDController+0x2f4>)
 8001faa:	681c      	ldr	r4, [r3, #0]
 8001fac:	f7ff f8ee 	bl	800118c <getLeftEncoderCounts>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461d      	mov	r5, r3
 8001fb4:	f7ff f8dc 	bl	8001170 <getRightEncoderCounts>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	442b      	add	r3, r5
 8001fbc:	0fda      	lsrs	r2, r3, #31
 8001fbe:	4413      	add	r3, r2
 8001fc0:	105b      	asrs	r3, r3, #1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fe2c 	bl	8000c20 <__aeabi_i2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f7fe fd71 	bl	8000ab4 <__aeabi_fsub>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b8a      	ldr	r3, [pc, #552]	; (8002200 <PDController+0x2f8>)
 8001fd8:	601a      	str	r2, [r3, #0]

	distanceCorrection = kPx * distanceError + kDx * (distanceError - oldDistanceError);
 8001fda:	4b89      	ldr	r3, [pc, #548]	; (8002200 <PDController+0x2f8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fc34 	bl	800084c <__aeabi_f2d>
 8001fe4:	a378      	add	r3, pc, #480	; (adr r3, 80021c8 <PDController+0x2c0>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe f8ed 	bl	80001c8 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4614      	mov	r4, r2
 8001ff4:	461d      	mov	r5, r3
 8001ff6:	4b82      	ldr	r3, [pc, #520]	; (8002200 <PDController+0x2f8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a82      	ldr	r2, [pc, #520]	; (8002204 <PDController+0x2fc>)
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fd57 	bl	8000ab4 <__aeabi_fsub>
 8002006:	4603      	mov	r3, r0
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fc1f 	bl	800084c <__aeabi_f2d>
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	f7fe f8d7 	bl	80001c8 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4620      	mov	r0, r4
 8002020:	4629      	mov	r1, r5
 8002022:	f7fe fab5 	bl	8000590 <__adddf3>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f7fe fced 	bl	8000a0c <__aeabi_d2f>
 8002032:	4603      	mov	r3, r0
 8002034:	4a74      	ldr	r2, [pc, #464]	; (8002208 <PDController+0x300>)
 8002036:	6013      	str	r3, [r2, #0]

	left_error = getLeftEncoderCounts();
 8002038:	f7ff f8a8 	bl	800118c <getLeftEncoderCounts>
 800203c:	4603      	mov	r3, r0
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fdee 	bl	8000c20 <__aeabi_i2f>
 8002044:	4603      	mov	r3, r0
 8002046:	4a71      	ldr	r2, [pc, #452]	; (800220c <PDController+0x304>)
 8002048:	6013      	str	r3, [r2, #0]
	right_error = getRightEncoderCounts();
 800204a:	f7ff f891 	bl	8001170 <getRightEncoderCounts>
 800204e:	4603      	mov	r3, r0
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fde5 	bl	8000c20 <__aeabi_i2f>
 8002056:	4603      	mov	r3, r0
 8002058:	4a6d      	ldr	r2, [pc, #436]	; (8002210 <PDController+0x308>)
 800205a:	6013      	str	r3, [r2, #0]

	if (state == MOVING && fabs(distanceError) > 100)
 800205c:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <PDController+0x30c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d14b      	bne.n	80020fc <PDController+0x1f4>
 8002064:	4b66      	ldr	r3, [pc, #408]	; (8002200 <PDController+0x2f8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800206c:	496a      	ldr	r1, [pc, #424]	; (8002218 <PDController+0x310>)
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fe96 	bl	8000da0 <__aeabi_fcmpgt>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d040      	beq.n	80020fc <PDController+0x1f4>
	{		// If we're going straight and not at the end, apply acceleration

		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 800207a:	4b63      	ldr	r3, [pc, #396]	; (8002208 <PDController+0x300>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a67      	ldr	r2, [pc, #412]	; (800221c <PDController+0x314>)
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fd15 	bl	8000ab4 <__aeabi_fsub>
 800208a:	4603      	mov	r3, r0
 800208c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fbdb 	bl	800084c <__aeabi_f2d>
 8002096:	a34e      	add	r3, pc, #312	; (adr r3, 80021d0 <PDController+0x2c8>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe fcac 	bl	80009f8 <__aeabi_dcmpgt>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d02a      	beq.n	80020fc <PDController+0x1f4>
			distanceCorrection = oldDistanceCorrection + (xacceleration * sign(distanceCorrection - oldDistanceCorrection));
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <PDController+0x314>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fbce 	bl	800084c <__aeabi_f2d>
 80020b0:	4604      	mov	r4, r0
 80020b2:	460d      	mov	r5, r1
 80020b4:	4b54      	ldr	r3, [pc, #336]	; (8002208 <PDController+0x300>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a58      	ldr	r2, [pc, #352]	; (800221c <PDController+0x314>)
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fcf8 	bl	8000ab4 <__aeabi_fsub>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fe52 	bl	8002d70 <sign>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fbaa 	bl	8000828 <__aeabi_i2d>
 80020d4:	a33e      	add	r3, pc, #248	; (adr r3, 80021d0 <PDController+0x2c8>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe f875 	bl	80001c8 <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4620      	mov	r0, r4
 80020e4:	4629      	mov	r1, r5
 80020e6:	f7fe fa53 	bl	8000590 <__adddf3>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe fc8b 	bl	8000a0c <__aeabi_d2f>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4a43      	ldr	r2, [pc, #268]	; (8002208 <PDController+0x300>)
 80020fa:	6013      	str	r3, [r2, #0]
	}

	switch(state) {		// Apply lower limits of PWM for various states
 80020fc:	4b45      	ldr	r3, [pc, #276]	; (8002214 <PDController+0x30c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d007      	beq.n	8002114 <PDController+0x20c>
 8002104:	2b03      	cmp	r3, #3
 8002106:	f300 80a3 	bgt.w	8002250 <PDController+0x348>
 800210a:	2b01      	cmp	r3, #1
 800210c:	d002      	beq.n	8002114 <PDController+0x20c>
 800210e:	2b02      	cmp	r3, #2
 8002110:	d038      	beq.n	8002184 <PDController+0x27c>
		case TURNING:
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWM_min_w)
				angleCorrection = sign(angleCorrection) * PWM_min_w;
			break;
		default:
			break;
 8002112:	e09d      	b.n	8002250 <PDController+0x348>
			if (fabs(distanceCorrection) > 0.01 && fabs(distanceCorrection) < PWM_min_x)
 8002114:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <PDController+0x300>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fb95 	bl	800084c <__aeabi_f2d>
 8002122:	a32d      	add	r3, pc, #180	; (adr r3, 80021d8 <PDController+0x2d0>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fc66 	bl	80009f8 <__aeabi_dcmpgt>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d100      	bne.n	8002134 <PDController+0x22c>
			break;
 8002132:	e08e      	b.n	8002252 <PDController+0x34a>
			if (fabs(distanceCorrection) > 0.01 && fabs(distanceCorrection) < PWM_min_x)
 8002134:	4b34      	ldr	r3, [pc, #208]	; (8002208 <PDController+0x300>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fb85 	bl	800084c <__aeabi_f2d>
 8002142:	a327      	add	r3, pc, #156	; (adr r3, 80021e0 <PDController+0x2d8>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	f7fe fc38 	bl	80009bc <__aeabi_dcmplt>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d100      	bne.n	8002154 <PDController+0x24c>
			break;
 8002152:	e07e      	b.n	8002252 <PDController+0x34a>
				distanceCorrection = sign(distanceCorrection) * PWM_min_x;
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <PDController+0x300>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fe09 	bl	8002d70 <sign>
 800215e:	4603      	mov	r3, r0
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fb61 	bl	8000828 <__aeabi_i2d>
 8002166:	a31e      	add	r3, pc, #120	; (adr r3, 80021e0 <PDController+0x2d8>)
 8002168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216c:	f7fe f82c 	bl	80001c8 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7fe fc48 	bl	8000a0c <__aeabi_d2f>
 800217c:	4603      	mov	r3, r0
 800217e:	4a22      	ldr	r2, [pc, #136]	; (8002208 <PDController+0x300>)
 8002180:	6013      	str	r3, [r2, #0]
			break;
 8002182:	e066      	b.n	8002252 <PDController+0x34a>
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWM_min_w)
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <PDController+0x2f0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fb5d 	bl	800084c <__aeabi_f2d>
 8002192:	a311      	add	r3, pc, #68	; (adr r3, 80021d8 <PDController+0x2d0>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe fc2e 	bl	80009f8 <__aeabi_dcmpgt>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d100      	bne.n	80021a4 <PDController+0x29c>
			break;
 80021a2:	e056      	b.n	8002252 <PDController+0x34a>
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWM_min_w)
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <PDController+0x2f0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fb4d 	bl	800084c <__aeabi_f2d>
 80021b2:	a30b      	add	r3, pc, #44	; (adr r3, 80021e0 <PDController+0x2d8>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f7fe fc00 	bl	80009bc <__aeabi_dcmplt>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d12e      	bne.n	8002220 <PDController+0x318>
			break;
 80021c2:	e046      	b.n	8002252 <PDController+0x34a>
 80021c4:	f3af 8000 	nop.w
 80021c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80021cc:	3f50624d 	.word	0x3f50624d
 80021d0:	47ae147b 	.word	0x47ae147b
 80021d4:	3f747ae1 	.word	0x3f747ae1
 80021d8:	47ae147b 	.word	0x47ae147b
 80021dc:	3f847ae1 	.word	0x3f847ae1
 80021e0:	66666666 	.word	0x66666666
 80021e4:	3fd66666 	.word	0x3fd66666
 80021e8:	200002d4 	.word	0x200002d4
 80021ec:	200003a8 	.word	0x200003a8
 80021f0:	200002dc 	.word	0x200002dc
 80021f4:	200002e0 	.word	0x200002e0
 80021f8:	2000030c 	.word	0x2000030c
 80021fc:	200002d0 	.word	0x200002d0
 8002200:	20000310 	.word	0x20000310
 8002204:	20000314 	.word	0x20000314
 8002208:	20000340 	.word	0x20000340
 800220c:	20000348 	.word	0x20000348
 8002210:	20000378 	.word	0x20000378
 8002214:	200003b4 	.word	0x200003b4
 8002218:	42c80000 	.word	0x42c80000
 800221c:	20000344 	.word	0x20000344
				angleCorrection = sign(angleCorrection) * PWM_min_w;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <PDController+0x360>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fda3 	bl	8002d70 <sign>
 800222a:	4603      	mov	r3, r0
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fafb 	bl	8000828 <__aeabi_i2d>
 8002232:	a30b      	add	r3, pc, #44	; (adr r3, 8002260 <PDController+0x358>)
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	f7fd ffc6 	bl	80001c8 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fbe2 	bl	8000a0c <__aeabi_d2f>
 8002248:	4603      	mov	r3, r0
 800224a:	4a07      	ldr	r2, [pc, #28]	; (8002268 <PDController+0x360>)
 800224c:	6013      	str	r3, [r2, #0]
			break;
 800224e:	e000      	b.n	8002252 <PDController+0x34a>
			break;
 8002250:	bf00      	nop
	}

}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bdb0      	pop	{r4, r5, r7, pc}
 800225a:	bf00      	nop
 800225c:	f3af 8000 	nop.w
 8002260:	66666666 	.word	0x66666666
 8002264:	3fd66666 	.word	0x3fd66666
 8002268:	2000030c 	.word	0x2000030c
 800226c:	00000000 	.word	0x00000000

08002270 <updatePID>:

void updatePID() {
 8002270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0

///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldAngleError = oldAngleErrors[9];
 8002278:	4ba9      	ldr	r3, [pc, #676]	; (8002520 <updatePID+0x2b0>)
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	4aa9      	ldr	r2, [pc, #676]	; (8002524 <updatePID+0x2b4>)
 800227e:	6013      	str	r3, [r2, #0]
	oldDistanceError = oldDistanceErrors[9];
 8002280:	4ba9      	ldr	r3, [pc, #676]	; (8002528 <updatePID+0x2b8>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	4aa9      	ldr	r2, [pc, #676]	; (800252c <updatePID+0x2bc>)
 8002286:	6013      	str	r3, [r2, #0]
	old_left_error = old_left_errors[9];
 8002288:	4ba9      	ldr	r3, [pc, #676]	; (8002530 <updatePID+0x2c0>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	4aa9      	ldr	r2, [pc, #676]	; (8002534 <updatePID+0x2c4>)
 800228e:	6013      	str	r3, [r2, #0]
	old_right_error = old_right_errors[9];
 8002290:	4ba9      	ldr	r3, [pc, #676]	; (8002538 <updatePID+0x2c8>)
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	4aa9      	ldr	r2, [pc, #676]	; (800253c <updatePID+0x2cc>)
 8002296:	6013      	str	r3, [r2, #0]

//////////	CALCULATE ANGLE CORRECTION AND DISTANCE CORRECTION	/////////////////////

	PDController();
 8002298:	f7ff fe36 	bl	8001f08 <PDController>

	if (state == EXPLORING)
 800229c:	4ba8      	ldr	r3, [pc, #672]	; (8002540 <updatePID+0x2d0>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d12e      	bne.n	8002302 <updatePID+0x92>
	{
		distanceError = 306;
 80022a4:	4ba7      	ldr	r3, [pc, #668]	; (8002544 <updatePID+0x2d4>)
 80022a6:	4aa8      	ldr	r2, [pc, #672]	; (8002548 <updatePID+0x2d8>)
 80022a8:	601a      	str	r2, [r3, #0]
		distanceCorrection = explore_speed;
 80022aa:	4ba8      	ldr	r3, [pc, #672]	; (800254c <updatePID+0x2dc>)
 80022ac:	4aa8      	ldr	r2, [pc, #672]	; (8002550 <updatePID+0x2e0>)
 80022ae:	601a      	str	r2, [r3, #0]

		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 80022b0:	4ba6      	ldr	r3, [pc, #664]	; (800254c <updatePID+0x2dc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4aa7      	ldr	r2, [pc, #668]	; (8002554 <updatePID+0x2e4>)
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fbfa 	bl	8000ab4 <__aeabi_fsub>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fac0 	bl	800084c <__aeabi_f2d>
 80022cc:	a38a      	add	r3, pc, #552	; (adr r3, 80024f8 <updatePID+0x288>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	f7fe fb91 	bl	80009f8 <__aeabi_dcmpgt>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d012      	beq.n	8002302 <updatePID+0x92>
		{
			distanceCorrection = oldDistanceCorrection + xacceleration;
 80022dc:	4b9d      	ldr	r3, [pc, #628]	; (8002554 <updatePID+0x2e4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fab3 	bl	800084c <__aeabi_f2d>
 80022e6:	a384      	add	r3, pc, #528	; (adr r3, 80024f8 <updatePID+0x288>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fe f950 	bl	8000590 <__adddf3>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe fb88 	bl	8000a0c <__aeabi_d2f>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4a93      	ldr	r2, [pc, #588]	; (800254c <updatePID+0x2dc>)
 8002300:	6013      	str	r3, [r2, #0]
		}
	}

////////// 	CALCULATE AND SET MOTOR PWM VALUES	////////////////////////////

	if (fabs(distanceCorrection) > PWM_max_x)		// Upper Limit for PWM
 8002302:	4b92      	ldr	r3, [pc, #584]	; (800254c <updatePID+0x2dc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fa9e 	bl	800084c <__aeabi_f2d>
 8002310:	a37b      	add	r3, pc, #492	; (adr r3, 8002500 <updatePID+0x290>)
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f7fe fb6f 	bl	80009f8 <__aeabi_dcmpgt>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d016      	beq.n	800234e <updatePID+0xde>
		distanceCorrection = sign(distanceCorrection) * PWM_max_x;
 8002320:	4b8a      	ldr	r3, [pc, #552]	; (800254c <updatePID+0x2dc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fd23 	bl	8002d70 <sign>
 800232a:	4603      	mov	r3, r0
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe fa7b 	bl	8000828 <__aeabi_i2d>
 8002332:	a373      	add	r3, pc, #460	; (adr r3, 8002500 <updatePID+0x290>)
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	f7fd ff46 	bl	80001c8 <__aeabi_dmul>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fb62 	bl	8000a0c <__aeabi_d2f>
 8002348:	4603      	mov	r3, r0
 800234a:	4a80      	ldr	r2, [pc, #512]	; (800254c <updatePID+0x2dc>)
 800234c:	6013      	str	r3, [r2, #0]

	if (fabs(angleCorrection) > PWM_max_w)
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <updatePID+0x2e8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fa78 	bl	800084c <__aeabi_f2d>
 800235c:	a36a      	add	r3, pc, #424	; (adr r3, 8002508 <updatePID+0x298>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fe fb49 	bl	80009f8 <__aeabi_dcmpgt>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d016      	beq.n	800239a <updatePID+0x12a>
		angleCorrection = sign(angleCorrection) * PWM_max_w;
 800236c:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <updatePID+0x2e8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fcfd 	bl	8002d70 <sign>
 8002376:	4603      	mov	r3, r0
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fa55 	bl	8000828 <__aeabi_i2d>
 800237e:	a362      	add	r3, pc, #392	; (adr r3, 8002508 <updatePID+0x298>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	f7fd ff20 	bl	80001c8 <__aeabi_dmul>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f7fe fb3c 	bl	8000a0c <__aeabi_d2f>
 8002394:	4603      	mov	r3, r0
 8002396:	4a70      	ldr	r2, [pc, #448]	; (8002558 <updatePID+0x2e8>)
 8002398:	6013      	str	r3, [r2, #0]

	if (state == ACCELERATING)
 800239a:	4b69      	ldr	r3, [pc, #420]	; (8002540 <updatePID+0x2d0>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d104      	bne.n	80023ac <updatePID+0x13c>
	{
		accelerateLeft();
 80023a2:	f7ff fcb9 	bl	8001d18 <accelerateLeft>
		accelerateRight();
 80023a6:	f7ff fd33 	bl	8001e10 <accelerateRight>
 80023aa:	e017      	b.n	80023dc <updatePID+0x16c>
	}

	else
	{
		left_PWM_value = (distanceCorrection + angleCorrection);
 80023ac:	4b67      	ldr	r3, [pc, #412]	; (800254c <updatePID+0x2dc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a69      	ldr	r2, [pc, #420]	; (8002558 <updatePID+0x2e8>)
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fb7e 	bl	8000ab8 <__addsf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	4b66      	ldr	r3, [pc, #408]	; (800255c <updatePID+0x2ec>)
 80023c2:	601a      	str	r2, [r3, #0]
		right_PWM_value = (distanceCorrection - angleCorrection);
 80023c4:	4b61      	ldr	r3, [pc, #388]	; (800254c <updatePID+0x2dc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a63      	ldr	r2, [pc, #396]	; (8002558 <updatePID+0x2e8>)
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fb70 	bl	8000ab4 <__aeabi_fsub>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b61      	ldr	r3, [pc, #388]	; (8002560 <updatePID+0x2f0>)
 80023da:	601a      	str	r2, [r3, #0]
	}


	// Apply lower PWM limits for small adjustments
	if (state == REST || state == ACCELERATING || fabs(distanceError) < 60 || fabs (angleError) < 60)
 80023dc:	4b58      	ldr	r3, [pc, #352]	; (8002540 <updatePID+0x2d0>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01a      	beq.n	800241a <updatePID+0x1aa>
 80023e4:	4b56      	ldr	r3, [pc, #344]	; (8002540 <updatePID+0x2d0>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d016      	beq.n	800241a <updatePID+0x1aa>
 80023ec:	4b55      	ldr	r3, [pc, #340]	; (8002544 <updatePID+0x2d4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023f4:	495b      	ldr	r1, [pc, #364]	; (8002564 <updatePID+0x2f4>)
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fcb4 	bl	8000d64 <__aeabi_fcmplt>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10b      	bne.n	800241a <updatePID+0x1aa>
 8002402:	4b59      	ldr	r3, [pc, #356]	; (8002568 <updatePID+0x2f8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800240a:	4956      	ldr	r1, [pc, #344]	; (8002564 <updatePID+0x2f4>)
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fca9 	bl	8000d64 <__aeabi_fcmplt>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a9 	beq.w	800256c <updatePID+0x2fc>
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWM_min)
 800241a:	4b50      	ldr	r3, [pc, #320]	; (800255c <updatePID+0x2ec>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fa12 	bl	800084c <__aeabi_f2d>
 8002428:	a339      	add	r3, pc, #228	; (adr r3, 8002510 <updatePID+0x2a0>)
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	f7fe fae3 	bl	80009f8 <__aeabi_dcmpgt>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d025      	beq.n	8002484 <updatePID+0x214>
 8002438:	4b48      	ldr	r3, [pc, #288]	; (800255c <updatePID+0x2ec>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fa03 	bl	800084c <__aeabi_f2d>
 8002446:	a334      	add	r3, pc, #208	; (adr r3, 8002518 <updatePID+0x2a8>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fe fab6 	bl	80009bc <__aeabi_dcmplt>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d016      	beq.n	8002484 <updatePID+0x214>
		{
			left_PWM_value = sign(left_PWM_value) * PWM_min;
 8002456:	4b41      	ldr	r3, [pc, #260]	; (800255c <updatePID+0x2ec>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fc88 	bl	8002d70 <sign>
 8002460:	4603      	mov	r3, r0
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe f9e0 	bl	8000828 <__aeabi_i2d>
 8002468:	a32b      	add	r3, pc, #172	; (adr r3, 8002518 <updatePID+0x2a8>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fd feab 	bl	80001c8 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fac7 	bl	8000a0c <__aeabi_d2f>
 800247e:	4603      	mov	r3, r0
 8002480:	4a36      	ldr	r2, [pc, #216]	; (800255c <updatePID+0x2ec>)
 8002482:	6013      	str	r3, [r2, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWM_min)
 8002484:	4b36      	ldr	r3, [pc, #216]	; (8002560 <updatePID+0x2f0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f9dd 	bl	800084c <__aeabi_f2d>
 8002492:	a31f      	add	r3, pc, #124	; (adr r3, 8002510 <updatePID+0x2a0>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe faae 	bl	80009f8 <__aeabi_dcmpgt>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8138 	beq.w	8002714 <updatePID+0x4a4>
 80024a4:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <updatePID+0x2f0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f9cd 	bl	800084c <__aeabi_f2d>
 80024b2:	a319      	add	r3, pc, #100	; (adr r3, 8002518 <updatePID+0x2a8>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fe fa80 	bl	80009bc <__aeabi_dcmplt>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d100      	bne.n	80024c4 <updatePID+0x254>
 80024c2:	e127      	b.n	8002714 <updatePID+0x4a4>
		{
			right_PWM_value = sign(right_PWM_value) * PWM_min;
 80024c4:	4b26      	ldr	r3, [pc, #152]	; (8002560 <updatePID+0x2f0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fc51 	bl	8002d70 <sign>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f9a9 	bl	8000828 <__aeabi_i2d>
 80024d6:	a310      	add	r3, pc, #64	; (adr r3, 8002518 <updatePID+0x2a8>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fd fe74 	bl	80001c8 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fa90 	bl	8000a0c <__aeabi_d2f>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <updatePID+0x2f0>)
 80024f0:	6013      	str	r3, [r2, #0]
		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWM_min)
 80024f2:	e10f      	b.n	8002714 <updatePID+0x4a4>
 80024f4:	f3af 8000 	nop.w
 80024f8:	47ae147b 	.word	0x47ae147b
 80024fc:	3f747ae1 	.word	0x3f747ae1
 8002500:	66666666 	.word	0x66666666
 8002504:	3fe66666 	.word	0x3fe66666
 8002508:	9999999a 	.word	0x9999999a
 800250c:	3fd99999 	.word	0x3fd99999
 8002510:	47ae147b 	.word	0x47ae147b
 8002514:	3f847ae1 	.word	0x3f847ae1
 8002518:	33333333 	.word	0x33333333
 800251c:	3fd33333 	.word	0x3fd33333
 8002520:	200002e4 	.word	0x200002e4
 8002524:	200002e0 	.word	0x200002e0
 8002528:	20000318 	.word	0x20000318
 800252c:	20000314 	.word	0x20000314
 8002530:	20000350 	.word	0x20000350
 8002534:	2000034c 	.word	0x2000034c
 8002538:	20000380 	.word	0x20000380
 800253c:	2000037c 	.word	0x2000037c
 8002540:	200003b4 	.word	0x200003b4
 8002544:	20000310 	.word	0x20000310
 8002548:	43990000 	.word	0x43990000
 800254c:	20000340 	.word	0x20000340
 8002550:	3e99999a 	.word	0x3e99999a
 8002554:	20000344 	.word	0x20000344
 8002558:	2000030c 	.word	0x2000030c
 800255c:	200003b8 	.word	0x200003b8
 8002560:	200003bc 	.word	0x200003bc
 8002564:	42700000 	.word	0x42700000
 8002568:	200002dc 	.word	0x200002dc
		}
	}
	else	// If under PWM limits, normalize values
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWM_min)
 800256c:	4bb0      	ldr	r3, [pc, #704]	; (8002830 <updatePID+0x5c0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe f969 	bl	800084c <__aeabi_f2d>
 800257a:	a3a7      	add	r3, pc, #668	; (adr r3, 8002818 <updatePID+0x5a8>)
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f7fe fa3a 	bl	80009f8 <__aeabi_dcmpgt>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d05a      	beq.n	8002640 <updatePID+0x3d0>
 800258a:	4ba9      	ldr	r3, [pc, #676]	; (8002830 <updatePID+0x5c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe f95a 	bl	800084c <__aeabi_f2d>
 8002598:	a3a1      	add	r3, pc, #644	; (adr r3, 8002820 <updatePID+0x5b0>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	f7fe fa0d 	bl	80009bc <__aeabi_dcmplt>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d04b      	beq.n	8002640 <updatePID+0x3d0>
		{
			right_PWM_value = right_PWM_value - (sign(right_PWM_value) * (PWM_min - fabs(left_PWM_value)));
 80025a8:	4ba2      	ldr	r3, [pc, #648]	; (8002834 <updatePID+0x5c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe f94d 	bl	800084c <__aeabi_f2d>
 80025b2:	4604      	mov	r4, r0
 80025b4:	460d      	mov	r5, r1
 80025b6:	4b9f      	ldr	r3, [pc, #636]	; (8002834 <updatePID+0x5c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fbd8 	bl	8002d70 <sign>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe f930 	bl	8000828 <__aeabi_i2d>
 80025c8:	4680      	mov	r8, r0
 80025ca:	4689      	mov	r9, r1
 80025cc:	4b98      	ldr	r3, [pc, #608]	; (8002830 <updatePID+0x5c0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe f939 	bl	800084c <__aeabi_f2d>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	a190      	add	r1, pc, #576	; (adr r1, 8002820 <updatePID+0x5b0>)
 80025e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025e4:	f7fd ffd2 	bl	800058c <__aeabi_dsub>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4640      	mov	r0, r8
 80025ee:	4649      	mov	r1, r9
 80025f0:	f7fd fdea 	bl	80001c8 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4620      	mov	r0, r4
 80025fa:	4629      	mov	r1, r5
 80025fc:	f7fd ffc6 	bl	800058c <__aeabi_dsub>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	f7fe fa00 	bl	8000a0c <__aeabi_d2f>
 800260c:	4603      	mov	r3, r0
 800260e:	4a89      	ldr	r2, [pc, #548]	; (8002834 <updatePID+0x5c4>)
 8002610:	6013      	str	r3, [r2, #0]
			left_PWM_value = sign(left_PWM_value) * PWM_min;
 8002612:	4b87      	ldr	r3, [pc, #540]	; (8002830 <updatePID+0x5c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fbaa 	bl	8002d70 <sign>
 800261c:	4603      	mov	r3, r0
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe f902 	bl	8000828 <__aeabi_i2d>
 8002624:	a37e      	add	r3, pc, #504	; (adr r3, 8002820 <updatePID+0x5b0>)
 8002626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262a:	f7fd fdcd 	bl	80001c8 <__aeabi_dmul>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f7fe f9e9 	bl	8000a0c <__aeabi_d2f>
 800263a:	4603      	mov	r3, r0
 800263c:	4a7c      	ldr	r2, [pc, #496]	; (8002830 <updatePID+0x5c0>)
 800263e:	6013      	str	r3, [r2, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWM_min)
 8002640:	4b7c      	ldr	r3, [pc, #496]	; (8002834 <updatePID+0x5c4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe f8ff 	bl	800084c <__aeabi_f2d>
 800264e:	a372      	add	r3, pc, #456	; (adr r3, 8002818 <updatePID+0x5a8>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fe f9d0 	bl	80009f8 <__aeabi_dcmpgt>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d05a      	beq.n	8002714 <updatePID+0x4a4>
 800265e:	4b75      	ldr	r3, [pc, #468]	; (8002834 <updatePID+0x5c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe f8f0 	bl	800084c <__aeabi_f2d>
 800266c:	a36c      	add	r3, pc, #432	; (adr r3, 8002820 <updatePID+0x5b0>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fe f9a3 	bl	80009bc <__aeabi_dcmplt>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d04b      	beq.n	8002714 <updatePID+0x4a4>
		{
			left_PWM_value = left_PWM_value - (sign(left_PWM_value) * (PWM_min - fabs(right_PWM_value)));
 800267c:	4b6c      	ldr	r3, [pc, #432]	; (8002830 <updatePID+0x5c0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe f8e3 	bl	800084c <__aeabi_f2d>
 8002686:	4604      	mov	r4, r0
 8002688:	460d      	mov	r5, r1
 800268a:	4b69      	ldr	r3, [pc, #420]	; (8002830 <updatePID+0x5c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fb6e 	bl	8002d70 <sign>
 8002694:	4603      	mov	r3, r0
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe f8c6 	bl	8000828 <__aeabi_i2d>
 800269c:	4680      	mov	r8, r0
 800269e:	4689      	mov	r9, r1
 80026a0:	4b64      	ldr	r3, [pc, #400]	; (8002834 <updatePID+0x5c4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe f8cf 	bl	800084c <__aeabi_f2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	a15b      	add	r1, pc, #364	; (adr r1, 8002820 <updatePID+0x5b0>)
 80026b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026b8:	f7fd ff68 	bl	800058c <__aeabi_dsub>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4640      	mov	r0, r8
 80026c2:	4649      	mov	r1, r9
 80026c4:	f7fd fd80 	bl	80001c8 <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4620      	mov	r0, r4
 80026ce:	4629      	mov	r1, r5
 80026d0:	f7fd ff5c 	bl	800058c <__aeabi_dsub>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	f7fe f996 	bl	8000a0c <__aeabi_d2f>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4a53      	ldr	r2, [pc, #332]	; (8002830 <updatePID+0x5c0>)
 80026e4:	6013      	str	r3, [r2, #0]
			right_PWM_value = sign(right_PWM_value) * PWM_min;
 80026e6:	4b53      	ldr	r3, [pc, #332]	; (8002834 <updatePID+0x5c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fb40 	bl	8002d70 <sign>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe f898 	bl	8000828 <__aeabi_i2d>
 80026f8:	a349      	add	r3, pc, #292	; (adr r3, 8002820 <updatePID+0x5b0>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd fd63 	bl	80001c8 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f7fe f97f 	bl	8000a0c <__aeabi_d2f>
 800270e:	4603      	mov	r3, r0
 8002710:	4a48      	ldr	r2, [pc, #288]	; (8002834 <updatePID+0x5c4>)
 8002712:	6013      	str	r3, [r2, #0]
		}
	}

	if (fabs(left_PWM_value) > PWM_max_x)		// Upper Limit for PWM
 8002714:	4b46      	ldr	r3, [pc, #280]	; (8002830 <updatePID+0x5c0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe f895 	bl	800084c <__aeabi_f2d>
 8002722:	a341      	add	r3, pc, #260	; (adr r3, 8002828 <updatePID+0x5b8>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	f7fe f966 	bl	80009f8 <__aeabi_dcmpgt>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <updatePID+0x4f0>
		left_PWM_value = sign(left_PWM_value) * PWM_max_x;
 8002732:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <updatePID+0x5c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fb1a 	bl	8002d70 <sign>
 800273c:	4603      	mov	r3, r0
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe f872 	bl	8000828 <__aeabi_i2d>
 8002744:	a338      	add	r3, pc, #224	; (adr r3, 8002828 <updatePID+0x5b8>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	f7fd fd3d 	bl	80001c8 <__aeabi_dmul>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe f959 	bl	8000a0c <__aeabi_d2f>
 800275a:	4603      	mov	r3, r0
 800275c:	4a34      	ldr	r2, [pc, #208]	; (8002830 <updatePID+0x5c0>)
 800275e:	6013      	str	r3, [r2, #0]

	if (fabs(right_PWM_value) > PWM_max_x)
 8002760:	4b34      	ldr	r3, [pc, #208]	; (8002834 <updatePID+0x5c4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe f86f 	bl	800084c <__aeabi_f2d>
 800276e:	a32e      	add	r3, pc, #184	; (adr r3, 8002828 <updatePID+0x5b8>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f7fe f940 	bl	80009f8 <__aeabi_dcmpgt>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <updatePID+0x53c>
		right_PWM_value = sign(right_PWM_value) * PWM_max_x;
 800277e:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <updatePID+0x5c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f000 faf4 	bl	8002d70 <sign>
 8002788:	4603      	mov	r3, r0
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe f84c 	bl	8000828 <__aeabi_i2d>
 8002790:	a325      	add	r3, pc, #148	; (adr r3, 8002828 <updatePID+0x5b8>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	f7fd fd17 	bl	80001c8 <__aeabi_dmul>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	f7fe f933 	bl	8000a0c <__aeabi_d2f>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a22      	ldr	r2, [pc, #136]	; (8002834 <updatePID+0x5c4>)
 80027aa:	6013      	str	r3, [r2, #0]

	setMotorLPWM(left_PWM_value);
 80027ac:	4b20      	ldr	r3, [pc, #128]	; (8002830 <updatePID+0x5c0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff f9d5 	bl	8001b60 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 80027b6:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <updatePID+0x5c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fa0c 	bl	8001bd8 <setMotorRPWM>

	if(angleError < 30 && angleError > -30 && distanceError < 30 && distanceError > -30)
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <updatePID+0x5c8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	491d      	ldr	r1, [pc, #116]	; (800283c <updatePID+0x5cc>)
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe facc 	bl	8000d64 <__aeabi_fcmplt>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d03c      	beq.n	800284c <updatePID+0x5dc>
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <updatePID+0x5c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	491a      	ldr	r1, [pc, #104]	; (8002840 <updatePID+0x5d0>)
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fae1 	bl	8000da0 <__aeabi_fcmpgt>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d033      	beq.n	800284c <updatePID+0x5dc>
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <updatePID+0x5d4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4914      	ldr	r1, [pc, #80]	; (800283c <updatePID+0x5cc>)
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe faba 	bl	8000d64 <__aeabi_fcmplt>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d02a      	beq.n	800284c <updatePID+0x5dc>
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <updatePID+0x5d4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4911      	ldr	r1, [pc, #68]	; (8002840 <updatePID+0x5d0>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe facf 	bl	8000da0 <__aeabi_fcmpgt>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d021      	beq.n	800284c <updatePID+0x5dc>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <updatePID+0x5d8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <updatePID+0x5d8>)
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e01e      	b.n	8002852 <updatePID+0x5e2>
 8002814:	f3af 8000 	nop.w
 8002818:	47ae147b 	.word	0x47ae147b
 800281c:	3f847ae1 	.word	0x3f847ae1
 8002820:	33333333 	.word	0x33333333
 8002824:	3fd33333 	.word	0x3fd33333
 8002828:	66666666 	.word	0x66666666
 800282c:	3fe66666 	.word	0x3fe66666
 8002830:	200003b8 	.word	0x200003b8
 8002834:	200003bc 	.word	0x200003bc
 8002838:	200002dc 	.word	0x200002dc
 800283c:	41f00000 	.word	0x41f00000
 8002840:	c1f00000 	.word	0xc1f00000
 8002844:	20000310 	.word	0x20000310
 8002848:	200003c0 	.word	0x200003c0

	else
		goal_reached_timer = 0;
 800284c:	4b37      	ldr	r3, [pc, #220]	; (800292c <updatePID+0x6bc>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]


	oldDistanceCorrection = distanceCorrection;
 8002852:	4b37      	ldr	r3, [pc, #220]	; (8002930 <updatePID+0x6c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a37      	ldr	r2, [pc, #220]	; (8002934 <updatePID+0x6c4>)
 8002858:	6013      	str	r3, [r2, #0]

	test1 = left_error - old_left_error;
 800285a:	4b37      	ldr	r3, [pc, #220]	; (8002938 <updatePID+0x6c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a37      	ldr	r2, [pc, #220]	; (800293c <updatePID+0x6cc>)
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe f925 	bl	8000ab4 <__aeabi_fsub>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	4b34      	ldr	r3, [pc, #208]	; (8002940 <updatePID+0x6d0>)
 8002870:	601a      	str	r2, [r3, #0]

	for(int i = 9; i > 0; i--)
 8002872:	2309      	movs	r3, #9
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e00b      	b.n	8002890 <updatePID+0x620>
		oldAngleErrors[i] = oldAngleErrors[i-1];	// Adds the newest angleError to array and shifts everything to the right
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3b01      	subs	r3, #1
 800287c:	4a31      	ldr	r2, [pc, #196]	; (8002944 <updatePID+0x6d4>)
 800287e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002882:	4930      	ldr	r1, [pc, #192]	; (8002944 <updatePID+0x6d4>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	3b01      	subs	r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	dcf0      	bgt.n	8002878 <updatePID+0x608>
	oldAngleErrors[0] = angleError;
 8002896:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <updatePID+0x6d8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2a      	ldr	r2, [pc, #168]	; (8002944 <updatePID+0x6d4>)
 800289c:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 800289e:	2309      	movs	r3, #9
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	e00b      	b.n	80028bc <updatePID+0x64c>
		oldDistanceErrors[i] = oldDistanceErrors[i-1];	// Adds the newest distanceError to array and shifts everything right
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	4a28      	ldr	r2, [pc, #160]	; (800294c <updatePID+0x6dc>)
 80028aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028ae:	4927      	ldr	r1, [pc, #156]	; (800294c <updatePID+0x6dc>)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	dcf0      	bgt.n	80028a4 <updatePID+0x634>
	oldDistanceErrors[0] = distanceError;
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <updatePID+0x6e0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a21      	ldr	r2, [pc, #132]	; (800294c <updatePID+0x6dc>)
 80028c8:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 80028ca:	2309      	movs	r3, #9
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	e00b      	b.n	80028e8 <updatePID+0x678>
		old_left_errors[i] = old_left_errors[i-1];
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <updatePID+0x6e4>)
 80028d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028da:	491e      	ldr	r1, [pc, #120]	; (8002954 <updatePID+0x6e4>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	dcf0      	bgt.n	80028d0 <updatePID+0x660>
	old_left_errors[0] = left_error;
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <updatePID+0x6c8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a18      	ldr	r2, [pc, #96]	; (8002954 <updatePID+0x6e4>)
 80028f4:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 80028f6:	2309      	movs	r3, #9
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	e00b      	b.n	8002914 <updatePID+0x6a4>
		old_right_errors[i] = old_right_errors[i-1];
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	3b01      	subs	r3, #1
 8002900:	4a15      	ldr	r2, [pc, #84]	; (8002958 <updatePID+0x6e8>)
 8002902:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002906:	4914      	ldr	r1, [pc, #80]	; (8002958 <updatePID+0x6e8>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	3b01      	subs	r3, #1
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	dcf0      	bgt.n	80028fc <updatePID+0x68c>
	old_right_errors[0] = right_error;
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <updatePID+0x6ec>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <updatePID+0x6e8>)
 8002920:	6013      	str	r3, [r2, #0]

}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800292c:	200003c0 	.word	0x200003c0
 8002930:	20000340 	.word	0x20000340
 8002934:	20000344 	.word	0x20000344
 8002938:	20000348 	.word	0x20000348
 800293c:	2000034c 	.word	0x2000034c
 8002940:	200003ac 	.word	0x200003ac
 8002944:	200002e4 	.word	0x200002e4
 8002948:	200002dc 	.word	0x200002dc
 800294c:	20000318 	.word	0x20000318
 8002950:	20000310 	.word	0x20000310
 8002954:	20000350 	.word	0x20000350
 8002958:	20000380 	.word	0x20000380
 800295c:	20000378 	.word	0x20000378

08002960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_MspInit+0x48>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <HAL_MspInit+0x48>)
 8002970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_MspInit+0x48>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_MspInit+0x48>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <HAL_MspInit+0x48>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_MspInit+0x48>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a3c      	ldr	r2, [pc, #240]	; (8002abc <HAL_ADC_MspInit+0x110>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d171      	bne.n	8002ab2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_ADC_MspInit+0x114>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a3a      	ldr	r2, [pc, #232]	; (8002ac0 <HAL_ADC_MspInit+0x114>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <HAL_ADC_MspInit+0x114>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_ADC_MspInit+0x114>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a33      	ldr	r2, [pc, #204]	; (8002ac0 <HAL_ADC_MspInit+0x114>)
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_ADC_MspInit+0x114>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_ADC_MspInit+0x114>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a2c      	ldr	r2, [pc, #176]	; (8002ac0 <HAL_ADC_MspInit+0x114>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_ADC_MspInit+0x114>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 8002a22:	2303      	movs	r3, #3
 8002a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a26:	2303      	movs	r3, #3
 8002a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	4823      	ldr	r0, [pc, #140]	; (8002ac4 <HAL_ADC_MspInit+0x118>)
 8002a36:	f001 fb69 	bl	800410c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 8002a3a:	2360      	movs	r3, #96	; 0x60
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	481e      	ldr	r0, [pc, #120]	; (8002ac8 <HAL_ADC_MspInit+0x11c>)
 8002a4e:	f001 fb5d 	bl	800410c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a52:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002a54:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <HAL_ADC_MspInit+0x124>)
 8002a56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a7a:	4b14      	ldr	r3, [pc, #80]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a96:	480d      	ldr	r0, [pc, #52]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002a98:	f000 ff5c 	bl	8003954 <HAL_DMA_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002aa2:	f7ff f827 	bl	8001af4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8002aac:	4a07      	ldr	r2, [pc, #28]	; (8002acc <HAL_ADC_MspInit+0x120>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ab2:	bf00      	nop
 8002ab4:	3728      	adds	r7, #40	; 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40012000 	.word	0x40012000
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	20000178 	.word	0x20000178
 8002ad0:	40026410 	.word	0x40026410

08002ad4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_TIM_PWM_MspInit+0x38>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10d      	bne.n	8002b02 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <HAL_TIM_PWM_MspInit+0x3c>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6453      	str	r3, [r2, #68]	; 0x44
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_TIM_PWM_MspInit+0x3c>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	40023800 	.word	0x40023800

08002b14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08c      	sub	sp, #48	; 0x30
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a32      	ldr	r2, [pc, #200]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d12c      	bne.n	8002b90 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	4b31      	ldr	r3, [pc, #196]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a30      	ldr	r2, [pc, #192]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	6313      	str	r3, [r2, #48]	; 0x30
 8002b62:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8002b6e:	2330      	movs	r3, #48	; 0x30
 8002b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	4619      	mov	r1, r3
 8002b88:	481e      	ldr	r0, [pc, #120]	; (8002c04 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002b8a:	f001 fabf 	bl	800410c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002b8e:	e030      	b.n	8002bf2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d12b      	bne.n	8002bf2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a10      	ldr	r2, [pc, #64]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8002bd2:	23c0      	movs	r3, #192	; 0xc0
 8002bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002be2:	2303      	movs	r3, #3
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be6:	f107 031c 	add.w	r3, r7, #28
 8002bea:	4619      	mov	r1, r3
 8002bec:	4807      	ldr	r0, [pc, #28]	; (8002c0c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002bee:	f001 fa8d 	bl	800410c <HAL_GPIO_Init>
}
 8002bf2:	bf00      	nop
 8002bf4:	3730      	adds	r7, #48	; 0x30
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020400 	.word	0x40020400
 8002c08:	40010400 	.word	0x40010400
 8002c0c:	40020800 	.word	0x40020800

08002c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 030c 	add.w	r3, r7, #12
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <HAL_TIM_MspPostInit+0x68>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d11e      	bne.n	8002c70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_TIM_MspPostInit+0x6c>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a10      	ldr	r2, [pc, #64]	; (8002c7c <HAL_TIM_MspPostInit+0x6c>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <HAL_TIM_MspPostInit+0x6c>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8002c4e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002c52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c60:	2301      	movs	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c64:	f107 030c 	add.w	r3, r7, #12
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4805      	ldr	r0, [pc, #20]	; (8002c80 <HAL_TIM_MspPostInit+0x70>)
 8002c6c:	f001 fa4e 	bl	800410c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c70:	bf00      	nop
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40020000 	.word	0x40020000

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <NMI_Handler+0x4>

08002c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <HardFault_Handler+0x4>

08002c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <MemManage_Handler+0x4>

08002c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <BusFault_Handler+0x4>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <UsageFault_Handler+0x4>

08002ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cca:	f000 f8eb 	bl	8002ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  SysTickFunction();
 8002cce:	f000 f813 	bl	8002cf8 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <DMA2_Stream0_IRQHandler+0x10>)
 8002cde:	f000 ffaf 	bl	8003c40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000178 	.word	0x20000178

08002cec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <SysTickFunction>:

#include "main.h"
#include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 8002cfe:	f7ff fab7 	bl	8002270 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8002d02:	f7fe fa35 	bl	8001170 <getRightEncoderCounts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f647 1318 	movw	r3, #31000	; 0x7918
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	dc15      	bgt.n	8002d3e <SysTickFunction+0x46>
 8002d12:	f7fe fa3b 	bl	800118c <getLeftEncoderCounts>
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f647 1318 	movw	r3, #31000	; 0x7918
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	dc0d      	bgt.n	8002d3e <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8002d22:	f7fe fa25 	bl	8001170 <getRightEncoderCounts>
 8002d26:	4603      	mov	r3, r0
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <SysTickFunction+0x74>)
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	db06      	blt.n	8002d3e <SysTickFunction+0x46>
 8002d30:	f7fe fa2c 	bl	800118c <getLeftEncoderCounts>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <SysTickFunction+0x74>)
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	da11      	bge.n	8002d62 <SysTickFunction+0x6a>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8002d3e:	f7fe fa17 	bl	8001170 <getRightEncoderCounts>
 8002d42:	4603      	mov	r3, r0
 8002d44:	b29c      	uxth	r4, r3
 8002d46:	f7fe fa21 	bl	800118c <getLeftEncoderCounts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	1ae3      	subs	r3, r4, r3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 8002d54:	f7fe fa28 	bl	80011a8 <resetEncoders>
		TIM2->CNT = (int16_t) difference;
 8002d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d60:	6253      	str	r3, [r2, #36]	; 0x24
	}
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd90      	pop	{r4, r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	ffff86e8 	.word	0xffff86e8

08002d70 <sign>:
		front_wall = 0;
	}
	return front_wall;
}

int16_t sign(float x) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	if (x > 0)
 8002d78:	f04f 0100 	mov.w	r1, #0
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7fe f80f 	bl	8000da0 <__aeabi_fcmpgt>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <sign+0x1c>
	{
		return 1;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e00b      	b.n	8002da4 <sign+0x34>
	}
	else if (x < 0)
 8002d8c:	f04f 0100 	mov.w	r1, #0
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fd ffe7 	bl	8000d64 <__aeabi_fcmplt>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <sign+0x32>
	{
		return -1;
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002da0:	e000      	b.n	8002da4 <sign+0x34>
	}
	else
	{
		return 0;
 8002da2:	2300      	movs	r3, #0
	}
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db0:	480d      	ldr	r0, [pc, #52]	; (8002de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002db2:	490e      	ldr	r1, [pc, #56]	; (8002dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002db4:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db8:	e002      	b.n	8002dc0 <LoopCopyDataInit>

08002dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dbe:	3304      	adds	r3, #4

08002dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc4:	d3f9      	bcc.n	8002dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dc8:	4c0b      	ldr	r4, [pc, #44]	; (8002df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dcc:	e001      	b.n	8002dd2 <LoopFillZerobss>

08002dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd0:	3204      	adds	r2, #4

08002dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd4:	d3fb      	bcc.n	8002dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dd6:	f7ff ff89 	bl	8002cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dda:	f002 fda9 	bl	8005930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dde:	f7fe fae9 	bl	80013b4 <main>
  bx  lr    
 8002de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002df0:	080059c8 	.word	0x080059c8
  ldr r2, =_sbss
 8002df4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002df8:	200003c8 	.word	0x200003c8

08002dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <ADC_IRQHandler>
	...

08002e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <HAL_Init+0x40>)
 8002e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_Init+0x40>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_Init+0x40>)
 8002e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_Init+0x40>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <HAL_Init+0x40>)
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e28:	2003      	movs	r0, #3
 8002e2a:	f000 fd51 	bl	80038d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2e:	200f      	movs	r0, #15
 8002e30:	f000 f808 	bl	8002e44 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002e34:	f7ff fd94 	bl	8002960 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023c00 	.word	0x40023c00

08002e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_InitTick+0x54>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_InitTick+0x58>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fd69 	bl	800393a <HAL_SYSTICK_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00e      	b.n	8002e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d80a      	bhi.n	8002e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f000 fd31 	bl	80038e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e84:	4a06      	ldr	r2, [pc, #24]	; (8002ea0 <HAL_InitTick+0x5c>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000004 	.word	0x20000004
 8002e9c:	2000000c 	.word	0x2000000c
 8002ea0:	20000008 	.word	0x20000008

08002ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_IncTick+0x1c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_IncTick+0x20>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a03      	ldr	r2, [pc, #12]	; (8002ec4 <HAL_IncTick+0x20>)
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	2000000c 	.word	0x2000000c
 8002ec4:	200003c4 	.word	0x200003c4

08002ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ecc:	4b02      	ldr	r3, [pc, #8]	; (8002ed8 <HAL_GetTick+0x10>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	200003c4 	.word	0x200003c4

08002edc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e033      	b.n	8002f5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fd56 	bl	80029ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f22:	f023 0302 	bic.w	r3, r3, #2
 8002f26:	f043 0202 	orr.w	r2, r3, #2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fa7a 	bl	8003428 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
 8002f4a:	e001      	b.n	8002f50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_Start_DMA+0x1e>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e0bc      	b.n	80030fc <HAL_ADC_Start_DMA+0x198>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d018      	beq.n	8002fca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fa8:	4b56      	ldr	r3, [pc, #344]	; (8003104 <HAL_ADC_Start_DMA+0x1a0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a56      	ldr	r2, [pc, #344]	; (8003108 <HAL_ADC_Start_DMA+0x1a4>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0c9a      	lsrs	r2, r3, #18
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8002fbc:	e002      	b.n	8002fc4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f9      	bne.n	8002fbe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	f040 8084 	bne.w	80030e2 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003004:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003018:	d106      	bne.n	8003028 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f023 0206 	bic.w	r2, r3, #6
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
 8003026:	e002      	b.n	800302e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	4a34      	ldr	r2, [pc, #208]	; (800310c <HAL_ADC_Start_DMA+0x1a8>)
 800303c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	4a33      	ldr	r2, [pc, #204]	; (8003110 <HAL_ADC_Start_DMA+0x1ac>)
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	4a32      	ldr	r2, [pc, #200]	; (8003114 <HAL_ADC_Start_DMA+0x1b0>)
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003056:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003066:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003076:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	334c      	adds	r3, #76	; 0x4c
 8003082:	4619      	mov	r1, r3
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f000 fd12 	bl	8003ab0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800308c:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_ADC_Start_DMA+0x1b4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10f      	bne.n	80030b8 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d129      	bne.n	80030fa <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	e020      	b.n	80030fa <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a17      	ldr	r2, [pc, #92]	; (800311c <HAL_ADC_Start_DMA+0x1b8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d11b      	bne.n	80030fa <HAL_ADC_Start_DMA+0x196>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d114      	bne.n	80030fa <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e00b      	b.n	80030fa <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000004 	.word	0x20000004
 8003108:	431bde83 	.word	0x431bde83
 800310c:	08003635 	.word	0x08003635
 8003110:	080036ef 	.word	0x080036ef
 8003114:	0800370b 	.word	0x0800370b
 8003118:	40012300 	.word	0x40012300
 800311c:	40012000 	.word	0x40012000

08003120 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_ADC_Stop_DMA+0x1a>
 8003136:	2302      	movs	r3, #2
 8003138:	e03f      	b.n	80031ba <HAL_ADC_Stop_DMA+0x9a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d127      	bne.n	80031b0 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d118      	bne.n	80031b0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fcec 	bl	8003b60 <HAL_DMA_Abort>
 8003188:	4603      	mov	r3, r0
 800318a:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800319a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x1c>
 8003200:	2302      	movs	r3, #2
 8003202:	e103      	b.n	800340c <HAL_ADC_ConfigChannel+0x224>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b09      	cmp	r3, #9
 8003212:	d925      	bls.n	8003260 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68d9      	ldr	r1, [r3, #12]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	3b1e      	subs	r3, #30
 800322a:	2207      	movs	r2, #7
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43da      	mvns	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	400a      	ands	r2, r1
 8003238:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68d9      	ldr	r1, [r3, #12]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	4618      	mov	r0, r3
 800324c:	4603      	mov	r3, r0
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4403      	add	r3, r0
 8003252:	3b1e      	subs	r3, #30
 8003254:	409a      	lsls	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	e022      	b.n	80032a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6919      	ldr	r1, [r3, #16]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	2207      	movs	r2, #7
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43da      	mvns	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	400a      	ands	r2, r1
 8003282:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6919      	ldr	r1, [r3, #16]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	4618      	mov	r0, r3
 8003296:	4603      	mov	r3, r0
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4403      	add	r3, r0
 800329c:	409a      	lsls	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d824      	bhi.n	80032f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	3b05      	subs	r3, #5
 80032c0:	221f      	movs	r2, #31
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43da      	mvns	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	400a      	ands	r2, r1
 80032ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	4618      	mov	r0, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	3b05      	subs	r3, #5
 80032ea:	fa00 f203 	lsl.w	r2, r0, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
 80032f6:	e04c      	b.n	8003392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d824      	bhi.n	800334a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	3b23      	subs	r3, #35	; 0x23
 8003312:	221f      	movs	r2, #31
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43da      	mvns	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	400a      	ands	r2, r1
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	4618      	mov	r0, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	3b23      	subs	r3, #35	; 0x23
 800333c:	fa00 f203 	lsl.w	r2, r0, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
 8003348:	e023      	b.n	8003392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	3b41      	subs	r3, #65	; 0x41
 800335c:	221f      	movs	r2, #31
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43da      	mvns	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	400a      	ands	r2, r1
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	4618      	mov	r0, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	3b41      	subs	r3, #65	; 0x41
 8003386:	fa00 f203 	lsl.w	r2, r0, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a20      	ldr	r2, [pc, #128]	; (8003418 <HAL_ADC_ConfigChannel+0x230>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d109      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1c8>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b12      	cmp	r3, #18
 80033a2:	d105      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_ADC_ConfigChannel+0x234>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4a1c      	ldr	r2, [pc, #112]	; (800341c <HAL_ADC_ConfigChannel+0x234>)
 80033aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033ae:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_ADC_ConfigChannel+0x230>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d123      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x21a>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d003      	beq.n	80033ca <HAL_ADC_ConfigChannel+0x1e2>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b11      	cmp	r3, #17
 80033c8:	d11b      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_ADC_ConfigChannel+0x234>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4a13      	ldr	r2, [pc, #76]	; (800341c <HAL_ADC_ConfigChannel+0x234>)
 80033d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033d4:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d111      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <HAL_ADC_ConfigChannel+0x238>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a10      	ldr	r2, [pc, #64]	; (8003424 <HAL_ADC_ConfigChannel+0x23c>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	0c9a      	lsrs	r2, r3, #18
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80033f4:	e002      	b.n	80033fc <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f9      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40012000 	.word	0x40012000
 800341c:	40012300 	.word	0x40012300
 8003420:	20000004 	.word	0x20000004
 8003424:	431bde83 	.word	0x431bde83

08003428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003430:	4b7e      	ldr	r3, [pc, #504]	; (800362c <ADC_Init+0x204>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a7d      	ldr	r2, [pc, #500]	; (800362c <ADC_Init+0x204>)
 8003436:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800343a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800343c:	4b7b      	ldr	r3, [pc, #492]	; (800362c <ADC_Init+0x204>)
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4979      	ldr	r1, [pc, #484]	; (800362c <ADC_Init+0x204>)
 8003446:	4313      	orrs	r3, r2
 8003448:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	021a      	lsls	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800347c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6899      	ldr	r1, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	4a5e      	ldr	r2, [pc, #376]	; (8003630 <ADC_Init+0x208>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6899      	ldr	r1, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	e00f      	b.n	8003522 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003520:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0202 	bic.w	r2, r2, #2
 8003530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	7e1b      	ldrb	r3, [r3, #24]
 800353c:	005a      	lsls	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d027      	beq.n	80035a0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800356e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	3b01      	subs	r3, #1
 8003576:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800357a:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	fa92 f2a2 	rbit	r2, r2
 8003582:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	fab2 f282 	clz	r2, r2
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	fa03 f102 	lsl.w	r1, r3, r2
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	e007      	b.n	80035b0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	051a      	lsls	r2, r3, #20
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035f2:	025a      	lsls	r2, r3, #9
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6899      	ldr	r1, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	029a      	lsls	r2, r3, #10
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40012300 	.word	0x40012300
 8003630:	0f000001 	.word	0x0f000001

08003634 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800364a:	2b00      	cmp	r3, #0
 800364c:	d13c      	bne.n	80036c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d12b      	bne.n	80036c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800366c:	2b00      	cmp	r3, #0
 800366e:	d127      	bne.n	80036c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800367a:	2b00      	cmp	r3, #0
 800367c:	d006      	beq.n	800368c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003688:	2b00      	cmp	r3, #0
 800368a:	d119      	bne.n	80036c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0220 	bic.w	r2, r2, #32
 800369a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d105      	bne.n	80036c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0201 	orr.w	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7fd fe67 	bl	8001394 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036c6:	e00e      	b.n	80036e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff fd7d 	bl	80031d4 <HAL_ADC_ErrorCallback>
}
 80036da:	e004      	b.n	80036e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff fd60 	bl	80031c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2240      	movs	r2, #64	; 0x40
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f043 0204 	orr.w	r2, r3, #4
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7ff fd52 	bl	80031d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <__NVIC_SetPriorityGrouping+0x44>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003754:	4013      	ands	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800376a:	4a04      	ldr	r2, [pc, #16]	; (800377c <__NVIC_SetPriorityGrouping+0x44>)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	60d3      	str	r3, [r2, #12]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <__NVIC_GetPriorityGrouping+0x18>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	0a1b      	lsrs	r3, r3, #8
 800378a:	f003 0307 	and.w	r3, r3, #7
}
 800378e:	4618      	mov	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	db0b      	blt.n	80037c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	4906      	ldr	r1, [pc, #24]	; (80037d0 <__NVIC_EnableIRQ+0x34>)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	2001      	movs	r0, #1
 80037be:	fa00 f202 	lsl.w	r2, r0, r2
 80037c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	e000e100 	.word	0xe000e100

080037d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	6039      	str	r1, [r7, #0]
 80037de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	db0a      	blt.n	80037fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	490c      	ldr	r1, [pc, #48]	; (8003820 <__NVIC_SetPriority+0x4c>)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	440b      	add	r3, r1
 80037f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037fc:	e00a      	b.n	8003814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4908      	ldr	r1, [pc, #32]	; (8003824 <__NVIC_SetPriority+0x50>)
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	3b04      	subs	r3, #4
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	440b      	add	r3, r1
 8003812:	761a      	strb	r2, [r3, #24]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000e100 	.word	0xe000e100
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f1c3 0307 	rsb	r3, r3, #7
 8003842:	2b04      	cmp	r3, #4
 8003844:	bf28      	it	cs
 8003846:	2304      	movcs	r3, #4
 8003848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3304      	adds	r3, #4
 800384e:	2b06      	cmp	r3, #6
 8003850:	d902      	bls.n	8003858 <NVIC_EncodePriority+0x30>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3b03      	subs	r3, #3
 8003856:	e000      	b.n	800385a <NVIC_EncodePriority+0x32>
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	f04f 32ff 	mov.w	r2, #4294967295
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	401a      	ands	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003870:	f04f 31ff 	mov.w	r1, #4294967295
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	43d9      	mvns	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	4313      	orrs	r3, r2
         );
}
 8003882:	4618      	mov	r0, r3
 8003884:	3724      	adds	r7, #36	; 0x24
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800389c:	d301      	bcc.n	80038a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800389e:	2301      	movs	r3, #1
 80038a0:	e00f      	b.n	80038c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038a2:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <SysTick_Config+0x40>)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038aa:	210f      	movs	r1, #15
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f7ff ff90 	bl	80037d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <SysTick_Config+0x40>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <SysTick_Config+0x40>)
 80038bc:	2207      	movs	r2, #7
 80038be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	e000e010 	.word	0xe000e010

080038d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff2d 	bl	8003738 <__NVIC_SetPriorityGrouping>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b086      	sub	sp, #24
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038f8:	f7ff ff42 	bl	8003780 <__NVIC_GetPriorityGrouping>
 80038fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	6978      	ldr	r0, [r7, #20]
 8003904:	f7ff ff90 	bl	8003828 <NVIC_EncodePriority>
 8003908:	4602      	mov	r2, r0
 800390a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff5f 	bl	80037d4 <__NVIC_SetPriority>
}
 8003916:	bf00      	nop
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	4603      	mov	r3, r0
 8003926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff35 	bl	800379c <__NVIC_EnableIRQ>
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ffa2 	bl	800388c <SysTick_Config>
 8003948:	4603      	mov	r3, r0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003960:	f7ff fab2 	bl	8002ec8 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e099      	b.n	8003aa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003990:	e00f      	b.n	80039b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003992:	f7ff fa99 	bl	8002ec8 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b05      	cmp	r3, #5
 800399e:	d908      	bls.n	80039b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2203      	movs	r2, #3
 80039aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e078      	b.n	8003aa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e8      	bne.n	8003992 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4b38      	ldr	r3, [pc, #224]	; (8003aac <HAL_DMA_Init+0x158>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d107      	bne.n	8003a1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	4313      	orrs	r3, r2
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0307 	bic.w	r3, r3, #7
 8003a32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d117      	bne.n	8003a76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00e      	beq.n	8003a76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fadd 	bl	8004018 <DMA_CheckFifoParam>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2240      	movs	r2, #64	; 0x40
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a72:	2301      	movs	r3, #1
 8003a74:	e016      	b.n	8003aa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fa96 	bl	8003fb0 <DMA_CalcBaseAndBitshift>
 8003a84:	4603      	mov	r3, r0
 8003a86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8c:	223f      	movs	r2, #63	; 0x3f
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	f010803f 	.word	0xf010803f

08003ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_DMA_Start_IT+0x26>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e040      	b.n	8003b58 <HAL_DMA_Start_IT+0xa8>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d12f      	bne.n	8003b4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2202      	movs	r2, #2
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fa28 	bl	8003f54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	223f      	movs	r2, #63	; 0x3f
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0216 	orr.w	r2, r2, #22
 8003b1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0208 	orr.w	r2, r2, #8
 8003b36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	e005      	b.n	8003b56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
 8003b54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b6e:	f7ff f9ab 	bl	8002ec8 <HAL_GetTick>
 8003b72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d008      	beq.n	8003b92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e052      	b.n	8003c38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0216 	bic.w	r2, r2, #22
 8003ba0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <HAL_DMA_Abort+0x62>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0208 	bic.w	r2, r2, #8
 8003bd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003be2:	e013      	b.n	8003c0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003be4:	f7ff f970 	bl	8002ec8 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d90c      	bls.n	8003c0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e015      	b.n	8003c38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e4      	bne.n	8003be4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	223f      	movs	r2, #63	; 0x3f
 8003c20:	409a      	lsls	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c4c:	4b8e      	ldr	r3, [pc, #568]	; (8003e88 <HAL_DMA_IRQHandler+0x248>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a8e      	ldr	r2, [pc, #568]	; (8003e8c <HAL_DMA_IRQHandler+0x24c>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0a9b      	lsrs	r3, r3, #10
 8003c58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01a      	beq.n	8003cac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d013      	beq.n	8003cac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0204 	bic.w	r2, r2, #4
 8003c92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	2208      	movs	r2, #8
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d012      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	2201      	movs	r2, #1
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	f043 0202 	orr.w	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d012      	beq.n	8003d18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	2204      	movs	r2, #4
 8003d06:	409a      	lsls	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	f043 0204 	orr.w	r2, r3, #4
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1c:	2210      	movs	r2, #16
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d043      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d03c      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	2210      	movs	r2, #16
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d018      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d024      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	4798      	blx	r3
 8003d6e:	e01f      	b.n	8003db0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01b      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
 8003d80:	e016      	b.n	8003db0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d107      	bne.n	8003da0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0208 	bic.w	r2, r2, #8
 8003d9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db4:	2220      	movs	r2, #32
 8003db6:	409a      	lsls	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 808f 	beq.w	8003ee0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8087 	beq.w	8003ee0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d136      	bne.n	8003e58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0216 	bic.w	r2, r2, #22
 8003df8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d103      	bne.n	8003e1a <HAL_DMA_IRQHandler+0x1da>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0208 	bic.w	r2, r2, #8
 8003e28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	223f      	movs	r2, #63	; 0x3f
 8003e30:	409a      	lsls	r2, r3
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d07e      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
        }
        return;
 8003e56:	e079      	b.n	8003f4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01d      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d031      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
 8003e84:	e02c      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x2a0>
 8003e86:	bf00      	nop
 8003e88:	20000004 	.word	0x20000004
 8003e8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d023      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
 8003ea0:	e01e      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10f      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0210 	bic.w	r2, r2, #16
 8003ebe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d032      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d022      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2205      	movs	r2, #5
 8003ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d307      	bcc.n	8003f28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f2      	bne.n	8003f0c <HAL_DMA_IRQHandler+0x2cc>
 8003f26:	e000      	b.n	8003f2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
 8003f4a:	e000      	b.n	8003f4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f4c:	bf00      	nop
    }
  }
}
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b40      	cmp	r3, #64	; 0x40
 8003f80:	d108      	bne.n	8003f94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f92:	e007      	b.n	8003fa4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr
	...

08003fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	3b10      	subs	r3, #16
 8003fc0:	4a13      	ldr	r2, [pc, #76]	; (8004010 <DMA_CalcBaseAndBitshift+0x60>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <DMA_CalcBaseAndBitshift+0x64>)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d909      	bls.n	8003ff2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	1d1a      	adds	r2, r3, #4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	659a      	str	r2, [r3, #88]	; 0x58
 8003ff0:	e007      	b.n	8004002 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ffa:	f023 0303 	bic.w	r3, r3, #3
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	aaaaaaab 	.word	0xaaaaaaab
 8004014:	080059b0 	.word	0x080059b0

08004018 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d11f      	bne.n	8004072 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d856      	bhi.n	80040e6 <DMA_CheckFifoParam+0xce>
 8004038:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <DMA_CheckFifoParam+0x28>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004051 	.word	0x08004051
 8004044:	08004063 	.word	0x08004063
 8004048:	08004051 	.word	0x08004051
 800404c:	080040e7 	.word	0x080040e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d046      	beq.n	80040ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004060:	e043      	b.n	80040ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800406a:	d140      	bne.n	80040ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004070:	e03d      	b.n	80040ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407a:	d121      	bne.n	80040c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d837      	bhi.n	80040f2 <DMA_CheckFifoParam+0xda>
 8004082:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <DMA_CheckFifoParam+0x70>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	08004099 	.word	0x08004099
 800408c:	0800409f 	.word	0x0800409f
 8004090:	08004099 	.word	0x08004099
 8004094:	080040b1 	.word	0x080040b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      break;
 800409c:	e030      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d025      	beq.n	80040f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ae:	e022      	b.n	80040f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040b8:	d11f      	bne.n	80040fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040be:	e01c      	b.n	80040fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d903      	bls.n	80040ce <DMA_CheckFifoParam+0xb6>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d003      	beq.n	80040d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040cc:	e018      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
      break;
 80040d2:	e015      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      break;
 80040e4:	e00b      	b.n	80040fe <DMA_CheckFifoParam+0xe6>
      break;
 80040e6:	bf00      	nop
 80040e8:	e00a      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040ea:	bf00      	nop
 80040ec:	e008      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040ee:	bf00      	nop
 80040f0:	e006      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040f2:	bf00      	nop
 80040f4:	e004      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040f6:	bf00      	nop
 80040f8:	e002      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;   
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800411a:	e16f      	b.n	80043fc <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	2101      	movs	r1, #1
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	fa01 f303 	lsl.w	r3, r1, r3
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8161 	beq.w	80043f6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	2b01      	cmp	r3, #1
 800413e:	d005      	beq.n	800414c <HAL_GPIO_Init+0x40>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d130      	bne.n	80041ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	2203      	movs	r2, #3
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4013      	ands	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004182:	2201      	movs	r2, #1
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4013      	ands	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f003 0201 	and.w	r2, r3, #1
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d017      	beq.n	80041ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	2203      	movs	r2, #3
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d123      	bne.n	800423e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	08da      	lsrs	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3208      	adds	r2, #8
 80041fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004202:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	220f      	movs	r2, #15
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4013      	ands	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	08da      	lsrs	r2, r3, #3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3208      	adds	r2, #8
 8004238:	6939      	ldr	r1, [r7, #16]
 800423a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	2203      	movs	r2, #3
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 0203 	and.w	r2, r3, #3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80bb 	beq.w	80043f6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004280:	2300      	movs	r3, #0
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	4b64      	ldr	r3, [pc, #400]	; (8004418 <HAL_GPIO_Init+0x30c>)
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	4a63      	ldr	r2, [pc, #396]	; (8004418 <HAL_GPIO_Init+0x30c>)
 800428a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800428e:	6453      	str	r3, [r2, #68]	; 0x44
 8004290:	4b61      	ldr	r3, [pc, #388]	; (8004418 <HAL_GPIO_Init+0x30c>)
 8004292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800429c:	4a5f      	ldr	r2, [pc, #380]	; (800441c <HAL_GPIO_Init+0x310>)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	089b      	lsrs	r3, r3, #2
 80042a2:	3302      	adds	r3, #2
 80042a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	220f      	movs	r2, #15
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4013      	ands	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a57      	ldr	r2, [pc, #348]	; (8004420 <HAL_GPIO_Init+0x314>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d031      	beq.n	800432c <HAL_GPIO_Init+0x220>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a56      	ldr	r2, [pc, #344]	; (8004424 <HAL_GPIO_Init+0x318>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d02b      	beq.n	8004328 <HAL_GPIO_Init+0x21c>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a55      	ldr	r2, [pc, #340]	; (8004428 <HAL_GPIO_Init+0x31c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d025      	beq.n	8004324 <HAL_GPIO_Init+0x218>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a54      	ldr	r2, [pc, #336]	; (800442c <HAL_GPIO_Init+0x320>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d01f      	beq.n	8004320 <HAL_GPIO_Init+0x214>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a53      	ldr	r2, [pc, #332]	; (8004430 <HAL_GPIO_Init+0x324>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d019      	beq.n	800431c <HAL_GPIO_Init+0x210>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a52      	ldr	r2, [pc, #328]	; (8004434 <HAL_GPIO_Init+0x328>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_GPIO_Init+0x20c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a51      	ldr	r2, [pc, #324]	; (8004438 <HAL_GPIO_Init+0x32c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00d      	beq.n	8004314 <HAL_GPIO_Init+0x208>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a50      	ldr	r2, [pc, #320]	; (800443c <HAL_GPIO_Init+0x330>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <HAL_GPIO_Init+0x204>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a4f      	ldr	r2, [pc, #316]	; (8004440 <HAL_GPIO_Init+0x334>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <HAL_GPIO_Init+0x200>
 8004308:	2308      	movs	r3, #8
 800430a:	e010      	b.n	800432e <HAL_GPIO_Init+0x222>
 800430c:	2309      	movs	r3, #9
 800430e:	e00e      	b.n	800432e <HAL_GPIO_Init+0x222>
 8004310:	2307      	movs	r3, #7
 8004312:	e00c      	b.n	800432e <HAL_GPIO_Init+0x222>
 8004314:	2306      	movs	r3, #6
 8004316:	e00a      	b.n	800432e <HAL_GPIO_Init+0x222>
 8004318:	2305      	movs	r3, #5
 800431a:	e008      	b.n	800432e <HAL_GPIO_Init+0x222>
 800431c:	2304      	movs	r3, #4
 800431e:	e006      	b.n	800432e <HAL_GPIO_Init+0x222>
 8004320:	2303      	movs	r3, #3
 8004322:	e004      	b.n	800432e <HAL_GPIO_Init+0x222>
 8004324:	2302      	movs	r3, #2
 8004326:	e002      	b.n	800432e <HAL_GPIO_Init+0x222>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_GPIO_Init+0x222>
 800432c:	2300      	movs	r3, #0
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	f002 0203 	and.w	r2, r2, #3
 8004334:	0092      	lsls	r2, r2, #2
 8004336:	4093      	lsls	r3, r2
 8004338:	461a      	mov	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004340:	4936      	ldr	r1, [pc, #216]	; (800441c <HAL_GPIO_Init+0x310>)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	3302      	adds	r3, #2
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800434e:	4b3d      	ldr	r3, [pc, #244]	; (8004444 <HAL_GPIO_Init+0x338>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	43db      	mvns	r3, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4013      	ands	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004372:	4a34      	ldr	r2, [pc, #208]	; (8004444 <HAL_GPIO_Init+0x338>)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004378:	4b32      	ldr	r3, [pc, #200]	; (8004444 <HAL_GPIO_Init+0x338>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	43db      	mvns	r3, r3
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800439c:	4a29      	ldr	r2, [pc, #164]	; (8004444 <HAL_GPIO_Init+0x338>)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043a2:	4b28      	ldr	r3, [pc, #160]	; (8004444 <HAL_GPIO_Init+0x338>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043c6:	4a1f      	ldr	r2, [pc, #124]	; (8004444 <HAL_GPIO_Init+0x338>)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <HAL_GPIO_Init+0x338>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4013      	ands	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043f0:	4a14      	ldr	r2, [pc, #80]	; (8004444 <HAL_GPIO_Init+0x338>)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	3301      	adds	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	fa22 f303 	lsr.w	r3, r2, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	f47f ae88 	bne.w	800411c <HAL_GPIO_Init+0x10>
  }
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr
 8004418:	40023800 	.word	0x40023800
 800441c:	40013800 	.word	0x40013800
 8004420:	40020000 	.word	0x40020000
 8004424:	40020400 	.word	0x40020400
 8004428:	40020800 	.word	0x40020800
 800442c:	40020c00 	.word	0x40020c00
 8004430:	40021000 	.word	0x40021000
 8004434:	40021400 	.word	0x40021400
 8004438:	40021800 	.word	0x40021800
 800443c:	40021c00 	.word	0x40021c00
 8004440:	40022000 	.word	0x40022000
 8004444:	40013c00 	.word	0x40013c00

08004448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	887b      	ldrh	r3, [r7, #2]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	e001      	b.n	800446a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	460b      	mov	r3, r1
 8004480:	807b      	strh	r3, [r7, #2]
 8004482:	4613      	mov	r3, r2
 8004484:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004486:	787b      	ldrb	r3, [r7, #1]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800448c:	887a      	ldrh	r2, [r7, #2]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004492:	e003      	b.n	800449c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004494:	887b      	ldrh	r3, [r7, #2]
 8004496:	041a      	lsls	r2, r3, #16
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	619a      	str	r2, [r3, #24]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr
	...

080044a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08a      	sub	sp, #40	; 0x28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e236      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d050      	beq.n	8004568 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044c6:	4b9e      	ldr	r3, [pc, #632]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d00c      	beq.n	80044ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d2:	4b9b      	ldr	r3, [pc, #620]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d112      	bne.n	8004504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044de:	4b98      	ldr	r3, [pc, #608]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ea:	d10b      	bne.n	8004504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	4b94      	ldr	r3, [pc, #592]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d036      	beq.n	8004566 <HAL_RCC_OscConfig+0xbe>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d132      	bne.n	8004566 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e211      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	4b8e      	ldr	r3, [pc, #568]	; (8004744 <HAL_RCC_OscConfig+0x29c>)
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d013      	beq.n	800453e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fe fcd7 	bl	8002ec8 <HAL_GetTick>
 800451a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800451e:	f7fe fcd3 	bl	8002ec8 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b64      	cmp	r3, #100	; 0x64
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e1fb      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004530:	4b83      	ldr	r3, [pc, #524]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x76>
 800453c:	e014      	b.n	8004568 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453e:	f7fe fcc3 	bl	8002ec8 <HAL_GetTick>
 8004542:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004546:	f7fe fcbf 	bl	8002ec8 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	; 0x64
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e1e7      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004558:	4b79      	ldr	r3, [pc, #484]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x9e>
 8004564:	e000      	b.n	8004568 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004566:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d077      	beq.n	8004664 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004574:	4b72      	ldr	r3, [pc, #456]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004580:	4b6f      	ldr	r3, [pc, #444]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004588:	2b08      	cmp	r3, #8
 800458a:	d126      	bne.n	80045da <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458c:	4b6c      	ldr	r3, [pc, #432]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d120      	bne.n	80045da <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004598:	4b69      	ldr	r3, [pc, #420]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_OscConfig+0x108>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e1bb      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b0:	4b63      	ldr	r3, [pc, #396]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	21f8      	movs	r1, #248	; 0xf8
 80045be:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	69b9      	ldr	r1, [r7, #24]
 80045c2:	fa91 f1a1 	rbit	r1, r1
 80045c6:	6179      	str	r1, [r7, #20]
  return result;
 80045c8:	6979      	ldr	r1, [r7, #20]
 80045ca:	fab1 f181 	clz	r1, r1
 80045ce:	b2c9      	uxtb	r1, r1
 80045d0:	408b      	lsls	r3, r1
 80045d2:	495b      	ldr	r1, [pc, #364]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d8:	e044      	b.n	8004664 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d02a      	beq.n	8004638 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e2:	4b59      	ldr	r3, [pc, #356]	; (8004748 <HAL_RCC_OscConfig+0x2a0>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7fe fc6e 	bl	8002ec8 <HAL_GetTick>
 80045ec:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f0:	f7fe fc6a 	bl	8002ec8 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e192      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004602:	4b4f      	ldr	r3, [pc, #316]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460e:	4b4c      	ldr	r3, [pc, #304]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	21f8      	movs	r1, #248	; 0xf8
 800461c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	6939      	ldr	r1, [r7, #16]
 8004620:	fa91 f1a1 	rbit	r1, r1
 8004624:	60f9      	str	r1, [r7, #12]
  return result;
 8004626:	68f9      	ldr	r1, [r7, #12]
 8004628:	fab1 f181 	clz	r1, r1
 800462c:	b2c9      	uxtb	r1, r1
 800462e:	408b      	lsls	r3, r1
 8004630:	4943      	ldr	r1, [pc, #268]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004632:	4313      	orrs	r3, r2
 8004634:	600b      	str	r3, [r1, #0]
 8004636:	e015      	b.n	8004664 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004638:	4b43      	ldr	r3, [pc, #268]	; (8004748 <HAL_RCC_OscConfig+0x2a0>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fe fc43 	bl	8002ec8 <HAL_GetTick>
 8004642:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004646:	f7fe fc3f 	bl	8002ec8 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e167      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004658:	4b39      	ldr	r3, [pc, #228]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d030      	beq.n	80046d2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d016      	beq.n	80046a6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004678:	4b34      	ldr	r3, [pc, #208]	; (800474c <HAL_RCC_OscConfig+0x2a4>)
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467e:	f7fe fc23 	bl	8002ec8 <HAL_GetTick>
 8004682:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004686:	f7fe fc1f 	bl	8002ec8 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e147      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004698:	4b29      	ldr	r3, [pc, #164]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800469a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0x1de>
 80046a4:	e015      	b.n	80046d2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a6:	4b29      	ldr	r3, [pc, #164]	; (800474c <HAL_RCC_OscConfig+0x2a4>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ac:	f7fe fc0c 	bl	8002ec8 <HAL_GetTick>
 80046b0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046b4:	f7fe fc08 	bl	8002ec8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e130      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c6:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80046c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8087 	beq.w	80047ee <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e6:	4b16      	ldr	r3, [pc, #88]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d110      	bne.n	8004714 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	4a11      	ldr	r2, [pc, #68]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004700:	6413      	str	r3, [r2, #64]	; 0x40
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004714:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <HAL_RCC_OscConfig+0x2a8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a0d      	ldr	r2, [pc, #52]	; (8004750 <HAL_RCC_OscConfig+0x2a8>)
 800471a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_OscConfig+0x2a8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d122      	bne.n	8004772 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800472c:	4b08      	ldr	r3, [pc, #32]	; (8004750 <HAL_RCC_OscConfig+0x2a8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a07      	ldr	r2, [pc, #28]	; (8004750 <HAL_RCC_OscConfig+0x2a8>)
 8004732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004736:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004738:	f7fe fbc6 	bl	8002ec8 <HAL_GetTick>
 800473c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473e:	e012      	b.n	8004766 <HAL_RCC_OscConfig+0x2be>
 8004740:	40023800 	.word	0x40023800
 8004744:	40023802 	.word	0x40023802
 8004748:	42470000 	.word	0x42470000
 800474c:	42470e80 	.word	0x42470e80
 8004750:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004754:	f7fe fbb8 	bl	8002ec8 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e0e0      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004766:	4b72      	ldr	r3, [pc, #456]	; (8004930 <HAL_RCC_OscConfig+0x488>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	4b6f      	ldr	r3, [pc, #444]	; (8004934 <HAL_RCC_OscConfig+0x48c>)
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d015      	beq.n	80047b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004784:	f7fe fba0 	bl	8002ec8 <HAL_GetTick>
 8004788:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478c:	f7fe fb9c 	bl	8002ec8 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	; 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e0c2      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a2:	4b65      	ldr	r3, [pc, #404]	; (8004938 <HAL_RCC_OscConfig+0x490>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0ee      	beq.n	800478c <HAL_RCC_OscConfig+0x2e4>
 80047ae:	e014      	b.n	80047da <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b0:	f7fe fb8a 	bl	8002ec8 <HAL_GetTick>
 80047b4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b8:	f7fe fb86 	bl	8002ec8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e0ac      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ce:	4b5a      	ldr	r3, [pc, #360]	; (8004938 <HAL_RCC_OscConfig+0x490>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1ee      	bne.n	80047b8 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d105      	bne.n	80047ee <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e2:	4b55      	ldr	r3, [pc, #340]	; (8004938 <HAL_RCC_OscConfig+0x490>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	4a54      	ldr	r2, [pc, #336]	; (8004938 <HAL_RCC_OscConfig+0x490>)
 80047e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8097 	beq.w	8004926 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047f8:	4b4f      	ldr	r3, [pc, #316]	; (8004938 <HAL_RCC_OscConfig+0x490>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b08      	cmp	r3, #8
 8004802:	d061      	beq.n	80048c8 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d146      	bne.n	800489a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480c:	4b4b      	ldr	r3, [pc, #300]	; (800493c <HAL_RCC_OscConfig+0x494>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004812:	f7fe fb59 	bl	8002ec8 <HAL_GetTick>
 8004816:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800481a:	f7fe fb55 	bl	8002ec8 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b64      	cmp	r3, #100	; 0x64
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e07d      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482c:	4b42      	ldr	r3, [pc, #264]	; (8004938 <HAL_RCC_OscConfig+0x490>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004838:	4b3f      	ldr	r3, [pc, #252]	; (8004938 <HAL_RCC_OscConfig+0x490>)
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	4b40      	ldr	r3, [pc, #256]	; (8004940 <HAL_RCC_OscConfig+0x498>)
 800483e:	4013      	ands	r3, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	69d1      	ldr	r1, [r2, #28]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6a12      	ldr	r2, [r2, #32]
 8004848:	4311      	orrs	r1, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800484e:	0192      	lsls	r2, r2, #6
 8004850:	4311      	orrs	r1, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004856:	0612      	lsls	r2, r2, #24
 8004858:	4311      	orrs	r1, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800485e:	0852      	lsrs	r2, r2, #1
 8004860:	3a01      	subs	r2, #1
 8004862:	0412      	lsls	r2, r2, #16
 8004864:	430a      	orrs	r2, r1
 8004866:	4934      	ldr	r1, [pc, #208]	; (8004938 <HAL_RCC_OscConfig+0x490>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486c:	4b33      	ldr	r3, [pc, #204]	; (800493c <HAL_RCC_OscConfig+0x494>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004872:	f7fe fb29 	bl	8002ec8 <HAL_GetTick>
 8004876:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487a:	f7fe fb25 	bl	8002ec8 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b64      	cmp	r3, #100	; 0x64
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e04d      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488c:	4b2a      	ldr	r3, [pc, #168]	; (8004938 <HAL_RCC_OscConfig+0x490>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x3d2>
 8004898:	e045      	b.n	8004926 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489a:	4b28      	ldr	r3, [pc, #160]	; (800493c <HAL_RCC_OscConfig+0x494>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fe fb12 	bl	8002ec8 <HAL_GetTick>
 80048a4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fe fb0e 	bl	8002ec8 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e036      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	4b1f      	ldr	r3, [pc, #124]	; (8004938 <HAL_RCC_OscConfig+0x490>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x400>
 80048c6:	e02e      	b.n	8004926 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e029      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80048d4:	4b18      	ldr	r3, [pc, #96]	; (8004938 <HAL_RCC_OscConfig+0x490>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d11c      	bne.n	8004922 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d115      	bne.n	8004922 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	099b      	lsrs	r3, r3, #6
 80048fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004902:	429a      	cmp	r2, r3
 8004904:	d10d      	bne.n	8004922 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004910:	429a      	cmp	r2, r3
 8004912:	d106      	bne.n	8004922 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3728      	adds	r7, #40	; 0x28
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40007000 	.word	0x40007000
 8004934:	40023870 	.word	0x40023870
 8004938:	40023800 	.word	0x40023800
 800493c:	42470060 	.word	0x42470060
 8004940:	f0bc8000 	.word	0xf0bc8000

08004944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0d2      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004958:	4b6b      	ldr	r3, [pc, #428]	; (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d90c      	bls.n	8004980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b68      	ldr	r3, [pc, #416]	; (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496e:	4b66      	ldr	r3, [pc, #408]	; (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0be      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004998:	4b5c      	ldr	r3, [pc, #368]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4a5b      	ldr	r2, [pc, #364]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 800499e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80049b0:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a55      	ldr	r2, [pc, #340]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049bc:	4b53      	ldr	r3, [pc, #332]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4950      	ldr	r1, [pc, #320]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d040      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d107      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e2:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d115      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e085      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fa:	4b44      	ldr	r3, [pc, #272]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e079      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0a:	4b40      	ldr	r3, [pc, #256]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e071      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a1a:	4b3c      	ldr	r3, [pc, #240]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	4939      	ldr	r1, [pc, #228]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a2c:	f7fe fa4c 	bl	8002ec8 <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a32:	e00a      	b.n	8004a4a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a34:	f7fe fa48 	bl	8002ec8 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e059      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 020c 	and.w	r2, r3, #12
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d1eb      	bne.n	8004a34 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b2a      	ldr	r3, [pc, #168]	; (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d20c      	bcs.n	8004a84 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b27      	ldr	r3, [pc, #156]	; (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b25      	ldr	r3, [pc, #148]	; (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e03c      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a90:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	491b      	ldr	r1, [pc, #108]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aae:	4b17      	ldr	r3, [pc, #92]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4913      	ldr	r1, [pc, #76]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004ac2:	f000 f82b 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8004ac6:	4601      	mov	r1, r0
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ad0:	22f0      	movs	r2, #240	; 0xf0
 8004ad2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	fa92 f2a2 	rbit	r2, r2
 8004ada:	60fa      	str	r2, [r7, #12]
  return result;
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	fab2 f282 	clz	r2, r2
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	40d3      	lsrs	r3, r2
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <HAL_RCC_ClockConfig+0x1cc>)
 8004ae8:	5cd3      	ldrb	r3, [r2, r3]
 8004aea:	fa21 f303 	lsr.w	r3, r1, r3
 8004aee:	4a09      	ldr	r2, [pc, #36]	; (8004b14 <HAL_RCC_ClockConfig+0x1d0>)
 8004af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004af2:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <HAL_RCC_ClockConfig+0x1d4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fe f9a4 	bl	8002e44 <HAL_InitTick>

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023c00 	.word	0x40023c00
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	080059a0 	.word	0x080059a0
 8004b14:	20000004 	.word	0x20000004
 8004b18:	20000008 	.word	0x20000008

08004b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b20:	b090      	sub	sp, #64	; 0x40
 8004b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
 8004b28:	2300      	movs	r3, #0
 8004b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b34:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d00d      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x40>
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	f200 80a2 	bhi.w	8004c8a <HAL_RCC_GetSysClockFreq+0x16e>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x34>
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b4e:	e09c      	b.n	8004c8a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b50:	4b53      	ldr	r3, [pc, #332]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004b54:	e09c      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b56:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b5a:	e099      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b5c:	4b4f      	ldr	r3, [pc, #316]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b64:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b66:	4b4d      	ldr	r3, [pc, #308]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d027      	beq.n	8004bc2 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b72:	4b4a      	ldr	r3, [pc, #296]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	099b      	lsrs	r3, r3, #6
 8004b78:	2200      	movs	r2, #0
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	627a      	str	r2, [r7, #36]	; 0x24
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b84:	2100      	movs	r1, #0
 8004b86:	4b47      	ldr	r3, [pc, #284]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b88:	fb03 f201 	mul.w	r2, r3, r1
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	fb00 f303 	mul.w	r3, r0, r3
 8004b92:	4413      	add	r3, r2
 8004b94:	4a43      	ldr	r2, [pc, #268]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b96:	fba0 2102 	umull	r2, r1, r0, r2
 8004b9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b9c:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba0:	4413      	add	r3, r2
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	61fa      	str	r2, [r7, #28]
 8004bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004bb4:	f7fc f91e 	bl	8000df4 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc0:	e055      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b36      	ldr	r3, [pc, #216]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	2200      	movs	r2, #0
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	617a      	str	r2, [r7, #20]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004bd4:	f04f 0b00 	mov.w	fp, #0
 8004bd8:	4652      	mov	r2, sl
 8004bda:	465b      	mov	r3, fp
 8004bdc:	f04f 0000 	mov.w	r0, #0
 8004be0:	f04f 0100 	mov.w	r1, #0
 8004be4:	0159      	lsls	r1, r3, #5
 8004be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bea:	0150      	lsls	r0, r2, #5
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	ebb2 080a 	subs.w	r8, r2, sl
 8004bf4:	eb63 090b 	sbc.w	r9, r3, fp
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c04:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c08:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c0c:	ebb2 0408 	subs.w	r4, r2, r8
 8004c10:	eb63 0509 	sbc.w	r5, r3, r9
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	00eb      	lsls	r3, r5, #3
 8004c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c22:	00e2      	lsls	r2, r4, #3
 8004c24:	4614      	mov	r4, r2
 8004c26:	461d      	mov	r5, r3
 8004c28:	eb14 030a 	adds.w	r3, r4, sl
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	eb45 030b 	adc.w	r3, r5, fp
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c40:	4629      	mov	r1, r5
 8004c42:	028b      	lsls	r3, r1, #10
 8004c44:	4620      	mov	r0, r4
 8004c46:	4629      	mov	r1, r5
 8004c48:	4604      	mov	r4, r0
 8004c4a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004c4e:	4601      	mov	r1, r0
 8004c50:	028a      	lsls	r2, r1, #10
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c58:	2200      	movs	r2, #0
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	60fa      	str	r2, [r7, #12]
 8004c5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c62:	f7fc f8c7 	bl	8000df4 <__aeabi_uldivmod>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	0c1b      	lsrs	r3, r3, #16
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c88:	e002      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3740      	adds	r7, #64	; 0x40
 8004c96:	46bd      	mov	sp, r7
 8004c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	00f42400 	.word	0x00f42400
 8004ca4:	017d7840 	.word	0x017d7840

08004ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e041      	b.n	8004d3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fd ff00 	bl	8002ad4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f000 fae8 	bl	80052bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <HAL_TIM_PWM_Start+0x24>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	e022      	b.n	8004db2 <HAL_TIM_PWM_Start+0x6a>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d109      	bne.n	8004d86 <HAL_TIM_PWM_Start+0x3e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	bf14      	ite	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	2300      	moveq	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	e015      	b.n	8004db2 <HAL_TIM_PWM_Start+0x6a>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d109      	bne.n	8004da0 <HAL_TIM_PWM_Start+0x58>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	bf14      	ite	ne
 8004d98:	2301      	movne	r3, #1
 8004d9a:	2300      	moveq	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	e008      	b.n	8004db2 <HAL_TIM_PWM_Start+0x6a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07c      	b.n	8004eb4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_PWM_Start+0x82>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc8:	e013      	b.n	8004df2 <HAL_TIM_PWM_Start+0xaa>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d104      	bne.n	8004dda <HAL_TIM_PWM_Start+0x92>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd8:	e00b      	b.n	8004df2 <HAL_TIM_PWM_Start+0xaa>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d104      	bne.n	8004dea <HAL_TIM_PWM_Start+0xa2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de8:	e003      	b.n	8004df2 <HAL_TIM_PWM_Start+0xaa>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2201      	movs	r2, #1
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fca8 	bl	8005750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2d      	ldr	r2, [pc, #180]	; (8004ebc <HAL_TIM_PWM_Start+0x174>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_TIM_PWM_Start+0xcc>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <HAL_TIM_PWM_Start+0x178>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_TIM_PWM_Start+0xd0>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <HAL_TIM_PWM_Start+0xd2>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d007      	beq.n	8004e2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <HAL_TIM_PWM_Start+0x174>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d022      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x136>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e40:	d01d      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x136>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <HAL_TIM_PWM_Start+0x17c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d018      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x136>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <HAL_TIM_PWM_Start+0x180>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x136>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <HAL_TIM_PWM_Start+0x184>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00e      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x136>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a16      	ldr	r2, [pc, #88]	; (8004ec0 <HAL_TIM_PWM_Start+0x178>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x136>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <HAL_TIM_PWM_Start+0x188>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d004      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x136>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <HAL_TIM_PWM_Start+0x18c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d111      	bne.n	8004ea2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b06      	cmp	r3, #6
 8004e8e:	d010      	beq.n	8004eb2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea0:	e007      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0201 	orr.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40010400 	.word	0x40010400
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40001800 	.word	0x40001800

08004ed8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e097      	b.n	800501c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fd fe07 	bl	8002b14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f1c:	f023 0307 	bic.w	r3, r3, #7
 8004f20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f000 f9c5 	bl	80052bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f78:	f023 030c 	bic.w	r3, r3, #12
 8004f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	4313      	orrs	r3, r2
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	011a      	lsls	r2, r3, #4
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	031b      	lsls	r3, r3, #12
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005034:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800503c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005044:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800504c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d110      	bne.n	8005076 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d102      	bne.n	8005060 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800505a:	7b7b      	ldrb	r3, [r7, #13]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d001      	beq.n	8005064 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e069      	b.n	8005138 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005074:	e031      	b.n	80050da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d110      	bne.n	800509e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800507c:	7bbb      	ldrb	r3, [r7, #14]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d102      	bne.n	8005088 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005082:	7b3b      	ldrb	r3, [r7, #12]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e055      	b.n	8005138 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800509c:	e01d      	b.n	80050da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d108      	bne.n	80050b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050a4:	7bbb      	ldrb	r3, [r7, #14]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d105      	bne.n	80050b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050aa:	7b7b      	ldrb	r3, [r7, #13]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d102      	bne.n	80050b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050b0:	7b3b      	ldrb	r3, [r7, #12]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d001      	beq.n	80050ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e03e      	b.n	8005138 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_TIM_Encoder_Start+0xc4>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d008      	beq.n	80050f8 <HAL_TIM_Encoder_Start+0xd4>
 80050e6:	e00f      	b.n	8005108 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2201      	movs	r2, #1
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fb2d 	bl	8005750 <TIM_CCxChannelCmd>
      break;
 80050f6:	e016      	b.n	8005126 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2201      	movs	r2, #1
 80050fe:	2104      	movs	r1, #4
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fb25 	bl	8005750 <TIM_CCxChannelCmd>
      break;
 8005106:	e00e      	b.n	8005126 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2201      	movs	r2, #1
 800510e:	2100      	movs	r1, #0
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fb1d 	bl	8005750 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2201      	movs	r2, #1
 800511c:	2104      	movs	r1, #4
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fb16 	bl	8005750 <TIM_CCxChannelCmd>
      break;
 8005124:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005156:	2302      	movs	r3, #2
 8005158:	e0ac      	b.n	80052b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b0c      	cmp	r3, #12
 8005166:	f200 809f 	bhi.w	80052a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	080051a5 	.word	0x080051a5
 8005174:	080052a9 	.word	0x080052a9
 8005178:	080052a9 	.word	0x080052a9
 800517c:	080052a9 	.word	0x080052a9
 8005180:	080051e5 	.word	0x080051e5
 8005184:	080052a9 	.word	0x080052a9
 8005188:	080052a9 	.word	0x080052a9
 800518c:	080052a9 	.word	0x080052a9
 8005190:	08005227 	.word	0x08005227
 8005194:	080052a9 	.word	0x080052a9
 8005198:	080052a9 	.word	0x080052a9
 800519c:	080052a9 	.word	0x080052a9
 80051a0:	08005267 	.word	0x08005267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 f924 	bl	80053f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0208 	orr.w	r2, r2, #8
 80051be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0204 	bic.w	r2, r2, #4
 80051ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6999      	ldr	r1, [r3, #24]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	619a      	str	r2, [r3, #24]
      break;
 80051e2:	e062      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 f974 	bl	80054d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6999      	ldr	r1, [r3, #24]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	021a      	lsls	r2, r3, #8
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	619a      	str	r2, [r3, #24]
      break;
 8005224:	e041      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	4618      	mov	r0, r3
 800522e:	f000 f9c7 	bl	80055c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69da      	ldr	r2, [r3, #28]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0208 	orr.w	r2, r2, #8
 8005240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0204 	bic.w	r2, r2, #4
 8005250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69d9      	ldr	r1, [r3, #28]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	61da      	str	r2, [r3, #28]
      break;
 8005264:	e021      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fa1b 	bl	80056a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69d9      	ldr	r1, [r3, #28]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	021a      	lsls	r2, r3, #8
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	61da      	str	r2, [r3, #28]
      break;
 80052a6:	e000      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80052a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a3f      	ldr	r2, [pc, #252]	; (80053cc <TIM_Base_SetConfig+0x110>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d00f      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3c      	ldr	r2, [pc, #240]	; (80053d0 <TIM_Base_SetConfig+0x114>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3b      	ldr	r2, [pc, #236]	; (80053d4 <TIM_Base_SetConfig+0x118>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3a      	ldr	r2, [pc, #232]	; (80053d8 <TIM_Base_SetConfig+0x11c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a39      	ldr	r2, [pc, #228]	; (80053dc <TIM_Base_SetConfig+0x120>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d108      	bne.n	800530e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2e      	ldr	r2, [pc, #184]	; (80053cc <TIM_Base_SetConfig+0x110>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02b      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531c:	d027      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2b      	ldr	r2, [pc, #172]	; (80053d0 <TIM_Base_SetConfig+0x114>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d023      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2a      	ldr	r2, [pc, #168]	; (80053d4 <TIM_Base_SetConfig+0x118>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01f      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a29      	ldr	r2, [pc, #164]	; (80053d8 <TIM_Base_SetConfig+0x11c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01b      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a28      	ldr	r2, [pc, #160]	; (80053dc <TIM_Base_SetConfig+0x120>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d017      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a27      	ldr	r2, [pc, #156]	; (80053e0 <TIM_Base_SetConfig+0x124>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a26      	ldr	r2, [pc, #152]	; (80053e4 <TIM_Base_SetConfig+0x128>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00f      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <TIM_Base_SetConfig+0x12c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a24      	ldr	r2, [pc, #144]	; (80053ec <TIM_Base_SetConfig+0x130>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a23      	ldr	r2, [pc, #140]	; (80053f0 <TIM_Base_SetConfig+0x134>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <TIM_Base_SetConfig+0x138>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a09      	ldr	r2, [pc, #36]	; (80053cc <TIM_Base_SetConfig+0x110>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_Base_SetConfig+0xf8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a0b      	ldr	r2, [pc, #44]	; (80053dc <TIM_Base_SetConfig+0x120>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d103      	bne.n	80053bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	615a      	str	r2, [r3, #20]
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40000c00 	.word	0x40000c00
 80053dc:	40010400 	.word	0x40010400
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400
 80053e8:	40014800 	.word	0x40014800
 80053ec:	40001800 	.word	0x40001800
 80053f0:	40001c00 	.word	0x40001c00
 80053f4:	40002000 	.word	0x40002000

080053f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f023 0201 	bic.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 0302 	bic.w	r3, r3, #2
 8005440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <TIM_OC1_SetConfig+0xd8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_OC1_SetConfig+0x64>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <TIM_OC1_SetConfig+0xdc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d10c      	bne.n	8005476 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0308 	bic.w	r3, r3, #8
 8005462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <TIM_OC1_SetConfig+0xd8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC1_SetConfig+0x8e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC1_SetConfig+0xdc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d111      	bne.n	80054aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40010400 	.word	0x40010400

080054d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f023 0210 	bic.w	r2, r3, #16
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0320 	bic.w	r3, r3, #32
 8005522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a21      	ldr	r2, [pc, #132]	; (80055b8 <TIM_OC2_SetConfig+0xe0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC2_SetConfig+0x68>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a20      	ldr	r2, [pc, #128]	; (80055bc <TIM_OC2_SetConfig+0xe4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d10d      	bne.n	800555c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a16      	ldr	r2, [pc, #88]	; (80055b8 <TIM_OC2_SetConfig+0xe0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_OC2_SetConfig+0x94>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a15      	ldr	r2, [pc, #84]	; (80055bc <TIM_OC2_SetConfig+0xe4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d113      	bne.n	8005594 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800557a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40010400 	.word	0x40010400

080055c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0303 	bic.w	r3, r3, #3
 80055f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a21      	ldr	r2, [pc, #132]	; (80056a0 <TIM_OC3_SetConfig+0xe0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <TIM_OC3_SetConfig+0x66>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a20      	ldr	r2, [pc, #128]	; (80056a4 <TIM_OC3_SetConfig+0xe4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d10d      	bne.n	8005642 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800562c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a16      	ldr	r2, [pc, #88]	; (80056a0 <TIM_OC3_SetConfig+0xe0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d003      	beq.n	8005652 <TIM_OC3_SetConfig+0x92>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a15      	ldr	r2, [pc, #84]	; (80056a4 <TIM_OC3_SetConfig+0xe4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d113      	bne.n	800567a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40010400 	.word	0x40010400

080056a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	031b      	lsls	r3, r3, #12
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a11      	ldr	r2, [pc, #68]	; (8005748 <TIM_OC4_SetConfig+0xa0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_OC4_SetConfig+0x68>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a10      	ldr	r2, [pc, #64]	; (800574c <TIM_OC4_SetConfig+0xa4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d109      	bne.n	8005724 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	019b      	lsls	r3, r3, #6
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr
 8005748:	40010000 	.word	0x40010000
 800574c:	40010400 	.word	0x40010400

08005750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	2201      	movs	r2, #1
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1a      	ldr	r2, [r3, #32]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	43db      	mvns	r3, r3
 8005772:	401a      	ands	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	431a      	orrs	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr

08005798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e05a      	b.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a20      	ldr	r2, [pc, #128]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d022      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d01d      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1c      	ldr	r2, [pc, #112]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d018      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1a      	ldr	r2, [pc, #104]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a19      	ldr	r2, [pc, #100]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00e      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a17      	ldr	r2, [pc, #92]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d009      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a16      	ldr	r2, [pc, #88]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a14      	ldr	r2, [pc, #80]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d10c      	bne.n	8005854 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4313      	orrs	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	40010000 	.word	0x40010000
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800
 800587c:	40000c00 	.word	0x40000c00
 8005880:	40010400 	.word	0x40010400
 8005884:	40014000 	.word	0x40014000
 8005888:	40001800 	.word	0x40001800

0800588c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e03d      	b.n	8005924 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr
	...

08005930 <__libc_init_array>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	2600      	movs	r6, #0
 8005934:	4d0c      	ldr	r5, [pc, #48]	; (8005968 <__libc_init_array+0x38>)
 8005936:	4c0d      	ldr	r4, [pc, #52]	; (800596c <__libc_init_array+0x3c>)
 8005938:	1b64      	subs	r4, r4, r5
 800593a:	10a4      	asrs	r4, r4, #2
 800593c:	42a6      	cmp	r6, r4
 800593e:	d109      	bne.n	8005954 <__libc_init_array+0x24>
 8005940:	f000 f822 	bl	8005988 <_init>
 8005944:	2600      	movs	r6, #0
 8005946:	4d0a      	ldr	r5, [pc, #40]	; (8005970 <__libc_init_array+0x40>)
 8005948:	4c0a      	ldr	r4, [pc, #40]	; (8005974 <__libc_init_array+0x44>)
 800594a:	1b64      	subs	r4, r4, r5
 800594c:	10a4      	asrs	r4, r4, #2
 800594e:	42a6      	cmp	r6, r4
 8005950:	d105      	bne.n	800595e <__libc_init_array+0x2e>
 8005952:	bd70      	pop	{r4, r5, r6, pc}
 8005954:	f855 3b04 	ldr.w	r3, [r5], #4
 8005958:	4798      	blx	r3
 800595a:	3601      	adds	r6, #1
 800595c:	e7ee      	b.n	800593c <__libc_init_array+0xc>
 800595e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005962:	4798      	blx	r3
 8005964:	3601      	adds	r6, #1
 8005966:	e7f2      	b.n	800594e <__libc_init_array+0x1e>
 8005968:	080059c0 	.word	0x080059c0
 800596c:	080059c0 	.word	0x080059c0
 8005970:	080059c0 	.word	0x080059c0
 8005974:	080059c4 	.word	0x080059c4

08005978 <memset>:
 8005978:	4603      	mov	r3, r0
 800597a:	4402      	add	r2, r0
 800597c:	4293      	cmp	r3, r2
 800597e:	d100      	bne.n	8005982 <memset+0xa>
 8005980:	4770      	bx	lr
 8005982:	f803 1b01 	strb.w	r1, [r3], #1
 8005986:	e7f9      	b.n	800597c <memset+0x4>

08005988 <_init>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr

08005994 <_fini>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr
