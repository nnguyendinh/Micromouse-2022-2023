
Crewmate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007124  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080072ac  080072ac  000172ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c4  080072c4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072cc  080072cc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080072d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001434  20000084  08007358  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014b8  08007358  000214b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9e2  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030cd  00000000  00000000  0002ea8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00031b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00032ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202b2  00000000  00000000  00033890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001364f  00000000  00000000  00053b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc01d  00000000  00000000  00067191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001231ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004260  00000000  00000000  00123200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007294 	.word	0x08007294

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08007294 	.word	0x08007294

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2f>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ac:	bf24      	itt	cs
 80008ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008b6:	d90d      	bls.n	80008d4 <__aeabi_d2f+0x30>
 80008b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008d8:	d121      	bne.n	800091e <__aeabi_d2f+0x7a>
 80008da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008de:	bfbc      	itt	lt
 80008e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	4770      	bxlt	lr
 80008e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ee:	f1c2 0218 	rsb	r2, r2, #24
 80008f2:	f1c2 0c20 	rsb	ip, r2, #32
 80008f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008fa:	fa20 f002 	lsr.w	r0, r0, r2
 80008fe:	bf18      	it	ne
 8000900:	f040 0001 	orrne.w	r0, r0, #1
 8000904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800090c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000910:	ea40 000c 	orr.w	r0, r0, ip
 8000914:	fa23 f302 	lsr.w	r3, r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	e7cc      	b.n	80008b8 <__aeabi_d2f+0x14>
 800091e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000922:	d107      	bne.n	8000934 <__aeabi_d2f+0x90>
 8000924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000928:	bf1e      	ittt	ne
 800092a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800092e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000932:	4770      	bxne	lr
 8000934:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000938:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800093c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_frsub>:
 8000944:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000948:	e002      	b.n	8000950 <__addsf3>
 800094a:	bf00      	nop

0800094c <__aeabi_fsub>:
 800094c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000950 <__addsf3>:
 8000950:	0042      	lsls	r2, r0, #1
 8000952:	bf1f      	itttt	ne
 8000954:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000958:	ea92 0f03 	teqne	r2, r3
 800095c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000960:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000964:	d06a      	beq.n	8000a3c <__addsf3+0xec>
 8000966:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800096a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096e:	bfc1      	itttt	gt
 8000970:	18d2      	addgt	r2, r2, r3
 8000972:	4041      	eorgt	r1, r0
 8000974:	4048      	eorgt	r0, r1
 8000976:	4041      	eorgt	r1, r0
 8000978:	bfb8      	it	lt
 800097a:	425b      	neglt	r3, r3
 800097c:	2b19      	cmp	r3, #25
 800097e:	bf88      	it	hi
 8000980:	4770      	bxhi	lr
 8000982:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000996:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800099a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800099e:	bf18      	it	ne
 80009a0:	4249      	negne	r1, r1
 80009a2:	ea92 0f03 	teq	r2, r3
 80009a6:	d03f      	beq.n	8000a28 <__addsf3+0xd8>
 80009a8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ac:	fa41 fc03 	asr.w	ip, r1, r3
 80009b0:	eb10 000c 	adds.w	r0, r0, ip
 80009b4:	f1c3 0320 	rsb	r3, r3, #32
 80009b8:	fa01 f103 	lsl.w	r1, r1, r3
 80009bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009c0:	d502      	bpl.n	80009c8 <__addsf3+0x78>
 80009c2:	4249      	negs	r1, r1
 80009c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009cc:	d313      	bcc.n	80009f6 <__addsf3+0xa6>
 80009ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009d2:	d306      	bcc.n	80009e2 <__addsf3+0x92>
 80009d4:	0840      	lsrs	r0, r0, #1
 80009d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009da:	f102 0201 	add.w	r2, r2, #1
 80009de:	2afe      	cmp	r2, #254	; 0xfe
 80009e0:	d251      	bcs.n	8000a86 <__addsf3+0x136>
 80009e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ea:	bf08      	it	eq
 80009ec:	f020 0001 	biceq.w	r0, r0, #1
 80009f0:	ea40 0003 	orr.w	r0, r0, r3
 80009f4:	4770      	bx	lr
 80009f6:	0049      	lsls	r1, r1, #1
 80009f8:	eb40 0000 	adc.w	r0, r0, r0
 80009fc:	3a01      	subs	r2, #1
 80009fe:	bf28      	it	cs
 8000a00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a04:	d2ed      	bcs.n	80009e2 <__addsf3+0x92>
 8000a06:	fab0 fc80 	clz	ip, r0
 8000a0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a16:	bfaa      	itet	ge
 8000a18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a1c:	4252      	neglt	r2, r2
 8000a1e:	4318      	orrge	r0, r3
 8000a20:	bfbc      	itt	lt
 8000a22:	40d0      	lsrlt	r0, r2
 8000a24:	4318      	orrlt	r0, r3
 8000a26:	4770      	bx	lr
 8000a28:	f092 0f00 	teq	r2, #0
 8000a2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a30:	bf06      	itte	eq
 8000a32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a36:	3201      	addeq	r2, #1
 8000a38:	3b01      	subne	r3, #1
 8000a3a:	e7b5      	b.n	80009a8 <__addsf3+0x58>
 8000a3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a44:	bf18      	it	ne
 8000a46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4a:	d021      	beq.n	8000a90 <__addsf3+0x140>
 8000a4c:	ea92 0f03 	teq	r2, r3
 8000a50:	d004      	beq.n	8000a5c <__addsf3+0x10c>
 8000a52:	f092 0f00 	teq	r2, #0
 8000a56:	bf08      	it	eq
 8000a58:	4608      	moveq	r0, r1
 8000a5a:	4770      	bx	lr
 8000a5c:	ea90 0f01 	teq	r0, r1
 8000a60:	bf1c      	itt	ne
 8000a62:	2000      	movne	r0, #0
 8000a64:	4770      	bxne	lr
 8000a66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a6a:	d104      	bne.n	8000a76 <__addsf3+0x126>
 8000a6c:	0040      	lsls	r0, r0, #1
 8000a6e:	bf28      	it	cs
 8000a70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a74:	4770      	bx	lr
 8000a76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a7a:	bf3c      	itt	cc
 8000a7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bxcc	lr
 8000a82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8e:	4770      	bx	lr
 8000a90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a94:	bf16      	itet	ne
 8000a96:	4608      	movne	r0, r1
 8000a98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a9c:	4601      	movne	r1, r0
 8000a9e:	0242      	lsls	r2, r0, #9
 8000aa0:	bf06      	itte	eq
 8000aa2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa6:	ea90 0f01 	teqeq	r0, r1
 8000aaa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_ui2f>:
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	e004      	b.n	8000ac0 <__aeabi_i2f+0x8>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_i2f>:
 8000ab8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000abc:	bf48      	it	mi
 8000abe:	4240      	negmi	r0, r0
 8000ac0:	ea5f 0c00 	movs.w	ip, r0
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000acc:	4601      	mov	r1, r0
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	e01c      	b.n	8000b0e <__aeabi_l2f+0x2a>

08000ad4 <__aeabi_ul2f>:
 8000ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad8:	bf08      	it	eq
 8000ada:	4770      	bxeq	lr
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	e00a      	b.n	8000af8 <__aeabi_l2f+0x14>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_l2f>:
 8000ae4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae8:	bf08      	it	eq
 8000aea:	4770      	bxeq	lr
 8000aec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_l2f+0x14>
 8000af2:	4240      	negs	r0, r0
 8000af4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af8:	ea5f 0c01 	movs.w	ip, r1
 8000afc:	bf02      	ittt	eq
 8000afe:	4684      	moveq	ip, r0
 8000b00:	4601      	moveq	r1, r0
 8000b02:	2000      	moveq	r0, #0
 8000b04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b08:	bf08      	it	eq
 8000b0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b12:	fabc f28c 	clz	r2, ip
 8000b16:	3a08      	subs	r2, #8
 8000b18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b1c:	db10      	blt.n	8000b40 <__aeabi_l2f+0x5c>
 8000b1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b22:	4463      	add	r3, ip
 8000b24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b28:	f1c2 0220 	rsb	r2, r2, #32
 8000b2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b30:	fa20 f202 	lsr.w	r2, r0, r2
 8000b34:	eb43 0002 	adc.w	r0, r3, r2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f102 0220 	add.w	r2, r2, #32
 8000b44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b48:	f1c2 0220 	rsb	r2, r2, #32
 8000b4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b50:	fa21 f202 	lsr.w	r2, r1, r2
 8000b54:	eb43 0002 	adc.w	r0, r3, r2
 8000b58:	bf08      	it	eq
 8000b5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_fmul>:
 8000b60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b68:	bf1e      	ittt	ne
 8000b6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b6e:	ea92 0f0c 	teqne	r2, ip
 8000b72:	ea93 0f0c 	teqne	r3, ip
 8000b76:	d06f      	beq.n	8000c58 <__aeabi_fmul+0xf8>
 8000b78:	441a      	add	r2, r3
 8000b7a:	ea80 0c01 	eor.w	ip, r0, r1
 8000b7e:	0240      	lsls	r0, r0, #9
 8000b80:	bf18      	it	ne
 8000b82:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b86:	d01e      	beq.n	8000bc6 <__aeabi_fmul+0x66>
 8000b88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b8c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b90:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b94:	fba0 3101 	umull	r3, r1, r0, r1
 8000b98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b9c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba0:	bf3e      	ittt	cc
 8000ba2:	0049      	lslcc	r1, r1, #1
 8000ba4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba8:	005b      	lslcc	r3, r3, #1
 8000baa:	ea40 0001 	orr.w	r0, r0, r1
 8000bae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bb2:	2afd      	cmp	r2, #253	; 0xfd
 8000bb4:	d81d      	bhi.n	8000bf2 <__aeabi_fmul+0x92>
 8000bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	4770      	bx	lr
 8000bc6:	f090 0f00 	teq	r0, #0
 8000bca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bce:	bf08      	it	eq
 8000bd0:	0249      	lsleq	r1, r1, #9
 8000bd2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bd6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bda:	3a7f      	subs	r2, #127	; 0x7f
 8000bdc:	bfc2      	ittt	gt
 8000bde:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000be6:	4770      	bxgt	lr
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	3a01      	subs	r2, #1
 8000bf2:	dc5d      	bgt.n	8000cb0 <__aeabi_fmul+0x150>
 8000bf4:	f112 0f19 	cmn.w	r2, #25
 8000bf8:	bfdc      	itt	le
 8000bfa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bxle	lr
 8000c00:	f1c2 0200 	rsb	r2, r2, #0
 8000c04:	0041      	lsls	r1, r0, #1
 8000c06:	fa21 f102 	lsr.w	r1, r1, r2
 8000c0a:	f1c2 0220 	rsb	r2, r2, #32
 8000c0e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c12:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c16:	f140 0000 	adc.w	r0, r0, #0
 8000c1a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c1e:	bf08      	it	eq
 8000c20:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c24:	4770      	bx	lr
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0040      	lsleq	r0, r0, #1
 8000c32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c36:	3a01      	subeq	r2, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xce>
 8000c3a:	ea40 000c 	orr.w	r0, r0, ip
 8000c3e:	f093 0f00 	teq	r3, #0
 8000c42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c46:	bf02      	ittt	eq
 8000c48:	0049      	lsleq	r1, r1, #1
 8000c4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c4e:	3b01      	subeq	r3, #1
 8000c50:	d0f9      	beq.n	8000c46 <__aeabi_fmul+0xe6>
 8000c52:	ea41 010c 	orr.w	r1, r1, ip
 8000c56:	e78f      	b.n	8000b78 <__aeabi_fmul+0x18>
 8000c58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	bf18      	it	ne
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d00a      	beq.n	8000c7e <__aeabi_fmul+0x11e>
 8000c68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c6c:	bf18      	it	ne
 8000c6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c72:	d1d8      	bne.n	8000c26 <__aeabi_fmul+0xc6>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	bf17      	itett	ne
 8000c84:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	f091 0f00 	teqne	r1, #0
 8000c8e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c92:	d014      	beq.n	8000cbe <__aeabi_fmul+0x15e>
 8000c94:	ea92 0f0c 	teq	r2, ip
 8000c98:	d101      	bne.n	8000c9e <__aeabi_fmul+0x13e>
 8000c9a:	0242      	lsls	r2, r0, #9
 8000c9c:	d10f      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000c9e:	ea93 0f0c 	teq	r3, ip
 8000ca2:	d103      	bne.n	8000cac <__aeabi_fmul+0x14c>
 8000ca4:	024b      	lsls	r3, r1, #9
 8000ca6:	bf18      	it	ne
 8000ca8:	4608      	movne	r0, r1
 8000caa:	d108      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000cac:	ea80 0001 	eor.w	r0, r0, r1
 8000cb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fdiv>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d069      	beq.n	8000db4 <__aeabi_fdiv+0xec>
 8000ce0:	eba2 0203 	sub.w	r2, r2, r3
 8000ce4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce8:	0249      	lsls	r1, r1, #9
 8000cea:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cee:	d037      	beq.n	8000d60 <__aeabi_fdiv+0x98>
 8000cf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cf4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d00:	428b      	cmp	r3, r1
 8000d02:	bf38      	it	cc
 8000d04:	005b      	lslcc	r3, r3, #1
 8000d06:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d0a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	bf24      	itt	cs
 8000d12:	1a5b      	subcs	r3, r3, r1
 8000d14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d18:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d1c:	bf24      	itt	cs
 8000d1e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d22:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d26:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d2a:	bf24      	itt	cs
 8000d2c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d38:	bf24      	itt	cs
 8000d3a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d3e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d4a:	d1e0      	bne.n	8000d0e <__aeabi_fdiv+0x46>
 8000d4c:	2afd      	cmp	r2, #253	; 0xfd
 8000d4e:	f63f af50 	bhi.w	8000bf2 <__aeabi_fmul+0x92>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d64:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d68:	327f      	adds	r2, #127	; 0x7f
 8000d6a:	bfc2      	ittt	gt
 8000d6c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d70:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d74:	4770      	bxgt	lr
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7a:	f04f 0300 	mov.w	r3, #0
 8000d7e:	3a01      	subs	r2, #1
 8000d80:	e737      	b.n	8000bf2 <__aeabi_fmul+0x92>
 8000d82:	f092 0f00 	teq	r2, #0
 8000d86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0040      	lsleq	r0, r0, #1
 8000d8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d92:	3a01      	subeq	r2, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xc2>
 8000d96:	ea40 000c 	orr.w	r0, r0, ip
 8000d9a:	f093 0f00 	teq	r3, #0
 8000d9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0049      	lsleq	r1, r1, #1
 8000da6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000daa:	3b01      	subeq	r3, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fdiv+0xda>
 8000dae:	ea41 010c 	orr.w	r1, r1, ip
 8000db2:	e795      	b.n	8000ce0 <__aeabi_fdiv+0x18>
 8000db4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d108      	bne.n	8000dd0 <__aeabi_fdiv+0x108>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	f47f af7d 	bne.w	8000cbe <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	f47f af70 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e776      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dd0:	ea93 0f0c 	teq	r3, ip
 8000dd4:	d104      	bne.n	8000de0 <__aeabi_fdiv+0x118>
 8000dd6:	024b      	lsls	r3, r1, #9
 8000dd8:	f43f af4c 	beq.w	8000c74 <__aeabi_fmul+0x114>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e76e      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000de0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de4:	bf18      	it	ne
 8000de6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	d1ca      	bne.n	8000d82 <__aeabi_fdiv+0xba>
 8000dec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df0:	f47f af5c 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000df4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000df8:	f47f af3c 	bne.w	8000c74 <__aeabi_fmul+0x114>
 8000dfc:	e75f      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dfe:	bf00      	nop

08000e00 <__gesf2>:
 8000e00:	f04f 3cff 	mov.w	ip, #4294967295
 8000e04:	e006      	b.n	8000e14 <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__lesf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	e002      	b.n	8000e14 <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__cmpsf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e24:	bf18      	it	ne
 8000e26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e2a:	d011      	beq.n	8000e50 <__cmpsf2+0x40>
 8000e2c:	b001      	add	sp, #4
 8000e2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e32:	bf18      	it	ne
 8000e34:	ea90 0f01 	teqne	r0, r1
 8000e38:	bf58      	it	pl
 8000e3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e3e:	bf88      	it	hi
 8000e40:	17c8      	asrhi	r0, r1, #31
 8000e42:	bf38      	it	cc
 8000e44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e48:	bf18      	it	ne
 8000e4a:	f040 0001 	orrne.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e54:	d102      	bne.n	8000e5c <__cmpsf2+0x4c>
 8000e56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e5a:	d105      	bne.n	8000e68 <__cmpsf2+0x58>
 8000e5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e60:	d1e4      	bne.n	8000e2c <__cmpsf2+0x1c>
 8000e62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e66:	d0e1      	beq.n	8000e2c <__cmpsf2+0x1c>
 8000e68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <__aeabi_cfrcmple>:
 8000e70:	4684      	mov	ip, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4661      	mov	r1, ip
 8000e76:	e7ff      	b.n	8000e78 <__aeabi_cfcmpeq>

08000e78 <__aeabi_cfcmpeq>:
 8000e78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e7a:	f7ff ffc9 	bl	8000e10 <__cmpsf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	bf48      	it	mi
 8000e82:	f110 0f00 	cmnmi.w	r0, #0
 8000e86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e88 <__aeabi_fcmpeq>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff fff4 	bl	8000e78 <__aeabi_cfcmpeq>
 8000e90:	bf0c      	ite	eq
 8000e92:	2001      	moveq	r0, #1
 8000e94:	2000      	movne	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_fcmplt>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffea 	bl	8000e78 <__aeabi_cfcmpeq>
 8000ea4:	bf34      	ite	cc
 8000ea6:	2001      	movcc	r0, #1
 8000ea8:	2000      	movcs	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmple>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffe0 	bl	8000e78 <__aeabi_cfcmpeq>
 8000eb8:	bf94      	ite	ls
 8000eba:	2001      	movls	r0, #1
 8000ebc:	2000      	movhi	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmpge>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffd2 	bl	8000e70 <__aeabi_cfrcmple>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_fcmpgt>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffc8 	bl	8000e70 <__aeabi_cfrcmple>
 8000ee0:	bf34      	ite	cc
 8000ee2:	2001      	movcc	r0, #1
 8000ee4:	2000      	movcs	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_f2uiz>:
 8000eec:	0042      	lsls	r2, r0, #1
 8000eee:	d20e      	bcs.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef4:	d30b      	bcc.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d409      	bmi.n	8000f14 <__aeabi_f2uiz+0x28>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	fa23 f002 	lsr.w	r0, r3, r2
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2uiz+0x32>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d102      	bne.n	8000f24 <__aeabi_f2uiz+0x38>
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	4770      	bx	lr
 8000f24:	f04f 0000 	mov.w	r0, #0
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__aeabi_uldivmod>:
 8000f2c:	b953      	cbnz	r3, 8000f44 <__aeabi_uldivmod+0x18>
 8000f2e:	b94a      	cbnz	r2, 8000f44 <__aeabi_uldivmod+0x18>
 8000f30:	2900      	cmp	r1, #0
 8000f32:	bf08      	it	eq
 8000f34:	2800      	cmpeq	r0, #0
 8000f36:	bf1c      	itt	ne
 8000f38:	f04f 31ff 	movne.w	r1, #4294967295
 8000f3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f40:	f000 b976 	b.w	8001230 <__aeabi_idiv0>
 8000f44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4c:	f000 f806 	bl	8000f5c <__udivmoddi4>
 8000f50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f58:	b004      	add	sp, #16
 8000f5a:	4770      	bx	lr

08000f5c <__udivmoddi4>:
 8000f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f60:	9e08      	ldr	r6, [sp, #32]
 8000f62:	460d      	mov	r5, r1
 8000f64:	4604      	mov	r4, r0
 8000f66:	4688      	mov	r8, r1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d14d      	bne.n	8001008 <__udivmoddi4+0xac>
 8000f6c:	428a      	cmp	r2, r1
 8000f6e:	4694      	mov	ip, r2
 8000f70:	d968      	bls.n	8001044 <__udivmoddi4+0xe8>
 8000f72:	fab2 f282 	clz	r2, r2
 8000f76:	b152      	cbz	r2, 8000f8e <__udivmoddi4+0x32>
 8000f78:	fa01 f302 	lsl.w	r3, r1, r2
 8000f7c:	f1c2 0120 	rsb	r1, r2, #32
 8000f80:	fa20 f101 	lsr.w	r1, r0, r1
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	ea41 0803 	orr.w	r8, r1, r3
 8000f8c:	4094      	lsls	r4, r2
 8000f8e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000f92:	fbb8 f7f1 	udiv	r7, r8, r1
 8000f96:	fa1f fe8c 	uxth.w	lr, ip
 8000f9a:	fb01 8817 	mls	r8, r1, r7, r8
 8000f9e:	fb07 f00e 	mul.w	r0, r7, lr
 8000fa2:	0c23      	lsrs	r3, r4, #16
 8000fa4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa8:	4298      	cmp	r0, r3
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x66>
 8000fac:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb0:	f107 35ff 	add.w	r5, r7, #4294967295
 8000fb4:	f080 811e 	bcs.w	80011f4 <__udivmoddi4+0x298>
 8000fb8:	4298      	cmp	r0, r3
 8000fba:	f240 811b 	bls.w	80011f4 <__udivmoddi4+0x298>
 8000fbe:	3f02      	subs	r7, #2
 8000fc0:	4463      	add	r3, ip
 8000fc2:	1a1b      	subs	r3, r3, r0
 8000fc4:	fbb3 f0f1 	udiv	r0, r3, r1
 8000fc8:	fb01 3310 	mls	r3, r1, r0, r3
 8000fcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd0:	b2a4      	uxth	r4, r4
 8000fd2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd6:	45a6      	cmp	lr, r4
 8000fd8:	d90a      	bls.n	8000ff0 <__udivmoddi4+0x94>
 8000fda:	eb1c 0404 	adds.w	r4, ip, r4
 8000fde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fe2:	f080 8109 	bcs.w	80011f8 <__udivmoddi4+0x29c>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	f240 8106 	bls.w	80011f8 <__udivmoddi4+0x29c>
 8000fec:	4464      	add	r4, ip
 8000fee:	3802      	subs	r0, #2
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	eba4 040e 	sub.w	r4, r4, lr
 8000ff6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ffa:	b11e      	cbz	r6, 8001004 <__udivmoddi4+0xa8>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	40d4      	lsrs	r4, r2
 8001000:	e9c6 4300 	strd	r4, r3, [r6]
 8001004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0xc2>
 800100c:	2e00      	cmp	r6, #0
 800100e:	f000 80ee 	beq.w	80011ee <__udivmoddi4+0x292>
 8001012:	2100      	movs	r1, #0
 8001014:	e9c6 0500 	strd	r0, r5, [r6]
 8001018:	4608      	mov	r0, r1
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	fab3 f183 	clz	r1, r3
 8001022:	2900      	cmp	r1, #0
 8001024:	d14a      	bne.n	80010bc <__udivmoddi4+0x160>
 8001026:	42ab      	cmp	r3, r5
 8001028:	d302      	bcc.n	8001030 <__udivmoddi4+0xd4>
 800102a:	4282      	cmp	r2, r0
 800102c:	f200 80fc 	bhi.w	8001228 <__udivmoddi4+0x2cc>
 8001030:	1a84      	subs	r4, r0, r2
 8001032:	eb65 0303 	sbc.w	r3, r5, r3
 8001036:	2001      	movs	r0, #1
 8001038:	4698      	mov	r8, r3
 800103a:	2e00      	cmp	r6, #0
 800103c:	d0e2      	beq.n	8001004 <__udivmoddi4+0xa8>
 800103e:	e9c6 4800 	strd	r4, r8, [r6]
 8001042:	e7df      	b.n	8001004 <__udivmoddi4+0xa8>
 8001044:	b902      	cbnz	r2, 8001048 <__udivmoddi4+0xec>
 8001046:	deff      	udf	#255	; 0xff
 8001048:	fab2 f282 	clz	r2, r2
 800104c:	2a00      	cmp	r2, #0
 800104e:	f040 8091 	bne.w	8001174 <__udivmoddi4+0x218>
 8001052:	eba1 000c 	sub.w	r0, r1, ip
 8001056:	2101      	movs	r1, #1
 8001058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800105c:	fa1f fe8c 	uxth.w	lr, ip
 8001060:	fbb0 f3f7 	udiv	r3, r0, r7
 8001064:	fb07 0013 	mls	r0, r7, r3, r0
 8001068:	0c25      	lsrs	r5, r4, #16
 800106a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800106e:	fb0e f003 	mul.w	r0, lr, r3
 8001072:	42a8      	cmp	r0, r5
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x12c>
 8001076:	eb1c 0505 	adds.w	r5, ip, r5
 800107a:	f103 38ff 	add.w	r8, r3, #4294967295
 800107e:	d202      	bcs.n	8001086 <__udivmoddi4+0x12a>
 8001080:	42a8      	cmp	r0, r5
 8001082:	f200 80ce 	bhi.w	8001222 <__udivmoddi4+0x2c6>
 8001086:	4643      	mov	r3, r8
 8001088:	1a2d      	subs	r5, r5, r0
 800108a:	fbb5 f0f7 	udiv	r0, r5, r7
 800108e:	fb07 5510 	mls	r5, r7, r0, r5
 8001092:	fb0e fe00 	mul.w	lr, lr, r0
 8001096:	b2a4      	uxth	r4, r4
 8001098:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800109c:	45a6      	cmp	lr, r4
 800109e:	d908      	bls.n	80010b2 <__udivmoddi4+0x156>
 80010a0:	eb1c 0404 	adds.w	r4, ip, r4
 80010a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80010a8:	d202      	bcs.n	80010b0 <__udivmoddi4+0x154>
 80010aa:	45a6      	cmp	lr, r4
 80010ac:	f200 80b6 	bhi.w	800121c <__udivmoddi4+0x2c0>
 80010b0:	4628      	mov	r0, r5
 80010b2:	eba4 040e 	sub.w	r4, r4, lr
 80010b6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010ba:	e79e      	b.n	8000ffa <__udivmoddi4+0x9e>
 80010bc:	f1c1 0720 	rsb	r7, r1, #32
 80010c0:	408b      	lsls	r3, r1
 80010c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80010c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ca:	fa25 fa07 	lsr.w	sl, r5, r7
 80010ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010d2:	fbba f8f9 	udiv	r8, sl, r9
 80010d6:	fa20 f307 	lsr.w	r3, r0, r7
 80010da:	fb09 aa18 	mls	sl, r9, r8, sl
 80010de:	408d      	lsls	r5, r1
 80010e0:	fa1f fe8c 	uxth.w	lr, ip
 80010e4:	431d      	orrs	r5, r3
 80010e6:	fa00 f301 	lsl.w	r3, r0, r1
 80010ea:	fb08 f00e 	mul.w	r0, r8, lr
 80010ee:	0c2c      	lsrs	r4, r5, #16
 80010f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010f4:	42a0      	cmp	r0, r4
 80010f6:	fa02 f201 	lsl.w	r2, r2, r1
 80010fa:	d90b      	bls.n	8001114 <__udivmoddi4+0x1b8>
 80010fc:	eb1c 0404 	adds.w	r4, ip, r4
 8001100:	f108 3aff 	add.w	sl, r8, #4294967295
 8001104:	f080 8088 	bcs.w	8001218 <__udivmoddi4+0x2bc>
 8001108:	42a0      	cmp	r0, r4
 800110a:	f240 8085 	bls.w	8001218 <__udivmoddi4+0x2bc>
 800110e:	f1a8 0802 	sub.w	r8, r8, #2
 8001112:	4464      	add	r4, ip
 8001114:	1a24      	subs	r4, r4, r0
 8001116:	fbb4 f0f9 	udiv	r0, r4, r9
 800111a:	fb09 4410 	mls	r4, r9, r0, r4
 800111e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001122:	b2ad      	uxth	r5, r5
 8001124:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001128:	45a6      	cmp	lr, r4
 800112a:	d908      	bls.n	800113e <__udivmoddi4+0x1e2>
 800112c:	eb1c 0404 	adds.w	r4, ip, r4
 8001130:	f100 35ff 	add.w	r5, r0, #4294967295
 8001134:	d26c      	bcs.n	8001210 <__udivmoddi4+0x2b4>
 8001136:	45a6      	cmp	lr, r4
 8001138:	d96a      	bls.n	8001210 <__udivmoddi4+0x2b4>
 800113a:	3802      	subs	r0, #2
 800113c:	4464      	add	r4, ip
 800113e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001142:	fba0 9502 	umull	r9, r5, r0, r2
 8001146:	eba4 040e 	sub.w	r4, r4, lr
 800114a:	42ac      	cmp	r4, r5
 800114c:	46c8      	mov	r8, r9
 800114e:	46ae      	mov	lr, r5
 8001150:	d356      	bcc.n	8001200 <__udivmoddi4+0x2a4>
 8001152:	d053      	beq.n	80011fc <__udivmoddi4+0x2a0>
 8001154:	2e00      	cmp	r6, #0
 8001156:	d069      	beq.n	800122c <__udivmoddi4+0x2d0>
 8001158:	ebb3 0208 	subs.w	r2, r3, r8
 800115c:	eb64 040e 	sbc.w	r4, r4, lr
 8001160:	fa22 f301 	lsr.w	r3, r2, r1
 8001164:	fa04 f707 	lsl.w	r7, r4, r7
 8001168:	431f      	orrs	r7, r3
 800116a:	40cc      	lsrs	r4, r1
 800116c:	e9c6 7400 	strd	r7, r4, [r6]
 8001170:	2100      	movs	r1, #0
 8001172:	e747      	b.n	8001004 <__udivmoddi4+0xa8>
 8001174:	fa0c fc02 	lsl.w	ip, ip, r2
 8001178:	f1c2 0120 	rsb	r1, r2, #32
 800117c:	fa25 f301 	lsr.w	r3, r5, r1
 8001180:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001184:	fa20 f101 	lsr.w	r1, r0, r1
 8001188:	4095      	lsls	r5, r2
 800118a:	430d      	orrs	r5, r1
 800118c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001190:	fb07 3311 	mls	r3, r7, r1, r3
 8001194:	fa1f fe8c 	uxth.w	lr, ip
 8001198:	0c28      	lsrs	r0, r5, #16
 800119a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800119e:	fb01 f30e 	mul.w	r3, r1, lr
 80011a2:	4283      	cmp	r3, r0
 80011a4:	fa04 f402 	lsl.w	r4, r4, r2
 80011a8:	d908      	bls.n	80011bc <__udivmoddi4+0x260>
 80011aa:	eb1c 0000 	adds.w	r0, ip, r0
 80011ae:	f101 38ff 	add.w	r8, r1, #4294967295
 80011b2:	d22f      	bcs.n	8001214 <__udivmoddi4+0x2b8>
 80011b4:	4283      	cmp	r3, r0
 80011b6:	d92d      	bls.n	8001214 <__udivmoddi4+0x2b8>
 80011b8:	3902      	subs	r1, #2
 80011ba:	4460      	add	r0, ip
 80011bc:	1ac0      	subs	r0, r0, r3
 80011be:	fbb0 f3f7 	udiv	r3, r0, r7
 80011c2:	fb07 0013 	mls	r0, r7, r3, r0
 80011c6:	b2ad      	uxth	r5, r5
 80011c8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011cc:	fb03 f00e 	mul.w	r0, r3, lr
 80011d0:	42a8      	cmp	r0, r5
 80011d2:	d908      	bls.n	80011e6 <__udivmoddi4+0x28a>
 80011d4:	eb1c 0505 	adds.w	r5, ip, r5
 80011d8:	f103 38ff 	add.w	r8, r3, #4294967295
 80011dc:	d216      	bcs.n	800120c <__udivmoddi4+0x2b0>
 80011de:	42a8      	cmp	r0, r5
 80011e0:	d914      	bls.n	800120c <__udivmoddi4+0x2b0>
 80011e2:	3b02      	subs	r3, #2
 80011e4:	4465      	add	r5, ip
 80011e6:	1a28      	subs	r0, r5, r0
 80011e8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80011ec:	e738      	b.n	8001060 <__udivmoddi4+0x104>
 80011ee:	4631      	mov	r1, r6
 80011f0:	4630      	mov	r0, r6
 80011f2:	e707      	b.n	8001004 <__udivmoddi4+0xa8>
 80011f4:	462f      	mov	r7, r5
 80011f6:	e6e4      	b.n	8000fc2 <__udivmoddi4+0x66>
 80011f8:	4618      	mov	r0, r3
 80011fa:	e6f9      	b.n	8000ff0 <__udivmoddi4+0x94>
 80011fc:	454b      	cmp	r3, r9
 80011fe:	d2a9      	bcs.n	8001154 <__udivmoddi4+0x1f8>
 8001200:	ebb9 0802 	subs.w	r8, r9, r2
 8001204:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001208:	3801      	subs	r0, #1
 800120a:	e7a3      	b.n	8001154 <__udivmoddi4+0x1f8>
 800120c:	4643      	mov	r3, r8
 800120e:	e7ea      	b.n	80011e6 <__udivmoddi4+0x28a>
 8001210:	4628      	mov	r0, r5
 8001212:	e794      	b.n	800113e <__udivmoddi4+0x1e2>
 8001214:	4641      	mov	r1, r8
 8001216:	e7d1      	b.n	80011bc <__udivmoddi4+0x260>
 8001218:	46d0      	mov	r8, sl
 800121a:	e77b      	b.n	8001114 <__udivmoddi4+0x1b8>
 800121c:	4464      	add	r4, ip
 800121e:	3802      	subs	r0, #2
 8001220:	e747      	b.n	80010b2 <__udivmoddi4+0x156>
 8001222:	3b02      	subs	r3, #2
 8001224:	4465      	add	r5, ip
 8001226:	e72f      	b.n	8001088 <__udivmoddi4+0x12c>
 8001228:	4608      	mov	r0, r1
 800122a:	e706      	b.n	800103a <__udivmoddi4+0xde>
 800122c:	4631      	mov	r1, r6
 800122e:	e6e9      	b.n	8001004 <__udivmoddi4+0xa8>

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <move>:
#include <math.h>

extern int16_t goal_forward_left;
extern int16_t goal_forward_right;

void move(int8_t n) {	// Move n cells forward (with acceleration)
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]

	setState(MOVING);
 800123e:	2001      	movs	r0, #1
 8001240:	f001 f836 	bl	80022b0 <setState>

	setPIDGoalA(0);
 8001244:	2000      	movs	r0, #0
 8001246:	f001 f81f 	bl	8002288 <setPIDGoalA>
	setPIDGoalD(MOVE_COUNTS*n);
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	b29b      	uxth	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	00d2      	lsls	r2, r2, #3
 8001254:	4413      	add	r3, r2
 8001256:	461a      	mov	r2, r3
 8001258:	0111      	lsls	r1, r2, #4
 800125a:	461a      	mov	r2, r3
 800125c:	460b      	mov	r3, r1
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b29b      	uxth	r3, r3
 8001264:	b21b      	sxth	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fffa 	bl	8002260 <setPIDGoalD>

	while(!PIDdone())
 800126c:	e013      	b.n	8001296 <move+0x62>
	{
		setIRAngle(readIR(IR_LEFT), readIR(IR_RIGHT));
 800126e:	2001      	movs	r0, #1
 8001270:	f000 f9d2 	bl	8001618 <readIR>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fc1a 	bl	8000ab0 <__aeabi_ui2f>
 800127c:	4604      	mov	r4, r0
 800127e:	2002      	movs	r0, #2
 8001280:	f000 f9ca 	bl	8001618 <readIR>
 8001284:	4603      	mov	r3, r0
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fc12 	bl	8000ab0 <__aeabi_ui2f>
 800128c:	4603      	mov	r3, r0
 800128e:	4619      	mov	r1, r3
 8001290:	4620      	mov	r0, r4
 8001292:	f001 f84f 	bl	8002334 <setIRAngle>
	while(!PIDdone())
 8001296:	f001 fdb5 	bl	8002e04 <PIDdone>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0e6      	beq.n	800126e <move+0x3a>
	}

	resetPID();
 80012a0:	f001 fdc2 	bl	8002e28 <resetPID>

}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}

080012ac <turn>:

void turn(int8_t n) {	// Make n 90 degree turns (no acceleration)
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]

	setState(TURNING);
 80012b6:	2002      	movs	r0, #2
 80012b8:	f000 fffa 	bl	80022b0 <setState>

	setPIDGoalD(0);
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 ffcf 	bl	8002260 <setPIDGoalD>
	setPIDGoalA(TURN_COUNTS*n);
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	00d2      	lsls	r2, r2, #3
 80012cc:	1ad2      	subs	r2, r2, r3
 80012ce:	4611      	mov	r1, r2
 80012d0:	0189      	lsls	r1, r1, #6
 80012d2:	1a8a      	subs	r2, r1, r2
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 ffd4 	bl	8002288 <setPIDGoalA>

	while(!PIDdone())
 80012e0:	bf00      	nop
 80012e2:	f001 fd8f 	bl	8002e04 <PIDdone>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0fa      	beq.n	80012e2 <turn+0x36>
	{

	}

	resetPID();
 80012ec:	f001 fd9c 	bl	8002e28 <resetPID>

}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <Delay_Init+0x38>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10e      	bne.n	8001326 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <Delay_Init+0x38>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <Delay_Init+0x38>)
 800130e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001312:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <Delay_Init+0x3c>)
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <Delay_Init+0x3c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <Delay_Init+0x3c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6013      	str	r3, [r2, #0]
    }
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000edf0 	.word	0xe000edf0
 8001334:	e0001000 	.word	0xe0001000

08001338 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <delayMicroseconds+0x30>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800134c:	bf00      	nop
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <delayMicroseconds+0x30>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f8      	bhi.n	800134e <delayMicroseconds+0x16>
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	e0001000 	.word	0xe0001000

0800136c <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <getRightEncoderCounts+0x18>)
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	b29b      	uxth	r3, r3
 8001376:	425b      	negs	r3, r3
 8001378:	b29b      	uxth	r3, r3
 800137a:	b21b      	sxth	r3, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40000400 	.word	0x40000400

08001388 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <getLeftEncoderCounts+0x18>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	b29b      	uxth	r3, r3
 8001392:	425b      	negs	r3, r3
 8001394:	b29b      	uxth	r3, r3
 8001396:	b21b      	sxth	r3, r3
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40010400 	.word	0x40010400

080013a4 <resetEncoders>:

void resetEncoders() {
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <resetEncoders+0x18>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = (int16_t) 0;
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <resetEncoders+0x1c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40000400 	.word	0x40000400
 80013c0:	40010400 	.word	0x40010400

080013c4 <writeFlash>:
#include "stm32f2xx.h"

uint32_t startAddress = 0x080E0000;

void writeFlash(int16_t horzWall[][16], int16_t vertWall[][17], int16_t discovered[][16])
{
 80013c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c8:	b088      	sub	sp, #32
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
	uint32_t i, j;
	HAL_FLASH_Unlock();
 80013d2:	f004 f849 	bl	8005468 <HAL_FLASH_Unlock>

	/* Clear All Pending Flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80013d6:	4b4b      	ldr	r3, [pc, #300]	; (8001504 <writeFlash+0x140>)
 80013d8:	22f3      	movs	r2, #243	; 0xf3
 80013da:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 80013dc:	2102      	movs	r1, #2
 80013de:	200b      	movs	r0, #11
 80013e0:	f004 f9a0 	bl	8005724 <FLASH_Erase_Sector>

	for (i = 0; i < 16; i++) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	e023      	b.n	8001432 <writeFlash+0x6e>
		for (j = 0; j < 16; j++) {
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	e01a      	b.n	8001426 <writeFlash+0x62>
	 	 	HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (i*16+j)*4), discovered[i][j]);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	011a      	lsls	r2, r3, #4
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	4413      	add	r3, r2
 80013f8:	009a      	lsls	r2, r3, #2
 80013fa:	4b43      	ldr	r3, [pc, #268]	; (8001508 <writeFlash+0x144>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	18d1      	adds	r1, r2, r3
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	015b      	lsls	r3, r3, #5
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800140e:	b21b      	sxth	r3, r3
 8001410:	17da      	asrs	r2, r3, #31
 8001412:	469a      	mov	sl, r3
 8001414:	4693      	mov	fp, r2
 8001416:	4652      	mov	r2, sl
 8001418:	465b      	mov	r3, fp
 800141a:	2001      	movs	r0, #1
 800141c:	f003 ffd0 	bl	80053c0 <HAL_FLASH_Program>
		for (j = 0; j < 16; j++) {
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	3301      	adds	r3, #1
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d9e1      	bls.n	80013f0 <writeFlash+0x2c>
	for (i = 0; i < 16; i++) {
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	3301      	adds	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d9d8      	bls.n	80013ea <writeFlash+0x26>
		}
	}

	for (int i = 0; i < 16; i++) {
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e02c      	b.n	8001498 <writeFlash+0xd4>
        for (int j = 0; j < 17; j++) {
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	e023      	b.n	800148c <writeFlash+0xc8>
            HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (16*16*4) + (i*17+j)*4), vertWall[i][j]);
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4613      	mov	r3, r2
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	441a      	add	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	461a      	mov	r2, r3
 8001454:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <writeFlash+0x144>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4413      	add	r3, r2
 800145a:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4613      	mov	r3, r2
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	4413      	add	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	461a      	mov	r2, r3
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001474:	b21b      	sxth	r3, r3
 8001476:	17da      	asrs	r2, r3, #31
 8001478:	4698      	mov	r8, r3
 800147a:	4691      	mov	r9, r2
 800147c:	4642      	mov	r2, r8
 800147e:	464b      	mov	r3, r9
 8001480:	2001      	movs	r0, #1
 8001482:	f003 ff9d 	bl	80053c0 <HAL_FLASH_Program>
        for (int j = 0; j < 17; j++) {
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	3301      	adds	r3, #1
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b10      	cmp	r3, #16
 8001490:	ddd8      	ble.n	8001444 <writeFlash+0x80>
	for (int i = 0; i < 16; i++) {
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b0f      	cmp	r3, #15
 800149c:	ddcf      	ble.n	800143e <writeFlash+0x7a>
        }
	}

    for (i = 0; i < 17; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	e025      	b.n	80014f0 <writeFlash+0x12c>
        for (j = 0; j < 16; j++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	e01c      	b.n	80014e4 <writeFlash+0x120>
            HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (16*16*4) + (16*17*4) + (i*16+j)*4), horzWall[i][j]);
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	011a      	lsls	r2, r3, #4
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4413      	add	r3, r2
 80014b2:	009a      	lsls	r2, r3, #2
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <writeFlash+0x144>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6104 	add.w	r1, r3, #2112	; 0x840
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	015b      	lsls	r3, r3, #5
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	17da      	asrs	r2, r3, #31
 80014d0:	461c      	mov	r4, r3
 80014d2:	4615      	mov	r5, r2
 80014d4:	4622      	mov	r2, r4
 80014d6:	462b      	mov	r3, r5
 80014d8:	2001      	movs	r0, #1
 80014da:	f003 ff71 	bl	80053c0 <HAL_FLASH_Program>
        for (j = 0; j < 16; j++) {
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	d9df      	bls.n	80014aa <writeFlash+0xe6>
    for (i = 0; i < 17; i++) {
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b10      	cmp	r3, #16
 80014f4:	d9d6      	bls.n	80014a4 <writeFlash+0xe0>
        }
    }

	HAL_FLASH_Lock();
 80014f6:	f003 ffd9 	bl	80054ac <HAL_FLASH_Lock>
}
 80014fa:	bf00      	nop
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001504:	40023c00 	.word	0x40023c00
 8001508:	20000000 	.word	0x20000000

0800150c <readFlash>:

void readFlash(int16_t horzWall[][16], int16_t vertWall[][17], int16_t discovered[][16])
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	uint32_t i, j;

	for (i = 0; i < 16; i++) {
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	e01d      	b.n	800155a <readFlash+0x4e>
		for(j = 0; j < 16; j++) {
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	e014      	b.n	800154e <readFlash+0x42>
			discovered[i][j] = *(int16_t *)(startAddress + (i*16+j)*4);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	011a      	lsls	r2, r3, #4
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	4413      	add	r3, r2
 800152c:	009a      	lsls	r2, r3, #2
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <readFlash+0x108>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4619      	mov	r1, r3
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	015b      	lsls	r3, r3, #5
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(j = 0; j < 16; j++) {
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	3301      	adds	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b0f      	cmp	r3, #15
 8001552:	d9e7      	bls.n	8001524 <readFlash+0x18>
	for (i = 0; i < 16; i++) {
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	3301      	adds	r3, #1
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d9de      	bls.n	800151e <readFlash+0x12>
		}
	}

    for (int i = 0; i < 16; i++) {
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e026      	b.n	80015b4 <readFlash+0xa8>
        for (int j = 0; j < 17; j++) {
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	e01d      	b.n	80015a8 <readFlash+0x9c>
            vertWall[i][j] = *(int16_t *)(startAddress + (16*16*4) + (i*17+j)*4);
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4613      	mov	r3, r2
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	441a      	add	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	461a      	mov	r2, r3
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <readFlash+0x108>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4413      	add	r3, r2
 8001582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001586:	4619      	mov	r1, r3
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	4613      	mov	r3, r2
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	461a      	mov	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4413      	add	r3, r2
 8001598:	f9b1 1000 	ldrsh.w	r1, [r1]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int j = 0; j < 17; j++) {
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	3301      	adds	r3, #1
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	ddde      	ble.n	800156c <readFlash+0x60>
    for (int i = 0; i < 16; i++) {
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	ddd5      	ble.n	8001566 <readFlash+0x5a>
        }
    }

	for (i = 0; i < 17; i++) {
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	e01f      	b.n	8001600 <readFlash+0xf4>
		for (j = 0; j < 16; j++) {
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	e016      	b.n	80015f4 <readFlash+0xe8>
			horzWall[i][j] = *(int16_t *)(startAddress + (16*16*4) + (16*17*4) + (i*16+j)*4);
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	011a      	lsls	r2, r3, #4
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4413      	add	r3, r2
 80015ce:	009a      	lsls	r2, r3, #2
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <readFlash+0x108>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 80015da:	4619      	mov	r1, r3
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	015b      	lsls	r3, r3, #5
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (j = 0; j < 16; j++) {
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	d9e5      	bls.n	80015c6 <readFlash+0xba>
	for (i = 0; i < 17; i++) {
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b10      	cmp	r3, #16
 8001604:	d9dc      	bls.n	80015c0 <readFlash+0xb4>
		}
	}
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	3724      	adds	r7, #36	; 0x24
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000000 	.word	0x20000000

08001618 <readIR>:
uint8_t complete = 0;

uint32_t usDelay = 100;

uint16_t readIR(IR ir)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue;

	switch(ir)
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d869      	bhi.n	80016fc <readIR+0xe4>
 8001628:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <readIR+0x18>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	08001641 	.word	0x08001641
 8001634:	0800166f 	.word	0x0800166f
 8001638:	0800169d 	.word	0x0800169d
 800163c:	080016cb 	.word	0x080016cb
	    {
	        case IR_FORWARD_LEFT:
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	4830      	ldr	r0, [pc, #192]	; (8001708 <readIR+0xf0>)
 8001646:	f004 fa74 	bl	8005b32 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <readIR+0xf4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fe72 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f85c 	bl	8001714 <analogRead>
 800165c:	4603      	mov	r3, r0
 800165e:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	4828      	ldr	r0, [pc, #160]	; (8001708 <readIR+0xf0>)
 8001666:	f004 fa64 	bl	8005b32 <HAL_GPIO_WritePin>
	        	return readValue;
 800166a:	89fb      	ldrh	r3, [r7, #14]
 800166c:	e047      	b.n	80016fe <readIR+0xe6>
	            break;
	        case IR_LEFT:
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2110      	movs	r1, #16
 8001672:	4825      	ldr	r0, [pc, #148]	; (8001708 <readIR+0xf0>)
 8001674:	f004 fa5d 	bl	8005b32 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <readIR+0xf4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fe5b 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f845 	bl	8001714 <analogRead>
 800168a:	4603      	mov	r3, r0
 800168c:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2110      	movs	r1, #16
 8001692:	481d      	ldr	r0, [pc, #116]	; (8001708 <readIR+0xf0>)
 8001694:	f004 fa4d 	bl	8005b32 <HAL_GPIO_WritePin>
	        	return readValue;
 8001698:	89fb      	ldrh	r3, [r7, #14]
 800169a:	e030      	b.n	80016fe <readIR+0xe6>
	            break;
	        case IR_RIGHT:
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	2104      	movs	r1, #4
 80016a0:	4819      	ldr	r0, [pc, #100]	; (8001708 <readIR+0xf0>)
 80016a2:	f004 fa46 	bl	8005b32 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <readIR+0xf4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fe44 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f82e 	bl	8001714 <analogRead>
 80016b8:	4603      	mov	r3, r0
 80016ba:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2104      	movs	r1, #4
 80016c0:	4811      	ldr	r0, [pc, #68]	; (8001708 <readIR+0xf0>)
 80016c2:	f004 fa36 	bl	8005b32 <HAL_GPIO_WritePin>
	        	return readValue;
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	e019      	b.n	80016fe <readIR+0xe6>
	            break;
	        case IR_FORWARD_RIGHT:
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d0:	480f      	ldr	r0, [pc, #60]	; (8001710 <readIR+0xf8>)
 80016d2:	f004 fa2e 	bl	8005b32 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <readIR+0xf4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fe2c 	bl	8001338 <delayMicroseconds>
	        	readValue = analogRead(ir);
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f816 	bl	8001714 <analogRead>
 80016e8:	4603      	mov	r3, r0
 80016ea:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f2:	4807      	ldr	r0, [pc, #28]	; (8001710 <readIR+0xf8>)
 80016f4:	f004 fa1d 	bl	8005b32 <HAL_GPIO_WritePin>
	        	return readValue;
 80016f8:	89fb      	ldrh	r3, [r7, #14]
 80016fa:	e000      	b.n	80016fe <readIR+0xe6>
	            break;
	        default:
	            return 0;
 80016fc:	2300      	movs	r3, #0
	    }
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40020000 	.word	0x40020000
 800170c:	20000004 	.word	0x20000004
 8001710:	40020400 	.word	0x40020400

08001714 <analogRead>:
{
	return readIR(IR_FORWARD_RIGHT);
}

uint16_t analogRead(IR ir)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 800172c:	f000 fc96 	bl	800205c <Get_HADC1_Ptr>
 8001730:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d817      	bhi.n	8001768 <analogRead+0x54>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <analogRead+0x2c>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001751 	.word	0x08001751
 8001744:	08001757 	.word	0x08001757
 8001748:	0800175d 	.word	0x0800175d
 800174c:	08001763 	.word	0x08001763
    {
        case IR_FORWARD_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 8001750:	2306      	movs	r3, #6
 8001752:	60fb      	str	r3, [r7, #12]
            break;
 8001754:	e00a      	b.n	800176c <analogRead+0x58>
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_5;
 8001756:	2305      	movs	r3, #5
 8001758:	60fb      	str	r3, [r7, #12]
            break;
 800175a:	e007      	b.n	800176c <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 800175c:	230b      	movs	r3, #11
 800175e:	60fb      	str	r3, [r7, #12]
            break;
 8001760:	e004      	b.n	800176c <analogRead+0x58>
        case IR_FORWARD_RIGHT:
            sConfig.Channel = ADC_CHANNEL_10;
 8001762:	230a      	movs	r3, #10
 8001764:	60fb      	str	r3, [r7, #12]
            break;
 8001766:	e001      	b.n	800176c <analogRead+0x58>
        default:
            return 0;
 8001768:	2300      	movs	r3, #0
 800176a:	e032      	b.n	80017d2 <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 800176c:	2301      	movs	r3, #1
 800176e:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4619      	mov	r1, r3
 800177a:	69f8      	ldr	r0, [r7, #28]
 800177c:	f002 fe8e 	bl	800449c <HAL_ADC_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <analogRead+0x76>
    {
        return 0;
 8001786:	2300      	movs	r3, #0
 8001788:	e023      	b.n	80017d2 <analogRead+0xbe>
    }

    complete = 0;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <analogRead+0xc8>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	4913      	ldr	r1, [pc, #76]	; (80017e0 <analogRead+0xcc>)
 8001794:	69f8      	ldr	r0, [r7, #28]
 8001796:	f002 fd3f 	bl	8004218 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 800179a:	e000      	b.n	800179e <analogRead+0x8a>
    {
        continue;
 800179c:	bf00      	nop
    while (complete == 0)
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <analogRead+0xc8>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0fa      	beq.n	800179c <analogRead+0x88>
    }

    uint32_t sum = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 80017ae:	e00a      	b.n	80017c6 <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 80017b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <analogRead+0xcc>)
 80017b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017b8:	461a      	mov	r2, r3
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	4413      	add	r3, r2
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
        ++measurement;
 80017c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017c2:	3301      	adds	r3, #1
 80017c4:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 80017c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017c8:	2b7f      	cmp	r3, #127	; 0x7f
 80017ca:	d9f1      	bls.n	80017b0 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	09db      	lsrs	r3, r3, #7
 80017d0:	b29b      	uxth	r3, r3
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200001a0 	.word	0x200001a0
 80017e0:	200000a0 	.word	0x200000a0

080017e4 <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f002 fdf1 	bl	80043d4 <HAL_ADC_Stop_DMA>
    complete = 1;
 80017f2:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_ADC_ConvCpltCallback+0x1c>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200001a0 	.word	0x200001a0

08001804 <solve>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void solve(Algorithm alg) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	Action nextMove = solver(alg);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f001 fecb 	bl	80035ac <solver>
 8001816:	4603      	mov	r3, r0
 8001818:	74fb      	strb	r3, [r7, #19]
	switch(nextMove) {
 800181a:	7cfb      	ldrb	r3, [r7, #19]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d835      	bhi.n	800188c <solve+0x88>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <solve+0x24>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001879 	.word	0x08001879
 800182c:	08001839 	.word	0x08001839
 8001830:	08001883 	.word	0x08001883
 8001834:	0800188b 	.word	0x0800188b
		case FORWARD:
//			move(1);
			if (alg == FLOODFILL)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d118      	bne.n	8001870 <solve+0x6c>
			{
				int extra_moves = foresight(); // Already has curr position and heading
 800183e:	f002 f841 	bl	80038c4 <foresight>
 8001842:	60f8      	str	r0, [r7, #12]
				for (int i = 0; i < extra_moves; i++)
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e005      	b.n	8001856 <solve+0x52>
				{
					solver(FLOODFILL);
 800184a:	2001      	movs	r0, #1
 800184c:	f001 feae 	bl	80035ac <solver>
				for (int i = 0; i < extra_moves; i++)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3301      	adds	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	429a      	cmp	r2, r3
 800185c:	dbf5      	blt.n	800184a <solve+0x46>
				}
				move(1 + extra_moves);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3301      	adds	r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	b25b      	sxtb	r3, r3
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fce3 	bl	8001234 <move>
			}
			else
				move(1);
			break;
 800186e:	e00d      	b.n	800188c <solve+0x88>
				move(1);
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff fcdf 	bl	8001234 <move>
			break;
 8001876:	e009      	b.n	800188c <solve+0x88>
		case LEFT:
			turn(-1);
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f7ff fd16 	bl	80012ac <turn>
			break;
 8001880:	e004      	b.n	800188c <solve+0x88>
		case RIGHT:
			turn(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f7ff fd12 	bl	80012ac <turn>
			break;
 8001888:	e000      	b.n	800188c <solve+0x88>
		case IDLE:
			break;
 800188a:	bf00      	nop
	}
}
 800188c:	bf00      	nop
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001898:	f002 fc0c 	bl	80040b4 <HAL_Init>

  /* USER CODE BEGIN Init */

  Delay_Init();
 800189c:	f7ff fd2c 	bl	80012f8 <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a0:	f000 f8d6 	bl	8001a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a4:	f000 fad6 	bl	8001e54 <MX_GPIO_Init>
  MX_DMA_Init();
 80018a8:	f000 fab4 	bl	8001e14 <MX_DMA_Init>
  MX_ADC1_Init();
 80018ac:	f000 f90c 	bl	8001ac8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80018b0:	f000 f95c 	bl	8001b6c <MX_TIM1_Init>
  MX_TIM3_Init();
 80018b4:	f000 fa02 	bl	8001cbc <MX_TIM3_Init>
  MX_TIM8_Init();
 80018b8:	f000 fa54 	bl	8001d64 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80018bc:	213c      	movs	r1, #60	; 0x3c
 80018be:	4856      	ldr	r0, [pc, #344]	; (8001a18 <main+0x184>)
 80018c0:	f004 ff26 	bl	8006710 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80018c4:	213c      	movs	r1, #60	; 0x3c
 80018c6:	4855      	ldr	r0, [pc, #340]	; (8001a1c <main+0x188>)
 80018c8:	f004 ff22 	bl	8006710 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018cc:	2100      	movs	r1, #0
 80018ce:	4854      	ldr	r0, [pc, #336]	; (8001a20 <main+0x18c>)
 80018d0:	f004 fdb0 	bl	8006434 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018d4:	2104      	movs	r1, #4
 80018d6:	4852      	ldr	r0, [pc, #328]	; (8001a20 <main+0x18c>)
 80018d8:	f004 fdac 	bl	8006434 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018dc:	2108      	movs	r1, #8
 80018de:	4850      	ldr	r0, [pc, #320]	; (8001a20 <main+0x18c>)
 80018e0:	f004 fda8 	bl	8006434 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80018e4:	210c      	movs	r1, #12
 80018e6:	484e      	ldr	r0, [pc, #312]	; (8001a20 <main+0x18c>)
 80018e8:	f004 fda4 	bl	8006434 <HAL_TIM_PWM_Start>

  HAL_Init();
 80018ec:	f002 fbe2 	bl	80040b4 <HAL_Init>

  	HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_SET);	// Code is indeed running
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f6:	484b      	ldr	r0, [pc, #300]	; (8001a24 <main+0x190>)
 80018f8:	f004 f91b 	bl	8005b32 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin) == GPIO_PIN_SET)	// Read maze on start
 80018fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001900:	4848      	ldr	r0, [pc, #288]	; (8001a24 <main+0x190>)
 8001902:	f004 f8ff 	bl	8005b04 <HAL_GPIO_ReadPin>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <main+0x86>
		HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET);
 800190c:	2201      	movs	r2, #1
 800190e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001912:	4844      	ldr	r0, [pc, #272]	; (8001a24 <main+0x190>)
 8001914:	f004 f90d 	bl	8005b32 <HAL_GPIO_WritePin>
 8001918:	e005      	b.n	8001926 <main+0x92>
	else
		HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001920:	4840      	ldr	r0, [pc, #256]	; (8001a24 <main+0x190>)
 8001922:	f004 f906 	bl	8005b32 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin) == GPIO_PIN_SET)	// Save maze on finish
 8001926:	2104      	movs	r1, #4
 8001928:	483f      	ldr	r0, [pc, #252]	; (8001a28 <main+0x194>)
 800192a:	f004 f8eb 	bl	8005b04 <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b01      	cmp	r3, #1
 8001932:	d106      	bne.n	8001942 <main+0xae>
		HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800193a:	483a      	ldr	r0, [pc, #232]	; (8001a24 <main+0x190>)
 800193c:	f004 f8f9 	bl	8005b32 <HAL_GPIO_WritePin>
 8001940:	e005      	b.n	800194e <main+0xba>
	else
		HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001948:	4836      	ldr	r0, [pc, #216]	; (8001a24 <main+0x190>)
 800194a:	f004 f8f2 	bl	8005b32 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fe62 	bl	8001618 <readIR>
 8001954:	4603      	mov	r3, r0
 8001956:	b21a      	sxth	r2, r3
 8001958:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <main+0x198>)
 800195a:	801a      	strh	r2, [r3, #0]
	  leftIRvalue = readIR(IR_LEFT);
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff fe5b 	bl	8001618 <readIR>
 8001962:	4603      	mov	r3, r0
 8001964:	b21a      	sxth	r2, r3
 8001966:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <main+0x19c>)
 8001968:	801a      	strh	r2, [r3, #0]
	  rightIRvalue = readIR(IR_RIGHT);
 800196a:	2002      	movs	r0, #2
 800196c:	f7ff fe54 	bl	8001618 <readIR>
 8001970:	4603      	mov	r3, r0
 8001972:	b21a      	sxth	r2, r3
 8001974:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <main+0x1a0>)
 8001976:	801a      	strh	r2, [r3, #0]
	  forwardRightIRvalue = readIR(IR_FORWARD_RIGHT);
 8001978:	2003      	movs	r0, #3
 800197a:	f7ff fe4d 	bl	8001618 <readIR>
 800197e:	4603      	mov	r3, r0
 8001980:	b21a      	sxth	r2, r3
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <main+0x1a4>)
 8001984:	801a      	strh	r2, [r3, #0]

	  left_counts = getLeftEncoderCounts();
 8001986:	f7ff fcff 	bl	8001388 <getLeftEncoderCounts>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <main+0x1a8>)
 8001990:	801a      	strh	r2, [r3, #0]
	  right_counts = getRightEncoderCounts();
 8001992:	f7ff fceb 	bl	800136c <getRightEncoderCounts>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <main+0x1ac>)
 800199c:	801a      	strh	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(LeftButton_GPIO_Port, LeftButton_Pin))
 800199e:	2101      	movs	r1, #1
 80019a0:	4828      	ldr	r0, [pc, #160]	; (8001a44 <main+0x1b0>)
 80019a2:	f004 f8af 	bl	8005b04 <HAL_GPIO_ReadPin>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01d      	beq.n	80019e8 <main+0x154>
	  {
		  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fe33 	bl	8001618 <readIR>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b21c      	sxth	r4, r3
 80019b6:	2003      	movs	r0, #3
 80019b8:	f7ff fe2e 	bl	8001618 <readIR>
 80019bc:	4603      	mov	r3, r0
 80019be:	b21d      	sxth	r5, r3
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff fe29 	bl	8001618 <readIR>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b21e      	sxth	r6, r3
 80019ca:	2002      	movs	r0, #2
 80019cc:	f7ff fe24 	bl	8001618 <readIR>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	4632      	mov	r2, r6
 80019d6:	4629      	mov	r1, r5
 80019d8:	4620      	mov	r0, r4
 80019da:	f000 fc79 	bl	80022d0 <setIRGoals>
		  irOffset_Set = 1;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <main+0x1b4>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	801a      	strh	r2, [r3, #0]
		  loadMaze();
 80019e4:	f002 f86e 	bl	8003ac4 <loadMaze>
	  }

	  if (HAL_GPIO_ReadPin(RightButton_GPIO_Port, RightButton_Pin))
 80019e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ec:	480d      	ldr	r0, [pc, #52]	; (8001a24 <main+0x190>)
 80019ee:	f004 f889 	bl	8005b04 <HAL_GPIO_ReadPin>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <main+0x16a>
	  {
		  start_pressed = 1;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <main+0x1b8>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	801a      	strh	r2, [r3, #0]
 * Zoom: we know what the maze looks like, so we can run multiple floodfill moves at once
 * 			not implemented yet
 *
 *
 */
	  if (start_pressed)
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <main+0x1b8>)
 8001a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0a2      	beq.n	800194e <main+0xba>
	  {
		  move(0);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fc13 	bl	8001234 <move>
		  solve(DEAD);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fef8 	bl	8001804 <solve>
	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 8001a14:	e79b      	b.n	800194e <main+0xba>
 8001a16:	bf00      	nop
 8001a18:	20000294 	.word	0x20000294
 8001a1c:	200002dc 	.word	0x200002dc
 8001a20:	2000024c 	.word	0x2000024c
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	2000032a 	.word	0x2000032a
 8001a30:	2000032c 	.word	0x2000032c
 8001a34:	2000032e 	.word	0x2000032e
 8001a38:	20000330 	.word	0x20000330
 8001a3c:	20000326 	.word	0x20000326
 8001a40:	20000328 	.word	0x20000328
 8001a44:	40020400 	.word	0x40020400
 8001a48:	20000332 	.word	0x20000332
 8001a4c:	20000324 	.word	0x20000324

08001a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b092      	sub	sp, #72	; 0x48
 8001a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	2230      	movs	r2, #48	; 0x30
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f005 fb16 	bl	8007090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a76:	2301      	movs	r3, #1
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a82:	f107 0318 	add.w	r3, r7, #24
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 f884 	bl	8005b94 <HAL_RCC_OscConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001a92:	f000 fb2b 	bl	80020ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a96:	230f      	movs	r3, #15
 8001a98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 fabe 	bl	8006030 <HAL_RCC_ClockConfig>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001aba:	f000 fb17 	bl	80020ec <Error_Handler>
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3748      	adds	r7, #72	; 0x48
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001adc:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <MX_ADC1_Init+0x9c>)
 8001ade:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b08:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <MX_ADC1_Init+0xa0>)
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b28:	f002 fb32 	bl	8004190 <HAL_ADC_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b32:	f000 fadb 	bl	80020ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b36:	2305      	movs	r3, #5
 8001b38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	4619      	mov	r1, r3
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b48:	f002 fca8 	bl	800449c <HAL_ADC_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b52:	f000 facb 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200001a4 	.word	0x200001a4
 8001b64:	40012000 	.word	0x40012000
 8001b68:	0f000001 	.word	0x0f000001

08001b6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b092      	sub	sp, #72	; 0x48
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
 8001b8c:	615a      	str	r2, [r3, #20]
 8001b8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2220      	movs	r2, #32
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f005 fa7a 	bl	8007090 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b9c:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001b9e:	4a46      	ldr	r2, [pc, #280]	; (8001cb8 <MX_TIM1_Init+0x14c>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ba2:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bb0:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001bb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bbc:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bc8:	483a      	ldr	r0, [pc, #232]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bca:	f004 fbe3 	bl	8006394 <HAL_TIM_PWM_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001bd4:	f000 fa8a 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001be0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001be4:	4619      	mov	r1, r3
 8001be6:	4833      	ldr	r0, [pc, #204]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001be8:	f005 f94c 	bl	8006e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001bf2:	f000 fa7b 	bl	80020ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf6:	2360      	movs	r3, #96	; 0x60
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c02:	2300      	movs	r3, #0
 8001c04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c16:	2200      	movs	r2, #0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4826      	ldr	r0, [pc, #152]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001c1c:	f004 fe06 	bl	800682c <HAL_TIM_PWM_ConfigChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001c26:	f000 fa61 	bl	80020ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	2204      	movs	r2, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4820      	ldr	r0, [pc, #128]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001c34:	f004 fdfa 	bl	800682c <HAL_TIM_PWM_ConfigChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c3e:	f000 fa55 	bl	80020ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c46:	2208      	movs	r2, #8
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481a      	ldr	r0, [pc, #104]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001c4c:	f004 fdee 	bl	800682c <HAL_TIM_PWM_ConfigChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001c56:	f000 fa49 	bl	80020ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	220c      	movs	r2, #12
 8001c60:	4619      	mov	r1, r3
 8001c62:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001c64:	f004 fde2 	bl	800682c <HAL_TIM_PWM_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001c6e:	f000 fa3d 	bl	80020ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001c96:	f005 f96f 	bl	8006f78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001ca0:	f000 fa24 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001ca6:	f002 f875 	bl	8003d94 <HAL_TIM_MspPostInit>

}
 8001caa:	bf00      	nop
 8001cac:	3748      	adds	r7, #72	; 0x48
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000024c 	.word	0x2000024c
 8001cb8:	40010000 	.word	0x40010000

08001cbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	2224      	movs	r2, #36	; 0x24
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f005 f9e0 	bl	8007090 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <MX_TIM3_Init+0xa0>)
 8001cda:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <MX_TIM3_Init+0xa4>)
 8001cdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <MX_TIM3_Init+0xa0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <MX_TIM3_Init+0xa0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <MX_TIM3_Init+0xa0>)
 8001cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_TIM3_Init+0xa0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_TIM3_Init+0xa0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d06:	2301      	movs	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d16:	2301      	movs	r3, #1
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	4619      	mov	r1, r3
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <MX_TIM3_Init+0xa0>)
 8001d2a:	f004 fc4b 	bl	80065c4 <HAL_TIM_Encoder_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d34:	f000 f9da 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_TIM3_Init+0xa0>)
 8001d46:	f005 f89d 	bl	8006e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d50:	f000 f9cc 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	3730      	adds	r7, #48	; 0x30
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000294 	.word	0x20000294
 8001d60:	40000400 	.word	0x40000400

08001d64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	; 0x30
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f005 f98c 	bl	8007090 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_TIM8_Init+0xa8>)
 8001d82:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <MX_TIM8_Init+0xac>)
 8001d84:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_TIM8_Init+0xa8>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_TIM8_Init+0xa8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_TIM8_Init+0xa8>)
 8001d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d98:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_TIM8_Init+0xa8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_TIM8_Init+0xa8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <MX_TIM8_Init+0xa8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dac:	2303      	movs	r3, #3
 8001dae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001db4:	2301      	movs	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_TIM8_Init+0xa8>)
 8001dd8:	f004 fbf4 	bl	80065c4 <HAL_TIM_Encoder_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001de2:	f000 f983 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <MX_TIM8_Init+0xa8>)
 8001df4:	f005 f846 	bl	8006e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001dfe:	f000 f975 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	3730      	adds	r7, #48	; 0x30
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200002dc 	.word	0x200002dc
 8001e10:	40010400 	.word	0x40010400

08001e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_DMA_Init+0x3c>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <MX_DMA_Init+0x3c>)
 8001e24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_DMA_Init+0x3c>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2038      	movs	r0, #56	; 0x38
 8001e3c:	f002 fead 	bl	8004b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e40:	2038      	movs	r0, #56	; 0x38
 8001e42:	f002 fec6 	bl	8004bd2 <HAL_NVIC_EnableIRQ>

}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b76      	ldr	r3, [pc, #472]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a75      	ldr	r2, [pc, #468]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b73      	ldr	r3, [pc, #460]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b6f      	ldr	r3, [pc, #444]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a6e      	ldr	r2, [pc, #440]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b6c      	ldr	r3, [pc, #432]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	4b68      	ldr	r3, [pc, #416]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a67      	ldr	r2, [pc, #412]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b65      	ldr	r3, [pc, #404]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	4b61      	ldr	r3, [pc, #388]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a60      	ldr	r2, [pc, #384]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b5e      	ldr	r3, [pc, #376]	; (8002048 <MX_GPIO_Init+0x1f4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_LED_Pin|Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 8001eda:	2200      	movs	r2, #0
 8001edc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001ee0:	485a      	ldr	r0, [pc, #360]	; (800204c <MX_GPIO_Init+0x1f8>)
 8001ee2:	f003 fe26 	bl	8005b32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2194      	movs	r1, #148	; 0x94
 8001eea:	4859      	ldr	r0, [pc, #356]	; (8002050 <MX_GPIO_Init+0x1fc>)
 8001eec:	f003 fe21 	bl	8005b32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef6:	4857      	ldr	r0, [pc, #348]	; (8002054 <MX_GPIO_Init+0x200>)
 8001ef8:	f003 fe1b 	bl	8005b32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_LED_Pin Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|Y_LED_Pin|G_LED_Pin;
 8001efc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	484d      	ldr	r0, [pc, #308]	; (800204c <MX_GPIO_Init+0x1f8>)
 8001f16:	f003 fc57 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 8001f1a:	2394      	movs	r3, #148	; 0x94
 8001f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4847      	ldr	r0, [pc, #284]	; (8002050 <MX_GPIO_Init+0x1fc>)
 8001f32:	f003 fc49 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001f36:	2308      	movs	r3, #8
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f46:	2301      	movs	r3, #1
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	483f      	ldr	r0, [pc, #252]	; (8002050 <MX_GPIO_Init+0x1fc>)
 8001f52:	f003 fc39 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftButton_Pin Switch3_Pin */
  GPIO_InitStruct.Pin = LeftButton_Pin|Switch3_Pin;
 8001f56:	2309      	movs	r3, #9
 8001f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	483a      	ldr	r0, [pc, #232]	; (8002054 <MX_GPIO_Init+0x200>)
 8001f6a:	f003 fc2d 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f80:	2307      	movs	r3, #7
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4832      	ldr	r0, [pc, #200]	; (8002054 <MX_GPIO_Init+0x200>)
 8001f8c:	f003 fc1c 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RightButton_Pin */
  GPIO_InitStruct.Pin = RightButton_Pin;
 8001f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightButton_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4829      	ldr	r0, [pc, #164]	; (800204c <MX_GPIO_Init+0x1f8>)
 8001fa6:	f003 fc0f 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch1_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin;
 8001faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001fb0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch1_GPIO_Port, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4822      	ldr	r0, [pc, #136]	; (800204c <MX_GPIO_Init+0x1f8>)
 8001fc2:	f003 fc01 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001fca:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	481f      	ldr	r0, [pc, #124]	; (8002058 <MX_GPIO_Init+0x204>)
 8001fdc:	f003 fbf4 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001fe0:	23c0      	movs	r3, #192	; 0xc0
 8001fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe4:	2312      	movs	r3, #18
 8001fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4816      	ldr	r0, [pc, #88]	; (8002054 <MX_GPIO_Init+0x200>)
 8001ffc:	f003 fbe4 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	2301      	movs	r3, #1
 8002008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	480e      	ldr	r0, [pc, #56]	; (8002054 <MX_GPIO_Init+0x200>)
 800201a:	f003 fbd5 	bl	80057c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	2008      	movs	r0, #8
 8002024:	f002 fdb9 	bl	8004b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002028:	2008      	movs	r0, #8
 800202a:	f002 fdd2 	bl	8004bd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2028      	movs	r0, #40	; 0x28
 8002034:	f002 fdb1 	bl	8004b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002038:	2028      	movs	r0, #40	; 0x28
 800203a:	f002 fdca 	bl	8004bd2 <HAL_NVIC_EnableIRQ>

}
 800203e:	bf00      	nop
 8002040:	3728      	adds	r7, #40	; 0x28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40020800 	.word	0x40020800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40020c00 	.word	0x40020c00

0800205c <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */

ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
	return &hadc1;
 8002060:	4b02      	ldr	r3, [pc, #8]	; (800206c <Get_HADC1_Ptr+0x10>)
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	200001a4 	.word	0x200001a4

08002070 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == Switch1_Pin)
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002080:	d114      	bne.n	80020ac <HAL_GPIO_EXTI_Callback+0x3c>
	{
		if (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin) == GPIO_PIN_SET)
 8002082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002086:	4817      	ldr	r0, [pc, #92]	; (80020e4 <HAL_GPIO_EXTI_Callback+0x74>)
 8002088:	f003 fd3c 	bl	8005b04 <HAL_GPIO_ReadPin>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d106      	bne.n	80020a0 <HAL_GPIO_EXTI_Callback+0x30>
			HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET);
 8002092:	2201      	movs	r2, #1
 8002094:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002098:	4812      	ldr	r0, [pc, #72]	; (80020e4 <HAL_GPIO_EXTI_Callback+0x74>)
 800209a:	f003 fd4a 	bl	8005b32 <HAL_GPIO_WritePin>
 800209e:	e005      	b.n	80020ac <HAL_GPIO_EXTI_Callback+0x3c>
		else
			HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020a6:	480f      	ldr	r0, [pc, #60]	; (80020e4 <HAL_GPIO_EXTI_Callback+0x74>)
 80020a8:	f003 fd43 	bl	8005b32 <HAL_GPIO_WritePin>
	}
	if (GPIO_PIN == Switch2_Pin)
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d113      	bne.n	80020da <HAL_GPIO_EXTI_Callback+0x6a>
	{
		if (HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin) == GPIO_PIN_SET)
 80020b2:	2104      	movs	r1, #4
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <HAL_GPIO_EXTI_Callback+0x78>)
 80020b6:	f003 fd25 	bl	8005b04 <HAL_GPIO_ReadPin>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d106      	bne.n	80020ce <HAL_GPIO_EXTI_Callback+0x5e>
			HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
 80020c0:	2201      	movs	r2, #1
 80020c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c6:	4807      	ldr	r0, [pc, #28]	; (80020e4 <HAL_GPIO_EXTI_Callback+0x74>)
 80020c8:	f003 fd33 	bl	8005b32 <HAL_GPIO_WritePin>
		else
			HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_RESET);
	}
}
 80020cc:	e005      	b.n	80020da <HAL_GPIO_EXTI_Callback+0x6a>
			HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <HAL_GPIO_EXTI_Callback+0x74>)
 80020d6:	f003 fd2c 	bl	8005b32 <HAL_GPIO_WritePin>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40020800 	.word	0x40020800
 80020e8:	40020c00 	.word	0x40020c00

080020ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f0:	b672      	cpsid	i
}
 80020f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <Error_Handler+0x8>
	...

080020f8 <limitPWM>:
#include "pid.h"

extern float velocity_left;
extern float velocity_right;

float limitPWM(float pwm) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7fe faef 	bl	80006e4 <__aeabi_f2d>
 8002106:	a30e      	add	r3, pc, #56	; (adr r3, 8002140 <limitPWM+0x48>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f7fe fbc0 	bl	8000890 <__aeabi_dcmpgt>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <limitPWM+0x22>
		return PWM_MAX;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <limitPWM+0x58>)
 8002118:	e00d      	b.n	8002136 <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fae2 	bl	80006e4 <__aeabi_f2d>
 8002120:	a309      	add	r3, pc, #36	; (adr r3, 8002148 <limitPWM+0x50>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe fb95 	bl	8000854 <__aeabi_dcmplt>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <limitPWM+0x3c>
		return -PWM_MAX;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <limitPWM+0x5c>)
 8002132:	e000      	b.n	8002136 <limitPWM+0x3e>
	else
		return pwm;
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	66666666 	.word	0x66666666
 8002144:	3fee6666 	.word	0x3fee6666
 8002148:	66666666 	.word	0x66666666
 800214c:	bfee6666 	.word	0xbfee6666
 8002150:	3f733333 	.word	0x3f733333
 8002154:	bf733333 	.word	0xbf733333

08002158 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8002160:	f04f 0100 	mov.w	r1, #0
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7fe fead 	bl	8000ec4 <__aeabi_fcmpge>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d012      	beq.n	8002196 <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8002170:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <setMotorLPWM+0x70>)
 8002172:	2200      	movs	r2, #0
 8002174:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffbe 	bl	80020f8 <limitPWM>
 800217c:	4603      	mov	r3, r0
 800217e:	4913      	ldr	r1, [pc, #76]	; (80021cc <setMotorLPWM+0x74>)
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fced 	bl	8000b60 <__aeabi_fmul>
 8002186:	4603      	mov	r3, r0
 8002188:	4c0f      	ldr	r4, [pc, #60]	; (80021c8 <setMotorLPWM+0x70>)
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe feae 	bl	8000eec <__aeabi_f2uiz>
 8002190:	4603      	mov	r3, r0
 8002192:	63a3      	str	r3, [r4, #56]	; 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 8002194:	e013      	b.n	80021be <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <setMotorLPWM+0x70>)
 8002198:	2200      	movs	r2, #0
 800219a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ffab 	bl	80020f8 <limitPWM>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4909      	ldr	r1, [pc, #36]	; (80021cc <setMotorLPWM+0x74>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fcda 	bl	8000b60 <__aeabi_fmul>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021b2:	4c05      	ldr	r4, [pc, #20]	; (80021c8 <setMotorLPWM+0x70>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fe99 	bl	8000eec <__aeabi_f2uiz>
 80021ba:	4603      	mov	r3, r0
 80021bc:	6363      	str	r3, [r4, #52]	; 0x34
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd90      	pop	{r4, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000
 80021cc:	4547f000 	.word	0x4547f000

080021d0 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 80021d8:	f04f 0100 	mov.w	r1, #0
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7fe fe71 	bl	8000ec4 <__aeabi_fcmpge>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d012      	beq.n	800220e <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <setMotorRPWM+0x70>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff82 	bl	80020f8 <limitPWM>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4913      	ldr	r1, [pc, #76]	; (8002244 <setMotorRPWM+0x74>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fcb1 	bl	8000b60 <__aeabi_fmul>
 80021fe:	4603      	mov	r3, r0
 8002200:	4c0f      	ldr	r4, [pc, #60]	; (8002240 <setMotorRPWM+0x70>)
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fe72 	bl	8000eec <__aeabi_f2uiz>
 8002208:	4603      	mov	r3, r0
 800220a:	63e3      	str	r3, [r4, #60]	; 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800220c:	e013      	b.n	8002236 <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <setMotorRPWM+0x70>)
 8002210:	2200      	movs	r2, #0
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff6f 	bl	80020f8 <limitPWM>
 800221a:	4603      	mov	r3, r0
 800221c:	4909      	ldr	r1, [pc, #36]	; (8002244 <setMotorRPWM+0x74>)
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fc9e 	bl	8000b60 <__aeabi_fmul>
 8002224:	4603      	mov	r3, r0
 8002226:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800222a:	4c05      	ldr	r4, [pc, #20]	; (8002240 <setMotorRPWM+0x70>)
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fe5d 	bl	8000eec <__aeabi_f2uiz>
 8002232:	4603      	mov	r3, r0
 8002234:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bd90      	pop	{r4, r7, pc}
 800223e:	bf00      	nop
 8002240:	40010000 	.word	0x40010000
 8002244:	4547f000 	.word	0x4547f000

08002248 <resetMotors>:

void resetMotors() {
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 800224c:	f04f 0000 	mov.w	r0, #0
 8002250:	f7ff ff82 	bl	8002158 <setMotorLPWM>
	setMotorRPWM(0);
 8002254:	f04f 0000 	mov.w	r0, #0
 8002258:	f7ff ffba 	bl	80021d0 <setMotorRPWM>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <setPIDGoalD>:
STATE state = REST;
float left_PWM_value = 0;
float right_PWM_value = 0;
int goal_reached_timer = 0;

void setPIDGoalD(int16_t distance) { goal_distance = distance; }
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	80fb      	strh	r3, [r7, #6]
 800226a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fc22 	bl	8000ab8 <__aeabi_i2f>
 8002274:	4603      	mov	r3, r0
 8002276:	4a03      	ldr	r2, [pc, #12]	; (8002284 <setPIDGoalD+0x24>)
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000033c 	.word	0x2000033c

08002288 <setPIDGoalA>:
void setPIDGoalA(int16_t angle) { goal_angle = angle; }
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	80fb      	strh	r3, [r7, #6]
 8002292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fc0e 	bl	8000ab8 <__aeabi_i2f>
 800229c:	4603      	mov	r3, r0
 800229e:	4a03      	ldr	r2, [pc, #12]	; (80022ac <setPIDGoalA+0x24>)
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000340 	.word	0x20000340

080022b0 <setState>:
void setState(STATE curr_state) { state = curr_state; }
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <setState+0x1c>)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	7013      	strb	r3, [r2, #0]
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000418 	.word	0x20000418

080022d0 <setIRGoals>:

void setIRGoals(int16_t frontLeftGoal, int16_t frontRightGoal, int16_t leftGoal, int16_t rightGoal) {
 80022d0:	b490      	push	{r4, r7}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4604      	mov	r4, r0
 80022d8:	4608      	mov	r0, r1
 80022da:	4611      	mov	r1, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	4623      	mov	r3, r4
 80022e0:	80fb      	strh	r3, [r7, #6]
 80022e2:	4603      	mov	r3, r0
 80022e4:	80bb      	strh	r3, [r7, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	807b      	strh	r3, [r7, #2]
 80022ea:	4613      	mov	r3, r2
 80022ec:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = leftGoal - rightGoal;
 80022ee:	887a      	ldrh	r2, [r7, #2]
 80022f0:	883b      	ldrh	r3, [r7, #0]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b21a      	sxth	r2, r3
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <setIRGoals+0x50>)
 80022fa:	801a      	strh	r2, [r3, #0]
	goal_forward_left = frontLeftGoal;
 80022fc:	4a09      	ldr	r2, [pc, #36]	; (8002324 <setIRGoals+0x54>)
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	8013      	strh	r3, [r2, #0]
	goal_forward_right = frontRightGoal;
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <setIRGoals+0x58>)
 8002304:	88bb      	ldrh	r3, [r7, #4]
 8002306:	8013      	strh	r3, [r2, #0]
	goal_left = leftGoal;
 8002308:	4a08      	ldr	r2, [pc, #32]	; (800232c <setIRGoals+0x5c>)
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	8013      	strh	r3, [r2, #0]
	goal_right = rightGoal;
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <setIRGoals+0x60>)
 8002310:	883b      	ldrh	r3, [r7, #0]
 8002312:	8013      	strh	r3, [r2, #0]

}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bc90      	pop	{r4, r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000344 	.word	0x20000344
 8002324:	20000334 	.word	0x20000334
 8002328:	20000336 	.word	0x20000336
 800232c:	20000338 	.word	0x20000338
 8002330:	2000033a 	.word	0x2000033a

08002334 <setIRAngle>:
	setPIDGoalD(front_kPx * ((goal_forward_left - curr_forward_left + goal_forward_right - curr_forward_left)/2));

}

// TODO: CHANGE TO USE WALL CHECK FUNCTIONS
void setIRAngle(float left, float right){
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]

	if (left > 600 && right > 600 && goal_angle == 0)
 800233e:	4948      	ldr	r1, [pc, #288]	; (8002460 <setIRAngle+0x12c>)
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe fdc9 	bl	8000ed8 <__aeabi_fcmpgt>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02d      	beq.n	80023a8 <setIRAngle+0x74>
 800234c:	4944      	ldr	r1, [pc, #272]	; (8002460 <setIRAngle+0x12c>)
 800234e:	6838      	ldr	r0, [r7, #0]
 8002350:	f7fe fdc2 	bl	8000ed8 <__aeabi_fcmpgt>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d026      	beq.n	80023a8 <setIRAngle+0x74>
 800235a:	4b42      	ldr	r3, [pc, #264]	; (8002464 <setIRAngle+0x130>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fd90 	bl	8000e88 <__aeabi_fcmpeq>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01c      	beq.n	80023a8 <setIRAngle+0x74>
	{
		IRadjustment = (kPir * ((left - right) - IRAngleOffset));
 800236e:	6839      	ldr	r1, [r7, #0]
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7fe faeb 	bl	800094c <__aeabi_fsub>
 8002376:	4603      	mov	r3, r0
 8002378:	461c      	mov	r4, r3
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <setIRAngle+0x134>)
 800237c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fb99 	bl	8000ab8 <__aeabi_i2f>
 8002386:	4603      	mov	r3, r0
 8002388:	4619      	mov	r1, r3
 800238a:	4620      	mov	r0, r4
 800238c:	f7fe fade 	bl	800094c <__aeabi_fsub>
 8002390:	4603      	mov	r3, r0
 8002392:	461a      	mov	r2, r3
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <setIRAngle+0x138>)
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f7fe fbe1 	bl	8000b60 <__aeabi_fmul>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b33      	ldr	r3, [pc, #204]	; (8002470 <setIRAngle+0x13c>)
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e056      	b.n	8002456 <setIRAngle+0x122>
	}
	else if (left > 600 && goal_angle == 0)
 80023a8:	492d      	ldr	r1, [pc, #180]	; (8002460 <setIRAngle+0x12c>)
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fd94 	bl	8000ed8 <__aeabi_fcmpgt>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d021      	beq.n	80023fa <setIRAngle+0xc6>
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <setIRAngle+0x130>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fd62 	bl	8000e88 <__aeabi_fcmpeq>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d017      	beq.n	80023fa <setIRAngle+0xc6>
	{
		IRadjustment = (kPir2 * (left - goal_left));
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <setIRAngle+0x140>)
 80023cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe fb71 	bl	8000ab8 <__aeabi_i2f>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4619      	mov	r1, r3
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe fab6 	bl	800094c <__aeabi_fsub>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
 80023e4:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 80023e8:	4619      	mov	r1, r3
 80023ea:	4610      	mov	r0, r2
 80023ec:	f7fe fbb8 	bl	8000b60 <__aeabi_fmul>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <setIRAngle+0x13c>)
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e02d      	b.n	8002456 <setIRAngle+0x122>
	}
	else if (right > 600 && goal_angle == 0)
 80023fa:	4919      	ldr	r1, [pc, #100]	; (8002460 <setIRAngle+0x12c>)
 80023fc:	6838      	ldr	r0, [r7, #0]
 80023fe:	f7fe fd6b 	bl	8000ed8 <__aeabi_fcmpgt>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d021      	beq.n	800244c <setIRAngle+0x118>
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <setIRAngle+0x130>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f04f 0100 	mov.w	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fd39 	bl	8000e88 <__aeabi_fcmpeq>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d017      	beq.n	800244c <setIRAngle+0x118>
	{
		IRadjustment = (kPir2 * (goal_right - right));
 800241c:	4b16      	ldr	r3, [pc, #88]	; (8002478 <setIRAngle+0x144>)
 800241e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fb48 	bl	8000ab8 <__aeabi_i2f>
 8002428:	4603      	mov	r3, r0
 800242a:	6839      	ldr	r1, [r7, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fa8d 	bl	800094c <__aeabi_fsub>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f7fe fb8f 	bl	8000b60 <__aeabi_fmul>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <setIRAngle+0x13c>)
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e004      	b.n	8002456 <setIRAngle+0x122>
	}
	else
		IRadjustment = 0;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <setIRAngle+0x13c>)
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bd90      	pop	{r4, r7, pc}
 800245e:	bf00      	nop
 8002460:	44160000 	.word	0x44160000
 8002464:	20000340 	.word	0x20000340
 8002468:	20000344 	.word	0x20000344
 800246c:	3d99999a 	.word	0x3d99999a
 8002470:	20000414 	.word	0x20000414
 8002474:	20000338 	.word	0x20000338
 8002478:	2000033a 	.word	0x2000033a

0800247c <accelerateLeftPWM>:

float accelerateLeftPWM() {
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
//	if (derivative > velocity_left * 34.0)
//		return left_PWM_value - xacceleration;
//
//	return left_PWM_value;

}
 8002480:	bf00      	nop
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <accelerateRightPWM>:

float accelerateRightPWM() {
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
//	if (derivative > velocity_right * 34.0)
//		return right_PWM_value - xacceleration;
//
//	return right_PWM_value;

}
 800248e:	bf00      	nop
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <PDController>:

void PDController() {
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0

//////////////////////////	CALCULATE DISTANCE AND ANGLE CORRECTION /////////////////////////

	if (state == TURNING)
 800249e:	4ba2      	ldr	r3, [pc, #648]	; (8002728 <PDController+0x290>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d103      	bne.n	80024ae <PDController+0x16>
		IRadjustment = 0;
 80024a6:	4ba1      	ldr	r3, [pc, #644]	; (800272c <PDController+0x294>)
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

	float adjustedAngle = goal_angle/* + IRadjustment*/;
 80024ae:	4ba0      	ldr	r3, [pc, #640]	; (8002730 <PDController+0x298>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	607b      	str	r3, [r7, #4]

	angleError = adjustedAngle - (getLeftEncoderCounts() - getRightEncoderCounts());
 80024b4:	f7fe ff68 	bl	8001388 <getLeftEncoderCounts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461c      	mov	r4, r3
 80024bc:	f7fe ff56 	bl	800136c <getRightEncoderCounts>
 80024c0:	4603      	mov	r3, r0
 80024c2:	1ae3      	subs	r3, r4, r3
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe faf7 	bl	8000ab8 <__aeabi_i2f>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe fa3c 	bl	800094c <__aeabi_fsub>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b96      	ldr	r3, [pc, #600]	; (8002734 <PDController+0x29c>)
 80024da:	601a      	str	r2, [r3, #0]
	angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 80024dc:	4a96      	ldr	r2, [pc, #600]	; (8002738 <PDController+0x2a0>)
 80024de:	4b95      	ldr	r3, [pc, #596]	; (8002734 <PDController+0x29c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4619      	mov	r1, r3
 80024e4:	4610      	mov	r0, r2
 80024e6:	f7fe fb3b 	bl	8000b60 <__aeabi_fmul>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461c      	mov	r4, r3
 80024ee:	4b91      	ldr	r3, [pc, #580]	; (8002734 <PDController+0x29c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a92      	ldr	r2, [pc, #584]	; (800273c <PDController+0x2a4>)
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fa27 	bl	800094c <__aeabi_fsub>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	4b8f      	ldr	r3, [pc, #572]	; (8002740 <PDController+0x2a8>)
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f7fe fb2a 	bl	8000b60 <__aeabi_fmul>
 800250c:	4603      	mov	r3, r0
 800250e:	4619      	mov	r1, r3
 8002510:	4620      	mov	r0, r4
 8002512:	f7fe fa1d 	bl	8000950 <__addsf3>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	4b8a      	ldr	r3, [pc, #552]	; (8002744 <PDController+0x2ac>)
 800251c:	601a      	str	r2, [r3, #0]

	distanceError = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts())/2);
 800251e:	4b8a      	ldr	r3, [pc, #552]	; (8002748 <PDController+0x2b0>)
 8002520:	681c      	ldr	r4, [r3, #0]
 8002522:	f7fe ff31 	bl	8001388 <getLeftEncoderCounts>
 8002526:	4603      	mov	r3, r0
 8002528:	461d      	mov	r5, r3
 800252a:	f7fe ff1f 	bl	800136c <getRightEncoderCounts>
 800252e:	4603      	mov	r3, r0
 8002530:	442b      	add	r3, r5
 8002532:	0fda      	lsrs	r2, r3, #31
 8002534:	4413      	add	r3, r2
 8002536:	105b      	asrs	r3, r3, #1
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe fabd 	bl	8000ab8 <__aeabi_i2f>
 800253e:	4603      	mov	r3, r0
 8002540:	4619      	mov	r1, r3
 8002542:	4620      	mov	r0, r4
 8002544:	f7fe fa02 	bl	800094c <__aeabi_fsub>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	4b7f      	ldr	r3, [pc, #508]	; (800274c <PDController+0x2b4>)
 800254e:	601a      	str	r2, [r3, #0]

	distanceCorrection = kPx * distanceError + kDx * (distanceError - oldDistanceError);
 8002550:	4a7f      	ldr	r2, [pc, #508]	; (8002750 <PDController+0x2b8>)
 8002552:	4b7e      	ldr	r3, [pc, #504]	; (800274c <PDController+0x2b4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f7fe fb01 	bl	8000b60 <__aeabi_fmul>
 800255e:	4603      	mov	r3, r0
 8002560:	461c      	mov	r4, r3
 8002562:	4b7a      	ldr	r3, [pc, #488]	; (800274c <PDController+0x2b4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a7b      	ldr	r2, [pc, #492]	; (8002754 <PDController+0x2bc>)
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe f9ed 	bl	800094c <__aeabi_fsub>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7fe faef 	bl	8000b60 <__aeabi_fmul>
 8002582:	4603      	mov	r3, r0
 8002584:	4619      	mov	r1, r3
 8002586:	4620      	mov	r0, r4
 8002588:	f7fe f9e2 	bl	8000950 <__addsf3>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	4b71      	ldr	r3, [pc, #452]	; (8002758 <PDController+0x2c0>)
 8002592:	601a      	str	r2, [r3, #0]

	left_distance = getLeftEncoderCounts();
 8002594:	f7fe fef8 	bl	8001388 <getLeftEncoderCounts>
 8002598:	4603      	mov	r3, r0
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fa8c 	bl	8000ab8 <__aeabi_i2f>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4a6e      	ldr	r2, [pc, #440]	; (800275c <PDController+0x2c4>)
 80025a4:	6013      	str	r3, [r2, #0]
	right_distance = getRightEncoderCounts();
 80025a6:	f7fe fee1 	bl	800136c <getRightEncoderCounts>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fa83 	bl	8000ab8 <__aeabi_i2f>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a6a      	ldr	r2, [pc, #424]	; (8002760 <PDController+0x2c8>)
 80025b6:	6013      	str	r3, [r2, #0]

	if (state == MOVING && fabs(distanceError) > 100)
 80025b8:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <PDController+0x290>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d13f      	bne.n	8002640 <PDController+0x1a8>
 80025c0:	4b62      	ldr	r3, [pc, #392]	; (800274c <PDController+0x2b4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025c8:	4966      	ldr	r1, [pc, #408]	; (8002764 <PDController+0x2cc>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fc84 	bl	8000ed8 <__aeabi_fcmpgt>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d034      	beq.n	8002640 <PDController+0x1a8>
	{		// If we're going straight and not at the end, apply acceleration
		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 80025d6:	4b60      	ldr	r3, [pc, #384]	; (8002758 <PDController+0x2c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a63      	ldr	r2, [pc, #396]	; (8002768 <PDController+0x2d0>)
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe f9b3 	bl	800094c <__aeabi_fsub>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ec:	4a58      	ldr	r2, [pc, #352]	; (8002750 <PDController+0x2b8>)
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fc71 	bl	8000ed8 <__aeabi_fcmpgt>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d021      	beq.n	8002640 <PDController+0x1a8>
		{
			distanceCorrection = oldDistanceCorrection + (xacceleration * sign(distanceCorrection - oldDistanceCorrection));
 80025fc:	4b56      	ldr	r3, [pc, #344]	; (8002758 <PDController+0x2c0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a59      	ldr	r2, [pc, #356]	; (8002768 <PDController+0x2d0>)
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe f9a0 	bl	800094c <__aeabi_fsub>
 800260c:	4603      	mov	r3, r0
 800260e:	4618      	mov	r0, r3
 8002610:	f001 fd08 	bl	8004024 <sign>
 8002614:	4603      	mov	r3, r0
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fa4e 	bl	8000ab8 <__aeabi_i2f>
 800261c:	4603      	mov	r3, r0
 800261e:	4a4c      	ldr	r2, [pc, #304]	; (8002750 <PDController+0x2b8>)
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fa9c 	bl	8000b60 <__aeabi_fmul>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	4b4e      	ldr	r3, [pc, #312]	; (8002768 <PDController+0x2d0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f7fe f98c 	bl	8000950 <__addsf3>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	4b46      	ldr	r3, [pc, #280]	; (8002758 <PDController+0x2c0>)
 800263e:	601a      	str	r2, [r3, #0]
		}
	}

////////////////////// ROUND DISTANCE OR ANGLE CORRECTION	//////////////////////////

	switch(state) {		// Apply lower limits of PWM for various states
 8002640:	4b39      	ldr	r3, [pc, #228]	; (8002728 <PDController+0x290>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	3b01      	subs	r3, #1
 8002646:	2b04      	cmp	r3, #4
 8002648:	f200 80c2 	bhi.w	80027d0 <PDController+0x338>
 800264c:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <PDController+0x1bc>)
 800264e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002652:	bf00      	nop
 8002654:	08002691 	.word	0x08002691
 8002658:	080026f3 	.word	0x080026f3
 800265c:	08002669 	.word	0x08002669
 8002660:	080027d1 	.word	0x080027d1
 8002664:	080027b3 	.word	0x080027b3
		case EXPLORING:
			distanceCorrection = (accelerateLeftPWM() + accelerateRightPWM())/2;
 8002668:	f7ff ff08 	bl	800247c <accelerateLeftPWM>
 800266c:	4604      	mov	r4, r0
 800266e:	f7ff ff0c 	bl	800248a <accelerateRightPWM>
 8002672:	4603      	mov	r3, r0
 8002674:	4619      	mov	r1, r3
 8002676:	4620      	mov	r0, r4
 8002678:	f7fe f96a 	bl	8000950 <__addsf3>
 800267c:	4603      	mov	r3, r0
 800267e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fb20 	bl	8000cc8 <__aeabi_fdiv>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	4b32      	ldr	r3, [pc, #200]	; (8002758 <PDController+0x2c0>)
 800268e:	601a      	str	r2, [r3, #0]
		case MOVING:
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 8002690:	4b31      	ldr	r3, [pc, #196]	; (8002758 <PDController+0x2c0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe f823 	bl	80006e4 <__aeabi_f2d>
 800269e:	a31e      	add	r3, pc, #120	; (adr r3, 8002718 <PDController+0x280>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f7fe f8f4 	bl	8000890 <__aeabi_dcmpgt>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d100      	bne.n	80026b0 <PDController+0x218>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
			break;
 80026ae:	e090      	b.n	80027d2 <PDController+0x33a>
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 80026b0:	4b29      	ldr	r3, [pc, #164]	; (8002758 <PDController+0x2c0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026b8:	4a2c      	ldr	r2, [pc, #176]	; (800276c <PDController+0x2d4>)
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fbed 	bl	8000e9c <__aeabi_fcmplt>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d100      	bne.n	80026ca <PDController+0x232>
			break;
 80026c8:	e083      	b.n	80027d2 <PDController+0x33a>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <PDController+0x2c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f001 fca8 	bl	8004024 <sign>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe f9ee 	bl	8000ab8 <__aeabi_i2f>
 80026dc:	4603      	mov	r3, r0
 80026de:	4a23      	ldr	r2, [pc, #140]	; (800276c <PDController+0x2d4>)
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fa3c 	bl	8000b60 <__aeabi_fmul>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <PDController+0x2c0>)
 80026ee:	601a      	str	r2, [r3, #0]
			break;
 80026f0:	e06f      	b.n	80027d2 <PDController+0x33a>
		case TURNING:
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 80026f2:	4b14      	ldr	r3, [pc, #80]	; (8002744 <PDController+0x2ac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd fff2 	bl	80006e4 <__aeabi_f2d>
 8002700:	a307      	add	r3, pc, #28	; (adr r3, 8002720 <PDController+0x288>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f7fe f8c3 	bl	8000890 <__aeabi_dcmpgt>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d12f      	bne.n	8002770 <PDController+0x2d8>
				angleCorrection = sign(angleCorrection) * PWMMinw;
			break;
 8002710:	e05f      	b.n	80027d2 <PDController+0x33a>
 8002712:	bf00      	nop
 8002714:	f3af 8000 	nop.w
 8002718:	eb851eb8 	.word	0xeb851eb8
 800271c:	3f9eb851 	.word	0x3f9eb851
 8002720:	47ae147b 	.word	0x47ae147b
 8002724:	3f847ae1 	.word	0x3f847ae1
 8002728:	20000418 	.word	0x20000418
 800272c:	20000414 	.word	0x20000414
 8002730:	20000340 	.word	0x20000340
 8002734:	20000348 	.word	0x20000348
 8002738:	3b449ba6 	.word	0x3b449ba6
 800273c:	2000034c 	.word	0x2000034c
 8002740:	3a03126f 	.word	0x3a03126f
 8002744:	20000378 	.word	0x20000378
 8002748:	2000033c 	.word	0x2000033c
 800274c:	2000037c 	.word	0x2000037c
 8002750:	3a83126f 	.word	0x3a83126f
 8002754:	20000380 	.word	0x20000380
 8002758:	200003ac 	.word	0x200003ac
 800275c:	200003b4 	.word	0x200003b4
 8002760:	200003e4 	.word	0x200003e4
 8002764:	42c80000 	.word	0x42c80000
 8002768:	200003b0 	.word	0x200003b0
 800276c:	3ea3d70a 	.word	0x3ea3d70a
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 8002770:	4b4e      	ldr	r3, [pc, #312]	; (80028ac <PDController+0x414>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002778:	4a4d      	ldr	r2, [pc, #308]	; (80028b0 <PDController+0x418>)
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fb8d 	bl	8000e9c <__aeabi_fcmplt>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d100      	bne.n	800278a <PDController+0x2f2>
			break;
 8002788:	e023      	b.n	80027d2 <PDController+0x33a>
				angleCorrection = sign(angleCorrection) * PWMMinw;
 800278a:	4b48      	ldr	r3, [pc, #288]	; (80028ac <PDController+0x414>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fc48 	bl	8004024 <sign>
 8002794:	4603      	mov	r3, r0
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe f98e 	bl	8000ab8 <__aeabi_i2f>
 800279c:	4603      	mov	r3, r0
 800279e:	4a44      	ldr	r2, [pc, #272]	; (80028b0 <PDController+0x418>)
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe f9dc 	bl	8000b60 <__aeabi_fmul>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <PDController+0x414>)
 80027ae:	601a      	str	r2, [r3, #0]
			break;
 80027b0:	e00f      	b.n	80027d2 <PDController+0x33a>
		case CURVING:
			if (fabs(distanceError) < 60)
 80027b2:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <PDController+0x41c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027ba:	493f      	ldr	r1, [pc, #252]	; (80028b8 <PDController+0x420>)
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fb6d 	bl	8000e9c <__aeabi_fcmplt>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d100      	bne.n	80027ca <PDController+0x332>
				setState(REST);
		default:
			break;
 80027c8:	e002      	b.n	80027d0 <PDController+0x338>
				setState(REST);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7ff fd70 	bl	80022b0 <setState>
			break;
 80027d0:	bf00      	nop
	}

	if (fabs(distanceCorrection) > PWMMaxx)		// Upper Limit for PWM
 80027d2:	4b3a      	ldr	r3, [pc, #232]	; (80028bc <PDController+0x424>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027da:	4a39      	ldr	r2, [pc, #228]	; (80028c0 <PDController+0x428>)
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fb7a 	bl	8000ed8 <__aeabi_fcmpgt>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d012      	beq.n	8002810 <PDController+0x378>
		distanceCorrection = sign(distanceCorrection) * PWMMaxx;
 80027ea:	4b34      	ldr	r3, [pc, #208]	; (80028bc <PDController+0x424>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fc18 	bl	8004024 <sign>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe f95e 	bl	8000ab8 <__aeabi_i2f>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <PDController+0x428>)
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe f9ac 	bl	8000b60 <__aeabi_fmul>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <PDController+0x424>)
 800280e:	601a      	str	r2, [r3, #0]

	if (fabs(angleCorrection) > PWMMaxw)
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <PDController+0x414>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002818:	4a2a      	ldr	r2, [pc, #168]	; (80028c4 <PDController+0x42c>)
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fb5b 	bl	8000ed8 <__aeabi_fcmpgt>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <PDController+0x3b6>
		angleCorrection = sign(angleCorrection) * PWMMaxw;
 8002828:	4b20      	ldr	r3, [pc, #128]	; (80028ac <PDController+0x414>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f001 fbf9 	bl	8004024 <sign>
 8002832:	4603      	mov	r3, r0
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe f93f 	bl	8000ab8 <__aeabi_i2f>
 800283a:	4603      	mov	r3, r0
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <PDController+0x42c>)
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe f98d 	bl	8000b60 <__aeabi_fmul>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <PDController+0x414>)
 800284c:	601a      	str	r2, [r3, #0]

	if (state == ACCELERATING || state == CURVING)
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <PDController+0x430>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d003      	beq.n	800285e <PDController+0x3c6>
 8002856:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <PDController+0x430>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b05      	cmp	r3, #5
 800285c:	d10a      	bne.n	8002874 <PDController+0x3dc>
	{
		left_PWM_value = accelerateLeftPWM();
 800285e:	f7ff fe0d 	bl	800247c <accelerateLeftPWM>
 8002862:	4603      	mov	r3, r0
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <PDController+0x434>)
 8002866:	6013      	str	r3, [r2, #0]
		right_PWM_value = accelerateRightPWM();
 8002868:	f7ff fe0f 	bl	800248a <accelerateRightPWM>
 800286c:	4603      	mov	r3, r0
 800286e:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <PDController+0x438>)
 8002870:	6013      	str	r3, [r2, #0]
		return;
 8002872:	e017      	b.n	80028a4 <PDController+0x40c>
	}

	left_PWM_value = (distanceCorrection + angleCorrection);
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <PDController+0x424>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <PDController+0x414>)
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f866 	bl	8000950 <__addsf3>
 8002884:	4603      	mov	r3, r0
 8002886:	461a      	mov	r2, r3
 8002888:	4b10      	ldr	r3, [pc, #64]	; (80028cc <PDController+0x434>)
 800288a:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distanceCorrection - angleCorrection);
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <PDController+0x424>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a06      	ldr	r2, [pc, #24]	; (80028ac <PDController+0x414>)
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe f858 	bl	800094c <__aeabi_fsub>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <PDController+0x438>)
 80028a2:	601a      	str	r2, [r3, #0]

}
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bdb0      	pop	{r4, r5, r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000378 	.word	0x20000378
 80028b0:	3e99999a 	.word	0x3e99999a
 80028b4:	2000037c 	.word	0x2000037c
 80028b8:	42700000 	.word	0x42700000
 80028bc:	200003ac 	.word	0x200003ac
 80028c0:	3f333333 	.word	0x3f333333
 80028c4:	3ea8f5c3 	.word	0x3ea8f5c3
 80028c8:	20000418 	.word	0x20000418
 80028cc:	2000041c 	.word	0x2000041c
 80028d0:	20000420 	.word	0x20000420
 80028d4:	00000000 	.word	0x00000000

080028d8 <updatePID>:

void updatePID() {
 80028d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0

///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldAngleError = oldAngleErrors[9];
 80028e0:	4b49      	ldr	r3, [pc, #292]	; (8002a08 <updatePID+0x130>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	4a49      	ldr	r2, [pc, #292]	; (8002a0c <updatePID+0x134>)
 80028e6:	6013      	str	r3, [r2, #0]
	oldDistanceError = oldDistanceErrors[9];
 80028e8:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <updatePID+0x138>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	4a49      	ldr	r2, [pc, #292]	; (8002a14 <updatePID+0x13c>)
 80028ee:	6013      	str	r3, [r2, #0]
	old_left_distance = old_left_distances[9];
 80028f0:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <updatePID+0x140>)
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	4a49      	ldr	r2, [pc, #292]	; (8002a1c <updatePID+0x144>)
 80028f6:	6013      	str	r3, [r2, #0]
	old_right_distance = old_right_distances[9];
 80028f8:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <updatePID+0x148>)
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	4a49      	ldr	r2, [pc, #292]	; (8002a24 <updatePID+0x14c>)
 80028fe:	6013      	str	r3, [r2, #0]

//////////////////////	CALCULATE MOTOR PWM VALUES	/////////////////////

	PDController();
 8002900:	f7ff fdca 	bl	8002498 <PDController>

////////////////////	NORMALIZE LEFT AND RIGHT PWM VALUES ////////////////

	// Apply lower PWM limits for small adjustments
	if (state == REST || state == ACCELERATING || fabs(distanceError) < 60 || fabs (angleError) < 60)
 8002904:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <updatePID+0x150>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01a      	beq.n	8002942 <updatePID+0x6a>
 800290c:	4b46      	ldr	r3, [pc, #280]	; (8002a28 <updatePID+0x150>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d016      	beq.n	8002942 <updatePID+0x6a>
 8002914:	4b45      	ldr	r3, [pc, #276]	; (8002a2c <updatePID+0x154>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800291c:	4944      	ldr	r1, [pc, #272]	; (8002a30 <updatePID+0x158>)
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fabc 	bl	8000e9c <__aeabi_fcmplt>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10b      	bne.n	8002942 <updatePID+0x6a>
 800292a:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <updatePID+0x15c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002932:	493f      	ldr	r1, [pc, #252]	; (8002a30 <updatePID+0x158>)
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fab1 	bl	8000e9c <__aeabi_fcmplt>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8081 	beq.w	8002a44 <updatePID+0x16c>
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 8002942:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <updatePID+0x160>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd feca 	bl	80006e4 <__aeabi_f2d>
 8002950:	a32b      	add	r3, pc, #172	; (adr r3, 8002a00 <updatePID+0x128>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f7fd ff9b 	bl	8000890 <__aeabi_dcmpgt>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01e      	beq.n	800299e <updatePID+0xc6>
 8002960:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <updatePID+0x160>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002968:	4a34      	ldr	r2, [pc, #208]	; (8002a3c <updatePID+0x164>)
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fa95 	bl	8000e9c <__aeabi_fcmplt>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d012      	beq.n	800299e <updatePID+0xc6>
		{
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 8002978:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <updatePID+0x160>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f001 fb51 	bl	8004024 <sign>
 8002982:	4603      	mov	r3, r0
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f897 	bl	8000ab8 <__aeabi_i2f>
 800298a:	4603      	mov	r3, r0
 800298c:	4a2b      	ldr	r2, [pc, #172]	; (8002a3c <updatePID+0x164>)
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe f8e5 	bl	8000b60 <__aeabi_fmul>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <updatePID+0x160>)
 800299c:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <updatePID+0x168>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fe9c 	bl	80006e4 <__aeabi_f2d>
 80029ac:	a314      	add	r3, pc, #80	; (adr r3, 8002a00 <updatePID+0x128>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fd ff6d 	bl	8000890 <__aeabi_dcmpgt>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8113 	beq.w	8002be4 <updatePID+0x30c>
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <updatePID+0x168>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <updatePID+0x164>)
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fa66 	bl	8000e9c <__aeabi_fcmplt>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d100      	bne.n	80029d8 <updatePID+0x100>
 80029d6:	e105      	b.n	8002be4 <updatePID+0x30c>
		{
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 80029d8:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <updatePID+0x168>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f001 fb21 	bl	8004024 <sign>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe f867 	bl	8000ab8 <__aeabi_i2f>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <updatePID+0x164>)
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe f8b5 	bl	8000b60 <__aeabi_fmul>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <updatePID+0x168>)
 80029fc:	601a      	str	r2, [r3, #0]
		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 80029fe:	e0f1      	b.n	8002be4 <updatePID+0x30c>
 8002a00:	47ae147b 	.word	0x47ae147b
 8002a04:	3f847ae1 	.word	0x3f847ae1
 8002a08:	20000350 	.word	0x20000350
 8002a0c:	2000034c 	.word	0x2000034c
 8002a10:	20000384 	.word	0x20000384
 8002a14:	20000380 	.word	0x20000380
 8002a18:	200003bc 	.word	0x200003bc
 8002a1c:	200003b8 	.word	0x200003b8
 8002a20:	200003ec 	.word	0x200003ec
 8002a24:	200003e8 	.word	0x200003e8
 8002a28:	20000418 	.word	0x20000418
 8002a2c:	2000037c 	.word	0x2000037c
 8002a30:	42700000 	.word	0x42700000
 8002a34:	20000348 	.word	0x20000348
 8002a38:	2000041c 	.word	0x2000041c
 8002a3c:	3e8f5c29 	.word	0x3e8f5c29
 8002a40:	20000420 	.word	0x20000420
		}
	}
	else	// If under PWM limits, normalize values
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 8002a44:	4bb0      	ldr	r3, [pc, #704]	; (8002d08 <updatePID+0x430>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fe49 	bl	80006e4 <__aeabi_f2d>
 8002a52:	a3a9      	add	r3, pc, #676	; (adr r3, 8002cf8 <updatePID+0x420>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f7fd ff1a 	bl	8000890 <__aeabi_dcmpgt>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d058      	beq.n	8002b14 <updatePID+0x23c>
 8002a62:	4ba9      	ldr	r3, [pc, #676]	; (8002d08 <updatePID+0x430>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a6a:	4aa8      	ldr	r2, [pc, #672]	; (8002d0c <updatePID+0x434>)
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fa14 	bl	8000e9c <__aeabi_fcmplt>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d04c      	beq.n	8002b14 <updatePID+0x23c>
		{
			right_PWM_value = right_PWM_value - (sign(right_PWM_value) * (PWMMin - fabs(left_PWM_value)));
 8002a7a:	4ba5      	ldr	r3, [pc, #660]	; (8002d10 <updatePID+0x438>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fe30 	bl	80006e4 <__aeabi_f2d>
 8002a84:	4604      	mov	r4, r0
 8002a86:	460d      	mov	r5, r1
 8002a88:	4ba1      	ldr	r3, [pc, #644]	; (8002d10 <updatePID+0x438>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 fac9 	bl	8004024 <sign>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fe13 	bl	80006c0 <__aeabi_i2d>
 8002a9a:	4680      	mov	r8, r0
 8002a9c:	4689      	mov	r9, r1
 8002a9e:	4b9b      	ldr	r3, [pc, #620]	; (8002d0c <updatePID+0x434>)
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fe1f 	bl	80006e4 <__aeabi_f2d>
 8002aa6:	4682      	mov	sl, r0
 8002aa8:	468b      	mov	fp, r1
 8002aaa:	4b97      	ldr	r3, [pc, #604]	; (8002d08 <updatePID+0x430>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fe16 	bl	80006e4 <__aeabi_f2d>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4650      	mov	r0, sl
 8002abe:	4659      	mov	r1, fp
 8002ac0:	f7fd fcb0 	bl	8000424 <__aeabi_dsub>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4640      	mov	r0, r8
 8002aca:	4649      	mov	r1, r9
 8002acc:	f7fd fb7c 	bl	80001c8 <__aeabi_dmul>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7fd fca4 	bl	8000424 <__aeabi_dsub>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fd fede 	bl	80008a4 <__aeabi_d2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a89      	ldr	r2, [pc, #548]	; (8002d10 <updatePID+0x438>)
 8002aec:	6013      	str	r3, [r2, #0]
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 8002aee:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <updatePID+0x430>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 fa96 	bl	8004024 <sign>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd ffdc 	bl	8000ab8 <__aeabi_i2f>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4a82      	ldr	r2, [pc, #520]	; (8002d0c <updatePID+0x434>)
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe f82a 	bl	8000b60 <__aeabi_fmul>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <updatePID+0x430>)
 8002b12:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 8002b14:	4b7e      	ldr	r3, [pc, #504]	; (8002d10 <updatePID+0x438>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fde1 	bl	80006e4 <__aeabi_f2d>
 8002b22:	a375      	add	r3, pc, #468	; (adr r3, 8002cf8 <updatePID+0x420>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd feb2 	bl	8000890 <__aeabi_dcmpgt>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d058      	beq.n	8002be4 <updatePID+0x30c>
 8002b32:	4b77      	ldr	r3, [pc, #476]	; (8002d10 <updatePID+0x438>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b3a:	4a74      	ldr	r2, [pc, #464]	; (8002d0c <updatePID+0x434>)
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe f9ac 	bl	8000e9c <__aeabi_fcmplt>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d04c      	beq.n	8002be4 <updatePID+0x30c>
		{
			left_PWM_value = left_PWM_value - (sign(left_PWM_value) * (PWMMin - fabs(right_PWM_value)));
 8002b4a:	4b6f      	ldr	r3, [pc, #444]	; (8002d08 <updatePID+0x430>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fdc8 	bl	80006e4 <__aeabi_f2d>
 8002b54:	4604      	mov	r4, r0
 8002b56:	460d      	mov	r5, r1
 8002b58:	4b6b      	ldr	r3, [pc, #428]	; (8002d08 <updatePID+0x430>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fa61 	bl	8004024 <sign>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fdab 	bl	80006c0 <__aeabi_i2d>
 8002b6a:	4680      	mov	r8, r0
 8002b6c:	4689      	mov	r9, r1
 8002b6e:	4b67      	ldr	r3, [pc, #412]	; (8002d0c <updatePID+0x434>)
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fdb7 	bl	80006e4 <__aeabi_f2d>
 8002b76:	4682      	mov	sl, r0
 8002b78:	468b      	mov	fp, r1
 8002b7a:	4b65      	ldr	r3, [pc, #404]	; (8002d10 <updatePID+0x438>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fdae 	bl	80006e4 <__aeabi_f2d>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4650      	mov	r0, sl
 8002b8e:	4659      	mov	r1, fp
 8002b90:	f7fd fc48 	bl	8000424 <__aeabi_dsub>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4640      	mov	r0, r8
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	f7fd fb14 	bl	80001c8 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	f7fd fc3c 	bl	8000424 <__aeabi_dsub>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7fd fe76 	bl	80008a4 <__aeabi_d2f>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4a53      	ldr	r2, [pc, #332]	; (8002d08 <updatePID+0x430>)
 8002bbc:	6013      	str	r3, [r2, #0]
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 8002bbe:	4b54      	ldr	r3, [pc, #336]	; (8002d10 <updatePID+0x438>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fa2e 	bl	8004024 <sign>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd ff74 	bl	8000ab8 <__aeabi_i2f>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4a4e      	ldr	r2, [pc, #312]	; (8002d0c <updatePID+0x434>)
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd ffc2 	bl	8000b60 <__aeabi_fmul>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <updatePID+0x438>)
 8002be2:	601a      	str	r2, [r3, #0]
		}
	}

	if (fabs(left_PWM_value) > PWM_MAX)
 8002be4:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <updatePID+0x430>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fd79 	bl	80006e4 <__aeabi_f2d>
 8002bf2:	a343      	add	r3, pc, #268	; (adr r3, 8002d00 <updatePID+0x428>)
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	f7fd fe4a 	bl	8000890 <__aeabi_dcmpgt>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <updatePID+0x358>
	{
		left_PWM_value = sign(left_PWM_value) * PWM_MAX;
 8002c02:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <updatePID+0x430>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fa0c 	bl	8004024 <sign>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fd56 	bl	80006c0 <__aeabi_i2d>
 8002c14:	a33a      	add	r3, pc, #232	; (adr r3, 8002d00 <updatePID+0x428>)
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	f7fd fad5 	bl	80001c8 <__aeabi_dmul>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f7fd fe3d 	bl	80008a4 <__aeabi_d2f>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4a36      	ldr	r2, [pc, #216]	; (8002d08 <updatePID+0x430>)
 8002c2e:	6013      	str	r3, [r2, #0]
	}

	if (fabs(right_PWM_value) > PWM_MAX)
 8002c30:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <updatePID+0x438>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fd53 	bl	80006e4 <__aeabi_f2d>
 8002c3e:	a330      	add	r3, pc, #192	; (adr r3, 8002d00 <updatePID+0x428>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd fe24 	bl	8000890 <__aeabi_dcmpgt>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <updatePID+0x3a4>
	{
		right_PWM_value = sign(right_PWM_value) * PWM_MAX;
 8002c4e:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <updatePID+0x438>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 f9e6 	bl	8004024 <sign>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fd30 	bl	80006c0 <__aeabi_i2d>
 8002c60:	a327      	add	r3, pc, #156	; (adr r3, 8002d00 <updatePID+0x428>)
 8002c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c66:	f7fd faaf 	bl	80001c8 <__aeabi_dmul>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	f7fd fe17 	bl	80008a4 <__aeabi_d2f>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <updatePID+0x438>)
 8002c7a:	6013      	str	r3, [r2, #0]



//////////////////	SET PWM VALUES AND CHECK FOR GOAL REACHED ////////////////////////

	setMotorLPWM(left_PWM_value);
 8002c7c:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <updatePID+0x430>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fa69 	bl	8002158 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 8002c86:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <updatePID+0x438>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff faa0 	bl	80021d0 <setMotorRPWM>

	if(angleError < 30 && angleError > -30 && distanceError < 30 && distanceError > -30)
 8002c90:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <updatePID+0x43c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4920      	ldr	r1, [pc, #128]	; (8002d18 <updatePID+0x440>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe f900 	bl	8000e9c <__aeabi_fcmplt>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d020      	beq.n	8002ce4 <updatePID+0x40c>
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <updatePID+0x43c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	491d      	ldr	r1, [pc, #116]	; (8002d1c <updatePID+0x444>)
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe f915 	bl	8000ed8 <__aeabi_fcmpgt>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d017      	beq.n	8002ce4 <updatePID+0x40c>
 8002cb4:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <updatePID+0x448>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4917      	ldr	r1, [pc, #92]	; (8002d18 <updatePID+0x440>)
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe f8ee 	bl	8000e9c <__aeabi_fcmplt>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00e      	beq.n	8002ce4 <updatePID+0x40c>
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <updatePID+0x448>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4914      	ldr	r1, [pc, #80]	; (8002d1c <updatePID+0x444>)
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe f903 	bl	8000ed8 <__aeabi_fcmpgt>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <updatePID+0x40c>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <updatePID+0x44c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	4a11      	ldr	r2, [pc, #68]	; (8002d24 <updatePID+0x44c>)
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e002      	b.n	8002cea <updatePID+0x412>

	else
		goal_reached_timer = 0;
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <updatePID+0x44c>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]

///////////////////// UPDATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldDistanceCorrection = distanceCorrection;
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <updatePID+0x450>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a0f      	ldr	r2, [pc, #60]	; (8002d2c <updatePID+0x454>)
 8002cf0:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002cf2:	2309      	movs	r3, #9
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	e027      	b.n	8002d48 <updatePID+0x470>
 8002cf8:	47ae147b 	.word	0x47ae147b
 8002cfc:	3f847ae1 	.word	0x3f847ae1
 8002d00:	66666666 	.word	0x66666666
 8002d04:	3fee6666 	.word	0x3fee6666
 8002d08:	2000041c 	.word	0x2000041c
 8002d0c:	3e8f5c29 	.word	0x3e8f5c29
 8002d10:	20000420 	.word	0x20000420
 8002d14:	20000348 	.word	0x20000348
 8002d18:	41f00000 	.word	0x41f00000
 8002d1c:	c1f00000 	.word	0xc1f00000
 8002d20:	2000037c 	.word	0x2000037c
 8002d24:	20000424 	.word	0x20000424
 8002d28:	200003ac 	.word	0x200003ac
 8002d2c:	200003b0 	.word	0x200003b0
		oldAngleErrors[i] = oldAngleErrors[i-1];	// Adds the newest angleError to array and shifts everything to the right
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	4a2b      	ldr	r2, [pc, #172]	; (8002de4 <updatePID+0x50c>)
 8002d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d3a:	492a      	ldr	r1, [pc, #168]	; (8002de4 <updatePID+0x50c>)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	dcf0      	bgt.n	8002d30 <updatePID+0x458>
	oldAngleErrors[0] = angleError;
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <updatePID+0x510>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <updatePID+0x50c>)
 8002d54:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002d56:	2309      	movs	r3, #9
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	e00b      	b.n	8002d74 <updatePID+0x49c>
		oldDistanceErrors[i] = oldDistanceErrors[i-1];	// Adds the newest distanceError to array and shifts everything right
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	4a22      	ldr	r2, [pc, #136]	; (8002dec <updatePID+0x514>)
 8002d62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d66:	4921      	ldr	r1, [pc, #132]	; (8002dec <updatePID+0x514>)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	dcf0      	bgt.n	8002d5c <updatePID+0x484>
	oldDistanceErrors[0] = distanceError;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <updatePID+0x518>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <updatePID+0x514>)
 8002d80:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002d82:	2309      	movs	r3, #9
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	e00b      	b.n	8002da0 <updatePID+0x4c8>
		old_left_distances[i] = old_left_distances[i-1];
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <updatePID+0x51c>)
 8002d8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d92:	4918      	ldr	r1, [pc, #96]	; (8002df4 <updatePID+0x51c>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	dcf0      	bgt.n	8002d88 <updatePID+0x4b0>
	old_left_distances[0] = left_distance;
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <updatePID+0x520>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <updatePID+0x51c>)
 8002dac:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002dae:	2309      	movs	r3, #9
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	e00b      	b.n	8002dcc <updatePID+0x4f4>
		old_right_distances[i] = old_right_distances[i-1];
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <updatePID+0x524>)
 8002dba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002dbe:	490f      	ldr	r1, [pc, #60]	; (8002dfc <updatePID+0x524>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	dcf0      	bgt.n	8002db4 <updatePID+0x4dc>
	old_right_distances[0] = right_distance;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <updatePID+0x528>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <updatePID+0x524>)
 8002dd8:	6013      	str	r3, [r2, #0]

}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de4:	20000350 	.word	0x20000350
 8002de8:	20000348 	.word	0x20000348
 8002dec:	20000384 	.word	0x20000384
 8002df0:	2000037c 	.word	0x2000037c
 8002df4:	200003bc 	.word	0x200003bc
 8002df8:	200003b4 	.word	0x200003b4
 8002dfc:	200003ec 	.word	0x200003ec
 8002e00:	200003e4 	.word	0x200003e4

08002e04 <PIDdone>:

int8_t PIDdone(){ // There is no bool type in C. True/False values are represented as 1 or 0.
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0

	if (goal_reached_timer >= 50)
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <PIDdone+0x20>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b31      	cmp	r3, #49	; 0x31
 8002e0e:	dd06      	ble.n	8002e1e <PIDdone+0x1a>
	{
		resetPID();
 8002e10:	f000 f80a 	bl	8002e28 <resetPID>
		setState(REST);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7ff fa4b 	bl	80022b0 <setState>
		return 1;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <PIDdone+0x1c>
	}
	else
		return 0;
 8002e1e:	2300      	movs	r3, #0

}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000424 	.word	0x20000424

08002e28 <resetPID>:

void resetPID() {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0

//////////////	RESET ALL ANGLE AND DISTANCE ERRORS TO 0	////////////////
	angleError = 0;
 8002e2e:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <resetPID+0x104>)
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
	oldAngleError = 0;
 8002e36:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <resetPID+0x108>)
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
	angleCorrection = 0;
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <resetPID+0x10c>)
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	e008      	b.n	8002e5e <resetPID+0x36>
		oldAngleErrors[i] = 0;
 8002e4c:	4a3a      	ldr	r2, [pc, #232]	; (8002f38 <resetPID+0x110>)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b09      	cmp	r3, #9
 8002e62:	ddf3      	ble.n	8002e4c <resetPID+0x24>

	distanceError = 0;
 8002e64:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <resetPID+0x114>)
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
	oldDistanceError = 0;
 8002e6c:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <resetPID+0x118>)
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
	distanceCorrection = 0;
 8002e74:	4b33      	ldr	r3, [pc, #204]	; (8002f44 <resetPID+0x11c>)
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	e008      	b.n	8002e94 <resetPID+0x6c>
		oldDistanceErrors[i] = 0;
 8002e82:	4a31      	ldr	r2, [pc, #196]	; (8002f48 <resetPID+0x120>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3301      	adds	r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b09      	cmp	r3, #9
 8002e98:	ddf3      	ble.n	8002e82 <resetPID+0x5a>

	left_distance = 0;
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <resetPID+0x124>)
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
	old_left_distance = 0;
 8002ea2:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <resetPID+0x128>)
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	e008      	b.n	8002ec2 <resetPID+0x9a>
		old_left_distances[i] = 0;
 8002eb0:	4a28      	ldr	r2, [pc, #160]	; (8002f54 <resetPID+0x12c>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f04f 0100 	mov.w	r1, #0
 8002eb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	607b      	str	r3, [r7, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b09      	cmp	r3, #9
 8002ec6:	ddf3      	ble.n	8002eb0 <resetPID+0x88>

	right_distance = 0;
 8002ec8:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <resetPID+0x130>)
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
	old_right_distance = 0;
 8002ed0:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <resetPID+0x134>)
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	e008      	b.n	8002ef0 <resetPID+0xc8>
		old_right_distances[i] = 0;
 8002ede:	4a20      	ldr	r2, [pc, #128]	; (8002f60 <resetPID+0x138>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b09      	cmp	r3, #9
 8002ef4:	ddf3      	ble.n	8002ede <resetPID+0xb6>

	IRadjustment = 0;
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <resetPID+0x13c>)
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

////////////// 	RESET ALL GOALS AND ENCODER COUNTS TO 0 	///////////////////
	goal_angle = 0;
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <resetPID+0x140>)
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
	goal_distance = 0;
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <resetPID+0x144>)
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
	goal_reached_timer = 0;
 8002f0e:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <resetPID+0x148>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

	resetEncoders();
 8002f14:	f7fe fa46 	bl	80013a4 <resetEncoders>
	resetMotors();
 8002f18:	f7ff f996 	bl	8002248 <resetMotors>

	setState(REST);
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7ff f9c7 	bl	80022b0 <setState>

}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000348 	.word	0x20000348
 8002f30:	2000034c 	.word	0x2000034c
 8002f34:	20000378 	.word	0x20000378
 8002f38:	20000350 	.word	0x20000350
 8002f3c:	2000037c 	.word	0x2000037c
 8002f40:	20000380 	.word	0x20000380
 8002f44:	200003ac 	.word	0x200003ac
 8002f48:	20000384 	.word	0x20000384
 8002f4c:	200003b4 	.word	0x200003b4
 8002f50:	200003b8 	.word	0x200003b8
 8002f54:	200003bc 	.word	0x200003bc
 8002f58:	200003e4 	.word	0x200003e4
 8002f5c:	200003e8 	.word	0x200003e8
 8002f60:	200003ec 	.word	0x200003ec
 8002f64:	20000414 	.word	0x20000414
 8002f68:	20000340 	.word	0x20000340
 8002f6c:	2000033c 	.word	0x2000033c
 8002f70:	20000424 	.word	0x20000424

08002f74 <newCell>:
int16_t vertWall[16][17];

int16_t discovered[16][16];

struct Cell* newCell(int r, int c)           // Acts as a constructor for a cell cuz C is annoying
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
    struct Cell* p = malloc(sizeof(struct Cell));
 8002f7e:	2008      	movs	r0, #8
 8002f80:	f004 f876 	bl	8007070 <malloc>
 8002f84:	4603      	mov	r3, r0
 8002f86:	60fb      	str	r3, [r7, #12]
    p->row = r;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	601a      	str	r2, [r3, #0]
    p->col = c;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	605a      	str	r2, [r3, #4]
    return p;
 8002f94:	68fb      	ldr	r3, [r7, #12]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <insertQueue>:

void insertQueue(struct Cell* input) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    queue[queueEnd] = input;
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <insertQueue+0x48>)
 8002faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4a0e      	ldr	r2, [pc, #56]	; (8002fec <insertQueue+0x4c>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    queueEnd++;
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <insertQueue+0x48>)
 8002fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	b21a      	sxth	r2, r3
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <insertQueue+0x48>)
 8002fc8:	801a      	strh	r2, [r3, #0]

    if (queueEnd == 512) {
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <insertQueue+0x48>)
 8002fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd4:	d102      	bne.n	8002fdc <insertQueue+0x3c>
        queueEnd = 0;
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <insertQueue+0x48>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000e36 	.word	0x20000e36
 8002fec:	20000634 	.word	0x20000634

08002ff0 <popQueueFront>:

void popQueueFront()
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
    free(queueFront());
 8002ff4:	f000 f81a 	bl	800302c <queueFront>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 f840 	bl	8007080 <free>

    queueStart++;
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <popQueueFront+0x38>)
 8003002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003006:	b29b      	uxth	r3, r3
 8003008:	3301      	adds	r3, #1
 800300a:	b29b      	uxth	r3, r3
 800300c:	b21a      	sxth	r2, r3
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <popQueueFront+0x38>)
 8003010:	801a      	strh	r2, [r3, #0]
    if (queueStart == 512) {
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <popQueueFront+0x38>)
 8003014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301c:	d102      	bne.n	8003024 <popQueueFront+0x34>
        queueStart = 0;
 800301e:	4b02      	ldr	r3, [pc, #8]	; (8003028 <popQueueFront+0x38>)
 8003020:	2200      	movs	r2, #0
 8003022:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000e34 	.word	0x20000e34

0800302c <queueFront>:

struct Cell* queueFront()
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
    return queue[queueStart];
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <queueFront+0x1c>)
 8003032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003036:	461a      	mov	r2, r3
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <queueFront+0x20>)
 800303a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000e34 	.word	0x20000e34
 800304c:	20000634 	.word	0x20000634

08003050 <initElements>:

void initElements()
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
    currPos = newCell(15, 0);           // Sets current position to row 15, column 0
 8003056:	2100      	movs	r1, #0
 8003058:	200f      	movs	r0, #15
 800305a:	f7ff ff8b 	bl	8002f74 <newCell>
 800305e:	4603      	mov	r3, r0
 8003060:	4a34      	ldr	r2, [pc, #208]	; (8003134 <initElements+0xe4>)
 8003062:	6013      	str	r3, [r2, #0]
    currHead = NORTH;                    // Sets current heading to north
 8003064:	4b34      	ldr	r3, [pc, #208]	; (8003138 <initElements+0xe8>)
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin) == GPIO_PIN_SET)	// This is not the first run and we want to load maze
 800306a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800306e:	4833      	ldr	r0, [pc, #204]	; (800313c <initElements+0xec>)
 8003070:	f002 fd48 	bl	8005b04 <HAL_GPIO_ReadPin>
 8003074:	4603      	mov	r3, r0
 8003076:	2b01      	cmp	r3, #1
 8003078:	d102      	bne.n	8003080 <initElements+0x30>
    {
    	loadMaze();
 800307a:	f000 fd23 	bl	8003ac4 <loadMaze>
 800307e:	e04f      	b.n	8003120 <initElements+0xd0>
    }
    else																	// We don't want to load maze from memory
    {
        for (int i = 0; i < 17; i++) {
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e013      	b.n	80030ae <initElements+0x5e>
            for (int j = 0; j < 16; j++) {
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	e00a      	b.n	80030a2 <initElements+0x52>
                horzWall[i][j] = 0;
 800308c:	492c      	ldr	r1, [pc, #176]	; (8003140 <initElements+0xf0>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	011a      	lsls	r2, r3, #4
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4413      	add	r3, r2
 8003096:	2200      	movs	r2, #0
 8003098:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 16; j++) {
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	3301      	adds	r3, #1
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b0f      	cmp	r3, #15
 80030a6:	ddf1      	ble.n	800308c <initElements+0x3c>
        for (int i = 0; i < 17; i++) {
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3301      	adds	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	dde8      	ble.n	8003086 <initElements+0x36>
            }
        }
        for (int i = 0; i < 16; i++) {
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e015      	b.n	80030e6 <initElements+0x96>
            for (int j = 0; j < 17; j++) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	e00c      	b.n	80030da <initElements+0x8a>
                vertWall[i][j] = 0;
 80030c0:	4920      	ldr	r1, [pc, #128]	; (8003144 <initElements+0xf4>)
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	4413      	add	r3, r2
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	4413      	add	r3, r2
 80030ce:	2200      	movs	r2, #0
 80030d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 17; j++) {
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	3301      	adds	r3, #1
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b10      	cmp	r3, #16
 80030de:	ddef      	ble.n	80030c0 <initElements+0x70>
        for (int i = 0; i < 16; i++) {
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3301      	adds	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b0f      	cmp	r3, #15
 80030ea:	dde6      	ble.n	80030ba <initElements+0x6a>
            }
        }
		for (int i = 0; i < 16; i++) {
 80030ec:	2300      	movs	r3, #0
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	e013      	b.n	800311a <initElements+0xca>
			for (int j = 0; j < 16; j++) {
 80030f2:	2300      	movs	r3, #0
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	e00a      	b.n	800310e <initElements+0xbe>
				discovered[i][j] = 0;
 80030f8:	4913      	ldr	r1, [pc, #76]	; (8003148 <initElements+0xf8>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	011a      	lsls	r2, r3, #4
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	4413      	add	r3, r2
 8003102:	2200      	movs	r2, #0
 8003104:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int j = 0; j < 16; j++) {
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b0f      	cmp	r3, #15
 8003112:	ddf1      	ble.n	80030f8 <initElements+0xa8>
		for (int i = 0; i < 16; i++) {
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3301      	adds	r3, #1
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0f      	cmp	r3, #15
 800311e:	dde8      	ble.n	80030f2 <initElements+0xa2>
			}
		}
    }

    queueStart = 0;
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <initElements+0xfc>)
 8003122:	2200      	movs	r2, #0
 8003124:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <initElements+0x100>)
 8003128:	2200      	movs	r2, #0
 800312a:	801a      	strh	r2, [r3, #0]
}
 800312c:	bf00      	nop
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	2000042c 	.word	0x2000042c
 8003138:	20000430 	.word	0x20000430
 800313c:	40020800 	.word	0x40020800
 8003140:	20000e38 	.word	0x20000e38
 8003144:	20001058 	.word	0x20001058
 8003148:	20001278 	.word	0x20001278
 800314c:	20000e34 	.word	0x20000e34
 8003150:	20000e36 	.word	0x20000e36

08003154 <setWall>:

void setWall(int dir)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    switch (dir)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d844      	bhi.n	80031ec <setWall+0x98>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <setWall+0x14>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	08003179 	.word	0x08003179
 800316c:	08003193 	.word	0x08003193
 8003170:	080031b3 	.word	0x080031b3
 8003174:	080031cf 	.word	0x080031cf
    {
    case NORTH:
        horzWall[currPos->row][currPos->col] = 1;   // Sets the 2D array value to 1 to represent true (there's no bool type in C)
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <setWall+0xa4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <setWall+0xa4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	491d      	ldr	r1, [pc, #116]	; (80031fc <setWall+0xa8>)
 8003186:	0112      	lsls	r2, r2, #4
 8003188:	4413      	add	r3, r2
 800318a:	2201      	movs	r2, #1
 800318c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 8003190:	e02c      	b.n	80031ec <setWall+0x98>
    case EAST:
        vertWall[currPos->row][currPos->col + 1] = 1;   // May need to check 2D array logic my head hurts lol
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <setWall+0xa4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <setWall+0xa4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	1c59      	adds	r1, r3, #1
 80031a0:	4817      	ldr	r0, [pc, #92]	; (8003200 <setWall+0xac>)
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	4413      	add	r3, r2
 80031a8:	440b      	add	r3, r1
 80031aa:	2201      	movs	r2, #1
 80031ac:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 80031b0:	e01c      	b.n	80031ec <setWall+0x98>
    case SOUTH:
        horzWall[currPos->row + 1][currPos->col] = 1;
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <setWall+0xa4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <setWall+0xa4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	490e      	ldr	r1, [pc, #56]	; (80031fc <setWall+0xa8>)
 80031c2:	0112      	lsls	r2, r2, #4
 80031c4:	4413      	add	r3, r2
 80031c6:	2201      	movs	r2, #1
 80031c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 80031cc:	e00e      	b.n	80031ec <setWall+0x98>
    case WEST:
        vertWall[currPos->row][currPos->col] = 1;
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <setWall+0xa4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <setWall+0xa4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	4809      	ldr	r0, [pc, #36]	; (8003200 <setWall+0xac>)
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	4413      	add	r3, r2
 80031e2:	440b      	add	r3, r1
 80031e4:	2201      	movs	r2, #1
 80031e6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 80031ea:	bf00      	nop
    }
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	2000042c 	.word	0x2000042c
 80031fc:	20000e38 	.word	0x20000e38
 8003200:	20001058 	.word	0x20001058

08003204 <detectWalls>:

void detectWalls()
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
    switch (currHead)
 8003208:	4b44      	ldr	r3, [pc, #272]	; (800331c <detectWalls+0x118>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d876      	bhi.n	80032fe <detectWalls+0xfa>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <detectWalls+0x14>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	08003229 	.word	0x08003229
 800321c:	0800325b 	.word	0x0800325b
 8003220:	0800328d 	.word	0x0800328d
 8003224:	080032bf 	.word	0x080032bf
    {
    case NORTH:
        if (frontWallCheck())
 8003228:	f000 fee0 	bl	8003fec <frontWallCheck>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <detectWalls+0x34>
        {
            setWall(NORTH);
 8003232:	2000      	movs	r0, #0
 8003234:	f7ff ff8e 	bl	8003154 <setWall>
        }
        if (leftWallCheck())
 8003238:	f000 fea0 	bl	8003f7c <leftWallCheck>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <detectWalls+0x44>
        {
            setWall(WEST);
 8003242:	2003      	movs	r0, #3
 8003244:	f7ff ff86 	bl	8003154 <setWall>
        }
        if (rightWallCheck())
 8003248:	f000 feb4 	bl	8003fb4 <rightWallCheck>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d04e      	beq.n	80032f0 <detectWalls+0xec>
        {
            setWall(EAST);
 8003252:	2001      	movs	r0, #1
 8003254:	f7ff ff7e 	bl	8003154 <setWall>
        }
        break;
 8003258:	e04a      	b.n	80032f0 <detectWalls+0xec>
    case EAST:
        if (frontWallCheck())
 800325a:	f000 fec7 	bl	8003fec <frontWallCheck>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <detectWalls+0x66>
        {
            setWall(EAST);
 8003264:	2001      	movs	r0, #1
 8003266:	f7ff ff75 	bl	8003154 <setWall>
        }
        if (leftWallCheck())
 800326a:	f000 fe87 	bl	8003f7c <leftWallCheck>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <detectWalls+0x76>
        {
            setWall(NORTH);
 8003274:	2000      	movs	r0, #0
 8003276:	f7ff ff6d 	bl	8003154 <setWall>
        }
        if (rightWallCheck())
 800327a:	f000 fe9b 	bl	8003fb4 <rightWallCheck>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d037      	beq.n	80032f4 <detectWalls+0xf0>
        {
            setWall(SOUTH);
 8003284:	2002      	movs	r0, #2
 8003286:	f7ff ff65 	bl	8003154 <setWall>
        }
        break;
 800328a:	e033      	b.n	80032f4 <detectWalls+0xf0>
    case SOUTH:
        if (frontWallCheck())
 800328c:	f000 feae 	bl	8003fec <frontWallCheck>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <detectWalls+0x98>
        {
            setWall(SOUTH);
 8003296:	2002      	movs	r0, #2
 8003298:	f7ff ff5c 	bl	8003154 <setWall>
        }
        if (leftWallCheck())
 800329c:	f000 fe6e 	bl	8003f7c <leftWallCheck>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <detectWalls+0xa8>
        {
            setWall(EAST);
 80032a6:	2001      	movs	r0, #1
 80032a8:	f7ff ff54 	bl	8003154 <setWall>
        }
        if (rightWallCheck())
 80032ac:	f000 fe82 	bl	8003fb4 <rightWallCheck>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <detectWalls+0xf4>
        {
            setWall(WEST);
 80032b6:	2003      	movs	r0, #3
 80032b8:	f7ff ff4c 	bl	8003154 <setWall>
        }
        break;
 80032bc:	e01c      	b.n	80032f8 <detectWalls+0xf4>
    case WEST:
        if (frontWallCheck())
 80032be:	f000 fe95 	bl	8003fec <frontWallCheck>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <detectWalls+0xca>
        {
            setWall(WEST);
 80032c8:	2003      	movs	r0, #3
 80032ca:	f7ff ff43 	bl	8003154 <setWall>
        }
        if (leftWallCheck())
 80032ce:	f000 fe55 	bl	8003f7c <leftWallCheck>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <detectWalls+0xda>
        {
            setWall(SOUTH);
 80032d8:	2002      	movs	r0, #2
 80032da:	f7ff ff3b 	bl	8003154 <setWall>
        }
        if (rightWallCheck())
 80032de:	f000 fe69 	bl	8003fb4 <rightWallCheck>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d009      	beq.n	80032fc <detectWalls+0xf8>
        {
            setWall(NORTH);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7ff ff33 	bl	8003154 <setWall>
        }
        break;
 80032ee:	e005      	b.n	80032fc <detectWalls+0xf8>
        break;
 80032f0:	bf00      	nop
 80032f2:	e004      	b.n	80032fe <detectWalls+0xfa>
        break;
 80032f4:	bf00      	nop
 80032f6:	e002      	b.n	80032fe <detectWalls+0xfa>
        break;
 80032f8:	bf00      	nop
 80032fa:	e000      	b.n	80032fe <detectWalls+0xfa>
        break;
 80032fc:	bf00      	nop
    }

    discovered[currPos->row][currPos->col] = 1;		// Mark current cell as discovered
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <detectWalls+0x11c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <detectWalls+0x11c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4906      	ldr	r1, [pc, #24]	; (8003324 <detectWalls+0x120>)
 800330c:	0112      	lsls	r2, r2, #4
 800330e:	4413      	add	r3, r2
 8003310:	2201      	movs	r2, #1
 8003312:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000430 	.word	0x20000430
 8003320:	2000042c 	.word	0x2000042c
 8003324:	20001278 	.word	0x20001278

08003328 <recalculate>:

void recalculate()
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
    queueStart = 0;
 800332e:	4b99      	ldr	r3, [pc, #612]	; (8003594 <recalculate+0x26c>)
 8003330:	2200      	movs	r2, #0
 8003332:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 8003334:	4b98      	ldr	r3, [pc, #608]	; (8003598 <recalculate+0x270>)
 8003336:	2200      	movs	r2, #0
 8003338:	801a      	strh	r2, [r3, #0]

    // Mark all cells as -1, meaning that they have not had their Manhattan set yet
    for (int j = 0; j < 16; j++)
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	e014      	b.n	800336a <recalculate+0x42>
    {
        for (int i = 0; i < 16; i++)
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	e00b      	b.n	800335e <recalculate+0x36>
        {
            Manhattans[i][j] = -1;
 8003346:	4995      	ldr	r1, [pc, #596]	; (800359c <recalculate+0x274>)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	011a      	lsls	r2, r3, #4
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	4413      	add	r3, r2
 8003350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003354:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int i = 0; i < 16; i++)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	3301      	adds	r3, #1
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b0f      	cmp	r3, #15
 8003362:	ddf0      	ble.n	8003346 <recalculate+0x1e>
    for (int j = 0; j < 16; j++)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3301      	adds	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b0f      	cmp	r3, #15
 800336e:	dde7      	ble.n	8003340 <recalculate+0x18>
        }
    }

    if(goToCenter)
 8003370:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <recalculate+0x278>)
 8003372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <recalculate+0x6c>
//        insertQueue(newCell(7, 7));
//        insertQueue(newCell(7, 8));
//        insertQueue(newCell(8, 7));
//        insertQueue(newCell(8, 8));

    	Manhattans[12][0] = 0;
 800337a:	4b88      	ldr	r3, [pc, #544]	; (800359c <recalculate+0x274>)
 800337c:	2200      	movs	r2, #0
 800337e:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
    	insertQueue(newCell(12, 0));
 8003382:	2100      	movs	r1, #0
 8003384:	200c      	movs	r0, #12
 8003386:	f7ff fdf5 	bl	8002f74 <newCell>
 800338a:	4603      	mov	r3, r0
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fe07 	bl	8002fa0 <insertQueue>
 8003392:	e0f1      	b.n	8003578 <recalculate+0x250>
    }

    else
    {
        // Set starting cell to 0, insert starting cell into queue (set start as destination)
        Manhattans[15][0] = 0;
 8003394:	4b81      	ldr	r3, [pc, #516]	; (800359c <recalculate+0x274>)
 8003396:	2200      	movs	r2, #0
 8003398:	f8a3 21e0 	strh.w	r2, [r3, #480]	; 0x1e0
        insertQueue(newCell(15, 0));
 800339c:	2100      	movs	r1, #0
 800339e:	200f      	movs	r0, #15
 80033a0:	f7ff fde8 	bl	8002f74 <newCell>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fdfa 	bl	8002fa0 <insertQueue>
    }


    //while queue is not empty
    while (queueStart != queueEnd) {
 80033ac:	e0e4      	b.n	8003578 <recalculate+0x250>

        struct Cell* currElement = queueFront();
 80033ae:	f7ff fe3d 	bl	800302c <queueFront>
 80033b2:	60f8      	str	r0, [r7, #12]

        int currRow = currElement->row;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60bb      	str	r3, [r7, #8]
        int currCol = currElement->col;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	607b      	str	r3, [r7, #4]

        // For all accessable neighbors with no set Manhattan distance, add cell to queue and set Manhattan to current Manhattan + 1

        //north wall
        if (currRow > 0 && horzWall[currRow][currCol] != 1 && Manhattans[currRow - 1][currCol] == -1) {
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	dd31      	ble.n	800342a <recalculate+0x102>
 80033c6:	4977      	ldr	r1, [pc, #476]	; (80035a4 <recalculate+0x27c>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	011a      	lsls	r2, r3, #4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d028      	beq.n	800342a <recalculate+0x102>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	3b01      	subs	r3, #1
 80033dc:	496f      	ldr	r1, [pc, #444]	; (800359c <recalculate+0x274>)
 80033de:	011a      	lsls	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d11d      	bne.n	800342a <recalculate+0x102>
            Manhattans[currRow - 1][currCol] = Manhattans[currRow][currCol] + 1;
 80033ee:	496b      	ldr	r1, [pc, #428]	; (800359c <recalculate+0x274>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	011a      	lsls	r2, r3, #4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3b01      	subs	r3, #1
 8003406:	b210      	sxth	r0, r2
 8003408:	4964      	ldr	r1, [pc, #400]	; (800359c <recalculate+0x274>)
 800340a:	011a      	lsls	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	4602      	mov	r2, r0
 8003412:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow - 1, currCol));
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3b01      	subs	r3, #1
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fda9 	bl	8002f74 <newCell>
 8003422:	4603      	mov	r3, r0
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fdbb 	bl	8002fa0 <insertQueue>
        }
        //east wall
        if (currCol < 15 && vertWall[currRow][currCol + 1] != 1 && Manhattans[currRow][currCol + 1] == -1) {
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b0e      	cmp	r3, #14
 800342e:	dc34      	bgt.n	800349a <recalculate+0x172>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1c59      	adds	r1, r3, #1
 8003434:	485c      	ldr	r0, [pc, #368]	; (80035a8 <recalculate+0x280>)
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	4413      	add	r3, r2
 800343e:	440b      	add	r3, r1
 8003440:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d028      	beq.n	800349a <recalculate+0x172>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3301      	adds	r3, #1
 800344c:	4953      	ldr	r1, [pc, #332]	; (800359c <recalculate+0x274>)
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	4413      	add	r3, r2
 8003454:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d11d      	bne.n	800349a <recalculate+0x172>
            Manhattans[currRow][currCol + 1] = Manhattans[currRow][currCol] + 1;
 800345e:	494f      	ldr	r1, [pc, #316]	; (800359c <recalculate+0x274>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	011a      	lsls	r2, r3, #4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800346c:	b29b      	uxth	r3, r3
 800346e:	3301      	adds	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3301      	adds	r3, #1
 8003476:	b210      	sxth	r0, r2
 8003478:	4948      	ldr	r1, [pc, #288]	; (800359c <recalculate+0x274>)
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	0112      	lsls	r2, r2, #4
 800347e:	4413      	add	r3, r2
 8003480:	4602      	mov	r2, r0
 8003482:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol + 1));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3301      	adds	r3, #1
 800348a:	4619      	mov	r1, r3
 800348c:	68b8      	ldr	r0, [r7, #8]
 800348e:	f7ff fd71 	bl	8002f74 <newCell>
 8003492:	4603      	mov	r3, r0
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fd83 	bl	8002fa0 <insertQueue>
        }
        //south wall
        if (currRow < 15 && horzWall[currRow + 1][currCol] != 1 && Manhattans[currRow + 1][currCol] == -1) {
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b0e      	cmp	r3, #14
 800349e:	dc32      	bgt.n	8003506 <recalculate+0x1de>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3301      	adds	r3, #1
 80034a4:	493f      	ldr	r1, [pc, #252]	; (80035a4 <recalculate+0x27c>)
 80034a6:	011a      	lsls	r2, r3, #4
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d028      	beq.n	8003506 <recalculate+0x1de>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	3301      	adds	r3, #1
 80034b8:	4938      	ldr	r1, [pc, #224]	; (800359c <recalculate+0x274>)
 80034ba:	011a      	lsls	r2, r3, #4
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d11d      	bne.n	8003506 <recalculate+0x1de>
            Manhattans[currRow + 1][currCol] = Manhattans[currRow][currCol] + 1;
 80034ca:	4934      	ldr	r1, [pc, #208]	; (800359c <recalculate+0x274>)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	011a      	lsls	r2, r3, #4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3301      	adds	r3, #1
 80034e2:	b210      	sxth	r0, r2
 80034e4:	492d      	ldr	r1, [pc, #180]	; (800359c <recalculate+0x274>)
 80034e6:	011a      	lsls	r2, r3, #4
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4413      	add	r3, r2
 80034ec:	4602      	mov	r2, r0
 80034ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow + 1, currCol));
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3301      	adds	r3, #1
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fd3b 	bl	8002f74 <newCell>
 80034fe:	4603      	mov	r3, r0
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fd4d 	bl	8002fa0 <insertQueue>
        }
        //west wall
        if (currCol > 0 && vertWall[currRow][currCol] != 1 && Manhattans[currRow][currCol - 1] == -1) {
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	dd33      	ble.n	8003574 <recalculate+0x24c>
 800350c:	4926      	ldr	r1, [pc, #152]	; (80035a8 <recalculate+0x280>)
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	4613      	mov	r3, r2
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	4413      	add	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d028      	beq.n	8003574 <recalculate+0x24c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3b01      	subs	r3, #1
 8003526:	491d      	ldr	r1, [pc, #116]	; (800359c <recalculate+0x274>)
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	0112      	lsls	r2, r2, #4
 800352c:	4413      	add	r3, r2
 800352e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d11d      	bne.n	8003574 <recalculate+0x24c>
            Manhattans[currRow][currCol - 1] = Manhattans[currRow][currCol] + 1;
 8003538:	4918      	ldr	r1, [pc, #96]	; (800359c <recalculate+0x274>)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	011a      	lsls	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003546:	b29b      	uxth	r3, r3
 8003548:	3301      	adds	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3b01      	subs	r3, #1
 8003550:	b210      	sxth	r0, r2
 8003552:	4912      	ldr	r1, [pc, #72]	; (800359c <recalculate+0x274>)
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	4413      	add	r3, r2
 800355a:	4602      	mov	r2, r0
 800355c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol - 1));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	4619      	mov	r1, r3
 8003566:	68b8      	ldr	r0, [r7, #8]
 8003568:	f7ff fd04 	bl	8002f74 <newCell>
 800356c:	4603      	mov	r3, r0
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fd16 	bl	8002fa0 <insertQueue>
        }

        // Deletes cell from queue and frees memory
        popQueueFront();
 8003574:	f7ff fd3c 	bl	8002ff0 <popQueueFront>
    while (queueStart != queueEnd) {
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <recalculate+0x26c>)
 800357a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <recalculate+0x270>)
 8003580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003584:	429a      	cmp	r2, r3
 8003586:	f47f af12 	bne.w	80033ae <recalculate+0x86>
    }
}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000e34 	.word	0x20000e34
 8003598:	20000e36 	.word	0x20000e36
 800359c:	20000434 	.word	0x20000434
 80035a0:	20000008 	.word	0x20000008
 80035a4:	20000e38 	.word	0x20000e38
 80035a8:	20001058 	.word	0x20001058

080035ac <solver>:

Action solver(Algorithm alg) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
    switch (alg)
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <solver+0x16>
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d004      	beq.n	80035ca <solver+0x1e>
 80035c0:	e007      	b.n	80035d2 <solver+0x26>
    {
    case DEAD:
    	return deadReckoning();
 80035c2:	f000 f80b 	bl	80035dc <deadReckoning>
 80035c6:	4603      	mov	r3, r0
 80035c8:	e004      	b.n	80035d4 <solver+0x28>
    	break;
    case FLOODFILL:
    	return floodFill();
 80035ca:	f000 f81b 	bl	8003604 <floodFill>
 80035ce:	4603      	mov	r3, r0
 80035d0:	e000      	b.n	80035d4 <solver+0x28>
    	break;
    default:
    	return FORWARD;
 80035d2:	2301      	movs	r3, #1
    }
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <deadReckoning>:

Action deadReckoning() {       // The simple left wall following algorithm that they provided
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
	if (!frontWallCheck())
 80035e0:	f000 fd04 	bl	8003fec <frontWallCheck>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <deadReckoning+0x12>
	{
		return FORWARD;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e007      	b.n	80035fe <deadReckoning+0x22>
	}
	else if (!rightWallCheck())
 80035ee:	f000 fce1 	bl	8003fb4 <rightWallCheck>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <deadReckoning+0x20>
	{
		return RIGHT;
 80035f8:	2302      	movs	r3, #2
 80035fa:	e000      	b.n	80035fe <deadReckoning+0x22>
	}
	else
	{
		return LEFT;
 80035fc:	2300      	movs	r3, #0
	}
}
 80035fe:	4618      	mov	r0, r3
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <floodFill>:

Action floodFill() {
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
    // Initializes all the elements and calculates Manhattan distances
    if (!initialized)
 800360a:	4b9f      	ldr	r3, [pc, #636]	; (8003888 <floodFill+0x284>)
 800360c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d106      	bne.n	8003622 <floodFill+0x1e>
    {
        initElements();
 8003614:	f7ff fd1c 	bl	8003050 <initElements>
        recalculate();
 8003618:	f7ff fe86 	bl	8003328 <recalculate>
        initialized = 1;
 800361c:	4b9a      	ldr	r3, [pc, #616]	; (8003888 <floodFill+0x284>)
 800361e:	2201      	movs	r2, #1
 8003620:	801a      	strh	r2, [r3, #0]
    }

    // Lights up detected walls and adds them to the 2D wall arrays
    detectWalls();
 8003622:	f7ff fdef 	bl	8003204 <detectWalls>

    // Display all Manhattan distances in the API dispaly

    int row = currPos->row;
 8003626:	4b99      	ldr	r3, [pc, #612]	; (800388c <floodFill+0x288>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	61bb      	str	r3, [r7, #24]
    int col = currPos->col;
 800362e:	4b97      	ldr	r3, [pc, #604]	; (800388c <floodFill+0x288>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	617b      	str	r3, [r7, #20]

    // If goal has already been reached, set new destination to either middle or starting cell
    if (Manhattans[row][col] == 0)
 8003636:	4996      	ldr	r1, [pc, #600]	; (8003890 <floodFill+0x28c>)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	011a      	lsls	r2, r3, #4
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	4413      	add	r3, r2
 8003640:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d118      	bne.n	800367a <floodFill+0x76>
    {
    	if (HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin) == GPIO_PIN_SET)	// I want to save the finished maze on this run
 8003648:	2104      	movs	r1, #4
 800364a:	4892      	ldr	r0, [pc, #584]	; (8003894 <floodFill+0x290>)
 800364c:	f002 fa5a 	bl	8005b04 <HAL_GPIO_ReadPin>
 8003650:	4603      	mov	r3, r0
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <floodFill+0x56>
		{
			saveMaze();
 8003656:	f000 fa25 	bl	8003aa4 <saveMaze>
		}

        if (goToCenter)
 800365a:	4b8f      	ldr	r3, [pc, #572]	; (8003898 <floodFill+0x294>)
 800365c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <floodFill+0x68>
            goToCenter = 0; // Destination is now Starting Cell
 8003664:	4b8c      	ldr	r3, [pc, #560]	; (8003898 <floodFill+0x294>)
 8003666:	2200      	movs	r2, #0
 8003668:	801a      	strh	r2, [r3, #0]
 800366a:	e002      	b.n	8003672 <floodFill+0x6e>
        else
            goToCenter = 1; // Destination is now middle four
 800366c:	4b8a      	ldr	r3, [pc, #552]	; (8003898 <floodFill+0x294>)
 800366e:	2201      	movs	r2, #1
 8003670:	801a      	strh	r2, [r3, #0]

        recalculate();
 8003672:	f7ff fe59 	bl	8003328 <recalculate>
        return IDLE;
 8003676:	2303      	movs	r3, #3
 8003678:	e11d      	b.n	80038b6 <floodFill+0x2b2>
    }

    int northBlocked = horzWall[row][col];
 800367a:	4988      	ldr	r1, [pc, #544]	; (800389c <floodFill+0x298>)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	011a      	lsls	r2, r3, #4
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4413      	add	r3, r2
 8003684:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003688:	613b      	str	r3, [r7, #16]
    int eastBlocked = vertWall[row][col + 1];
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	1c59      	adds	r1, r3, #1
 800368e:	4884      	ldr	r0, [pc, #528]	; (80038a0 <floodFill+0x29c>)
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	4413      	add	r3, r2
 8003698:	440b      	add	r3, r1
 800369a:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800369e:	60fb      	str	r3, [r7, #12]
    int southBlocked = horzWall[row + 1][col];
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	3301      	adds	r3, #1
 80036a4:	497d      	ldr	r1, [pc, #500]	; (800389c <floodFill+0x298>)
 80036a6:	011a      	lsls	r2, r3, #4
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	4413      	add	r3, r2
 80036ac:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80036b0:	60bb      	str	r3, [r7, #8]
    int westBlocked = vertWall[row][col];
 80036b2:	497b      	ldr	r1, [pc, #492]	; (80038a0 <floodFill+0x29c>)
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	4413      	add	r3, r2
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4413      	add	r3, r2
 80036c0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80036c4:	607b      	str	r3, [r7, #4]

    // Find next heading
    int nextHead = -1;
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ca:	61fb      	str	r3, [r7, #28]

    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d016      	beq.n	8003700 <floodFill+0xfc>
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	496e      	ldr	r1, [pc, #440]	; (8003890 <floodFill+0x28c>)
 80036d8:	011a      	lsls	r2, r3, #4
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	4413      	add	r3, r2
 80036de:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80036e2:	486b      	ldr	r0, [pc, #428]	; (8003890 <floodFill+0x28c>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	0119      	lsls	r1, r3, #4
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	440b      	add	r3, r1
 80036ec:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	da05      	bge.n	8003700 <floodFill+0xfc>
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <floodFill+0xfc>
        nextHead = NORTH;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e04c      	b.n	800379a <floodFill+0x196>
    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	d016      	beq.n	8003734 <floodFill+0x130>
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3301      	adds	r3, #1
 800370a:	4961      	ldr	r1, [pc, #388]	; (8003890 <floodFill+0x28c>)
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	0112      	lsls	r2, r2, #4
 8003710:	4413      	add	r3, r2
 8003712:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003716:	485e      	ldr	r0, [pc, #376]	; (8003890 <floodFill+0x28c>)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	0119      	lsls	r1, r3, #4
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	440b      	add	r3, r1
 8003720:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003724:	429a      	cmp	r2, r3
 8003726:	da05      	bge.n	8003734 <floodFill+0x130>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <floodFill+0x130>
        nextHead = EAST;
 800372e:	2301      	movs	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	e032      	b.n	800379a <floodFill+0x196>
    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b0f      	cmp	r3, #15
 8003738:	d016      	beq.n	8003768 <floodFill+0x164>
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	3301      	adds	r3, #1
 800373e:	4954      	ldr	r1, [pc, #336]	; (8003890 <floodFill+0x28c>)
 8003740:	011a      	lsls	r2, r3, #4
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	4413      	add	r3, r2
 8003746:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 800374a:	4851      	ldr	r0, [pc, #324]	; (8003890 <floodFill+0x28c>)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	0119      	lsls	r1, r3, #4
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	440b      	add	r3, r1
 8003754:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003758:	429a      	cmp	r2, r3
 800375a:	da05      	bge.n	8003768 <floodFill+0x164>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d102      	bne.n	8003768 <floodFill+0x164>
        nextHead = SOUTH;
 8003762:	2302      	movs	r3, #2
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	e018      	b.n	800379a <floodFill+0x196>
    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d015      	beq.n	800379a <floodFill+0x196>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3b01      	subs	r3, #1
 8003772:	4947      	ldr	r1, [pc, #284]	; (8003890 <floodFill+0x28c>)
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	0112      	lsls	r2, r2, #4
 8003778:	4413      	add	r3, r2
 800377a:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 800377e:	4844      	ldr	r0, [pc, #272]	; (8003890 <floodFill+0x28c>)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	0119      	lsls	r1, r3, #4
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	440b      	add	r3, r1
 8003788:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800378c:	429a      	cmp	r2, r3
 800378e:	da04      	bge.n	800379a <floodFill+0x196>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <floodFill+0x196>
        nextHead = WEST;
 8003796:	2303      	movs	r3, #3
 8003798:	61fb      	str	r3, [r7, #28]

    // If no path available, then recalculta
    if (nextHead == -1)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d103      	bne.n	80037aa <floodFill+0x1a6>
    {
        recalculate();
 80037a2:	f7ff fdc1 	bl	8003328 <recalculate>
        return IDLE;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e085      	b.n	80038b6 <floodFill+0x2b2>
    }

    // If next heading is in same direction, move forward
    if (nextHead == currHead)
 80037aa:	4b3e      	ldr	r3, [pc, #248]	; (80038a4 <floodFill+0x2a0>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d128      	bne.n	8003808 <floodFill+0x204>
    {
        switch (currHead)
 80037b6:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <floodFill+0x2a0>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d822      	bhi.n	8003804 <floodFill+0x200>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <floodFill+0x1c0>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037e1 	.word	0x080037e1
 80037cc:	080037ed 	.word	0x080037ed
 80037d0:	080037f9 	.word	0x080037f9
        {
        case NORTH:
            currPos->row--;
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <floodFill+0x288>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	3a01      	subs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
            break;
 80037de:	e011      	b.n	8003804 <floodFill+0x200>
        case EAST:
            currPos->col++;
 80037e0:	4b2a      	ldr	r3, [pc, #168]	; (800388c <floodFill+0x288>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	3201      	adds	r2, #1
 80037e8:	605a      	str	r2, [r3, #4]
            break;
 80037ea:	e00b      	b.n	8003804 <floodFill+0x200>
        case SOUTH:
            currPos->row++;
 80037ec:	4b27      	ldr	r3, [pc, #156]	; (800388c <floodFill+0x288>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	3201      	adds	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
            break;
 80037f6:	e005      	b.n	8003804 <floodFill+0x200>
        case WEST:
            currPos->col--;
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <floodFill+0x288>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	3a01      	subs	r2, #1
 8003800:	605a      	str	r2, [r3, #4]
            break;
 8003802:	bf00      	nop
        }
        return FORWARD;
 8003804:	2301      	movs	r3, #1
 8003806:	e056      	b.n	80038b6 <floodFill+0x2b2>
    }

    // If next heading is in opposite direction, turn right
    if ((nextHead - currHead) % 2 == 0)
 8003808:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <floodFill+0x2a0>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10f      	bne.n	800383a <floodFill+0x236>
    {
        if (currHead == WEST)
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <floodFill+0x2a0>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d103      	bne.n	800382a <floodFill+0x226>
            currHead = NORTH;
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <floodFill+0x2a0>)
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e005      	b.n	8003836 <floodFill+0x232>
        else
            currHead++;
 800382a:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <floodFill+0x2a0>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <floodFill+0x2a0>)
 8003834:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 8003836:	2302      	movs	r3, #2
 8003838:	e03d      	b.n	80038b6 <floodFill+0x2b2>
    }

    // If next heading is right, turn right
    if ((nextHead - currHead) == 1 || nextHead - currHead == -3)
 800383a:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <floodFill+0x2a0>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	2b01      	cmp	r3, #1
 8003846:	d007      	beq.n	8003858 <floodFill+0x254>
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <floodFill+0x2a0>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	f113 0f03 	cmn.w	r3, #3
 8003856:	d10f      	bne.n	8003878 <floodFill+0x274>
    {
        if (currHead == WEST)
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <floodFill+0x2a0>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d103      	bne.n	8003868 <floodFill+0x264>
            currHead = NORTH;
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <floodFill+0x2a0>)
 8003862:	2200      	movs	r2, #0
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e005      	b.n	8003874 <floodFill+0x270>
        else
            currHead++;
 8003868:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <floodFill+0x2a0>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <floodFill+0x2a0>)
 8003872:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 8003874:	2302      	movs	r3, #2
 8003876:	e01e      	b.n	80038b6 <floodFill+0x2b2>
    }

    // else, turn left
    if (currHead == NORTH)
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <floodFill+0x2a0>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d113      	bne.n	80038a8 <floodFill+0x2a4>
        currHead = WEST;
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <floodFill+0x2a0>)
 8003882:	2203      	movs	r2, #3
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	e015      	b.n	80038b4 <floodFill+0x2b0>
 8003888:	20000428 	.word	0x20000428
 800388c:	2000042c 	.word	0x2000042c
 8003890:	20000434 	.word	0x20000434
 8003894:	40020c00 	.word	0x40020c00
 8003898:	20000008 	.word	0x20000008
 800389c:	20000e38 	.word	0x20000e38
 80038a0:	20001058 	.word	0x20001058
 80038a4:	20000430 	.word	0x20000430
    else
        currHead--;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <floodFill+0x2bc>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <floodFill+0x2bc>)
 80038b2:	701a      	strb	r2, [r3, #0]
    return LEFT;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000430 	.word	0x20000430

080038c4 <foresight>:

int foresight() {
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
	int row = currPos->row;
 80038ca:	4b70      	ldr	r3, [pc, #448]	; (8003a8c <foresight+0x1c8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	61fb      	str	r3, [r7, #28]
	int col = currPos->col;
 80038d2:	4b6e      	ldr	r3, [pc, #440]	; (8003a8c <foresight+0x1c8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	61bb      	str	r3, [r7, #24]

	int extra_moves = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]

	while(discovered[row][col] != 0)
 80038de:	e0c3      	b.n	8003a68 <foresight+0x1a4>
	{
	    int northBlocked = horzWall[row][col];
 80038e0:	496b      	ldr	r1, [pc, #428]	; (8003a90 <foresight+0x1cc>)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	011a      	lsls	r2, r3, #4
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	4413      	add	r3, r2
 80038ea:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80038ee:	60fb      	str	r3, [r7, #12]
	    int eastBlocked = vertWall[row][col + 1];
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	1c59      	adds	r1, r3, #1
 80038f4:	4867      	ldr	r0, [pc, #412]	; (8003a94 <foresight+0x1d0>)
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	4413      	add	r3, r2
 80038fe:	440b      	add	r3, r1
 8003900:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003904:	60bb      	str	r3, [r7, #8]
	    int southBlocked = horzWall[row + 1][col];
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3301      	adds	r3, #1
 800390a:	4961      	ldr	r1, [pc, #388]	; (8003a90 <foresight+0x1cc>)
 800390c:	011a      	lsls	r2, r3, #4
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003916:	607b      	str	r3, [r7, #4]
	    int westBlocked = vertWall[row][col];
 8003918:	495e      	ldr	r1, [pc, #376]	; (8003a94 <foresight+0x1d0>)
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	4413      	add	r3, r2
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4413      	add	r3, r2
 8003926:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800392a:	603b      	str	r3, [r7, #0]

	    // Find next heading
	    int nextHead = -1;
 800392c:	f04f 33ff 	mov.w	r3, #4294967295
 8003930:	613b      	str	r3, [r7, #16]

	    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d016      	beq.n	8003966 <foresight+0xa2>
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	3b01      	subs	r3, #1
 800393c:	4956      	ldr	r1, [pc, #344]	; (8003a98 <foresight+0x1d4>)
 800393e:	011a      	lsls	r2, r3, #4
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	4413      	add	r3, r2
 8003944:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003948:	4853      	ldr	r0, [pc, #332]	; (8003a98 <foresight+0x1d4>)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	0119      	lsls	r1, r3, #4
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	440b      	add	r3, r1
 8003952:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003956:	429a      	cmp	r2, r3
 8003958:	da05      	bge.n	8003966 <foresight+0xa2>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d102      	bne.n	8003966 <foresight+0xa2>
	        nextHead = NORTH;
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e04c      	b.n	8003a00 <foresight+0x13c>
	    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b0f      	cmp	r3, #15
 800396a:	d016      	beq.n	800399a <foresight+0xd6>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	3301      	adds	r3, #1
 8003970:	4949      	ldr	r1, [pc, #292]	; (8003a98 <foresight+0x1d4>)
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	0112      	lsls	r2, r2, #4
 8003976:	4413      	add	r3, r2
 8003978:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 800397c:	4846      	ldr	r0, [pc, #280]	; (8003a98 <foresight+0x1d4>)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	0119      	lsls	r1, r3, #4
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	440b      	add	r3, r1
 8003986:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800398a:	429a      	cmp	r2, r3
 800398c:	da05      	bge.n	800399a <foresight+0xd6>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <foresight+0xd6>
	        nextHead = EAST;
 8003994:	2301      	movs	r3, #1
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	e032      	b.n	8003a00 <foresight+0x13c>
	    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2b0f      	cmp	r3, #15
 800399e:	d016      	beq.n	80039ce <foresight+0x10a>
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	493c      	ldr	r1, [pc, #240]	; (8003a98 <foresight+0x1d4>)
 80039a6:	011a      	lsls	r2, r3, #4
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	4413      	add	r3, r2
 80039ac:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80039b0:	4839      	ldr	r0, [pc, #228]	; (8003a98 <foresight+0x1d4>)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	0119      	lsls	r1, r3, #4
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	440b      	add	r3, r1
 80039ba:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80039be:	429a      	cmp	r2, r3
 80039c0:	da05      	bge.n	80039ce <foresight+0x10a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <foresight+0x10a>
	        nextHead = SOUTH;
 80039c8:	2302      	movs	r3, #2
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	e018      	b.n	8003a00 <foresight+0x13c>
	    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d015      	beq.n	8003a00 <foresight+0x13c>
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	492f      	ldr	r1, [pc, #188]	; (8003a98 <foresight+0x1d4>)
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	4413      	add	r3, r2
 80039e0:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80039e4:	482c      	ldr	r0, [pc, #176]	; (8003a98 <foresight+0x1d4>)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	0119      	lsls	r1, r3, #4
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	440b      	add	r3, r1
 80039ee:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	da04      	bge.n	8003a00 <foresight+0x13c>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <foresight+0x13c>
	        nextHead = WEST;
 80039fc:	2303      	movs	r3, #3
 80039fe:	613b      	str	r3, [r7, #16]

	    if (nextHead != currHead)
 8003a00:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <foresight+0x1d8>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d138      	bne.n	8003a7e <foresight+0x1ba>
	    	break;

	    extra_moves++;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]

		switch (currHead)
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <foresight+0x1d8>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d81a      	bhi.n	8003a50 <foresight+0x18c>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <foresight+0x15c>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a39 	.word	0x08003a39
 8003a28:	08003a41 	.word	0x08003a41
 8003a2c:	08003a49 	.word	0x08003a49
		{
			case NORTH:
				row--;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	61fb      	str	r3, [r7, #28]
				break;
 8003a36:	e00b      	b.n	8003a50 <foresight+0x18c>
			case EAST:
				col++;
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	61bb      	str	r3, [r7, #24]
				break;
 8003a3e:	e007      	b.n	8003a50 <foresight+0x18c>
			case SOUTH:
				row++;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	3301      	adds	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
				break;
 8003a46:	e003      	b.n	8003a50 <foresight+0x18c>
			case WEST:
				col--;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	61bb      	str	r3, [r7, #24]
				break;
 8003a4e:	bf00      	nop
		}
		if (row < 0 || row > 15 || col < 0 || col > 15)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	db14      	blt.n	8003a80 <foresight+0x1bc>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	dc11      	bgt.n	8003a80 <foresight+0x1bc>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	db0e      	blt.n	8003a80 <foresight+0x1bc>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b0f      	cmp	r3, #15
 8003a66:	dc0b      	bgt.n	8003a80 <foresight+0x1bc>
	while(discovered[row][col] != 0)
 8003a68:	490d      	ldr	r1, [pc, #52]	; (8003aa0 <foresight+0x1dc>)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	011a      	lsls	r2, r3, #4
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	4413      	add	r3, r2
 8003a72:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f47f af32 	bne.w	80038e0 <foresight+0x1c>
 8003a7c:	e000      	b.n	8003a80 <foresight+0x1bc>
	    	break;
 8003a7e:	bf00      	nop
			break;
	}

	return extra_moves;
 8003a80:	697b      	ldr	r3, [r7, #20]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3724      	adds	r7, #36	; 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	2000042c 	.word	0x2000042c
 8003a90:	20000e38 	.word	0x20000e38
 8003a94:	20001058 	.word	0x20001058
 8003a98:	20000434 	.word	0x20000434
 8003a9c:	20000430 	.word	0x20000430
 8003aa0:	20001278 	.word	0x20001278

08003aa4 <saveMaze>:

void saveMaze() {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0

	writeFlash(horzWall, vertWall, discovered);
 8003aa8:	4a03      	ldr	r2, [pc, #12]	; (8003ab8 <saveMaze+0x14>)
 8003aaa:	4904      	ldr	r1, [pc, #16]	; (8003abc <saveMaze+0x18>)
 8003aac:	4804      	ldr	r0, [pc, #16]	; (8003ac0 <saveMaze+0x1c>)
 8003aae:	f7fd fc89 	bl	80013c4 <writeFlash>

}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20001278 	.word	0x20001278
 8003abc:	20001058 	.word	0x20001058
 8003ac0:	20000e38 	.word	0x20000e38

08003ac4 <loadMaze>:
void loadMaze() {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0

	readFlash(horzWall, vertWall, discovered);
 8003ac8:	4a03      	ldr	r2, [pc, #12]	; (8003ad8 <loadMaze+0x14>)
 8003aca:	4904      	ldr	r1, [pc, #16]	; (8003adc <loadMaze+0x18>)
 8003acc:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <loadMaze+0x1c>)
 8003ace:	f7fd fd1d 	bl	800150c <readFlash>

}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20001278 	.word	0x20001278
 8003adc:	20001058 	.word	0x20001058
 8003ae0:	20000e38 	.word	0x20000e38

08003ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <HAL_MspInit+0x48>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <HAL_MspInit+0x48>)
 8003af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af8:	6453      	str	r3, [r2, #68]	; 0x44
 8003afa:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <HAL_MspInit+0x48>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_MspInit+0x48>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <HAL_MspInit+0x48>)
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b14:	6413      	str	r3, [r2, #64]	; 0x40
 8003b16:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_MspInit+0x48>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	40023800 	.word	0x40023800

08003b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a3c      	ldr	r2, [pc, #240]	; (8003c40 <HAL_ADC_MspInit+0x110>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d171      	bne.n	8003c36 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	4b3b      	ldr	r3, [pc, #236]	; (8003c44 <HAL_ADC_MspInit+0x114>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	4a3a      	ldr	r2, [pc, #232]	; (8003c44 <HAL_ADC_MspInit+0x114>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6453      	str	r3, [r2, #68]	; 0x44
 8003b62:	4b38      	ldr	r3, [pc, #224]	; (8003c44 <HAL_ADC_MspInit+0x114>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <HAL_ADC_MspInit+0x114>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4a33      	ldr	r2, [pc, #204]	; (8003c44 <HAL_ADC_MspInit+0x114>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_ADC_MspInit+0x114>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	4b2d      	ldr	r3, [pc, #180]	; (8003c44 <HAL_ADC_MspInit+0x114>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a2c      	ldr	r2, [pc, #176]	; (8003c44 <HAL_ADC_MspInit+0x114>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <HAL_ADC_MspInit+0x114>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003baa:	2303      	movs	r3, #3
 8003bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bb2:	f107 0314 	add.w	r3, r7, #20
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4823      	ldr	r0, [pc, #140]	; (8003c48 <HAL_ADC_MspInit+0x118>)
 8003bba:	f001 fe05 	bl	80057c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 8003bbe:	2360      	movs	r3, #96	; 0x60
 8003bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	4619      	mov	r1, r3
 8003bd0:	481e      	ldr	r0, [pc, #120]	; (8003c4c <HAL_ADC_MspInit+0x11c>)
 8003bd2:	f001 fdf9 	bl	80057c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003bd8:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <HAL_ADC_MspInit+0x124>)
 8003bda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003bdc:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003bee:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003bfe:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003c00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c14:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c1a:	480d      	ldr	r0, [pc, #52]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003c1c:	f000 fff4 	bl	8004c08 <HAL_DMA_Init>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003c26:	f7fe fa61 	bl	80020ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003c2e:	639a      	str	r2, [r3, #56]	; 0x38
 8003c30:	4a07      	ldr	r2, [pc, #28]	; (8003c50 <HAL_ADC_MspInit+0x120>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c36:	bf00      	nop
 8003c38:	3728      	adds	r7, #40	; 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40012000 	.word	0x40012000
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40020800 	.word	0x40020800
 8003c4c:	40020000 	.word	0x40020000
 8003c50:	200001ec 	.word	0x200001ec
 8003c54:	40026410 	.word	0x40026410

08003c58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <HAL_TIM_PWM_MspInit+0x38>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10d      	bne.n	8003c86 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_TIM_PWM_MspInit+0x3c>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <HAL_TIM_PWM_MspInit+0x3c>)
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_TIM_PWM_MspInit+0x3c>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40023800 	.word	0x40023800

08003c98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08c      	sub	sp, #48	; 0x30
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a32      	ldr	r2, [pc, #200]	; (8003d80 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d12c      	bne.n	8003d14 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a30      	ldr	r2, [pc, #192]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	4b2e      	ldr	r3, [pc, #184]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	4a29      	ldr	r2, [pc, #164]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ce0:	f043 0302 	orr.w	r3, r3, #2
 8003ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8003cf2:	2330      	movs	r3, #48	; 0x30
 8003cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d02:	2302      	movs	r3, #2
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d06:	f107 031c 	add.w	r3, r7, #28
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	481e      	ldr	r0, [pc, #120]	; (8003d88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003d0e:	f001 fd5b 	bl	80057c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003d12:	e030      	b.n	8003d76 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <HAL_TIM_Encoder_MspInit+0xf4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d12b      	bne.n	8003d76 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003d28:	f043 0302 	orr.w	r3, r3, #2
 8003d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d2e:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	4a10      	ldr	r2, [pc, #64]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003d44:	f043 0304 	orr.w	r3, r3, #4
 8003d48:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <HAL_TIM_Encoder_MspInit+0xec>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8003d56:	23c0      	movs	r3, #192	; 0xc0
 8003d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d62:	2300      	movs	r3, #0
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003d66:	2303      	movs	r3, #3
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d6a:	f107 031c 	add.w	r3, r7, #28
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4807      	ldr	r0, [pc, #28]	; (8003d90 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003d72:	f001 fd29 	bl	80057c8 <HAL_GPIO_Init>
}
 8003d76:	bf00      	nop
 8003d78:	3730      	adds	r7, #48	; 0x30
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40020400 	.word	0x40020400
 8003d8c:	40010400 	.word	0x40010400
 8003d90:	40020800 	.word	0x40020800

08003d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 030c 	add.w	r3, r7, #12
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <HAL_TIM_MspPostInit+0x68>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d11e      	bne.n	8003df4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_TIM_MspPostInit+0x6c>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <HAL_TIM_MspPostInit+0x6c>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <HAL_TIM_MspPostInit+0x6c>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8003dd2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003dd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003de4:	2301      	movs	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	4619      	mov	r1, r3
 8003dee:	4805      	ldr	r0, [pc, #20]	; (8003e04 <HAL_TIM_MspPostInit+0x70>)
 8003df0:	f001 fcea 	bl	80057c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003df4:	bf00      	nop
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40020000 	.word	0x40020000

08003e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e0c:	e7fe      	b.n	8003e0c <NMI_Handler+0x4>

08003e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e12:	e7fe      	b.n	8003e12 <HardFault_Handler+0x4>

08003e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e18:	e7fe      	b.n	8003e18 <MemManage_Handler+0x4>

08003e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e1e:	e7fe      	b.n	8003e1e <BusFault_Handler+0x4>

08003e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e24:	e7fe      	b.n	8003e24 <UsageFault_Handler+0x4>

08003e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e26:	b480      	push	{r7}
 8003e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr

08003e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e42:	bf00      	nop
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e4e:	f000 f983 	bl	8004158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  SysTickFunction();
 8003e52:	f000 f857 	bl	8003f04 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch2_Pin);
 8003e5e:	2004      	movs	r0, #4
 8003e60:	f001 fe80 	bl	8005b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003e64:	bf00      	nop
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch1_Pin);
 8003e6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e70:	f001 fe78 	bl	8005b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <DMA2_Stream0_IRQHandler+0x10>)
 8003e7e:	f001 f839 	bl	8004ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200001ec 	.word	0x200001ec

08003e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e94:	4a14      	ldr	r2, [pc, #80]	; (8003ee8 <_sbrk+0x5c>)
 8003e96:	4b15      	ldr	r3, [pc, #84]	; (8003eec <_sbrk+0x60>)
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <_sbrk+0x64>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ea8:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <_sbrk+0x64>)
 8003eaa:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <_sbrk+0x68>)
 8003eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <_sbrk+0x64>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d207      	bcs.n	8003ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ebc:	f003 f8ae 	bl	800701c <__errno>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	220c      	movs	r2, #12
 8003ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	e009      	b.n	8003ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ecc:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <_sbrk+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <_sbrk+0x64>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4413      	add	r3, r2
 8003eda:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <_sbrk+0x64>)
 8003edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ede:	68fb      	ldr	r3, [r7, #12]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20020000 	.word	0x20020000
 8003eec:	00000400 	.word	0x00000400
 8003ef0:	20001478 	.word	0x20001478
 8003ef4:	200014b8 	.word	0x200014b8

08003ef8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <SysTickFunction>:

#include "main.h"
#include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 8003f0a:	f7fe fce5 	bl	80028d8 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8003f0e:	f7fd fa2d 	bl	800136c <getRightEncoderCounts>
 8003f12:	4603      	mov	r3, r0
 8003f14:	461a      	mov	r2, r3
 8003f16:	f647 1318 	movw	r3, #31000	; 0x7918
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	dc15      	bgt.n	8003f4a <SysTickFunction+0x46>
 8003f1e:	f7fd fa33 	bl	8001388 <getLeftEncoderCounts>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461a      	mov	r2, r3
 8003f26:	f647 1318 	movw	r3, #31000	; 0x7918
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	dc0d      	bgt.n	8003f4a <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8003f2e:	f7fd fa1d 	bl	800136c <getRightEncoderCounts>
 8003f32:	4603      	mov	r3, r0
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <SysTickFunction+0x74>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	db06      	blt.n	8003f4a <SysTickFunction+0x46>
 8003f3c:	f7fd fa24 	bl	8001388 <getLeftEncoderCounts>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <SysTickFunction+0x74>)
 8003f46:	429a      	cmp	r2, r3
 8003f48:	da11      	bge.n	8003f6e <SysTickFunction+0x6a>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8003f4a:	f7fd fa0f 	bl	800136c <getRightEncoderCounts>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	b29c      	uxth	r4, r3
 8003f52:	f7fd fa19 	bl	8001388 <getLeftEncoderCounts>
 8003f56:	4603      	mov	r3, r0
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	1ae3      	subs	r3, r4, r3
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 8003f60:	f7fd fa20 	bl	80013a4 <resetEncoders>
		TIM2->CNT = (int16_t) difference;
 8003f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f6c:	6253      	str	r3, [r2, #36]	; 0x24
	}
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	ffff86e8 	.word	0xffff86e8

08003f7c <leftWallCheck>:

void setLeftWall(int wall) { left_wall_threshold = wall; }
void setRightWall(int wall) { right_wall_threshold = wall; }
void setFrontWall(int wall) { front_wall_threshold = wall; }

int16_t leftWallCheck() {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
	if (readIR(IR_LEFT) > left_wall_threshold) {
 8003f80:	2001      	movs	r0, #1
 8003f82:	f7fd fb49 	bl	8001618 <readIR>
 8003f86:	4603      	mov	r3, r0
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <leftWallCheck+0x30>)
 8003f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	dd03      	ble.n	8003f9c <leftWallCheck+0x20>
		left_wall = 1;
 8003f94:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <leftWallCheck+0x34>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	801a      	strh	r2, [r3, #0]
 8003f9a:	e002      	b.n	8003fa2 <leftWallCheck+0x26>
	}
	else {
		left_wall = 0;
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <leftWallCheck+0x34>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	801a      	strh	r2, [r3, #0]
	}
	return left_wall;
 8003fa2:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <leftWallCheck+0x34>)
 8003fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20000010 	.word	0x20000010
 8003fb0:	2000147c 	.word	0x2000147c

08003fb4 <rightWallCheck>:

int16_t rightWallCheck() {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
	if (readIR(IR_RIGHT) > right_wall_threshold) {
 8003fb8:	2002      	movs	r0, #2
 8003fba:	f7fd fb2d 	bl	8001618 <readIR>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <rightWallCheck+0x30>)
 8003fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	dd03      	ble.n	8003fd4 <rightWallCheck+0x20>
		right_wall = 1;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <rightWallCheck+0x34>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	e002      	b.n	8003fda <rightWallCheck+0x26>
	}
	else {
		right_wall = 0;
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <rightWallCheck+0x34>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	801a      	strh	r2, [r3, #0]
	}
	return right_wall;
 8003fda:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <rightWallCheck+0x34>)
 8003fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000012 	.word	0x20000012
 8003fe8:	2000147e 	.word	0x2000147e

08003fec <frontWallCheck>:

int16_t frontWallCheck() {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
	if (readIR(IR_FORWARD_LEFT) > front_wall_threshold) {
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f7fd fb11 	bl	8001618 <readIR>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4b08      	ldr	r3, [pc, #32]	; (800401c <frontWallCheck+0x30>)
 8003ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004000:	429a      	cmp	r2, r3
 8004002:	dd03      	ble.n	800400c <frontWallCheck+0x20>
		front_wall = 1;
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <frontWallCheck+0x34>)
 8004006:	2201      	movs	r2, #1
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	e002      	b.n	8004012 <frontWallCheck+0x26>
	}
	else {
		front_wall = 0;
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <frontWallCheck+0x34>)
 800400e:	2200      	movs	r2, #0
 8004010:	801a      	strh	r2, [r3, #0]
	}
	return front_wall;
 8004012:	4b03      	ldr	r3, [pc, #12]	; (8004020 <frontWallCheck+0x34>)
 8004014:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000014 	.word	0x20000014
 8004020:	20001480 	.word	0x20001480

08004024 <sign>:

int16_t sign(float x) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	if (x > 0)
 800402c:	f04f 0100 	mov.w	r1, #0
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7fc ff51 	bl	8000ed8 <__aeabi_fcmpgt>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <sign+0x1c>
	{
		return 1;
 800403c:	2301      	movs	r3, #1
 800403e:	e00b      	b.n	8004058 <sign+0x34>
	}
	else if (x < 0)
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7fc ff29 	bl	8000e9c <__aeabi_fcmplt>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <sign+0x32>
	{
		return -1;
 8004050:	f04f 33ff 	mov.w	r3, #4294967295
 8004054:	e000      	b.n	8004058 <sign+0x34>
	}
	else
	{
		return 0;
 8004056:	2300      	movs	r3, #0
	}
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004064:	480d      	ldr	r0, [pc, #52]	; (800409c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004066:	490e      	ldr	r1, [pc, #56]	; (80040a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004068:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800406a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800406c:	e002      	b.n	8004074 <LoopCopyDataInit>

0800406e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800406e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004072:	3304      	adds	r3, #4

08004074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004078:	d3f9      	bcc.n	800406e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800407a:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800407c:	4c0b      	ldr	r4, [pc, #44]	; (80040ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800407e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004080:	e001      	b.n	8004086 <LoopFillZerobss>

08004082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004084:	3204      	adds	r2, #4

08004086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004088:	d3fb      	bcc.n	8004082 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800408a:	f7ff ff35 	bl	8003ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800408e:	f002 ffcb 	bl	8007028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004092:	f7fd fbff 	bl	8001894 <main>
  bx  lr    
 8004096:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800409c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040a0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80040a4:	080072d4 	.word	0x080072d4
  ldr r2, =_sbss
 80040a8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80040ac:	200014b8 	.word	0x200014b8

080040b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040b0:	e7fe      	b.n	80040b0 <ADC_IRQHandler>
	...

080040b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040b8:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <HAL_Init+0x40>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a0d      	ldr	r2, [pc, #52]	; (80040f4 <HAL_Init+0x40>)
 80040be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <HAL_Init+0x40>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <HAL_Init+0x40>)
 80040ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040d0:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <HAL_Init+0x40>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a07      	ldr	r2, [pc, #28]	; (80040f4 <HAL_Init+0x40>)
 80040d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040dc:	2003      	movs	r0, #3
 80040de:	f000 fd51 	bl	8004b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040e2:	200f      	movs	r0, #15
 80040e4:	f000 f808 	bl	80040f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80040e8:	f7ff fcfc 	bl	8003ae4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40023c00 	.word	0x40023c00

080040f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_InitTick+0x54>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_InitTick+0x58>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800410e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004112:	fbb2 f3f3 	udiv	r3, r2, r3
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fd69 	bl	8004bee <HAL_SYSTICK_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e00e      	b.n	8004144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b0f      	cmp	r3, #15
 800412a:	d80a      	bhi.n	8004142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800412c:	2200      	movs	r2, #0
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	f000 fd31 	bl	8004b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004138:	4a06      	ldr	r2, [pc, #24]	; (8004154 <HAL_InitTick+0x5c>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e000      	b.n	8004144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	2000000c 	.word	0x2000000c
 8004150:	2000001c 	.word	0x2000001c
 8004154:	20000018 	.word	0x20000018

08004158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_IncTick+0x1c>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_IncTick+0x20>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4413      	add	r3, r2
 8004168:	4a03      	ldr	r2, [pc, #12]	; (8004178 <HAL_IncTick+0x20>)
 800416a:	6013      	str	r3, [r2, #0]
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr
 8004174:	2000001c 	.word	0x2000001c
 8004178:	20001484 	.word	0x20001484

0800417c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return uwTick;
 8004180:	4b02      	ldr	r3, [pc, #8]	; (800418c <HAL_GetTick+0x10>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr
 800418c:	20001484 	.word	0x20001484

08004190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e033      	b.n	800420e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff fcbe 	bl	8003b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d118      	bne.n	8004200 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041d6:	f023 0302 	bic.w	r3, r3, #2
 80041da:	f043 0202 	orr.w	r2, r3, #2
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa7a 	bl	80046dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
 80041fe:	e001      	b.n	8004204 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_ADC_Start_DMA+0x1e>
 8004232:	2302      	movs	r3, #2
 8004234:	e0bc      	b.n	80043b0 <HAL_ADC_Start_DMA+0x198>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d018      	beq.n	800427e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800425c:	4b56      	ldr	r3, [pc, #344]	; (80043b8 <HAL_ADC_Start_DMA+0x1a0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a56      	ldr	r2, [pc, #344]	; (80043bc <HAL_ADC_Start_DMA+0x1a4>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	0c9a      	lsrs	r2, r3, #18
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8004270:	e002      	b.n	8004278 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	3b01      	subs	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f9      	bne.n	8004272 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	f040 8084 	bne.w	8004396 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042cc:	d106      	bne.n	80042dc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f023 0206 	bic.w	r2, r3, #6
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
 80042da:	e002      	b.n	80042e2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	4a34      	ldr	r2, [pc, #208]	; (80043c0 <HAL_ADC_Start_DMA+0x1a8>)
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	4a33      	ldr	r2, [pc, #204]	; (80043c4 <HAL_ADC_Start_DMA+0x1ac>)
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	4a32      	ldr	r2, [pc, #200]	; (80043c8 <HAL_ADC_Start_DMA+0x1b0>)
 8004300:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800430a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800431a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800432a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	334c      	adds	r3, #76	; 0x4c
 8004336:	4619      	mov	r1, r3
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f000 fd12 	bl	8004d64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004340:	4b22      	ldr	r3, [pc, #136]	; (80043cc <HAL_ADC_Start_DMA+0x1b4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10f      	bne.n	800436c <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d129      	bne.n	80043ae <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	e020      	b.n	80043ae <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <HAL_ADC_Start_DMA+0x1b8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d11b      	bne.n	80043ae <HAL_ADC_Start_DMA+0x196>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d114      	bne.n	80043ae <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	e00b      	b.n	80043ae <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f043 0210 	orr.w	r2, r3, #16
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f043 0201 	orr.w	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	2000000c 	.word	0x2000000c
 80043bc:	431bde83 	.word	0x431bde83
 80043c0:	080048e9 	.word	0x080048e9
 80043c4:	080049a3 	.word	0x080049a3
 80043c8:	080049bf 	.word	0x080049bf
 80043cc:	40012300 	.word	0x40012300
 80043d0:	40012000 	.word	0x40012000

080043d4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_Stop_DMA+0x1a>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e03f      	b.n	800446e <HAL_ADC_Stop_DMA+0x9a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d127      	bne.n	8004464 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004422:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d118      	bne.n	8004464 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fcec 	bl	8004e14 <HAL_DMA_Abort>
 800443c:	4603      	mov	r3, r0
 800443e:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800444e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	f043 0201 	orr.w	r2, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800446c:	7bfb      	ldrb	r3, [r7, #15]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
	...

0800449c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x1c>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e103      	b.n	80046c0 <HAL_ADC_ConfigChannel+0x224>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b09      	cmp	r3, #9
 80044c6:	d925      	bls.n	8004514 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68d9      	ldr	r1, [r3, #12]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	4613      	mov	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4413      	add	r3, r2
 80044dc:	3b1e      	subs	r3, #30
 80044de:	2207      	movs	r2, #7
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43da      	mvns	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	400a      	ands	r2, r1
 80044ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68d9      	ldr	r1, [r3, #12]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	4618      	mov	r0, r3
 8004500:	4603      	mov	r3, r0
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4403      	add	r3, r0
 8004506:	3b1e      	subs	r3, #30
 8004508:	409a      	lsls	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	e022      	b.n	800455a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6919      	ldr	r1, [r3, #16]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	4613      	mov	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4413      	add	r3, r2
 8004528:	2207      	movs	r2, #7
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43da      	mvns	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	400a      	ands	r2, r1
 8004536:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6919      	ldr	r1, [r3, #16]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	4618      	mov	r0, r3
 800454a:	4603      	mov	r3, r0
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	4403      	add	r3, r0
 8004550:	409a      	lsls	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b06      	cmp	r3, #6
 8004560:	d824      	bhi.n	80045ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	3b05      	subs	r3, #5
 8004574:	221f      	movs	r2, #31
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43da      	mvns	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	400a      	ands	r2, r1
 8004582:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	4618      	mov	r0, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	3b05      	subs	r3, #5
 800459e:	fa00 f203 	lsl.w	r2, r0, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	635a      	str	r2, [r3, #52]	; 0x34
 80045aa:	e04c      	b.n	8004646 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b0c      	cmp	r3, #12
 80045b2:	d824      	bhi.n	80045fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	3b23      	subs	r3, #35	; 0x23
 80045c6:	221f      	movs	r2, #31
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43da      	mvns	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	400a      	ands	r2, r1
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	4618      	mov	r0, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	3b23      	subs	r3, #35	; 0x23
 80045f0:	fa00 f203 	lsl.w	r2, r0, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
 80045fc:	e023      	b.n	8004646 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	3b41      	subs	r3, #65	; 0x41
 8004610:	221f      	movs	r2, #31
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43da      	mvns	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	400a      	ands	r2, r1
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	4618      	mov	r0, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	3b41      	subs	r3, #65	; 0x41
 800463a:	fa00 f203 	lsl.w	r2, r0, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a20      	ldr	r2, [pc, #128]	; (80046cc <HAL_ADC_ConfigChannel+0x230>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d109      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x1c8>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b12      	cmp	r3, #18
 8004656:	d105      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <HAL_ADC_ConfigChannel+0x234>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <HAL_ADC_ConfigChannel+0x234>)
 800465e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004662:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_ADC_ConfigChannel+0x230>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d123      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x21a>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b10      	cmp	r3, #16
 8004674:	d003      	beq.n	800467e <HAL_ADC_ConfigChannel+0x1e2>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b11      	cmp	r3, #17
 800467c:	d11b      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800467e:	4b14      	ldr	r3, [pc, #80]	; (80046d0 <HAL_ADC_ConfigChannel+0x234>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	4a13      	ldr	r2, [pc, #76]	; (80046d0 <HAL_ADC_ConfigChannel+0x234>)
 8004684:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004688:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b10      	cmp	r3, #16
 8004690:	d111      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004692:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <HAL_ADC_ConfigChannel+0x238>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <HAL_ADC_ConfigChannel+0x23c>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	0c9a      	lsrs	r2, r3, #18
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80046a8:	e002      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f9      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40012000 	.word	0x40012000
 80046d0:	40012300 	.word	0x40012300
 80046d4:	2000000c 	.word	0x2000000c
 80046d8:	431bde83 	.word	0x431bde83

080046dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80046e4:	4b7e      	ldr	r3, [pc, #504]	; (80048e0 <ADC_Init+0x204>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4a7d      	ldr	r2, [pc, #500]	; (80048e0 <ADC_Init+0x204>)
 80046ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80046ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80046f0:	4b7b      	ldr	r3, [pc, #492]	; (80048e0 <ADC_Init+0x204>)
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4979      	ldr	r1, [pc, #484]	; (80048e0 <ADC_Init+0x204>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800470c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	021a      	lsls	r2, r3, #8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6899      	ldr	r1, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	4a5e      	ldr	r2, [pc, #376]	; (80048e4 <ADC_Init+0x208>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d022      	beq.n	80047b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800477e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6899      	ldr	r1, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6899      	ldr	r1, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	e00f      	b.n	80047d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0202 	bic.w	r2, r2, #2
 80047e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6899      	ldr	r1, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	7e1b      	ldrb	r3, [r3, #24]
 80047f0:	005a      	lsls	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d027      	beq.n	8004854 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004812:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004822:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	3b01      	subs	r3, #1
 800482a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800482e:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	fa92 f2a2 	rbit	r2, r2
 8004836:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	fab2 f282 	clz	r2, r2
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	fa03 f102 	lsl.w	r1, r3, r2
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	e007      	b.n	8004864 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004862:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004872:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	3b01      	subs	r3, #1
 8004880:	051a      	lsls	r2, r3, #20
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004898:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6899      	ldr	r1, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048a6:	025a      	lsls	r2, r3, #9
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6899      	ldr	r1, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	029a      	lsls	r2, r3, #10
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40012300 	.word	0x40012300
 80048e4:	0f000001 	.word	0x0f000001

080048e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d13c      	bne.n	800497c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d12b      	bne.n	8004974 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004920:	2b00      	cmp	r3, #0
 8004922:	d127      	bne.n	8004974 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800492e:	2b00      	cmp	r3, #0
 8004930:	d006      	beq.n	8004940 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800493c:	2b00      	cmp	r3, #0
 800493e:	d119      	bne.n	8004974 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0220 	bic.w	r2, r2, #32
 800494e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d105      	bne.n	8004974 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f043 0201 	orr.w	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f7fc ff35 	bl	80017e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800497a:	e00e      	b.n	800499a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff fd7d 	bl	8004488 <HAL_ADC_ErrorCallback>
}
 800498e:	e004      	b.n	800499a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f7ff fd60 	bl	8004476 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2240      	movs	r2, #64	; 0x40
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	f043 0204 	orr.w	r2, r3, #4
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff fd52 	bl	8004488 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <__NVIC_SetPriorityGrouping+0x44>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a1e:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <__NVIC_SetPriorityGrouping+0x44>)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	60d3      	str	r3, [r2, #12]
}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000ed00 	.word	0xe000ed00

08004a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a38:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <__NVIC_GetPriorityGrouping+0x18>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	f003 0307 	and.w	r3, r3, #7
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	db0b      	blt.n	8004a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	f003 021f 	and.w	r2, r3, #31
 8004a68:	4906      	ldr	r1, [pc, #24]	; (8004a84 <__NVIC_EnableIRQ+0x34>)
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	2001      	movs	r0, #1
 8004a72:	fa00 f202 	lsl.w	r2, r0, r2
 8004a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	e000e100 	.word	0xe000e100

08004a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	6039      	str	r1, [r7, #0]
 8004a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	db0a      	blt.n	8004ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	490c      	ldr	r1, [pc, #48]	; (8004ad4 <__NVIC_SetPriority+0x4c>)
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	0112      	lsls	r2, r2, #4
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	440b      	add	r3, r1
 8004aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ab0:	e00a      	b.n	8004ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	4908      	ldr	r1, [pc, #32]	; (8004ad8 <__NVIC_SetPriority+0x50>)
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	3b04      	subs	r3, #4
 8004ac0:	0112      	lsls	r2, r2, #4
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	761a      	strb	r2, [r3, #24]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	e000e100 	.word	0xe000e100
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b089      	sub	sp, #36	; 0x24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f1c3 0307 	rsb	r3, r3, #7
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	bf28      	it	cs
 8004afa:	2304      	movcs	r3, #4
 8004afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	3304      	adds	r3, #4
 8004b02:	2b06      	cmp	r3, #6
 8004b04:	d902      	bls.n	8004b0c <NVIC_EncodePriority+0x30>
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3b03      	subs	r3, #3
 8004b0a:	e000      	b.n	8004b0e <NVIC_EncodePriority+0x32>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b10:	f04f 32ff 	mov.w	r2, #4294967295
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43da      	mvns	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	401a      	ands	r2, r3
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b24:	f04f 31ff 	mov.w	r1, #4294967295
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	43d9      	mvns	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b34:	4313      	orrs	r3, r2
         );
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3724      	adds	r7, #36	; 0x24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b50:	d301      	bcc.n	8004b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b52:	2301      	movs	r3, #1
 8004b54:	e00f      	b.n	8004b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b56:	4a0a      	ldr	r2, [pc, #40]	; (8004b80 <SysTick_Config+0x40>)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b5e:	210f      	movs	r1, #15
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295
 8004b64:	f7ff ff90 	bl	8004a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <SysTick_Config+0x40>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b6e:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <SysTick_Config+0x40>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	e000e010 	.word	0xe000e010

08004b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ff2d 	bl	80049ec <__NVIC_SetPriorityGrouping>
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bac:	f7ff ff42 	bl	8004a34 <__NVIC_GetPriorityGrouping>
 8004bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	6978      	ldr	r0, [r7, #20]
 8004bb8:	f7ff ff90 	bl	8004adc <NVIC_EncodePriority>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff5f 	bl	8004a88 <__NVIC_SetPriority>
}
 8004bca:	bf00      	nop
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	4603      	mov	r3, r0
 8004bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff35 	bl	8004a50 <__NVIC_EnableIRQ>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff ffa2 	bl	8004b40 <SysTick_Config>
 8004bfc:	4603      	mov	r3, r0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c14:	f7ff fab2 	bl	800417c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e099      	b.n	8004d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0201 	bic.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c44:	e00f      	b.n	8004c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c46:	f7ff fa99 	bl	800417c <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d908      	bls.n	8004c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e078      	b.n	8004d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e8      	bne.n	8004c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4b38      	ldr	r3, [pc, #224]	; (8004d60 <HAL_DMA_Init+0x158>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d107      	bne.n	8004cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0307 	bic.w	r3, r3, #7
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d117      	bne.n	8004d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00e      	beq.n	8004d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fadd 	bl	80052cc <DMA_CheckFifoParam>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2240      	movs	r2, #64	; 0x40
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d26:	2301      	movs	r3, #1
 8004d28:	e016      	b.n	8004d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fa96 	bl	8005264 <DMA_CalcBaseAndBitshift>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	223f      	movs	r2, #63	; 0x3f
 8004d42:	409a      	lsls	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	f010803f 	.word	0xf010803f

08004d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_DMA_Start_IT+0x26>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e040      	b.n	8004e0c <HAL_DMA_Start_IT+0xa8>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d12f      	bne.n	8004dfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fa28 	bl	8005208 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	223f      	movs	r2, #63	; 0x3f
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0216 	orr.w	r2, r2, #22
 8004dd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0208 	orr.w	r2, r2, #8
 8004dea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e005      	b.n	8004e0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e06:	2302      	movs	r3, #2
 8004e08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e22:	f7ff f9ab 	bl	800417c <HAL_GetTick>
 8004e26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d008      	beq.n	8004e46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2280      	movs	r2, #128	; 0x80
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e052      	b.n	8004eec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0216 	bic.w	r2, r2, #22
 8004e54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d103      	bne.n	8004e76 <HAL_DMA_Abort+0x62>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0208 	bic.w	r2, r2, #8
 8004e84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0201 	bic.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e96:	e013      	b.n	8004ec0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e98:	f7ff f970 	bl	800417c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d90c      	bls.n	8004ec0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2203      	movs	r2, #3
 8004eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e015      	b.n	8004eec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e4      	bne.n	8004e98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	223f      	movs	r2, #63	; 0x3f
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f00:	4b8e      	ldr	r3, [pc, #568]	; (800513c <HAL_DMA_IRQHandler+0x248>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a8e      	ldr	r2, [pc, #568]	; (8005140 <HAL_DMA_IRQHandler+0x24c>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	0a9b      	lsrs	r3, r3, #10
 8004f0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1e:	2208      	movs	r2, #8
 8004f20:	409a      	lsls	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01a      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d013      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0204 	bic.w	r2, r2, #4
 8004f46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f58:	f043 0201 	orr.w	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f64:	2201      	movs	r2, #1
 8004f66:	409a      	lsls	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d012      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f82:	2201      	movs	r2, #1
 8004f84:	409a      	lsls	r2, r3
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	f043 0202 	orr.w	r2, r3, #2
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d012      	beq.n	8004fcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00b      	beq.n	8004fcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb8:	2204      	movs	r2, #4
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc4:	f043 0204 	orr.w	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d043      	beq.n	8005064 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d03c      	beq.n	8005064 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fee:	2210      	movs	r2, #16
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d018      	beq.n	8005036 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d108      	bne.n	8005024 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d024      	beq.n	8005064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	4798      	blx	r3
 8005022:	e01f      	b.n	8005064 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01b      	beq.n	8005064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	4798      	blx	r3
 8005034:	e016      	b.n	8005064 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d107      	bne.n	8005054 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0208 	bic.w	r2, r2, #8
 8005052:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005068:	2220      	movs	r2, #32
 800506a:	409a      	lsls	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 808f 	beq.w	8005194 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8087 	beq.w	8005194 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508a:	2220      	movs	r2, #32
 800508c:	409a      	lsls	r2, r3
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b05      	cmp	r3, #5
 800509c:	d136      	bne.n	800510c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0216 	bic.w	r2, r2, #22
 80050ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <HAL_DMA_IRQHandler+0x1da>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0208 	bic.w	r2, r2, #8
 80050dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e2:	223f      	movs	r2, #63	; 0x3f
 80050e4:	409a      	lsls	r2, r3
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d07e      	beq.n	8005200 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	4798      	blx	r3
        }
        return;
 800510a:	e079      	b.n	8005200 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01d      	beq.n	8005156 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10d      	bne.n	8005144 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512c:	2b00      	cmp	r3, #0
 800512e:	d031      	beq.n	8005194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	4798      	blx	r3
 8005138:	e02c      	b.n	8005194 <HAL_DMA_IRQHandler+0x2a0>
 800513a:	bf00      	nop
 800513c:	2000000c 	.word	0x2000000c
 8005140:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d023      	beq.n	8005194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	4798      	blx	r3
 8005154:	e01e      	b.n	8005194 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10f      	bne.n	8005184 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0210 	bic.w	r2, r2, #16
 8005172:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	2b00      	cmp	r3, #0
 800519a:	d032      	beq.n	8005202 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d022      	beq.n	80051ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2205      	movs	r2, #5
 80051ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	3301      	adds	r3, #1
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d307      	bcc.n	80051dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f2      	bne.n	80051c0 <HAL_DMA_IRQHandler+0x2cc>
 80051da:	e000      	b.n	80051de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80051dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	4798      	blx	r3
 80051fe:	e000      	b.n	8005202 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005200:	bf00      	nop
    }
  }
}
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005224:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d108      	bne.n	8005248 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005246:	e007      	b.n	8005258 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	60da      	str	r2, [r3, #12]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr
	...

08005264 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	3b10      	subs	r3, #16
 8005274:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <DMA_CalcBaseAndBitshift+0x60>)
 8005276:	fba2 2303 	umull	r2, r3, r2, r3
 800527a:	091b      	lsrs	r3, r3, #4
 800527c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800527e:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <DMA_CalcBaseAndBitshift+0x64>)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d909      	bls.n	80052a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	659a      	str	r2, [r3, #88]	; 0x58
 80052a4:	e007      	b.n	80052b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052ae:	f023 0303 	bic.w	r3, r3, #3
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr
 80052c4:	aaaaaaab 	.word	0xaaaaaaab
 80052c8:	080072bc 	.word	0x080072bc

080052cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d11f      	bne.n	8005326 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d856      	bhi.n	800539a <DMA_CheckFifoParam+0xce>
 80052ec:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <DMA_CheckFifoParam+0x28>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005305 	.word	0x08005305
 80052f8:	08005317 	.word	0x08005317
 80052fc:	08005305 	.word	0x08005305
 8005300:	0800539b 	.word	0x0800539b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d046      	beq.n	800539e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005314:	e043      	b.n	800539e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800531e:	d140      	bne.n	80053a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005324:	e03d      	b.n	80053a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532e:	d121      	bne.n	8005374 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b03      	cmp	r3, #3
 8005334:	d837      	bhi.n	80053a6 <DMA_CheckFifoParam+0xda>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <DMA_CheckFifoParam+0x70>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	0800534d 	.word	0x0800534d
 8005340:	08005353 	.word	0x08005353
 8005344:	0800534d 	.word	0x0800534d
 8005348:	08005365 	.word	0x08005365
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
      break;
 8005350:	e030      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d025      	beq.n	80053aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005362:	e022      	b.n	80053aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800536c:	d11f      	bne.n	80053ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005372:	e01c      	b.n	80053ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d903      	bls.n	8005382 <DMA_CheckFifoParam+0xb6>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d003      	beq.n	8005388 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005380:	e018      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
      break;
 8005386:	e015      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00e      	beq.n	80053b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      break;
 8005398:	e00b      	b.n	80053b2 <DMA_CheckFifoParam+0xe6>
      break;
 800539a:	bf00      	nop
 800539c:	e00a      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;
 800539e:	bf00      	nop
 80053a0:	e008      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;
 80053a2:	bf00      	nop
 80053a4:	e006      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;
 80053a6:	bf00      	nop
 80053a8:	e004      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;
 80053aa:	bf00      	nop
 80053ac:	e002      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80053ae:	bf00      	nop
 80053b0:	e000      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;
 80053b2:	bf00      	nop
    }
  } 
  
  return status; 
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80053d2:	4b23      	ldr	r3, [pc, #140]	; (8005460 <HAL_FLASH_Program+0xa0>)
 80053d4:	7e1b      	ldrb	r3, [r3, #24]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_FLASH_Program+0x1e>
 80053da:	2302      	movs	r3, #2
 80053dc:	e03b      	b.n	8005456 <HAL_FLASH_Program+0x96>
 80053de:	4b20      	ldr	r3, [pc, #128]	; (8005460 <HAL_FLASH_Program+0xa0>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80053e8:	f000 f870 	bl	80054cc <FLASH_WaitForLastOperation>
 80053ec:	4603      	mov	r3, r0
 80053ee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d12b      	bne.n	800544e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80053fc:	783b      	ldrb	r3, [r7, #0]
 80053fe:	4619      	mov	r1, r3
 8005400:	68b8      	ldr	r0, [r7, #8]
 8005402:	f000 f919 	bl	8005638 <FLASH_Program_Byte>
 8005406:	e016      	b.n	8005436 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d105      	bne.n	800541a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800540e:	883b      	ldrh	r3, [r7, #0]
 8005410:	4619      	mov	r1, r3
 8005412:	68b8      	ldr	r0, [r7, #8]
 8005414:	f000 f8ee 	bl	80055f4 <FLASH_Program_HalfWord>
 8005418:	e00d      	b.n	8005436 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d105      	bne.n	800542c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	4619      	mov	r1, r3
 8005424:	68b8      	ldr	r0, [r7, #8]
 8005426:	f000 f8c3 	bl	80055b0 <FLASH_Program_Word>
 800542a:	e004      	b.n	8005436 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800542c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005430:	68b8      	ldr	r0, [r7, #8]
 8005432:	f000 f88b 	bl	800554c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005436:	f24c 3050 	movw	r0, #50000	; 0xc350
 800543a:	f000 f847 	bl	80054cc <FLASH_WaitForLastOperation>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005442:	4b08      	ldr	r3, [pc, #32]	; (8005464 <HAL_FLASH_Program+0xa4>)
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	4a07      	ldr	r2, [pc, #28]	; (8005464 <HAL_FLASH_Program+0xa4>)
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800544e:	4b04      	ldr	r3, [pc, #16]	; (8005460 <HAL_FLASH_Program+0xa0>)
 8005450:	2200      	movs	r2, #0
 8005452:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005454:	7dfb      	ldrb	r3, [r7, #23]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20001488 	.word	0x20001488
 8005464:	40023c00 	.word	0x40023c00

08005468 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005472:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <HAL_FLASH_Unlock+0x38>)
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	da0b      	bge.n	8005492 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <HAL_FLASH_Unlock+0x38>)
 800547c:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <HAL_FLASH_Unlock+0x3c>)
 800547e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <HAL_FLASH_Unlock+0x38>)
 8005482:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <HAL_FLASH_Unlock+0x40>)
 8005484:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <HAL_FLASH_Unlock+0x38>)
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	da01      	bge.n	8005492 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005492:	79fb      	ldrb	r3, [r7, #7]
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40023c00 	.word	0x40023c00
 80054a4:	45670123 	.word	0x45670123
 80054a8:	cdef89ab 	.word	0xcdef89ab

080054ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <HAL_FLASH_Lock+0x1c>)
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <HAL_FLASH_Lock+0x1c>)
 80054b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40023c00 	.word	0x40023c00

080054cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80054d8:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <FLASH_WaitForLastOperation+0x78>)
 80054da:	2200      	movs	r2, #0
 80054dc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80054de:	f7fe fe4d 	bl	800417c <HAL_GetTick>
 80054e2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80054e4:	e010      	b.n	8005508 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d00c      	beq.n	8005508 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <FLASH_WaitForLastOperation+0x38>
 80054f4:	f7fe fe42 	bl	800417c <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d201      	bcs.n	8005508 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e019      	b.n	800553c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005508:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <FLASH_WaitForLastOperation+0x7c>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e8      	bne.n	80054e6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005514:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <FLASH_WaitForLastOperation+0x7c>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <FLASH_WaitForLastOperation+0x7c>)
 8005522:	2201      	movs	r2, #1
 8005524:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005526:	4b08      	ldr	r3, [pc, #32]	; (8005548 <FLASH_WaitForLastOperation+0x7c>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005532:	f000 f8a1 	bl	8005678 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
  
}  
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20001488 	.word	0x20001488
 8005548:	40023c00 	.word	0x40023c00

0800554c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005558:	4b14      	ldr	r3, [pc, #80]	; (80055ac <FLASH_Program_DoubleWord+0x60>)
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <FLASH_Program_DoubleWord+0x60>)
 800555e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005562:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005564:	4b11      	ldr	r3, [pc, #68]	; (80055ac <FLASH_Program_DoubleWord+0x60>)
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	4a10      	ldr	r2, [pc, #64]	; (80055ac <FLASH_Program_DoubleWord+0x60>)
 800556a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800556e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005570:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <FLASH_Program_DoubleWord+0x60>)
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	4a0d      	ldr	r2, [pc, #52]	; (80055ac <FLASH_Program_DoubleWord+0x60>)
 8005576:	f043 0301 	orr.w	r3, r3, #1
 800557a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005582:	f3bf 8f6f 	isb	sy
}
 8005586:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	000a      	movs	r2, r1
 8005596:	2300      	movs	r3, #0
 8005598:	68f9      	ldr	r1, [r7, #12]
 800559a:	3104      	adds	r1, #4
 800559c:	4613      	mov	r3, r2
 800559e:	600b      	str	r3, [r1, #0]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40023c00 	.word	0x40023c00

080055b0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <FLASH_Program_Word+0x40>)
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <FLASH_Program_Word+0x40>)
 80055c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <FLASH_Program_Word+0x40>)
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <FLASH_Program_Word+0x40>)
 80055cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <FLASH_Program_Word+0x40>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	4a06      	ldr	r2, [pc, #24]	; (80055f0 <FLASH_Program_Word+0x40>)
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40023c00 	.word	0x40023c00

080055f4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <FLASH_Program_HalfWord+0x40>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	4a0b      	ldr	r2, [pc, #44]	; (8005634 <FLASH_Program_HalfWord+0x40>)
 8005606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <FLASH_Program_HalfWord+0x40>)
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	4a08      	ldr	r2, [pc, #32]	; (8005634 <FLASH_Program_HalfWord+0x40>)
 8005612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005616:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005618:	4b06      	ldr	r3, [pc, #24]	; (8005634 <FLASH_Program_HalfWord+0x40>)
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	4a05      	ldr	r2, [pc, #20]	; (8005634 <FLASH_Program_HalfWord+0x40>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	801a      	strh	r2, [r3, #0]
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr
 8005634:	40023c00 	.word	0x40023c00

08005638 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <FLASH_Program_Byte+0x3c>)
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	4a0a      	ldr	r2, [pc, #40]	; (8005674 <FLASH_Program_Byte+0x3c>)
 800564a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005650:	4b08      	ldr	r3, [pc, #32]	; (8005674 <FLASH_Program_Byte+0x3c>)
 8005652:	4a08      	ldr	r2, [pc, #32]	; (8005674 <FLASH_Program_Byte+0x3c>)
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <FLASH_Program_Byte+0x3c>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	4a05      	ldr	r2, [pc, #20]	; (8005674 <FLASH_Program_Byte+0x3c>)
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	701a      	strb	r2, [r3, #0]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr
 8005674:	40023c00 	.word	0x40023c00

08005678 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800567c:	4b27      	ldr	r3, [pc, #156]	; (800571c <FLASH_SetErrorCode+0xa4>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005688:	4b25      	ldr	r3, [pc, #148]	; (8005720 <FLASH_SetErrorCode+0xa8>)
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f043 0308 	orr.w	r3, r3, #8
 8005690:	4a23      	ldr	r2, [pc, #140]	; (8005720 <FLASH_SetErrorCode+0xa8>)
 8005692:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005694:	4b21      	ldr	r3, [pc, #132]	; (800571c <FLASH_SetErrorCode+0xa4>)
 8005696:	2210      	movs	r2, #16
 8005698:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800569a:	4b20      	ldr	r3, [pc, #128]	; (800571c <FLASH_SetErrorCode+0xa4>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d008      	beq.n	80056b8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80056a6:	4b1e      	ldr	r3, [pc, #120]	; (8005720 <FLASH_SetErrorCode+0xa8>)
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f043 0304 	orr.w	r3, r3, #4
 80056ae:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <FLASH_SetErrorCode+0xa8>)
 80056b0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80056b2:	4b1a      	ldr	r3, [pc, #104]	; (800571c <FLASH_SetErrorCode+0xa4>)
 80056b4:	2220      	movs	r2, #32
 80056b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80056b8:	4b18      	ldr	r3, [pc, #96]	; (800571c <FLASH_SetErrorCode+0xa4>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80056c4:	4b16      	ldr	r3, [pc, #88]	; (8005720 <FLASH_SetErrorCode+0xa8>)
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	f043 0302 	orr.w	r3, r3, #2
 80056cc:	4a14      	ldr	r2, [pc, #80]	; (8005720 <FLASH_SetErrorCode+0xa8>)
 80056ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80056d0:	4b12      	ldr	r3, [pc, #72]	; (800571c <FLASH_SetErrorCode+0xa4>)
 80056d2:	2240      	movs	r2, #64	; 0x40
 80056d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80056d6:	4b11      	ldr	r3, [pc, #68]	; (800571c <FLASH_SetErrorCode+0xa4>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80056e2:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <FLASH_SetErrorCode+0xa8>)
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	4a0d      	ldr	r2, [pc, #52]	; (8005720 <FLASH_SetErrorCode+0xa8>)
 80056ec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80056ee:	4b0b      	ldr	r3, [pc, #44]	; (800571c <FLASH_SetErrorCode+0xa4>)
 80056f0:	2280      	movs	r2, #128	; 0x80
 80056f2:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80056f4:	4b09      	ldr	r3, [pc, #36]	; (800571c <FLASH_SetErrorCode+0xa4>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005700:	4b07      	ldr	r3, [pc, #28]	; (8005720 <FLASH_SetErrorCode+0xa8>)
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	f043 0310 	orr.w	r3, r3, #16
 8005708:	4a05      	ldr	r2, [pc, #20]	; (8005720 <FLASH_SetErrorCode+0xa8>)
 800570a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800570c:	4b03      	ldr	r3, [pc, #12]	; (800571c <FLASH_SetErrorCode+0xa4>)
 800570e:	2202      	movs	r2, #2
 8005710:	60da      	str	r2, [r3, #12]
  }
}
 8005712:	bf00      	nop
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40023c00 	.word	0x40023c00
 8005720:	20001488 	.word	0x20001488

08005724 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e010      	b.n	8005762 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d103      	bne.n	800574e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	e009      	b.n	8005762 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d103      	bne.n	800575c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e002      	b.n	8005762 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800575c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005760:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005762:	4b18      	ldr	r3, [pc, #96]	; (80057c4 <FLASH_Erase_Sector+0xa0>)
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	4a17      	ldr	r2, [pc, #92]	; (80057c4 <FLASH_Erase_Sector+0xa0>)
 8005768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800576e:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <FLASH_Erase_Sector+0xa0>)
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	4914      	ldr	r1, [pc, #80]	; (80057c4 <FLASH_Erase_Sector+0xa0>)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800577a:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <FLASH_Erase_Sector+0xa0>)
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	4a11      	ldr	r2, [pc, #68]	; (80057c4 <FLASH_Erase_Sector+0xa0>)
 8005780:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005784:	6113      	str	r3, [r2, #16]
 8005786:	23f8      	movs	r3, #248	; 0xf8
 8005788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	fa93 f3a3 	rbit	r3, r3
 8005790:	60fb      	str	r3, [r7, #12]
  return result;
 8005792:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8005794:	fab3 f383 	clz	r3, r3
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4093      	lsls	r3, r2
 80057a0:	f043 0202 	orr.w	r2, r3, #2
 80057a4:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <FLASH_Erase_Sector+0xa0>)
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	4906      	ldr	r1, [pc, #24]	; (80057c4 <FLASH_Erase_Sector+0xa0>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80057ae:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <FLASH_Erase_Sector+0xa0>)
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	4a04      	ldr	r2, [pc, #16]	; (80057c4 <FLASH_Erase_Sector+0xa0>)
 80057b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b8:	6113      	str	r3, [r2, #16]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr
 80057c4:	40023c00 	.word	0x40023c00

080057c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057d6:	e16f      	b.n	8005ab8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	2101      	movs	r1, #1
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	fa01 f303 	lsl.w	r3, r1, r3
 80057e4:	4013      	ands	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 8161 	beq.w	8005ab2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d005      	beq.n	8005808 <HAL_GPIO_Init+0x40>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d130      	bne.n	800586a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2203      	movs	r2, #3
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4013      	ands	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800583e:	2201      	movs	r2, #1
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	43db      	mvns	r3, r3
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4013      	ands	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	091b      	lsrs	r3, r3, #4
 8005854:	f003 0201 	and.w	r2, r3, #1
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	2b03      	cmp	r3, #3
 8005874:	d017      	beq.n	80058a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	2203      	movs	r2, #3
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	43db      	mvns	r3, r3
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4013      	ands	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d123      	bne.n	80058fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	08da      	lsrs	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3208      	adds	r2, #8
 80058ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	220f      	movs	r2, #15
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	43db      	mvns	r3, r3
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4013      	ands	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	08da      	lsrs	r2, r3, #3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3208      	adds	r2, #8
 80058f4:	6939      	ldr	r1, [r7, #16]
 80058f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	2203      	movs	r2, #3
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	43db      	mvns	r3, r3
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4013      	ands	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f003 0203 	and.w	r2, r3, #3
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 80bb 	beq.w	8005ab2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800593c:	2300      	movs	r3, #0
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	4b64      	ldr	r3, [pc, #400]	; (8005ad4 <HAL_GPIO_Init+0x30c>)
 8005942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005944:	4a63      	ldr	r2, [pc, #396]	; (8005ad4 <HAL_GPIO_Init+0x30c>)
 8005946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800594a:	6453      	str	r3, [r2, #68]	; 0x44
 800594c:	4b61      	ldr	r3, [pc, #388]	; (8005ad4 <HAL_GPIO_Init+0x30c>)
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005958:	4a5f      	ldr	r2, [pc, #380]	; (8005ad8 <HAL_GPIO_Init+0x310>)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	089b      	lsrs	r3, r3, #2
 800595e:	3302      	adds	r3, #2
 8005960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005964:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	220f      	movs	r2, #15
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4013      	ands	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a57      	ldr	r2, [pc, #348]	; (8005adc <HAL_GPIO_Init+0x314>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d031      	beq.n	80059e8 <HAL_GPIO_Init+0x220>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a56      	ldr	r2, [pc, #344]	; (8005ae0 <HAL_GPIO_Init+0x318>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d02b      	beq.n	80059e4 <HAL_GPIO_Init+0x21c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a55      	ldr	r2, [pc, #340]	; (8005ae4 <HAL_GPIO_Init+0x31c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d025      	beq.n	80059e0 <HAL_GPIO_Init+0x218>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a54      	ldr	r2, [pc, #336]	; (8005ae8 <HAL_GPIO_Init+0x320>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d01f      	beq.n	80059dc <HAL_GPIO_Init+0x214>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a53      	ldr	r2, [pc, #332]	; (8005aec <HAL_GPIO_Init+0x324>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d019      	beq.n	80059d8 <HAL_GPIO_Init+0x210>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a52      	ldr	r2, [pc, #328]	; (8005af0 <HAL_GPIO_Init+0x328>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d013      	beq.n	80059d4 <HAL_GPIO_Init+0x20c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a51      	ldr	r2, [pc, #324]	; (8005af4 <HAL_GPIO_Init+0x32c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00d      	beq.n	80059d0 <HAL_GPIO_Init+0x208>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a50      	ldr	r2, [pc, #320]	; (8005af8 <HAL_GPIO_Init+0x330>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <HAL_GPIO_Init+0x204>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a4f      	ldr	r2, [pc, #316]	; (8005afc <HAL_GPIO_Init+0x334>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d101      	bne.n	80059c8 <HAL_GPIO_Init+0x200>
 80059c4:	2308      	movs	r3, #8
 80059c6:	e010      	b.n	80059ea <HAL_GPIO_Init+0x222>
 80059c8:	2309      	movs	r3, #9
 80059ca:	e00e      	b.n	80059ea <HAL_GPIO_Init+0x222>
 80059cc:	2307      	movs	r3, #7
 80059ce:	e00c      	b.n	80059ea <HAL_GPIO_Init+0x222>
 80059d0:	2306      	movs	r3, #6
 80059d2:	e00a      	b.n	80059ea <HAL_GPIO_Init+0x222>
 80059d4:	2305      	movs	r3, #5
 80059d6:	e008      	b.n	80059ea <HAL_GPIO_Init+0x222>
 80059d8:	2304      	movs	r3, #4
 80059da:	e006      	b.n	80059ea <HAL_GPIO_Init+0x222>
 80059dc:	2303      	movs	r3, #3
 80059de:	e004      	b.n	80059ea <HAL_GPIO_Init+0x222>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e002      	b.n	80059ea <HAL_GPIO_Init+0x222>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <HAL_GPIO_Init+0x222>
 80059e8:	2300      	movs	r3, #0
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	f002 0203 	and.w	r2, r2, #3
 80059f0:	0092      	lsls	r2, r2, #2
 80059f2:	4093      	lsls	r3, r2
 80059f4:	461a      	mov	r2, r3
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80059fc:	4936      	ldr	r1, [pc, #216]	; (8005ad8 <HAL_GPIO_Init+0x310>)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	3302      	adds	r3, #2
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a0a:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <HAL_GPIO_Init+0x338>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	43db      	mvns	r3, r3
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4013      	ands	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a2e:	4a34      	ldr	r2, [pc, #208]	; (8005b00 <HAL_GPIO_Init+0x338>)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a34:	4b32      	ldr	r3, [pc, #200]	; (8005b00 <HAL_GPIO_Init+0x338>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4013      	ands	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005a58:	4a29      	ldr	r2, [pc, #164]	; (8005b00 <HAL_GPIO_Init+0x338>)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a5e:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <HAL_GPIO_Init+0x338>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	43db      	mvns	r3, r3
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005a82:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <HAL_GPIO_Init+0x338>)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a88:	4b1d      	ldr	r3, [pc, #116]	; (8005b00 <HAL_GPIO_Init+0x338>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	43db      	mvns	r3, r3
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4013      	ands	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005aac:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <HAL_GPIO_Init+0x338>)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f47f ae88 	bne.w	80057d8 <HAL_GPIO_Init+0x10>
  }
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40013800 	.word	0x40013800
 8005adc:	40020000 	.word	0x40020000
 8005ae0:	40020400 	.word	0x40020400
 8005ae4:	40020800 	.word	0x40020800
 8005ae8:	40020c00 	.word	0x40020c00
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40021400 	.word	0x40021400
 8005af4:	40021800 	.word	0x40021800
 8005af8:	40021c00 	.word	0x40021c00
 8005afc:	40022000 	.word	0x40022000
 8005b00:	40013c00 	.word	0x40013c00

08005b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	887b      	ldrh	r3, [r7, #2]
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
 8005b20:	e001      	b.n	8005b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	807b      	strh	r3, [r7, #2]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b42:	787b      	ldrb	r3, [r7, #1]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b48:	887a      	ldrh	r2, [r7, #2]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b4e:	e003      	b.n	8005b58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b50:	887b      	ldrh	r3, [r7, #2]
 8005b52:	041a      	lsls	r2, r3, #16
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	619a      	str	r2, [r3, #24]
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr
	...

08005b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b6e:	4b08      	ldr	r3, [pc, #32]	; (8005b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d006      	beq.n	8005b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b7a:	4a05      	ldr	r2, [pc, #20]	; (8005b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b80:	88fb      	ldrh	r3, [r7, #6]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fc fa74 	bl	8002070 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40013c00 	.word	0x40013c00

08005b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	; 0x28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e236      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d050      	beq.n	8005c54 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bb2:	4b9e      	ldr	r3, [pc, #632]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bbe:	4b9b      	ldr	r3, [pc, #620]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d112      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bca:	4b98      	ldr	r3, [pc, #608]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bd6:	d10b      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd8:	4b94      	ldr	r3, [pc, #592]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d036      	beq.n	8005c52 <HAL_RCC_OscConfig+0xbe>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d132      	bne.n	8005c52 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e211      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	4b8e      	ldr	r3, [pc, #568]	; (8005e30 <HAL_RCC_OscConfig+0x29c>)
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d013      	beq.n	8005c2a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c02:	f7fe fabb 	bl	800417c <HAL_GetTick>
 8005c06:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c0a:	f7fe fab7 	bl	800417c <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b64      	cmp	r3, #100	; 0x64
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e1fb      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c1c:	4b83      	ldr	r3, [pc, #524]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCC_OscConfig+0x76>
 8005c28:	e014      	b.n	8005c54 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2a:	f7fe faa7 	bl	800417c <HAL_GetTick>
 8005c2e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c32:	f7fe faa3 	bl	800417c <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b64      	cmp	r3, #100	; 0x64
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e1e7      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c44:	4b79      	ldr	r3, [pc, #484]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1f0      	bne.n	8005c32 <HAL_RCC_OscConfig+0x9e>
 8005c50:	e000      	b.n	8005c54 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d077      	beq.n	8005d50 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c60:	4b72      	ldr	r3, [pc, #456]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 030c 	and.w	r3, r3, #12
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c6c:	4b6f      	ldr	r3, [pc, #444]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d126      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c78:	4b6c      	ldr	r3, [pc, #432]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d120      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c84:	4b69      	ldr	r3, [pc, #420]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_RCC_OscConfig+0x108>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e1bb      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c9c:	4b63      	ldr	r3, [pc, #396]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	21f8      	movs	r1, #248	; 0xf8
 8005caa:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cac:	69b9      	ldr	r1, [r7, #24]
 8005cae:	fa91 f1a1 	rbit	r1, r1
 8005cb2:	6179      	str	r1, [r7, #20]
  return result;
 8005cb4:	6979      	ldr	r1, [r7, #20]
 8005cb6:	fab1 f181 	clz	r1, r1
 8005cba:	b2c9      	uxtb	r1, r1
 8005cbc:	408b      	lsls	r3, r1
 8005cbe:	495b      	ldr	r1, [pc, #364]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cc4:	e044      	b.n	8005d50 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d02a      	beq.n	8005d24 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cce:	4b59      	ldr	r3, [pc, #356]	; (8005e34 <HAL_RCC_OscConfig+0x2a0>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd4:	f7fe fa52 	bl	800417c <HAL_GetTick>
 8005cd8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cdc:	f7fe fa4e 	bl	800417c <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e192      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cee:	4b4f      	ldr	r3, [pc, #316]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f0      	beq.n	8005cdc <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfa:	4b4c      	ldr	r3, [pc, #304]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	21f8      	movs	r1, #248	; 0xf8
 8005d08:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0a:	6939      	ldr	r1, [r7, #16]
 8005d0c:	fa91 f1a1 	rbit	r1, r1
 8005d10:	60f9      	str	r1, [r7, #12]
  return result;
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	fab1 f181 	clz	r1, r1
 8005d18:	b2c9      	uxtb	r1, r1
 8005d1a:	408b      	lsls	r3, r1
 8005d1c:	4943      	ldr	r1, [pc, #268]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	600b      	str	r3, [r1, #0]
 8005d22:	e015      	b.n	8005d50 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d24:	4b43      	ldr	r3, [pc, #268]	; (8005e34 <HAL_RCC_OscConfig+0x2a0>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2a:	f7fe fa27 	bl	800417c <HAL_GetTick>
 8005d2e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d32:	f7fe fa23 	bl	800417c <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e167      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d44:	4b39      	ldr	r3, [pc, #228]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f0      	bne.n	8005d32 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d030      	beq.n	8005dbe <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d016      	beq.n	8005d92 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d64:	4b34      	ldr	r3, [pc, #208]	; (8005e38 <HAL_RCC_OscConfig+0x2a4>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d6a:	f7fe fa07 	bl	800417c <HAL_GetTick>
 8005d6e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d72:	f7fe fa03 	bl	800417c <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e147      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d84:	4b29      	ldr	r3, [pc, #164]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f0      	beq.n	8005d72 <HAL_RCC_OscConfig+0x1de>
 8005d90:	e015      	b.n	8005dbe <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d92:	4b29      	ldr	r3, [pc, #164]	; (8005e38 <HAL_RCC_OscConfig+0x2a4>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d98:	f7fe f9f0 	bl	800417c <HAL_GetTick>
 8005d9c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005da0:	f7fe f9ec 	bl	800417c <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e130      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db2:	4b1e      	ldr	r3, [pc, #120]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 8087 	beq.w	8005eda <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dd2:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d110      	bne.n	8005e00 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dde:	2300      	movs	r3, #0
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	4a11      	ldr	r2, [pc, #68]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dec:	6413      	str	r3, [r2, #64]	; 0x40
 8005dee:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <HAL_RCC_OscConfig+0x298>)
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e00:	4b0e      	ldr	r3, [pc, #56]	; (8005e3c <HAL_RCC_OscConfig+0x2a8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a0d      	ldr	r2, [pc, #52]	; (8005e3c <HAL_RCC_OscConfig+0x2a8>)
 8005e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <HAL_RCC_OscConfig+0x2a8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d122      	bne.n	8005e5e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e18:	4b08      	ldr	r3, [pc, #32]	; (8005e3c <HAL_RCC_OscConfig+0x2a8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a07      	ldr	r2, [pc, #28]	; (8005e3c <HAL_RCC_OscConfig+0x2a8>)
 8005e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e24:	f7fe f9aa 	bl	800417c <HAL_GetTick>
 8005e28:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2a:	e012      	b.n	8005e52 <HAL_RCC_OscConfig+0x2be>
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	40023802 	.word	0x40023802
 8005e34:	42470000 	.word	0x42470000
 8005e38:	42470e80 	.word	0x42470e80
 8005e3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e40:	f7fe f99c 	bl	800417c <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e0e0      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e52:	4b72      	ldr	r3, [pc, #456]	; (800601c <HAL_RCC_OscConfig+0x488>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	4b6f      	ldr	r3, [pc, #444]	; (8006020 <HAL_RCC_OscConfig+0x48c>)
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d015      	beq.n	8005e9c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e70:	f7fe f984 	bl	800417c <HAL_GetTick>
 8005e74:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e76:	e00a      	b.n	8005e8e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e78:	f7fe f980 	bl	800417c <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e0c2      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8e:	4b65      	ldr	r3, [pc, #404]	; (8006024 <HAL_RCC_OscConfig+0x490>)
 8005e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0ee      	beq.n	8005e78 <HAL_RCC_OscConfig+0x2e4>
 8005e9a:	e014      	b.n	8005ec6 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e9c:	f7fe f96e 	bl	800417c <HAL_GetTick>
 8005ea0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea2:	e00a      	b.n	8005eba <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ea4:	f7fe f96a 	bl	800417c <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e0ac      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eba:	4b5a      	ldr	r3, [pc, #360]	; (8006024 <HAL_RCC_OscConfig+0x490>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1ee      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d105      	bne.n	8005eda <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ece:	4b55      	ldr	r3, [pc, #340]	; (8006024 <HAL_RCC_OscConfig+0x490>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	4a54      	ldr	r2, [pc, #336]	; (8006024 <HAL_RCC_OscConfig+0x490>)
 8005ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8097 	beq.w	8006012 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ee4:	4b4f      	ldr	r3, [pc, #316]	; (8006024 <HAL_RCC_OscConfig+0x490>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 030c 	and.w	r3, r3, #12
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d061      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d146      	bne.n	8005f86 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef8:	4b4b      	ldr	r3, [pc, #300]	; (8006028 <HAL_RCC_OscConfig+0x494>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efe:	f7fe f93d 	bl	800417c <HAL_GetTick>
 8005f02:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f06:	f7fe f939 	bl	800417c <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b64      	cmp	r3, #100	; 0x64
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e07d      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f18:	4b42      	ldr	r3, [pc, #264]	; (8006024 <HAL_RCC_OscConfig+0x490>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f0      	bne.n	8005f06 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f24:	4b3f      	ldr	r3, [pc, #252]	; (8006024 <HAL_RCC_OscConfig+0x490>)
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	4b40      	ldr	r3, [pc, #256]	; (800602c <HAL_RCC_OscConfig+0x498>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	69d1      	ldr	r1, [r2, #28]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6a12      	ldr	r2, [r2, #32]
 8005f34:	4311      	orrs	r1, r2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f3a:	0192      	lsls	r2, r2, #6
 8005f3c:	4311      	orrs	r1, r2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f42:	0612      	lsls	r2, r2, #24
 8005f44:	4311      	orrs	r1, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005f4a:	0852      	lsrs	r2, r2, #1
 8005f4c:	3a01      	subs	r2, #1
 8005f4e:	0412      	lsls	r2, r2, #16
 8005f50:	430a      	orrs	r2, r1
 8005f52:	4934      	ldr	r1, [pc, #208]	; (8006024 <HAL_RCC_OscConfig+0x490>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f58:	4b33      	ldr	r3, [pc, #204]	; (8006028 <HAL_RCC_OscConfig+0x494>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f5e:	f7fe f90d 	bl	800417c <HAL_GetTick>
 8005f62:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f66:	f7fe f909 	bl	800417c <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b64      	cmp	r3, #100	; 0x64
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e04d      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f78:	4b2a      	ldr	r3, [pc, #168]	; (8006024 <HAL_RCC_OscConfig+0x490>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x3d2>
 8005f84:	e045      	b.n	8006012 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f86:	4b28      	ldr	r3, [pc, #160]	; (8006028 <HAL_RCC_OscConfig+0x494>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8c:	f7fe f8f6 	bl	800417c <HAL_GetTick>
 8005f90:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f94:	f7fe f8f2 	bl	800417c <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b64      	cmp	r3, #100	; 0x64
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e036      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fa6:	4b1f      	ldr	r3, [pc, #124]	; (8006024 <HAL_RCC_OscConfig+0x490>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0x400>
 8005fb2:	e02e      	b.n	8006012 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e029      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005fc0:	4b18      	ldr	r3, [pc, #96]	; (8006024 <HAL_RCC_OscConfig+0x490>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d11c      	bne.n	800600e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d115      	bne.n	800600e <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	099b      	lsrs	r3, r3, #6
 8005fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d10d      	bne.n	800600e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d106      	bne.n	800600e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800600a:	429a      	cmp	r2, r3
 800600c:	d001      	beq.n	8006012 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3728      	adds	r7, #40	; 0x28
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40007000 	.word	0x40007000
 8006020:	40023870 	.word	0x40023870
 8006024:	40023800 	.word	0x40023800
 8006028:	42470060 	.word	0x42470060
 800602c:	f0bc8000 	.word	0xf0bc8000

08006030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0d2      	b.n	80061ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006044:	4b6b      	ldr	r3, [pc, #428]	; (80061f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d90c      	bls.n	800606c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006052:	4b68      	ldr	r3, [pc, #416]	; (80061f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800605a:	4b66      	ldr	r3, [pc, #408]	; (80061f4 <HAL_RCC_ClockConfig+0x1c4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d001      	beq.n	800606c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e0be      	b.n	80061ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d020      	beq.n	80060ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006084:	4b5c      	ldr	r3, [pc, #368]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4a5b      	ldr	r2, [pc, #364]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 800608a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800608e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800609c:	4b56      	ldr	r3, [pc, #344]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4a55      	ldr	r2, [pc, #340]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 80060a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a8:	4b53      	ldr	r3, [pc, #332]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	4950      	ldr	r1, [pc, #320]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d040      	beq.n	8006148 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d107      	bne.n	80060de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ce:	4b4a      	ldr	r3, [pc, #296]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d115      	bne.n	8006106 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e085      	b.n	80061ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d107      	bne.n	80060f6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e6:	4b44      	ldr	r3, [pc, #272]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d109      	bne.n	8006106 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e079      	b.n	80061ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f6:	4b40      	ldr	r3, [pc, #256]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e071      	b.n	80061ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006106:	4b3c      	ldr	r3, [pc, #240]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f023 0203 	bic.w	r2, r3, #3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	4939      	ldr	r1, [pc, #228]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006114:	4313      	orrs	r3, r2
 8006116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006118:	f7fe f830 	bl	800417c <HAL_GetTick>
 800611c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800611e:	e00a      	b.n	8006136 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006120:	f7fe f82c 	bl	800417c <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	f241 3288 	movw	r2, #5000	; 0x1388
 800612e:	4293      	cmp	r3, r2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e059      	b.n	80061ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006136:	4b30      	ldr	r3, [pc, #192]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 020c 	and.w	r2, r3, #12
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	429a      	cmp	r2, r3
 8006146:	d1eb      	bne.n	8006120 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006148:	4b2a      	ldr	r3, [pc, #168]	; (80061f4 <HAL_RCC_ClockConfig+0x1c4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d20c      	bcs.n	8006170 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006156:	4b27      	ldr	r3, [pc, #156]	; (80061f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800615e:	4b25      	ldr	r3, [pc, #148]	; (80061f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d001      	beq.n	8006170 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e03c      	b.n	80061ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	d008      	beq.n	800618e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800617c:	4b1e      	ldr	r3, [pc, #120]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	491b      	ldr	r1, [pc, #108]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 800618a:	4313      	orrs	r3, r2
 800618c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	d009      	beq.n	80061ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800619a:	4b17      	ldr	r3, [pc, #92]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	4913      	ldr	r1, [pc, #76]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80061ae:	f000 f82b 	bl	8006208 <HAL_RCC_GetSysClockFreq>
 80061b2:	4601      	mov	r1, r0
 80061b4:	4b10      	ldr	r3, [pc, #64]	; (80061f8 <HAL_RCC_ClockConfig+0x1c8>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061bc:	22f0      	movs	r2, #240	; 0xf0
 80061be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	fa92 f2a2 	rbit	r2, r2
 80061c6:	60fa      	str	r2, [r7, #12]
  return result;
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	fab2 f282 	clz	r2, r2
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	40d3      	lsrs	r3, r2
 80061d2:	4a0a      	ldr	r2, [pc, #40]	; (80061fc <HAL_RCC_ClockConfig+0x1cc>)
 80061d4:	5cd3      	ldrb	r3, [r2, r3]
 80061d6:	fa21 f303 	lsr.w	r3, r1, r3
 80061da:	4a09      	ldr	r2, [pc, #36]	; (8006200 <HAL_RCC_ClockConfig+0x1d0>)
 80061dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061de:	4b09      	ldr	r3, [pc, #36]	; (8006204 <HAL_RCC_ClockConfig+0x1d4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fd ff88 	bl	80040f8 <HAL_InitTick>

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40023c00 	.word	0x40023c00
 80061f8:	40023800 	.word	0x40023800
 80061fc:	080072ac 	.word	0x080072ac
 8006200:	2000000c 	.word	0x2000000c
 8006204:	20000018 	.word	0x20000018

08006208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800620c:	b090      	sub	sp, #64	; 0x40
 800620e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
 8006214:	2300      	movs	r3, #0
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006218:	2300      	movs	r3, #0
 800621a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006220:	4b59      	ldr	r3, [pc, #356]	; (8006388 <HAL_RCC_GetSysClockFreq+0x180>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 030c 	and.w	r3, r3, #12
 8006228:	2b08      	cmp	r3, #8
 800622a:	d00d      	beq.n	8006248 <HAL_RCC_GetSysClockFreq+0x40>
 800622c:	2b08      	cmp	r3, #8
 800622e:	f200 80a2 	bhi.w	8006376 <HAL_RCC_GetSysClockFreq+0x16e>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_RCC_GetSysClockFreq+0x34>
 8006236:	2b04      	cmp	r3, #4
 8006238:	d003      	beq.n	8006242 <HAL_RCC_GetSysClockFreq+0x3a>
 800623a:	e09c      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800623c:	4b53      	ldr	r3, [pc, #332]	; (800638c <HAL_RCC_GetSysClockFreq+0x184>)
 800623e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006240:	e09c      	b.n	800637c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006242:	4b53      	ldr	r3, [pc, #332]	; (8006390 <HAL_RCC_GetSysClockFreq+0x188>)
 8006244:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006246:	e099      	b.n	800637c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006248:	4b4f      	ldr	r3, [pc, #316]	; (8006388 <HAL_RCC_GetSysClockFreq+0x180>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006250:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006252:	4b4d      	ldr	r3, [pc, #308]	; (8006388 <HAL_RCC_GetSysClockFreq+0x180>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d027      	beq.n	80062ae <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800625e:	4b4a      	ldr	r3, [pc, #296]	; (8006388 <HAL_RCC_GetSysClockFreq+0x180>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	099b      	lsrs	r3, r3, #6
 8006264:	2200      	movs	r2, #0
 8006266:	623b      	str	r3, [r7, #32]
 8006268:	627a      	str	r2, [r7, #36]	; 0x24
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006270:	2100      	movs	r1, #0
 8006272:	4b47      	ldr	r3, [pc, #284]	; (8006390 <HAL_RCC_GetSysClockFreq+0x188>)
 8006274:	fb03 f201 	mul.w	r2, r3, r1
 8006278:	2300      	movs	r3, #0
 800627a:	fb00 f303 	mul.w	r3, r0, r3
 800627e:	4413      	add	r3, r2
 8006280:	4a43      	ldr	r2, [pc, #268]	; (8006390 <HAL_RCC_GetSysClockFreq+0x188>)
 8006282:	fba0 2102 	umull	r2, r1, r0, r2
 8006286:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006288:	62ba      	str	r2, [r7, #40]	; 0x28
 800628a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800628c:	4413      	add	r3, r2
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006292:	2200      	movs	r2, #0
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	61fa      	str	r2, [r7, #28]
 8006298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800629c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80062a0:	f7fa fe44 	bl	8000f2c <__aeabi_uldivmod>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4613      	mov	r3, r2
 80062aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ac:	e055      	b.n	800635a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ae:	4b36      	ldr	r3, [pc, #216]	; (8006388 <HAL_RCC_GetSysClockFreq+0x180>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	099b      	lsrs	r3, r3, #6
 80062b4:	2200      	movs	r2, #0
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	617a      	str	r2, [r7, #20]
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80062c0:	f04f 0b00 	mov.w	fp, #0
 80062c4:	4652      	mov	r2, sl
 80062c6:	465b      	mov	r3, fp
 80062c8:	f04f 0000 	mov.w	r0, #0
 80062cc:	f04f 0100 	mov.w	r1, #0
 80062d0:	0159      	lsls	r1, r3, #5
 80062d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062d6:	0150      	lsls	r0, r2, #5
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	ebb2 080a 	subs.w	r8, r2, sl
 80062e0:	eb63 090b 	sbc.w	r9, r3, fp
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80062f0:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80062f4:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80062f8:	ebb2 0408 	subs.w	r4, r2, r8
 80062fc:	eb63 0509 	sbc.w	r5, r3, r9
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	00eb      	lsls	r3, r5, #3
 800630a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800630e:	00e2      	lsls	r2, r4, #3
 8006310:	4614      	mov	r4, r2
 8006312:	461d      	mov	r5, r3
 8006314:	eb14 030a 	adds.w	r3, r4, sl
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	eb45 030b 	adc.w	r3, r5, fp
 800631e:	607b      	str	r3, [r7, #4]
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 4500 	ldrd	r4, r5, [r7]
 800632c:	4629      	mov	r1, r5
 800632e:	028b      	lsls	r3, r1, #10
 8006330:	4620      	mov	r0, r4
 8006332:	4629      	mov	r1, r5
 8006334:	4604      	mov	r4, r0
 8006336:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800633a:	4601      	mov	r1, r0
 800633c:	028a      	lsls	r2, r1, #10
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	2200      	movs	r2, #0
 8006346:	60bb      	str	r3, [r7, #8]
 8006348:	60fa      	str	r2, [r7, #12]
 800634a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800634e:	f7fa fded 	bl	8000f2c <__aeabi_uldivmod>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4613      	mov	r3, r2
 8006358:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800635a:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_RCC_GetSysClockFreq+0x180>)
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	3301      	adds	r3, #1
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800636a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006372:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006374:	e002      	b.n	800637c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006376:	4b05      	ldr	r3, [pc, #20]	; (800638c <HAL_RCC_GetSysClockFreq+0x184>)
 8006378:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800637a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800637e:	4618      	mov	r0, r3
 8006380:	3740      	adds	r7, #64	; 0x40
 8006382:	46bd      	mov	sp, r7
 8006384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006388:	40023800 	.word	0x40023800
 800638c:	00f42400 	.word	0x00f42400
 8006390:	017d7840 	.word	0x017d7840

08006394 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e041      	b.n	800642a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fd fc4c 	bl	8003c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f000 fae8 	bl	80069a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <HAL_TIM_PWM_Start+0x24>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	bf14      	ite	ne
 8006450:	2301      	movne	r3, #1
 8006452:	2300      	moveq	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e022      	b.n	800649e <HAL_TIM_PWM_Start+0x6a>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b04      	cmp	r3, #4
 800645c:	d109      	bne.n	8006472 <HAL_TIM_PWM_Start+0x3e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	bf14      	ite	ne
 800646a:	2301      	movne	r3, #1
 800646c:	2300      	moveq	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	e015      	b.n	800649e <HAL_TIM_PWM_Start+0x6a>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b08      	cmp	r3, #8
 8006476:	d109      	bne.n	800648c <HAL_TIM_PWM_Start+0x58>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	bf14      	ite	ne
 8006484:	2301      	movne	r3, #1
 8006486:	2300      	moveq	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	e008      	b.n	800649e <HAL_TIM_PWM_Start+0x6a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	bf14      	ite	ne
 8006498:	2301      	movne	r3, #1
 800649a:	2300      	moveq	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e07c      	b.n	80065a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_PWM_Start+0x82>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064b4:	e013      	b.n	80064de <HAL_TIM_PWM_Start+0xaa>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_PWM_Start+0x92>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064c4:	e00b      	b.n	80064de <HAL_TIM_PWM_Start+0xaa>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d104      	bne.n	80064d6 <HAL_TIM_PWM_Start+0xa2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064d4:	e003      	b.n	80064de <HAL_TIM_PWM_Start+0xaa>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2202      	movs	r2, #2
 80064da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2201      	movs	r2, #1
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fca8 	bl	8006e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2d      	ldr	r2, [pc, #180]	; (80065a8 <HAL_TIM_PWM_Start+0x174>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIM_PWM_Start+0xcc>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2c      	ldr	r2, [pc, #176]	; (80065ac <HAL_TIM_PWM_Start+0x178>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d101      	bne.n	8006504 <HAL_TIM_PWM_Start+0xd0>
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <HAL_TIM_PWM_Start+0xd2>
 8006504:	2300      	movs	r3, #0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a22      	ldr	r2, [pc, #136]	; (80065a8 <HAL_TIM_PWM_Start+0x174>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d022      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652c:	d01d      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1f      	ldr	r2, [pc, #124]	; (80065b0 <HAL_TIM_PWM_Start+0x17c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d018      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <HAL_TIM_PWM_Start+0x180>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1c      	ldr	r2, [pc, #112]	; (80065b8 <HAL_TIM_PWM_Start+0x184>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00e      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a16      	ldr	r2, [pc, #88]	; (80065ac <HAL_TIM_PWM_Start+0x178>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d009      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a18      	ldr	r2, [pc, #96]	; (80065bc <HAL_TIM_PWM_Start+0x188>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a16      	ldr	r2, [pc, #88]	; (80065c0 <HAL_TIM_PWM_Start+0x18c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d111      	bne.n	800658e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b06      	cmp	r3, #6
 800657a:	d010      	beq.n	800659e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658c:	e007      	b.n	800659e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40010400 	.word	0x40010400
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40000c00 	.word	0x40000c00
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40001800 	.word	0x40001800

080065c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e097      	b.n	8006708 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d106      	bne.n	80065f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fd fb53 	bl	8003c98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2202      	movs	r2, #2
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006608:	f023 0307 	bic.w	r3, r3, #7
 800660c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3304      	adds	r3, #4
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f000 f9c5 	bl	80069a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006646:	f023 0303 	bic.w	r3, r3, #3
 800664a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	021b      	lsls	r3, r3, #8
 8006656:	4313      	orrs	r3, r2
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006664:	f023 030c 	bic.w	r3, r3, #12
 8006668:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	4313      	orrs	r3, r2
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	011a      	lsls	r2, r3, #4
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	031b      	lsls	r3, r3, #12
 8006694:	4313      	orrs	r3, r2
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80066aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	4313      	orrs	r3, r2
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006720:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006728:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006730:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006738:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d110      	bne.n	8006762 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d102      	bne.n	800674c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006746:	7b7b      	ldrb	r3, [r7, #13]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d001      	beq.n	8006750 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e069      	b.n	8006824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006760:	e031      	b.n	80067c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b04      	cmp	r3, #4
 8006766:	d110      	bne.n	800678a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d102      	bne.n	8006774 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800676e:	7b3b      	ldrb	r3, [r7, #12]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d001      	beq.n	8006778 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e055      	b.n	8006824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006788:	e01d      	b.n	80067c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d108      	bne.n	80067a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d105      	bne.n	80067a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006796:	7b7b      	ldrb	r3, [r7, #13]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d102      	bne.n	80067a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800679c:	7b3b      	ldrb	r3, [r7, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d001      	beq.n	80067a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e03e      	b.n	8006824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2202      	movs	r2, #2
 80067b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2202      	movs	r2, #2
 80067ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_TIM_Encoder_Start+0xc4>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d008      	beq.n	80067e4 <HAL_TIM_Encoder_Start+0xd4>
 80067d2:	e00f      	b.n	80067f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2201      	movs	r2, #1
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fb2d 	bl	8006e3c <TIM_CCxChannelCmd>
      break;
 80067e2:	e016      	b.n	8006812 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2201      	movs	r2, #1
 80067ea:	2104      	movs	r1, #4
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fb25 	bl	8006e3c <TIM_CCxChannelCmd>
      break;
 80067f2:	e00e      	b.n	8006812 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2201      	movs	r2, #1
 80067fa:	2100      	movs	r1, #0
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fb1d 	bl	8006e3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2201      	movs	r2, #1
 8006808:	2104      	movs	r1, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fb16 	bl	8006e3c <TIM_CCxChannelCmd>
      break;
 8006810:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006842:	2302      	movs	r3, #2
 8006844:	e0ac      	b.n	80069a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b0c      	cmp	r3, #12
 8006852:	f200 809f 	bhi.w	8006994 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006856:	a201      	add	r2, pc, #4	; (adr r2, 800685c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006891 	.word	0x08006891
 8006860:	08006995 	.word	0x08006995
 8006864:	08006995 	.word	0x08006995
 8006868:	08006995 	.word	0x08006995
 800686c:	080068d1 	.word	0x080068d1
 8006870:	08006995 	.word	0x08006995
 8006874:	08006995 	.word	0x08006995
 8006878:	08006995 	.word	0x08006995
 800687c:	08006913 	.word	0x08006913
 8006880:	08006995 	.word	0x08006995
 8006884:	08006995 	.word	0x08006995
 8006888:	08006995 	.word	0x08006995
 800688c:	08006953 	.word	0x08006953
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 f924 	bl	8006ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0208 	orr.w	r2, r2, #8
 80068aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699a      	ldr	r2, [r3, #24]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0204 	bic.w	r2, r2, #4
 80068ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6999      	ldr	r1, [r3, #24]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	619a      	str	r2, [r3, #24]
      break;
 80068ce:	e062      	b.n	8006996 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 f974 	bl	8006bc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6999      	ldr	r1, [r3, #24]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	021a      	lsls	r2, r3, #8
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	619a      	str	r2, [r3, #24]
      break;
 8006910:	e041      	b.n	8006996 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	4618      	mov	r0, r3
 800691a:	f000 f9c7 	bl	8006cac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69da      	ldr	r2, [r3, #28]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0208 	orr.w	r2, r2, #8
 800692c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69da      	ldr	r2, [r3, #28]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0204 	bic.w	r2, r2, #4
 800693c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69d9      	ldr	r1, [r3, #28]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	61da      	str	r2, [r3, #28]
      break;
 8006950:	e021      	b.n	8006996 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fa1b 	bl	8006d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69da      	ldr	r2, [r3, #28]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800696c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69da      	ldr	r2, [r3, #28]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800697c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69d9      	ldr	r1, [r3, #28]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	021a      	lsls	r2, r3, #8
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	61da      	str	r2, [r3, #28]
      break;
 8006992:	e000      	b.n	8006996 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006994:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a3f      	ldr	r2, [pc, #252]	; (8006ab8 <TIM_Base_SetConfig+0x110>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d013      	beq.n	80069e8 <TIM_Base_SetConfig+0x40>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c6:	d00f      	beq.n	80069e8 <TIM_Base_SetConfig+0x40>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a3c      	ldr	r2, [pc, #240]	; (8006abc <TIM_Base_SetConfig+0x114>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00b      	beq.n	80069e8 <TIM_Base_SetConfig+0x40>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a3b      	ldr	r2, [pc, #236]	; (8006ac0 <TIM_Base_SetConfig+0x118>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d007      	beq.n	80069e8 <TIM_Base_SetConfig+0x40>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a3a      	ldr	r2, [pc, #232]	; (8006ac4 <TIM_Base_SetConfig+0x11c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_Base_SetConfig+0x40>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a39      	ldr	r2, [pc, #228]	; (8006ac8 <TIM_Base_SetConfig+0x120>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d108      	bne.n	80069fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2e      	ldr	r2, [pc, #184]	; (8006ab8 <TIM_Base_SetConfig+0x110>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d02b      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a08:	d027      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2b      	ldr	r2, [pc, #172]	; (8006abc <TIM_Base_SetConfig+0x114>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d023      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a2a      	ldr	r2, [pc, #168]	; (8006ac0 <TIM_Base_SetConfig+0x118>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01f      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a29      	ldr	r2, [pc, #164]	; (8006ac4 <TIM_Base_SetConfig+0x11c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d01b      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a28      	ldr	r2, [pc, #160]	; (8006ac8 <TIM_Base_SetConfig+0x120>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d017      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a27      	ldr	r2, [pc, #156]	; (8006acc <TIM_Base_SetConfig+0x124>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d013      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a26      	ldr	r2, [pc, #152]	; (8006ad0 <TIM_Base_SetConfig+0x128>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00f      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a25      	ldr	r2, [pc, #148]	; (8006ad4 <TIM_Base_SetConfig+0x12c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a24      	ldr	r2, [pc, #144]	; (8006ad8 <TIM_Base_SetConfig+0x130>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d007      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a23      	ldr	r2, [pc, #140]	; (8006adc <TIM_Base_SetConfig+0x134>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a22      	ldr	r2, [pc, #136]	; (8006ae0 <TIM_Base_SetConfig+0x138>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d108      	bne.n	8006a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a09      	ldr	r2, [pc, #36]	; (8006ab8 <TIM_Base_SetConfig+0x110>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_Base_SetConfig+0xf8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a0b      	ldr	r2, [pc, #44]	; (8006ac8 <TIM_Base_SetConfig+0x120>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d103      	bne.n	8006aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	691a      	ldr	r2, [r3, #16]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	615a      	str	r2, [r3, #20]
}
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bc80      	pop	{r7}
 8006ab6:	4770      	bx	lr
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40010400 	.word	0x40010400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40014400 	.word	0x40014400
 8006ad4:	40014800 	.word	0x40014800
 8006ad8:	40001800 	.word	0x40001800
 8006adc:	40001c00 	.word	0x40001c00
 8006ae0:	40002000 	.word	0x40002000

08006ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0201 	bic.w	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f023 0302 	bic.w	r3, r3, #2
 8006b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a20      	ldr	r2, [pc, #128]	; (8006bbc <TIM_OC1_SetConfig+0xd8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_OC1_SetConfig+0x64>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a1f      	ldr	r2, [pc, #124]	; (8006bc0 <TIM_OC1_SetConfig+0xdc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d10c      	bne.n	8006b62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f023 0308 	bic.w	r3, r3, #8
 8006b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f023 0304 	bic.w	r3, r3, #4
 8006b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a15      	ldr	r2, [pc, #84]	; (8006bbc <TIM_OC1_SetConfig+0xd8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d003      	beq.n	8006b72 <TIM_OC1_SetConfig+0x8e>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a14      	ldr	r2, [pc, #80]	; (8006bc0 <TIM_OC1_SetConfig+0xdc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d111      	bne.n	8006b96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	621a      	str	r2, [r3, #32]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40010000 	.word	0x40010000
 8006bc0:	40010400 	.word	0x40010400

08006bc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f023 0210 	bic.w	r2, r3, #16
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f023 0320 	bic.w	r3, r3, #32
 8006c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a21      	ldr	r2, [pc, #132]	; (8006ca4 <TIM_OC2_SetConfig+0xe0>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d003      	beq.n	8006c2c <TIM_OC2_SetConfig+0x68>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a20      	ldr	r2, [pc, #128]	; (8006ca8 <TIM_OC2_SetConfig+0xe4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d10d      	bne.n	8006c48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a16      	ldr	r2, [pc, #88]	; (8006ca4 <TIM_OC2_SetConfig+0xe0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_OC2_SetConfig+0x94>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <TIM_OC2_SetConfig+0xe4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d113      	bne.n	8006c80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40010400 	.word	0x40010400

08006cac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0303 	bic.w	r3, r3, #3
 8006ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	021b      	lsls	r3, r3, #8
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a21      	ldr	r2, [pc, #132]	; (8006d8c <TIM_OC3_SetConfig+0xe0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_OC3_SetConfig+0x66>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <TIM_OC3_SetConfig+0xe4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d10d      	bne.n	8006d2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <TIM_OC3_SetConfig+0xe0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d003      	beq.n	8006d3e <TIM_OC3_SetConfig+0x92>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a15      	ldr	r2, [pc, #84]	; (8006d90 <TIM_OC3_SetConfig+0xe4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d113      	bne.n	8006d66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	621a      	str	r2, [r3, #32]
}
 8006d80:	bf00      	nop
 8006d82:	371c      	adds	r7, #28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40010400 	.word	0x40010400

08006d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	031b      	lsls	r3, r3, #12
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a11      	ldr	r2, [pc, #68]	; (8006e34 <TIM_OC4_SetConfig+0xa0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_OC4_SetConfig+0x68>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a10      	ldr	r2, [pc, #64]	; (8006e38 <TIM_OC4_SetConfig+0xa4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d109      	bne.n	8006e10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	019b      	lsls	r3, r3, #6
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr
 8006e34:	40010000 	.word	0x40010000
 8006e38:	40010400 	.word	0x40010400

08006e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	2201      	movs	r2, #1
 8006e50:	fa02 f303 	lsl.w	r3, r2, r3
 8006e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1a      	ldr	r2, [r3, #32]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	401a      	ands	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1a      	ldr	r2, [r3, #32]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	fa01 f303 	lsl.w	r3, r1, r3
 8006e74:	431a      	orrs	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	621a      	str	r2, [r3, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bc80      	pop	{r7}
 8006e82:	4770      	bx	lr

08006e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e05a      	b.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a20      	ldr	r2, [pc, #128]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d022      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee8:	d01d      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1c      	ldr	r2, [pc, #112]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d018      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d013      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00e      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d009      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a16      	ldr	r2, [pc, #88]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d004      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a14      	ldr	r2, [pc, #80]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d10c      	bne.n	8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800
 8006f68:	40000c00 	.word	0x40000c00
 8006f6c:	40010400 	.word	0x40010400
 8006f70:	40014000 	.word	0x40014000
 8006f74:	40001800 	.word	0x40001800

08006f78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e03d      	b.n	8007010 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr
	...

0800701c <__errno>:
 800701c:	4b01      	ldr	r3, [pc, #4]	; (8007024 <__errno+0x8>)
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000020 	.word	0x20000020

08007028 <__libc_init_array>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	2600      	movs	r6, #0
 800702c:	4d0c      	ldr	r5, [pc, #48]	; (8007060 <__libc_init_array+0x38>)
 800702e:	4c0d      	ldr	r4, [pc, #52]	; (8007064 <__libc_init_array+0x3c>)
 8007030:	1b64      	subs	r4, r4, r5
 8007032:	10a4      	asrs	r4, r4, #2
 8007034:	42a6      	cmp	r6, r4
 8007036:	d109      	bne.n	800704c <__libc_init_array+0x24>
 8007038:	f000 f92c 	bl	8007294 <_init>
 800703c:	2600      	movs	r6, #0
 800703e:	4d0a      	ldr	r5, [pc, #40]	; (8007068 <__libc_init_array+0x40>)
 8007040:	4c0a      	ldr	r4, [pc, #40]	; (800706c <__libc_init_array+0x44>)
 8007042:	1b64      	subs	r4, r4, r5
 8007044:	10a4      	asrs	r4, r4, #2
 8007046:	42a6      	cmp	r6, r4
 8007048:	d105      	bne.n	8007056 <__libc_init_array+0x2e>
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007050:	4798      	blx	r3
 8007052:	3601      	adds	r6, #1
 8007054:	e7ee      	b.n	8007034 <__libc_init_array+0xc>
 8007056:	f855 3b04 	ldr.w	r3, [r5], #4
 800705a:	4798      	blx	r3
 800705c:	3601      	adds	r6, #1
 800705e:	e7f2      	b.n	8007046 <__libc_init_array+0x1e>
 8007060:	080072cc 	.word	0x080072cc
 8007064:	080072cc 	.word	0x080072cc
 8007068:	080072cc 	.word	0x080072cc
 800706c:	080072d0 	.word	0x080072d0

08007070 <malloc>:
 8007070:	4b02      	ldr	r3, [pc, #8]	; (800707c <malloc+0xc>)
 8007072:	4601      	mov	r1, r0
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	f000 b87b 	b.w	8007170 <_malloc_r>
 800707a:	bf00      	nop
 800707c:	20000020 	.word	0x20000020

08007080 <free>:
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <free+0xc>)
 8007082:	4601      	mov	r1, r0
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f000 b80b 	b.w	80070a0 <_free_r>
 800708a:	bf00      	nop
 800708c:	20000020 	.word	0x20000020

08007090 <memset>:
 8007090:	4603      	mov	r3, r0
 8007092:	4402      	add	r2, r0
 8007094:	4293      	cmp	r3, r2
 8007096:	d100      	bne.n	800709a <memset+0xa>
 8007098:	4770      	bx	lr
 800709a:	f803 1b01 	strb.w	r1, [r3], #1
 800709e:	e7f9      	b.n	8007094 <memset+0x4>

080070a0 <_free_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4605      	mov	r5, r0
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d040      	beq.n	800712a <_free_r+0x8a>
 80070a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ac:	1f0c      	subs	r4, r1, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bfb8      	it	lt
 80070b2:	18e4      	addlt	r4, r4, r3
 80070b4:	f000 f8e0 	bl	8007278 <__malloc_lock>
 80070b8:	4a1c      	ldr	r2, [pc, #112]	; (800712c <_free_r+0x8c>)
 80070ba:	6813      	ldr	r3, [r2, #0]
 80070bc:	b933      	cbnz	r3, 80070cc <_free_r+0x2c>
 80070be:	6063      	str	r3, [r4, #4]
 80070c0:	6014      	str	r4, [r2, #0]
 80070c2:	4628      	mov	r0, r5
 80070c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070c8:	f000 b8dc 	b.w	8007284 <__malloc_unlock>
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	d908      	bls.n	80070e2 <_free_r+0x42>
 80070d0:	6820      	ldr	r0, [r4, #0]
 80070d2:	1821      	adds	r1, r4, r0
 80070d4:	428b      	cmp	r3, r1
 80070d6:	bf01      	itttt	eq
 80070d8:	6819      	ldreq	r1, [r3, #0]
 80070da:	685b      	ldreq	r3, [r3, #4]
 80070dc:	1809      	addeq	r1, r1, r0
 80070de:	6021      	streq	r1, [r4, #0]
 80070e0:	e7ed      	b.n	80070be <_free_r+0x1e>
 80070e2:	461a      	mov	r2, r3
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	b10b      	cbz	r3, 80070ec <_free_r+0x4c>
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	d9fa      	bls.n	80070e2 <_free_r+0x42>
 80070ec:	6811      	ldr	r1, [r2, #0]
 80070ee:	1850      	adds	r0, r2, r1
 80070f0:	42a0      	cmp	r0, r4
 80070f2:	d10b      	bne.n	800710c <_free_r+0x6c>
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	4401      	add	r1, r0
 80070f8:	1850      	adds	r0, r2, r1
 80070fa:	4283      	cmp	r3, r0
 80070fc:	6011      	str	r1, [r2, #0]
 80070fe:	d1e0      	bne.n	80070c2 <_free_r+0x22>
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	4401      	add	r1, r0
 8007106:	6011      	str	r1, [r2, #0]
 8007108:	6053      	str	r3, [r2, #4]
 800710a:	e7da      	b.n	80070c2 <_free_r+0x22>
 800710c:	d902      	bls.n	8007114 <_free_r+0x74>
 800710e:	230c      	movs	r3, #12
 8007110:	602b      	str	r3, [r5, #0]
 8007112:	e7d6      	b.n	80070c2 <_free_r+0x22>
 8007114:	6820      	ldr	r0, [r4, #0]
 8007116:	1821      	adds	r1, r4, r0
 8007118:	428b      	cmp	r3, r1
 800711a:	bf01      	itttt	eq
 800711c:	6819      	ldreq	r1, [r3, #0]
 800711e:	685b      	ldreq	r3, [r3, #4]
 8007120:	1809      	addeq	r1, r1, r0
 8007122:	6021      	streq	r1, [r4, #0]
 8007124:	6063      	str	r3, [r4, #4]
 8007126:	6054      	str	r4, [r2, #4]
 8007128:	e7cb      	b.n	80070c2 <_free_r+0x22>
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	200014a8 	.word	0x200014a8

08007130 <sbrk_aligned>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4e0e      	ldr	r6, [pc, #56]	; (800716c <sbrk_aligned+0x3c>)
 8007134:	460c      	mov	r4, r1
 8007136:	6831      	ldr	r1, [r6, #0]
 8007138:	4605      	mov	r5, r0
 800713a:	b911      	cbnz	r1, 8007142 <sbrk_aligned+0x12>
 800713c:	f000 f88c 	bl	8007258 <_sbrk_r>
 8007140:	6030      	str	r0, [r6, #0]
 8007142:	4621      	mov	r1, r4
 8007144:	4628      	mov	r0, r5
 8007146:	f000 f887 	bl	8007258 <_sbrk_r>
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	d00a      	beq.n	8007164 <sbrk_aligned+0x34>
 800714e:	1cc4      	adds	r4, r0, #3
 8007150:	f024 0403 	bic.w	r4, r4, #3
 8007154:	42a0      	cmp	r0, r4
 8007156:	d007      	beq.n	8007168 <sbrk_aligned+0x38>
 8007158:	1a21      	subs	r1, r4, r0
 800715a:	4628      	mov	r0, r5
 800715c:	f000 f87c 	bl	8007258 <_sbrk_r>
 8007160:	3001      	adds	r0, #1
 8007162:	d101      	bne.n	8007168 <sbrk_aligned+0x38>
 8007164:	f04f 34ff 	mov.w	r4, #4294967295
 8007168:	4620      	mov	r0, r4
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	200014ac 	.word	0x200014ac

08007170 <_malloc_r>:
 8007170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007174:	1ccd      	adds	r5, r1, #3
 8007176:	f025 0503 	bic.w	r5, r5, #3
 800717a:	3508      	adds	r5, #8
 800717c:	2d0c      	cmp	r5, #12
 800717e:	bf38      	it	cc
 8007180:	250c      	movcc	r5, #12
 8007182:	2d00      	cmp	r5, #0
 8007184:	4607      	mov	r7, r0
 8007186:	db01      	blt.n	800718c <_malloc_r+0x1c>
 8007188:	42a9      	cmp	r1, r5
 800718a:	d905      	bls.n	8007198 <_malloc_r+0x28>
 800718c:	230c      	movs	r3, #12
 800718e:	2600      	movs	r6, #0
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	4630      	mov	r0, r6
 8007194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007198:	4e2e      	ldr	r6, [pc, #184]	; (8007254 <_malloc_r+0xe4>)
 800719a:	f000 f86d 	bl	8007278 <__malloc_lock>
 800719e:	6833      	ldr	r3, [r6, #0]
 80071a0:	461c      	mov	r4, r3
 80071a2:	bb34      	cbnz	r4, 80071f2 <_malloc_r+0x82>
 80071a4:	4629      	mov	r1, r5
 80071a6:	4638      	mov	r0, r7
 80071a8:	f7ff ffc2 	bl	8007130 <sbrk_aligned>
 80071ac:	1c43      	adds	r3, r0, #1
 80071ae:	4604      	mov	r4, r0
 80071b0:	d14d      	bne.n	800724e <_malloc_r+0xde>
 80071b2:	6834      	ldr	r4, [r6, #0]
 80071b4:	4626      	mov	r6, r4
 80071b6:	2e00      	cmp	r6, #0
 80071b8:	d140      	bne.n	800723c <_malloc_r+0xcc>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	4631      	mov	r1, r6
 80071be:	4638      	mov	r0, r7
 80071c0:	eb04 0803 	add.w	r8, r4, r3
 80071c4:	f000 f848 	bl	8007258 <_sbrk_r>
 80071c8:	4580      	cmp	r8, r0
 80071ca:	d13a      	bne.n	8007242 <_malloc_r+0xd2>
 80071cc:	6821      	ldr	r1, [r4, #0]
 80071ce:	3503      	adds	r5, #3
 80071d0:	1a6d      	subs	r5, r5, r1
 80071d2:	f025 0503 	bic.w	r5, r5, #3
 80071d6:	3508      	adds	r5, #8
 80071d8:	2d0c      	cmp	r5, #12
 80071da:	bf38      	it	cc
 80071dc:	250c      	movcc	r5, #12
 80071de:	4638      	mov	r0, r7
 80071e0:	4629      	mov	r1, r5
 80071e2:	f7ff ffa5 	bl	8007130 <sbrk_aligned>
 80071e6:	3001      	adds	r0, #1
 80071e8:	d02b      	beq.n	8007242 <_malloc_r+0xd2>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	442b      	add	r3, r5
 80071ee:	6023      	str	r3, [r4, #0]
 80071f0:	e00e      	b.n	8007210 <_malloc_r+0xa0>
 80071f2:	6822      	ldr	r2, [r4, #0]
 80071f4:	1b52      	subs	r2, r2, r5
 80071f6:	d41e      	bmi.n	8007236 <_malloc_r+0xc6>
 80071f8:	2a0b      	cmp	r2, #11
 80071fa:	d916      	bls.n	800722a <_malloc_r+0xba>
 80071fc:	1961      	adds	r1, r4, r5
 80071fe:	42a3      	cmp	r3, r4
 8007200:	6025      	str	r5, [r4, #0]
 8007202:	bf18      	it	ne
 8007204:	6059      	strne	r1, [r3, #4]
 8007206:	6863      	ldr	r3, [r4, #4]
 8007208:	bf08      	it	eq
 800720a:	6031      	streq	r1, [r6, #0]
 800720c:	5162      	str	r2, [r4, r5]
 800720e:	604b      	str	r3, [r1, #4]
 8007210:	4638      	mov	r0, r7
 8007212:	f104 060b 	add.w	r6, r4, #11
 8007216:	f000 f835 	bl	8007284 <__malloc_unlock>
 800721a:	f026 0607 	bic.w	r6, r6, #7
 800721e:	1d23      	adds	r3, r4, #4
 8007220:	1af2      	subs	r2, r6, r3
 8007222:	d0b6      	beq.n	8007192 <_malloc_r+0x22>
 8007224:	1b9b      	subs	r3, r3, r6
 8007226:	50a3      	str	r3, [r4, r2]
 8007228:	e7b3      	b.n	8007192 <_malloc_r+0x22>
 800722a:	6862      	ldr	r2, [r4, #4]
 800722c:	42a3      	cmp	r3, r4
 800722e:	bf0c      	ite	eq
 8007230:	6032      	streq	r2, [r6, #0]
 8007232:	605a      	strne	r2, [r3, #4]
 8007234:	e7ec      	b.n	8007210 <_malloc_r+0xa0>
 8007236:	4623      	mov	r3, r4
 8007238:	6864      	ldr	r4, [r4, #4]
 800723a:	e7b2      	b.n	80071a2 <_malloc_r+0x32>
 800723c:	4634      	mov	r4, r6
 800723e:	6876      	ldr	r6, [r6, #4]
 8007240:	e7b9      	b.n	80071b6 <_malloc_r+0x46>
 8007242:	230c      	movs	r3, #12
 8007244:	4638      	mov	r0, r7
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	f000 f81c 	bl	8007284 <__malloc_unlock>
 800724c:	e7a1      	b.n	8007192 <_malloc_r+0x22>
 800724e:	6025      	str	r5, [r4, #0]
 8007250:	e7de      	b.n	8007210 <_malloc_r+0xa0>
 8007252:	bf00      	nop
 8007254:	200014a8 	.word	0x200014a8

08007258 <_sbrk_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	2300      	movs	r3, #0
 800725c:	4d05      	ldr	r5, [pc, #20]	; (8007274 <_sbrk_r+0x1c>)
 800725e:	4604      	mov	r4, r0
 8007260:	4608      	mov	r0, r1
 8007262:	602b      	str	r3, [r5, #0]
 8007264:	f7fc fe12 	bl	8003e8c <_sbrk>
 8007268:	1c43      	adds	r3, r0, #1
 800726a:	d102      	bne.n	8007272 <_sbrk_r+0x1a>
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	b103      	cbz	r3, 8007272 <_sbrk_r+0x1a>
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	bd38      	pop	{r3, r4, r5, pc}
 8007274:	200014b0 	.word	0x200014b0

08007278 <__malloc_lock>:
 8007278:	4801      	ldr	r0, [pc, #4]	; (8007280 <__malloc_lock+0x8>)
 800727a:	f000 b809 	b.w	8007290 <__retarget_lock_acquire_recursive>
 800727e:	bf00      	nop
 8007280:	200014b4 	.word	0x200014b4

08007284 <__malloc_unlock>:
 8007284:	4801      	ldr	r0, [pc, #4]	; (800728c <__malloc_unlock+0x8>)
 8007286:	f000 b804 	b.w	8007292 <__retarget_lock_release_recursive>
 800728a:	bf00      	nop
 800728c:	200014b4 	.word	0x200014b4

08007290 <__retarget_lock_acquire_recursive>:
 8007290:	4770      	bx	lr

08007292 <__retarget_lock_release_recursive>:
 8007292:	4770      	bx	lr

08007294 <_init>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	bf00      	nop
 8007298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729a:	bc08      	pop	{r3}
 800729c:	469e      	mov	lr, r3
 800729e:	4770      	bx	lr

080072a0 <_fini>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	bf00      	nop
 80072a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a6:	bc08      	pop	{r3}
 80072a8:	469e      	mov	lr, r3
 80072aa:	4770      	bx	lr
