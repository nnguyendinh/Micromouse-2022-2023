
Crewmate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000694c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006ad4  08006ad4  00016ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aec  08006aec  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006aec  08006aec  00016aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af4  08006af4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001860  20000084  08006b80  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018e4  08006b80  000218e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d72f  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000294b  00000000  00000000  0002d7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00030128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00030ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fdd4  00000000  00000000  00031b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116e8  00000000  00000000  00051924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbae0  00000000  00000000  0006300c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011eaec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c7c  00000000  00000000  0011eb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006abc 	.word	0x08006abc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08006abc 	.word	0x08006abc

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2f>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ac:	bf24      	itt	cs
 80008ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008b6:	d90d      	bls.n	80008d4 <__aeabi_d2f+0x30>
 80008b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008d8:	d121      	bne.n	800091e <__aeabi_d2f+0x7a>
 80008da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008de:	bfbc      	itt	lt
 80008e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	4770      	bxlt	lr
 80008e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ee:	f1c2 0218 	rsb	r2, r2, #24
 80008f2:	f1c2 0c20 	rsb	ip, r2, #32
 80008f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008fa:	fa20 f002 	lsr.w	r0, r0, r2
 80008fe:	bf18      	it	ne
 8000900:	f040 0001 	orrne.w	r0, r0, #1
 8000904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800090c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000910:	ea40 000c 	orr.w	r0, r0, ip
 8000914:	fa23 f302 	lsr.w	r3, r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	e7cc      	b.n	80008b8 <__aeabi_d2f+0x14>
 800091e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000922:	d107      	bne.n	8000934 <__aeabi_d2f+0x90>
 8000924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000928:	bf1e      	ittt	ne
 800092a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800092e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000932:	4770      	bxne	lr
 8000934:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000938:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800093c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_frsub>:
 8000944:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000948:	e002      	b.n	8000950 <__addsf3>
 800094a:	bf00      	nop

0800094c <__aeabi_fsub>:
 800094c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000950 <__addsf3>:
 8000950:	0042      	lsls	r2, r0, #1
 8000952:	bf1f      	itttt	ne
 8000954:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000958:	ea92 0f03 	teqne	r2, r3
 800095c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000960:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000964:	d06a      	beq.n	8000a3c <__addsf3+0xec>
 8000966:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800096a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096e:	bfc1      	itttt	gt
 8000970:	18d2      	addgt	r2, r2, r3
 8000972:	4041      	eorgt	r1, r0
 8000974:	4048      	eorgt	r0, r1
 8000976:	4041      	eorgt	r1, r0
 8000978:	bfb8      	it	lt
 800097a:	425b      	neglt	r3, r3
 800097c:	2b19      	cmp	r3, #25
 800097e:	bf88      	it	hi
 8000980:	4770      	bxhi	lr
 8000982:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000996:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800099a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800099e:	bf18      	it	ne
 80009a0:	4249      	negne	r1, r1
 80009a2:	ea92 0f03 	teq	r2, r3
 80009a6:	d03f      	beq.n	8000a28 <__addsf3+0xd8>
 80009a8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ac:	fa41 fc03 	asr.w	ip, r1, r3
 80009b0:	eb10 000c 	adds.w	r0, r0, ip
 80009b4:	f1c3 0320 	rsb	r3, r3, #32
 80009b8:	fa01 f103 	lsl.w	r1, r1, r3
 80009bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009c0:	d502      	bpl.n	80009c8 <__addsf3+0x78>
 80009c2:	4249      	negs	r1, r1
 80009c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009cc:	d313      	bcc.n	80009f6 <__addsf3+0xa6>
 80009ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009d2:	d306      	bcc.n	80009e2 <__addsf3+0x92>
 80009d4:	0840      	lsrs	r0, r0, #1
 80009d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009da:	f102 0201 	add.w	r2, r2, #1
 80009de:	2afe      	cmp	r2, #254	; 0xfe
 80009e0:	d251      	bcs.n	8000a86 <__addsf3+0x136>
 80009e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ea:	bf08      	it	eq
 80009ec:	f020 0001 	biceq.w	r0, r0, #1
 80009f0:	ea40 0003 	orr.w	r0, r0, r3
 80009f4:	4770      	bx	lr
 80009f6:	0049      	lsls	r1, r1, #1
 80009f8:	eb40 0000 	adc.w	r0, r0, r0
 80009fc:	3a01      	subs	r2, #1
 80009fe:	bf28      	it	cs
 8000a00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a04:	d2ed      	bcs.n	80009e2 <__addsf3+0x92>
 8000a06:	fab0 fc80 	clz	ip, r0
 8000a0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a16:	bfaa      	itet	ge
 8000a18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a1c:	4252      	neglt	r2, r2
 8000a1e:	4318      	orrge	r0, r3
 8000a20:	bfbc      	itt	lt
 8000a22:	40d0      	lsrlt	r0, r2
 8000a24:	4318      	orrlt	r0, r3
 8000a26:	4770      	bx	lr
 8000a28:	f092 0f00 	teq	r2, #0
 8000a2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a30:	bf06      	itte	eq
 8000a32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a36:	3201      	addeq	r2, #1
 8000a38:	3b01      	subne	r3, #1
 8000a3a:	e7b5      	b.n	80009a8 <__addsf3+0x58>
 8000a3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a44:	bf18      	it	ne
 8000a46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4a:	d021      	beq.n	8000a90 <__addsf3+0x140>
 8000a4c:	ea92 0f03 	teq	r2, r3
 8000a50:	d004      	beq.n	8000a5c <__addsf3+0x10c>
 8000a52:	f092 0f00 	teq	r2, #0
 8000a56:	bf08      	it	eq
 8000a58:	4608      	moveq	r0, r1
 8000a5a:	4770      	bx	lr
 8000a5c:	ea90 0f01 	teq	r0, r1
 8000a60:	bf1c      	itt	ne
 8000a62:	2000      	movne	r0, #0
 8000a64:	4770      	bxne	lr
 8000a66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a6a:	d104      	bne.n	8000a76 <__addsf3+0x126>
 8000a6c:	0040      	lsls	r0, r0, #1
 8000a6e:	bf28      	it	cs
 8000a70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a74:	4770      	bx	lr
 8000a76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a7a:	bf3c      	itt	cc
 8000a7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bxcc	lr
 8000a82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8e:	4770      	bx	lr
 8000a90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a94:	bf16      	itet	ne
 8000a96:	4608      	movne	r0, r1
 8000a98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a9c:	4601      	movne	r1, r0
 8000a9e:	0242      	lsls	r2, r0, #9
 8000aa0:	bf06      	itte	eq
 8000aa2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa6:	ea90 0f01 	teqeq	r0, r1
 8000aaa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_ui2f>:
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	e004      	b.n	8000ac0 <__aeabi_i2f+0x8>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_i2f>:
 8000ab8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000abc:	bf48      	it	mi
 8000abe:	4240      	negmi	r0, r0
 8000ac0:	ea5f 0c00 	movs.w	ip, r0
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000acc:	4601      	mov	r1, r0
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	e01c      	b.n	8000b0e <__aeabi_l2f+0x2a>

08000ad4 <__aeabi_ul2f>:
 8000ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad8:	bf08      	it	eq
 8000ada:	4770      	bxeq	lr
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	e00a      	b.n	8000af8 <__aeabi_l2f+0x14>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_l2f>:
 8000ae4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae8:	bf08      	it	eq
 8000aea:	4770      	bxeq	lr
 8000aec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_l2f+0x14>
 8000af2:	4240      	negs	r0, r0
 8000af4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af8:	ea5f 0c01 	movs.w	ip, r1
 8000afc:	bf02      	ittt	eq
 8000afe:	4684      	moveq	ip, r0
 8000b00:	4601      	moveq	r1, r0
 8000b02:	2000      	moveq	r0, #0
 8000b04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b08:	bf08      	it	eq
 8000b0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b12:	fabc f28c 	clz	r2, ip
 8000b16:	3a08      	subs	r2, #8
 8000b18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b1c:	db10      	blt.n	8000b40 <__aeabi_l2f+0x5c>
 8000b1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b22:	4463      	add	r3, ip
 8000b24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b28:	f1c2 0220 	rsb	r2, r2, #32
 8000b2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b30:	fa20 f202 	lsr.w	r2, r0, r2
 8000b34:	eb43 0002 	adc.w	r0, r3, r2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f102 0220 	add.w	r2, r2, #32
 8000b44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b48:	f1c2 0220 	rsb	r2, r2, #32
 8000b4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b50:	fa21 f202 	lsr.w	r2, r1, r2
 8000b54:	eb43 0002 	adc.w	r0, r3, r2
 8000b58:	bf08      	it	eq
 8000b5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_fmul>:
 8000b60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b68:	bf1e      	ittt	ne
 8000b6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b6e:	ea92 0f0c 	teqne	r2, ip
 8000b72:	ea93 0f0c 	teqne	r3, ip
 8000b76:	d06f      	beq.n	8000c58 <__aeabi_fmul+0xf8>
 8000b78:	441a      	add	r2, r3
 8000b7a:	ea80 0c01 	eor.w	ip, r0, r1
 8000b7e:	0240      	lsls	r0, r0, #9
 8000b80:	bf18      	it	ne
 8000b82:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b86:	d01e      	beq.n	8000bc6 <__aeabi_fmul+0x66>
 8000b88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b8c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b90:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b94:	fba0 3101 	umull	r3, r1, r0, r1
 8000b98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b9c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba0:	bf3e      	ittt	cc
 8000ba2:	0049      	lslcc	r1, r1, #1
 8000ba4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba8:	005b      	lslcc	r3, r3, #1
 8000baa:	ea40 0001 	orr.w	r0, r0, r1
 8000bae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bb2:	2afd      	cmp	r2, #253	; 0xfd
 8000bb4:	d81d      	bhi.n	8000bf2 <__aeabi_fmul+0x92>
 8000bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	4770      	bx	lr
 8000bc6:	f090 0f00 	teq	r0, #0
 8000bca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bce:	bf08      	it	eq
 8000bd0:	0249      	lsleq	r1, r1, #9
 8000bd2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bd6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bda:	3a7f      	subs	r2, #127	; 0x7f
 8000bdc:	bfc2      	ittt	gt
 8000bde:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000be6:	4770      	bxgt	lr
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	3a01      	subs	r2, #1
 8000bf2:	dc5d      	bgt.n	8000cb0 <__aeabi_fmul+0x150>
 8000bf4:	f112 0f19 	cmn.w	r2, #25
 8000bf8:	bfdc      	itt	le
 8000bfa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bxle	lr
 8000c00:	f1c2 0200 	rsb	r2, r2, #0
 8000c04:	0041      	lsls	r1, r0, #1
 8000c06:	fa21 f102 	lsr.w	r1, r1, r2
 8000c0a:	f1c2 0220 	rsb	r2, r2, #32
 8000c0e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c12:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c16:	f140 0000 	adc.w	r0, r0, #0
 8000c1a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c1e:	bf08      	it	eq
 8000c20:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c24:	4770      	bx	lr
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0040      	lsleq	r0, r0, #1
 8000c32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c36:	3a01      	subeq	r2, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xce>
 8000c3a:	ea40 000c 	orr.w	r0, r0, ip
 8000c3e:	f093 0f00 	teq	r3, #0
 8000c42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c46:	bf02      	ittt	eq
 8000c48:	0049      	lsleq	r1, r1, #1
 8000c4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c4e:	3b01      	subeq	r3, #1
 8000c50:	d0f9      	beq.n	8000c46 <__aeabi_fmul+0xe6>
 8000c52:	ea41 010c 	orr.w	r1, r1, ip
 8000c56:	e78f      	b.n	8000b78 <__aeabi_fmul+0x18>
 8000c58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	bf18      	it	ne
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d00a      	beq.n	8000c7e <__aeabi_fmul+0x11e>
 8000c68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c6c:	bf18      	it	ne
 8000c6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c72:	d1d8      	bne.n	8000c26 <__aeabi_fmul+0xc6>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	bf17      	itett	ne
 8000c84:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	f091 0f00 	teqne	r1, #0
 8000c8e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c92:	d014      	beq.n	8000cbe <__aeabi_fmul+0x15e>
 8000c94:	ea92 0f0c 	teq	r2, ip
 8000c98:	d101      	bne.n	8000c9e <__aeabi_fmul+0x13e>
 8000c9a:	0242      	lsls	r2, r0, #9
 8000c9c:	d10f      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000c9e:	ea93 0f0c 	teq	r3, ip
 8000ca2:	d103      	bne.n	8000cac <__aeabi_fmul+0x14c>
 8000ca4:	024b      	lsls	r3, r1, #9
 8000ca6:	bf18      	it	ne
 8000ca8:	4608      	movne	r0, r1
 8000caa:	d108      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000cac:	ea80 0001 	eor.w	r0, r0, r1
 8000cb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fdiv>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d069      	beq.n	8000db4 <__aeabi_fdiv+0xec>
 8000ce0:	eba2 0203 	sub.w	r2, r2, r3
 8000ce4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce8:	0249      	lsls	r1, r1, #9
 8000cea:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cee:	d037      	beq.n	8000d60 <__aeabi_fdiv+0x98>
 8000cf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cf4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d00:	428b      	cmp	r3, r1
 8000d02:	bf38      	it	cc
 8000d04:	005b      	lslcc	r3, r3, #1
 8000d06:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d0a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	bf24      	itt	cs
 8000d12:	1a5b      	subcs	r3, r3, r1
 8000d14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d18:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d1c:	bf24      	itt	cs
 8000d1e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d22:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d26:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d2a:	bf24      	itt	cs
 8000d2c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d38:	bf24      	itt	cs
 8000d3a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d3e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d4a:	d1e0      	bne.n	8000d0e <__aeabi_fdiv+0x46>
 8000d4c:	2afd      	cmp	r2, #253	; 0xfd
 8000d4e:	f63f af50 	bhi.w	8000bf2 <__aeabi_fmul+0x92>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d64:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d68:	327f      	adds	r2, #127	; 0x7f
 8000d6a:	bfc2      	ittt	gt
 8000d6c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d70:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d74:	4770      	bxgt	lr
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7a:	f04f 0300 	mov.w	r3, #0
 8000d7e:	3a01      	subs	r2, #1
 8000d80:	e737      	b.n	8000bf2 <__aeabi_fmul+0x92>
 8000d82:	f092 0f00 	teq	r2, #0
 8000d86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0040      	lsleq	r0, r0, #1
 8000d8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d92:	3a01      	subeq	r2, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xc2>
 8000d96:	ea40 000c 	orr.w	r0, r0, ip
 8000d9a:	f093 0f00 	teq	r3, #0
 8000d9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0049      	lsleq	r1, r1, #1
 8000da6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000daa:	3b01      	subeq	r3, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fdiv+0xda>
 8000dae:	ea41 010c 	orr.w	r1, r1, ip
 8000db2:	e795      	b.n	8000ce0 <__aeabi_fdiv+0x18>
 8000db4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d108      	bne.n	8000dd0 <__aeabi_fdiv+0x108>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	f47f af7d 	bne.w	8000cbe <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	f47f af70 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e776      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dd0:	ea93 0f0c 	teq	r3, ip
 8000dd4:	d104      	bne.n	8000de0 <__aeabi_fdiv+0x118>
 8000dd6:	024b      	lsls	r3, r1, #9
 8000dd8:	f43f af4c 	beq.w	8000c74 <__aeabi_fmul+0x114>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e76e      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000de0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de4:	bf18      	it	ne
 8000de6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	d1ca      	bne.n	8000d82 <__aeabi_fdiv+0xba>
 8000dec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df0:	f47f af5c 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000df4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000df8:	f47f af3c 	bne.w	8000c74 <__aeabi_fmul+0x114>
 8000dfc:	e75f      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dfe:	bf00      	nop

08000e00 <__gesf2>:
 8000e00:	f04f 3cff 	mov.w	ip, #4294967295
 8000e04:	e006      	b.n	8000e14 <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__lesf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	e002      	b.n	8000e14 <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__cmpsf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e24:	bf18      	it	ne
 8000e26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e2a:	d011      	beq.n	8000e50 <__cmpsf2+0x40>
 8000e2c:	b001      	add	sp, #4
 8000e2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e32:	bf18      	it	ne
 8000e34:	ea90 0f01 	teqne	r0, r1
 8000e38:	bf58      	it	pl
 8000e3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e3e:	bf88      	it	hi
 8000e40:	17c8      	asrhi	r0, r1, #31
 8000e42:	bf38      	it	cc
 8000e44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e48:	bf18      	it	ne
 8000e4a:	f040 0001 	orrne.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e54:	d102      	bne.n	8000e5c <__cmpsf2+0x4c>
 8000e56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e5a:	d105      	bne.n	8000e68 <__cmpsf2+0x58>
 8000e5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e60:	d1e4      	bne.n	8000e2c <__cmpsf2+0x1c>
 8000e62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e66:	d0e1      	beq.n	8000e2c <__cmpsf2+0x1c>
 8000e68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <__aeabi_cfrcmple>:
 8000e70:	4684      	mov	ip, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4661      	mov	r1, ip
 8000e76:	e7ff      	b.n	8000e78 <__aeabi_cfcmpeq>

08000e78 <__aeabi_cfcmpeq>:
 8000e78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e7a:	f7ff ffc9 	bl	8000e10 <__cmpsf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	bf48      	it	mi
 8000e82:	f110 0f00 	cmnmi.w	r0, #0
 8000e86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e88 <__aeabi_fcmpeq>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff fff4 	bl	8000e78 <__aeabi_cfcmpeq>
 8000e90:	bf0c      	ite	eq
 8000e92:	2001      	moveq	r0, #1
 8000e94:	2000      	movne	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_fcmplt>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffea 	bl	8000e78 <__aeabi_cfcmpeq>
 8000ea4:	bf34      	ite	cc
 8000ea6:	2001      	movcc	r0, #1
 8000ea8:	2000      	movcs	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmple>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffe0 	bl	8000e78 <__aeabi_cfcmpeq>
 8000eb8:	bf94      	ite	ls
 8000eba:	2001      	movls	r0, #1
 8000ebc:	2000      	movhi	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmpge>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffd2 	bl	8000e70 <__aeabi_cfrcmple>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_fcmpgt>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffc8 	bl	8000e70 <__aeabi_cfrcmple>
 8000ee0:	bf34      	ite	cc
 8000ee2:	2001      	movcc	r0, #1
 8000ee4:	2000      	movcs	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_f2uiz>:
 8000eec:	0042      	lsls	r2, r0, #1
 8000eee:	d20e      	bcs.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef4:	d30b      	bcc.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d409      	bmi.n	8000f14 <__aeabi_f2uiz+0x28>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	fa23 f002 	lsr.w	r0, r3, r2
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2uiz+0x32>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d102      	bne.n	8000f24 <__aeabi_f2uiz+0x38>
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	4770      	bx	lr
 8000f24:	f04f 0000 	mov.w	r0, #0
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__aeabi_uldivmod>:
 8000f2c:	b953      	cbnz	r3, 8000f44 <__aeabi_uldivmod+0x18>
 8000f2e:	b94a      	cbnz	r2, 8000f44 <__aeabi_uldivmod+0x18>
 8000f30:	2900      	cmp	r1, #0
 8000f32:	bf08      	it	eq
 8000f34:	2800      	cmpeq	r0, #0
 8000f36:	bf1c      	itt	ne
 8000f38:	f04f 31ff 	movne.w	r1, #4294967295
 8000f3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f40:	f000 b976 	b.w	8001230 <__aeabi_idiv0>
 8000f44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4c:	f000 f806 	bl	8000f5c <__udivmoddi4>
 8000f50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f58:	b004      	add	sp, #16
 8000f5a:	4770      	bx	lr

08000f5c <__udivmoddi4>:
 8000f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f60:	9e08      	ldr	r6, [sp, #32]
 8000f62:	460d      	mov	r5, r1
 8000f64:	4604      	mov	r4, r0
 8000f66:	4688      	mov	r8, r1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d14d      	bne.n	8001008 <__udivmoddi4+0xac>
 8000f6c:	428a      	cmp	r2, r1
 8000f6e:	4694      	mov	ip, r2
 8000f70:	d968      	bls.n	8001044 <__udivmoddi4+0xe8>
 8000f72:	fab2 f282 	clz	r2, r2
 8000f76:	b152      	cbz	r2, 8000f8e <__udivmoddi4+0x32>
 8000f78:	fa01 f302 	lsl.w	r3, r1, r2
 8000f7c:	f1c2 0120 	rsb	r1, r2, #32
 8000f80:	fa20 f101 	lsr.w	r1, r0, r1
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	ea41 0803 	orr.w	r8, r1, r3
 8000f8c:	4094      	lsls	r4, r2
 8000f8e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000f92:	fbb8 f7f1 	udiv	r7, r8, r1
 8000f96:	fa1f fe8c 	uxth.w	lr, ip
 8000f9a:	fb01 8817 	mls	r8, r1, r7, r8
 8000f9e:	fb07 f00e 	mul.w	r0, r7, lr
 8000fa2:	0c23      	lsrs	r3, r4, #16
 8000fa4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa8:	4298      	cmp	r0, r3
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x66>
 8000fac:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb0:	f107 35ff 	add.w	r5, r7, #4294967295
 8000fb4:	f080 811e 	bcs.w	80011f4 <__udivmoddi4+0x298>
 8000fb8:	4298      	cmp	r0, r3
 8000fba:	f240 811b 	bls.w	80011f4 <__udivmoddi4+0x298>
 8000fbe:	3f02      	subs	r7, #2
 8000fc0:	4463      	add	r3, ip
 8000fc2:	1a1b      	subs	r3, r3, r0
 8000fc4:	fbb3 f0f1 	udiv	r0, r3, r1
 8000fc8:	fb01 3310 	mls	r3, r1, r0, r3
 8000fcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd0:	b2a4      	uxth	r4, r4
 8000fd2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd6:	45a6      	cmp	lr, r4
 8000fd8:	d90a      	bls.n	8000ff0 <__udivmoddi4+0x94>
 8000fda:	eb1c 0404 	adds.w	r4, ip, r4
 8000fde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fe2:	f080 8109 	bcs.w	80011f8 <__udivmoddi4+0x29c>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	f240 8106 	bls.w	80011f8 <__udivmoddi4+0x29c>
 8000fec:	4464      	add	r4, ip
 8000fee:	3802      	subs	r0, #2
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	eba4 040e 	sub.w	r4, r4, lr
 8000ff6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ffa:	b11e      	cbz	r6, 8001004 <__udivmoddi4+0xa8>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	40d4      	lsrs	r4, r2
 8001000:	e9c6 4300 	strd	r4, r3, [r6]
 8001004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0xc2>
 800100c:	2e00      	cmp	r6, #0
 800100e:	f000 80ee 	beq.w	80011ee <__udivmoddi4+0x292>
 8001012:	2100      	movs	r1, #0
 8001014:	e9c6 0500 	strd	r0, r5, [r6]
 8001018:	4608      	mov	r0, r1
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	fab3 f183 	clz	r1, r3
 8001022:	2900      	cmp	r1, #0
 8001024:	d14a      	bne.n	80010bc <__udivmoddi4+0x160>
 8001026:	42ab      	cmp	r3, r5
 8001028:	d302      	bcc.n	8001030 <__udivmoddi4+0xd4>
 800102a:	4282      	cmp	r2, r0
 800102c:	f200 80fc 	bhi.w	8001228 <__udivmoddi4+0x2cc>
 8001030:	1a84      	subs	r4, r0, r2
 8001032:	eb65 0303 	sbc.w	r3, r5, r3
 8001036:	2001      	movs	r0, #1
 8001038:	4698      	mov	r8, r3
 800103a:	2e00      	cmp	r6, #0
 800103c:	d0e2      	beq.n	8001004 <__udivmoddi4+0xa8>
 800103e:	e9c6 4800 	strd	r4, r8, [r6]
 8001042:	e7df      	b.n	8001004 <__udivmoddi4+0xa8>
 8001044:	b902      	cbnz	r2, 8001048 <__udivmoddi4+0xec>
 8001046:	deff      	udf	#255	; 0xff
 8001048:	fab2 f282 	clz	r2, r2
 800104c:	2a00      	cmp	r2, #0
 800104e:	f040 8091 	bne.w	8001174 <__udivmoddi4+0x218>
 8001052:	eba1 000c 	sub.w	r0, r1, ip
 8001056:	2101      	movs	r1, #1
 8001058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800105c:	fa1f fe8c 	uxth.w	lr, ip
 8001060:	fbb0 f3f7 	udiv	r3, r0, r7
 8001064:	fb07 0013 	mls	r0, r7, r3, r0
 8001068:	0c25      	lsrs	r5, r4, #16
 800106a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800106e:	fb0e f003 	mul.w	r0, lr, r3
 8001072:	42a8      	cmp	r0, r5
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x12c>
 8001076:	eb1c 0505 	adds.w	r5, ip, r5
 800107a:	f103 38ff 	add.w	r8, r3, #4294967295
 800107e:	d202      	bcs.n	8001086 <__udivmoddi4+0x12a>
 8001080:	42a8      	cmp	r0, r5
 8001082:	f200 80ce 	bhi.w	8001222 <__udivmoddi4+0x2c6>
 8001086:	4643      	mov	r3, r8
 8001088:	1a2d      	subs	r5, r5, r0
 800108a:	fbb5 f0f7 	udiv	r0, r5, r7
 800108e:	fb07 5510 	mls	r5, r7, r0, r5
 8001092:	fb0e fe00 	mul.w	lr, lr, r0
 8001096:	b2a4      	uxth	r4, r4
 8001098:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800109c:	45a6      	cmp	lr, r4
 800109e:	d908      	bls.n	80010b2 <__udivmoddi4+0x156>
 80010a0:	eb1c 0404 	adds.w	r4, ip, r4
 80010a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80010a8:	d202      	bcs.n	80010b0 <__udivmoddi4+0x154>
 80010aa:	45a6      	cmp	lr, r4
 80010ac:	f200 80b6 	bhi.w	800121c <__udivmoddi4+0x2c0>
 80010b0:	4628      	mov	r0, r5
 80010b2:	eba4 040e 	sub.w	r4, r4, lr
 80010b6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010ba:	e79e      	b.n	8000ffa <__udivmoddi4+0x9e>
 80010bc:	f1c1 0720 	rsb	r7, r1, #32
 80010c0:	408b      	lsls	r3, r1
 80010c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80010c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ca:	fa25 fa07 	lsr.w	sl, r5, r7
 80010ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010d2:	fbba f8f9 	udiv	r8, sl, r9
 80010d6:	fa20 f307 	lsr.w	r3, r0, r7
 80010da:	fb09 aa18 	mls	sl, r9, r8, sl
 80010de:	408d      	lsls	r5, r1
 80010e0:	fa1f fe8c 	uxth.w	lr, ip
 80010e4:	431d      	orrs	r5, r3
 80010e6:	fa00 f301 	lsl.w	r3, r0, r1
 80010ea:	fb08 f00e 	mul.w	r0, r8, lr
 80010ee:	0c2c      	lsrs	r4, r5, #16
 80010f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010f4:	42a0      	cmp	r0, r4
 80010f6:	fa02 f201 	lsl.w	r2, r2, r1
 80010fa:	d90b      	bls.n	8001114 <__udivmoddi4+0x1b8>
 80010fc:	eb1c 0404 	adds.w	r4, ip, r4
 8001100:	f108 3aff 	add.w	sl, r8, #4294967295
 8001104:	f080 8088 	bcs.w	8001218 <__udivmoddi4+0x2bc>
 8001108:	42a0      	cmp	r0, r4
 800110a:	f240 8085 	bls.w	8001218 <__udivmoddi4+0x2bc>
 800110e:	f1a8 0802 	sub.w	r8, r8, #2
 8001112:	4464      	add	r4, ip
 8001114:	1a24      	subs	r4, r4, r0
 8001116:	fbb4 f0f9 	udiv	r0, r4, r9
 800111a:	fb09 4410 	mls	r4, r9, r0, r4
 800111e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001122:	b2ad      	uxth	r5, r5
 8001124:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001128:	45a6      	cmp	lr, r4
 800112a:	d908      	bls.n	800113e <__udivmoddi4+0x1e2>
 800112c:	eb1c 0404 	adds.w	r4, ip, r4
 8001130:	f100 35ff 	add.w	r5, r0, #4294967295
 8001134:	d26c      	bcs.n	8001210 <__udivmoddi4+0x2b4>
 8001136:	45a6      	cmp	lr, r4
 8001138:	d96a      	bls.n	8001210 <__udivmoddi4+0x2b4>
 800113a:	3802      	subs	r0, #2
 800113c:	4464      	add	r4, ip
 800113e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001142:	fba0 9502 	umull	r9, r5, r0, r2
 8001146:	eba4 040e 	sub.w	r4, r4, lr
 800114a:	42ac      	cmp	r4, r5
 800114c:	46c8      	mov	r8, r9
 800114e:	46ae      	mov	lr, r5
 8001150:	d356      	bcc.n	8001200 <__udivmoddi4+0x2a4>
 8001152:	d053      	beq.n	80011fc <__udivmoddi4+0x2a0>
 8001154:	2e00      	cmp	r6, #0
 8001156:	d069      	beq.n	800122c <__udivmoddi4+0x2d0>
 8001158:	ebb3 0208 	subs.w	r2, r3, r8
 800115c:	eb64 040e 	sbc.w	r4, r4, lr
 8001160:	fa22 f301 	lsr.w	r3, r2, r1
 8001164:	fa04 f707 	lsl.w	r7, r4, r7
 8001168:	431f      	orrs	r7, r3
 800116a:	40cc      	lsrs	r4, r1
 800116c:	e9c6 7400 	strd	r7, r4, [r6]
 8001170:	2100      	movs	r1, #0
 8001172:	e747      	b.n	8001004 <__udivmoddi4+0xa8>
 8001174:	fa0c fc02 	lsl.w	ip, ip, r2
 8001178:	f1c2 0120 	rsb	r1, r2, #32
 800117c:	fa25 f301 	lsr.w	r3, r5, r1
 8001180:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001184:	fa20 f101 	lsr.w	r1, r0, r1
 8001188:	4095      	lsls	r5, r2
 800118a:	430d      	orrs	r5, r1
 800118c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001190:	fb07 3311 	mls	r3, r7, r1, r3
 8001194:	fa1f fe8c 	uxth.w	lr, ip
 8001198:	0c28      	lsrs	r0, r5, #16
 800119a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800119e:	fb01 f30e 	mul.w	r3, r1, lr
 80011a2:	4283      	cmp	r3, r0
 80011a4:	fa04 f402 	lsl.w	r4, r4, r2
 80011a8:	d908      	bls.n	80011bc <__udivmoddi4+0x260>
 80011aa:	eb1c 0000 	adds.w	r0, ip, r0
 80011ae:	f101 38ff 	add.w	r8, r1, #4294967295
 80011b2:	d22f      	bcs.n	8001214 <__udivmoddi4+0x2b8>
 80011b4:	4283      	cmp	r3, r0
 80011b6:	d92d      	bls.n	8001214 <__udivmoddi4+0x2b8>
 80011b8:	3902      	subs	r1, #2
 80011ba:	4460      	add	r0, ip
 80011bc:	1ac0      	subs	r0, r0, r3
 80011be:	fbb0 f3f7 	udiv	r3, r0, r7
 80011c2:	fb07 0013 	mls	r0, r7, r3, r0
 80011c6:	b2ad      	uxth	r5, r5
 80011c8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011cc:	fb03 f00e 	mul.w	r0, r3, lr
 80011d0:	42a8      	cmp	r0, r5
 80011d2:	d908      	bls.n	80011e6 <__udivmoddi4+0x28a>
 80011d4:	eb1c 0505 	adds.w	r5, ip, r5
 80011d8:	f103 38ff 	add.w	r8, r3, #4294967295
 80011dc:	d216      	bcs.n	800120c <__udivmoddi4+0x2b0>
 80011de:	42a8      	cmp	r0, r5
 80011e0:	d914      	bls.n	800120c <__udivmoddi4+0x2b0>
 80011e2:	3b02      	subs	r3, #2
 80011e4:	4465      	add	r5, ip
 80011e6:	1a28      	subs	r0, r5, r0
 80011e8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80011ec:	e738      	b.n	8001060 <__udivmoddi4+0x104>
 80011ee:	4631      	mov	r1, r6
 80011f0:	4630      	mov	r0, r6
 80011f2:	e707      	b.n	8001004 <__udivmoddi4+0xa8>
 80011f4:	462f      	mov	r7, r5
 80011f6:	e6e4      	b.n	8000fc2 <__udivmoddi4+0x66>
 80011f8:	4618      	mov	r0, r3
 80011fa:	e6f9      	b.n	8000ff0 <__udivmoddi4+0x94>
 80011fc:	454b      	cmp	r3, r9
 80011fe:	d2a9      	bcs.n	8001154 <__udivmoddi4+0x1f8>
 8001200:	ebb9 0802 	subs.w	r8, r9, r2
 8001204:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001208:	3801      	subs	r0, #1
 800120a:	e7a3      	b.n	8001154 <__udivmoddi4+0x1f8>
 800120c:	4643      	mov	r3, r8
 800120e:	e7ea      	b.n	80011e6 <__udivmoddi4+0x28a>
 8001210:	4628      	mov	r0, r5
 8001212:	e794      	b.n	800113e <__udivmoddi4+0x1e2>
 8001214:	4641      	mov	r1, r8
 8001216:	e7d1      	b.n	80011bc <__udivmoddi4+0x260>
 8001218:	46d0      	mov	r8, sl
 800121a:	e77b      	b.n	8001114 <__udivmoddi4+0x1b8>
 800121c:	4464      	add	r4, ip
 800121e:	3802      	subs	r0, #2
 8001220:	e747      	b.n	80010b2 <__udivmoddi4+0x156>
 8001222:	3b02      	subs	r3, #2
 8001224:	4465      	add	r5, ip
 8001226:	e72f      	b.n	8001088 <__udivmoddi4+0x12c>
 8001228:	4608      	mov	r0, r1
 800122a:	e706      	b.n	800103a <__udivmoddi4+0xde>
 800122c:	4631      	mov	r1, r6
 800122e:	e6e9      	b.n	8001004 <__udivmoddi4+0xa8>

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <turn>:

	resetPID();

}

void turn(int8_t n) {	// Make n 90 degree turns (no acceleration)
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]

	setState(TURNING);
 800123e:	2002      	movs	r0, #2
 8001240:	f000 fe7e 	bl	8001f40 <setState>

	setPIDGoalD(0);
 8001244:	2000      	movs	r0, #0
 8001246:	f000 fe53 	bl	8001ef0 <setPIDGoalD>
	setPIDGoalA(turn_counts*n);
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	b29b      	uxth	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	00d2      	lsls	r2, r2, #3
 8001254:	1ad2      	subs	r2, r2, r3
 8001256:	00d2      	lsls	r2, r2, #3
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	b29b      	uxth	r3, r3
 800125e:	b21b      	sxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fe59 	bl	8001f18 <setPIDGoalA>

	while(!PIDdone())
 8001266:	bf00      	nop
 8001268:	f001 fd08 	bl	8002c7c <PIDdone>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0fa      	beq.n	8001268 <turn+0x34>
	{

	}

	resetPID();
 8001272:	f001 fd15 	bl	8002ca0 <resetPID>

}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <explore>:

	resetPID();

}

void explore() {	// Move forward at a constant speed until a turn is needed
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0

	setState(EXPLORING);
 8001286:	2003      	movs	r0, #3
 8001288:	f000 fe5a 	bl	8001f40 <setState>

	setPIDGoalA(0);
 800128c:	2000      	movs	r0, #0
 800128e:	f000 fe43 	bl	8001f18 <setPIDGoalA>

	resetEncoders();
 8001292:	f000 f8d3 	bl	800143c <resetEncoders>

	int16_t explore_done = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	80fb      	strh	r3, [r7, #6]

	while(!explore_done)
 800129a:	bf00      	nop
 800129c:	e06b      	b.n	8001376 <explore+0xf6>
	{
		setIRAngle(readIR(IR_LEFT), readIR(IR_RIGHT));
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 f8dc 	bl	800145c <readIR>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fc02 	bl	8000ab0 <__aeabi_ui2f>
 80012ac:	4604      	mov	r4, r0
 80012ae:	2002      	movs	r0, #2
 80012b0:	f000 f8d4 	bl	800145c <readIR>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fbfa 	bl	8000ab0 <__aeabi_ui2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	4619      	mov	r1, r3
 80012c0:	4620      	mov	r0, r4
 80012c2:	f000 fe81 	bl	8001fc8 <setIRAngle>

		int16_t distance = (getLeftEncoderCounts() + getRightEncoderCounts())/2;
 80012c6:	f000 f8ab 	bl	8001420 <getLeftEncoderCounts>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461c      	mov	r4, r3
 80012ce:	f000 f899 	bl	8001404 <getRightEncoderCounts>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4423      	add	r3, r4
 80012d6:	0fda      	lsrs	r2, r3, #31
 80012d8:	4413      	add	r3, r2
 80012da:	105b      	asrs	r3, r3, #1
 80012dc:	80bb      	strh	r3, [r7, #4]

		if (distance % move_counts < 15 || distance % move_counts > move_counts - 15)
 80012de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012e2:	4a2a      	ldr	r2, [pc, #168]	; (800138c <explore+0x10c>)
 80012e4:	fb82 1203 	smull	r1, r2, r2, r3
 80012e8:	441a      	add	r2, r3
 80012ea:	1251      	asrs	r1, r2, #9
 80012ec:	17da      	asrs	r2, r3, #31
 80012ee:	1a8a      	subs	r2, r1, r2
 80012f0:	f44f 7119 	mov.w	r1, #612	; 0x264
 80012f4:	fb01 f202 	mul.w	r2, r1, r2
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	2b0e      	cmp	r3, #14
 80012fe:	dd12      	ble.n	8001326 <explore+0xa6>
 8001300:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <explore+0x10c>)
 8001306:	fb82 1203 	smull	r1, r2, r2, r3
 800130a:	441a      	add	r2, r3
 800130c:	1251      	asrs	r1, r2, #9
 800130e:	17da      	asrs	r2, r3, #31
 8001310:	1a8a      	subs	r2, r1, r2
 8001312:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001316:	fb01 f202 	mul.w	r2, r1, r2
 800131a:	1a9b      	subs	r3, r3, r2
 800131c:	b21b      	sxth	r3, r3
 800131e:	f240 2255 	movw	r2, #597	; 0x255
 8001322:	4293      	cmp	r3, r2
 8001324:	dd26      	ble.n	8001374 <explore+0xf4>
			// If distance is within 15 ticks of the cell distance
		{
			Action nextMove = solver(DEAD);
 8001326:	2000      	movs	r0, #0
 8001328:	f002 f89e 	bl	8003468 <solver>
 800132c:	4603      	mov	r3, r0
 800132e:	70fb      	strb	r3, [r7, #3]
			switch(nextMove)
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d81f      	bhi.n	8001376 <explore+0xf6>
 8001336:	a201      	add	r2, pc, #4	; (adr r2, 800133c <explore+0xbc>)
 8001338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133c:	0800134d 	.word	0x0800134d
 8001340:	08001377 	.word	0x08001377
 8001344:	0800135f 	.word	0x0800135f
 8001348:	0800136f 	.word	0x0800136f
			{
				case FORWARD:
					break;
				case LEFT:
//					moveEncoderCount(move_counts/2);
					resetPID();
 800134c:	f001 fca8 	bl	8002ca0 <resetPID>
					turn(-1);
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff6e 	bl	8001234 <turn>
					explore_done = 1;
 8001358:	2301      	movs	r3, #1
 800135a:	80fb      	strh	r3, [r7, #6]
					break;
 800135c:	e00b      	b.n	8001376 <explore+0xf6>
				case RIGHT:
//					moveEncoderCount(move_counts/2);
					resetPID();
 800135e:	f001 fc9f 	bl	8002ca0 <resetPID>
					turn(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f7ff ff66 	bl	8001234 <turn>
					explore_done = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	80fb      	strh	r3, [r7, #6]
					break;
 800136c:	e003      	b.n	8001376 <explore+0xf6>
				case IDLE:
					explore_done = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	80fb      	strh	r3, [r7, #6]
					break;
 8001372:	e000      	b.n	8001376 <explore+0xf6>
			}
		}
 8001374:	bf00      	nop
	while(!explore_done)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d08f      	beq.n	800129e <explore+0x1e>
	}

	resetPID();
 800137e:	f001 fc8f 	bl	8002ca0 <resetPID>

}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}
 800138a:	bf00      	nop
 800138c:	d62b80d7 	.word	0xd62b80d7

08001390 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <Delay_Init+0x38>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10e      	bne.n	80013be <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <Delay_Init+0x38>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <Delay_Init+0x38>)
 80013a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013aa:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <Delay_Init+0x3c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <Delay_Init+0x3c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <Delay_Init+0x3c>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6013      	str	r3, [r2, #0]
    }
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000edf0 	.word	0xe000edf0
 80013cc:	e0001000 	.word	0xe0001000

080013d0 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <delayMicroseconds+0x30>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80013e4:	bf00      	nop
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <delayMicroseconds+0x30>)
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f8      	bhi.n	80013e6 <delayMicroseconds+0x16>
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	e0001000 	.word	0xe0001000

08001404 <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <getRightEncoderCounts+0x18>)
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	b29b      	uxth	r3, r3
 800140e:	425b      	negs	r3, r3
 8001410:	b29b      	uxth	r3, r3
 8001412:	b21b      	sxth	r3, r3
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40000400 	.word	0x40000400

08001420 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <getLeftEncoderCounts+0x18>)
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	b29b      	uxth	r3, r3
 800142a:	425b      	negs	r3, r3
 800142c:	b29b      	uxth	r3, r3
 800142e:	b21b      	sxth	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40010400 	.word	0x40010400

0800143c <resetEncoders>:

void resetEncoders() {
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <resetEncoders+0x18>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = (int16_t) 0;
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <resetEncoders+0x1c>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	40000400 	.word	0x40000400
 8001458:	40010400 	.word	0x40010400

0800145c <readIR>:
uint8_t complete = 0;

uint32_t usDelay = 100;

uint16_t readIR(IR ir)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue;

	switch(ir)
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b03      	cmp	r3, #3
 800146a:	d869      	bhi.n	8001540 <readIR+0xe4>
 800146c:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <readIR+0x18>)
 800146e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001472:	bf00      	nop
 8001474:	08001485 	.word	0x08001485
 8001478:	080014b3 	.word	0x080014b3
 800147c:	080014e1 	.word	0x080014e1
 8001480:	0800150f 	.word	0x0800150f
	    {
	        case IR_FORWARD_LEFT:
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	4830      	ldr	r0, [pc, #192]	; (800154c <readIR+0xf0>)
 800148a:	f003 ff7e 	bl	800538a <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <readIR+0xf4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff9c 	bl	80013d0 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f85c 	bl	8001558 <analogRead>
 80014a0:	4603      	mov	r3, r0
 80014a2:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	4828      	ldr	r0, [pc, #160]	; (800154c <readIR+0xf0>)
 80014aa:	f003 ff6e 	bl	800538a <HAL_GPIO_WritePin>
	        	return readValue;
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	e047      	b.n	8001542 <readIR+0xe6>
	            break;
	        case IR_LEFT:
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	2110      	movs	r1, #16
 80014b6:	4825      	ldr	r0, [pc, #148]	; (800154c <readIR+0xf0>)
 80014b8:	f003 ff67 	bl	800538a <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <readIR+0xf4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff85 	bl	80013d0 <delayMicroseconds>
	        	readValue = analogRead(ir);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f845 	bl	8001558 <analogRead>
 80014ce:	4603      	mov	r3, r0
 80014d0:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2110      	movs	r1, #16
 80014d6:	481d      	ldr	r0, [pc, #116]	; (800154c <readIR+0xf0>)
 80014d8:	f003 ff57 	bl	800538a <HAL_GPIO_WritePin>
	        	return readValue;
 80014dc:	89fb      	ldrh	r3, [r7, #14]
 80014de:	e030      	b.n	8001542 <readIR+0xe6>
	            break;
	        case IR_RIGHT:
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2104      	movs	r1, #4
 80014e4:	4819      	ldr	r0, [pc, #100]	; (800154c <readIR+0xf0>)
 80014e6:	f003 ff50 	bl	800538a <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <readIR+0xf4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff6e 	bl	80013d0 <delayMicroseconds>
	        	readValue = analogRead(ir);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f82e 	bl	8001558 <analogRead>
 80014fc:	4603      	mov	r3, r0
 80014fe:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2104      	movs	r1, #4
 8001504:	4811      	ldr	r0, [pc, #68]	; (800154c <readIR+0xf0>)
 8001506:	f003 ff40 	bl	800538a <HAL_GPIO_WritePin>
	        	return readValue;
 800150a:	89fb      	ldrh	r3, [r7, #14]
 800150c:	e019      	b.n	8001542 <readIR+0xe6>
	            break;
	        case IR_FORWARD_RIGHT:
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <readIR+0xf8>)
 8001516:	f003 ff38 	bl	800538a <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <readIR+0xf4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff56 	bl	80013d0 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f816 	bl	8001558 <analogRead>
 800152c:	4603      	mov	r3, r0
 800152e:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <readIR+0xf8>)
 8001538:	f003 ff27 	bl	800538a <HAL_GPIO_WritePin>
	        	return readValue;
 800153c:	89fb      	ldrh	r3, [r7, #14]
 800153e:	e000      	b.n	8001542 <readIR+0xe6>
	            break;
	        default:
	            return 0;
 8001540:	2300      	movs	r3, #0
	    }
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40020000 	.word	0x40020000
 8001550:	20000000 	.word	0x20000000
 8001554:	40020400 	.word	0x40020400

08001558 <analogRead>:
{
	return readIR(IR_FORWARD_RIGHT);
}

uint16_t analogRead(IR ir)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 8001570:	f000 fbf8 	bl	8001d64 <Get_HADC1_Ptr>
 8001574:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d817      	bhi.n	80015ac <analogRead+0x54>
 800157c:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <analogRead+0x2c>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	08001595 	.word	0x08001595
 8001588:	0800159b 	.word	0x0800159b
 800158c:	080015a1 	.word	0x080015a1
 8001590:	080015a7 	.word	0x080015a7
    {
        case IR_FORWARD_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 8001594:	2306      	movs	r3, #6
 8001596:	60fb      	str	r3, [r7, #12]
            break;
 8001598:	e00a      	b.n	80015b0 <analogRead+0x58>
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_5;
 800159a:	2305      	movs	r3, #5
 800159c:	60fb      	str	r3, [r7, #12]
            break;
 800159e:	e007      	b.n	80015b0 <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 80015a0:	230b      	movs	r3, #11
 80015a2:	60fb      	str	r3, [r7, #12]
            break;
 80015a4:	e004      	b.n	80015b0 <analogRead+0x58>
        case IR_FORWARD_RIGHT:
            sConfig.Channel = ADC_CHANNEL_10;
 80015a6:	230a      	movs	r3, #10
 80015a8:	60fb      	str	r3, [r7, #12]
            break;
 80015aa:	e001      	b.n	80015b0 <analogRead+0x58>
        default:
            return 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e032      	b.n	8001616 <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	69f8      	ldr	r0, [r7, #28]
 80015c0:	f002 fd9c 	bl	80040fc <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <analogRead+0x76>
    {
        return 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e023      	b.n	8001616 <analogRead+0xbe>
    }

    complete = 0;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <analogRead+0xc8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	4913      	ldr	r1, [pc, #76]	; (8001624 <analogRead+0xcc>)
 80015d8:	69f8      	ldr	r0, [r7, #28]
 80015da:	f002 fc4d 	bl	8003e78 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 80015de:	e000      	b.n	80015e2 <analogRead+0x8a>
    {
        continue;
 80015e0:	bf00      	nop
    while (complete == 0)
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <analogRead+0xc8>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0fa      	beq.n	80015e0 <analogRead+0x88>
    }

    uint32_t sum = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 80015f2:	e00a      	b.n	800160a <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 80015f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <analogRead+0xcc>)
 80015f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015fc:	461a      	mov	r2, r3
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	4413      	add	r3, r2
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
        ++measurement;
 8001604:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001606:	3301      	adds	r3, #1
 8001608:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 800160a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800160c:	2b7f      	cmp	r3, #127	; 0x7f
 800160e:	d9f1      	bls.n	80015f4 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	09db      	lsrs	r3, r3, #7
 8001614:	b29b      	uxth	r3, r3
}
 8001616:	4618      	mov	r0, r3
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200001a0 	.word	0x200001a0
 8001624:	200000a0 	.word	0x200000a0

08001628 <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f002 fcff 	bl	8004034 <HAL_ADC_Stop_DMA>
    complete = 1;
 8001636:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200001a0 	.word	0x200001a0

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164c:	f002 fb62 	bl	8003d14 <HAL_Init>

  /* USER CODE BEGIN Init */

  Delay_Init();
 8001650:	f7ff fe9e 	bl	8001390 <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001654:	f000 f8a0 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001658:	f000 faa0 	bl	8001b9c <MX_GPIO_Init>
  MX_DMA_Init();
 800165c:	f000 fa7e 	bl	8001b5c <MX_DMA_Init>
  MX_ADC1_Init();
 8001660:	f000 f8d6 	bl	8001810 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001664:	f000 f926 	bl	80018b4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001668:	f000 f9cc 	bl	8001a04 <MX_TIM3_Init>
  MX_TIM8_Init();
 800166c:	f000 fa1e 	bl	8001aac <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001670:	213c      	movs	r1, #60	; 0x3c
 8001672:	483c      	ldr	r0, [pc, #240]	; (8001764 <main+0x11c>)
 8001674:	f004 fc60 	bl	8005f38 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001678:	213c      	movs	r1, #60	; 0x3c
 800167a:	483b      	ldr	r0, [pc, #236]	; (8001768 <main+0x120>)
 800167c:	f004 fc5c 	bl	8005f38 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001680:	2100      	movs	r1, #0
 8001682:	483a      	ldr	r0, [pc, #232]	; (800176c <main+0x124>)
 8001684:	f004 faea 	bl	8005c5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001688:	2104      	movs	r1, #4
 800168a:	4838      	ldr	r0, [pc, #224]	; (800176c <main+0x124>)
 800168c:	f004 fae6 	bl	8005c5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001690:	2108      	movs	r1, #8
 8001692:	4836      	ldr	r0, [pc, #216]	; (800176c <main+0x124>)
 8001694:	f004 fae2 	bl	8005c5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001698:	210c      	movs	r1, #12
 800169a:	4834      	ldr	r0, [pc, #208]	; (800176c <main+0x124>)
 800169c:	f004 fade 	bl	8005c5c <HAL_TIM_PWM_Start>

  HAL_Init();
 80016a0:	f002 fb38 	bl	8003d14 <HAL_Init>

  HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016aa:	4831      	ldr	r0, [pc, #196]	; (8001770 <main+0x128>)
 80016ac:	f003 fe6d 	bl	800538a <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff fed3 	bl	800145c <readIR>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <main+0x12c>)
 80016bc:	801a      	strh	r2, [r3, #0]
	  leftIRvalue = readIR(IR_LEFT);
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff fecc 	bl	800145c <readIR>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <main+0x130>)
 80016ca:	801a      	strh	r2, [r3, #0]
	  rightIRvalue = readIR(IR_RIGHT);
 80016cc:	2002      	movs	r0, #2
 80016ce:	f7ff fec5 	bl	800145c <readIR>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <main+0x134>)
 80016d8:	801a      	strh	r2, [r3, #0]
	  forwardRightIRvalue = readIR(IR_FORWARD_RIGHT);
 80016da:	2003      	movs	r0, #3
 80016dc:	f7ff febe 	bl	800145c <readIR>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <main+0x138>)
 80016e6:	801a      	strh	r2, [r3, #0]

	  left_counts = getLeftEncoderCounts();
 80016e8:	f7ff fe9a 	bl	8001420 <getLeftEncoderCounts>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <main+0x13c>)
 80016f2:	801a      	strh	r2, [r3, #0]
	  right_counts = getRightEncoderCounts();
 80016f4:	f7ff fe86 	bl	8001404 <getRightEncoderCounts>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <main+0x140>)
 80016fe:	801a      	strh	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(LeftButton_GPIO_Port, LeftButton_Pin))
 8001700:	2101      	movs	r1, #1
 8001702:	4822      	ldr	r0, [pc, #136]	; (800178c <main+0x144>)
 8001704:	f003 fe2a 	bl	800535c <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01b      	beq.n	8001746 <main+0xfe>
	  {
		  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff fea4 	bl	800145c <readIR>
 8001714:	4603      	mov	r3, r0
 8001716:	b21c      	sxth	r4, r3
 8001718:	2003      	movs	r0, #3
 800171a:	f7ff fe9f 	bl	800145c <readIR>
 800171e:	4603      	mov	r3, r0
 8001720:	b21d      	sxth	r5, r3
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff fe9a 	bl	800145c <readIR>
 8001728:	4603      	mov	r3, r0
 800172a:	b21e      	sxth	r6, r3
 800172c:	2002      	movs	r0, #2
 800172e:	f7ff fe95 	bl	800145c <readIR>
 8001732:	4603      	mov	r3, r0
 8001734:	b21b      	sxth	r3, r3
 8001736:	4632      	mov	r2, r6
 8001738:	4629      	mov	r1, r5
 800173a:	4620      	mov	r0, r4
 800173c:	f000 fc10 	bl	8001f60 <setIRGoals>
		  irOffset_Set = 1;
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <main+0x148>)
 8001742:	2201      	movs	r2, #1
 8001744:	801a      	strh	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(RightButton_GPIO_Port, RightButton_Pin))
 8001746:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800174a:	4809      	ldr	r0, [pc, #36]	; (8001770 <main+0x128>)
 800174c:	f003 fe06 	bl	800535c <HAL_GPIO_ReadPin>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0ac      	beq.n	80016b0 <main+0x68>
	  {
		  explore();
 8001756:	f7ff fd93 	bl	8001280 <explore>
//		  setLeftVelocity(0.5);
//		  setRightVelocity(0.5);


		  start_pressed = 1;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <main+0x14c>)
 800175c:	2201      	movs	r2, #1
 800175e:	801a      	strh	r2, [r3, #0]
	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 8001760:	e7a6      	b.n	80016b0 <main+0x68>
 8001762:	bf00      	nop
 8001764:	20000294 	.word	0x20000294
 8001768:	200002dc 	.word	0x200002dc
 800176c:	2000024c 	.word	0x2000024c
 8001770:	40020800 	.word	0x40020800
 8001774:	2000032a 	.word	0x2000032a
 8001778:	2000032c 	.word	0x2000032c
 800177c:	2000032e 	.word	0x2000032e
 8001780:	20000330 	.word	0x20000330
 8001784:	20000326 	.word	0x20000326
 8001788:	20000328 	.word	0x20000328
 800178c:	40020400 	.word	0x40020400
 8001790:	20000332 	.word	0x20000332
 8001794:	20000324 	.word	0x20000324

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b092      	sub	sp, #72	; 0x48
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 0318 	add.w	r3, r7, #24
 80017a2:	2230      	movs	r2, #48	; 0x30
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 f886 	bl	80068b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017be:	2301      	movs	r3, #1
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c2:	2310      	movs	r3, #16
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ca:	f107 0318 	add.w	r3, r7, #24
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 fdf4 	bl	80053bc <HAL_RCC_OscConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80017da:	f000 facd 	bl	8001d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017de:	230f      	movs	r3, #15
 80017e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f82e 	bl	8005858 <HAL_RCC_ClockConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001802:	f000 fab9 	bl	8001d78 <Error_Handler>
  }
}
 8001806:	bf00      	nop
 8001808:	3748      	adds	r7, #72	; 0x48
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001816:	463b      	mov	r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <MX_ADC1_Init+0x98>)
 8001824:	4a21      	ldr	r2, [pc, #132]	; (80018ac <MX_ADC1_Init+0x9c>)
 8001826:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <MX_ADC1_Init+0x98>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <MX_ADC1_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <MX_ADC1_Init+0x98>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_ADC1_Init+0x98>)
 800183c:	2201      	movs	r2, #1
 800183e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <MX_ADC1_Init+0x98>)
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_ADC1_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_ADC1_Init+0x98>)
 8001850:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <MX_ADC1_Init+0xa0>)
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_ADC1_Init+0x98>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_ADC1_Init+0x98>)
 800185c:	2201      	movs	r2, #1
 800185e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_ADC1_Init+0x98>)
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_ADC1_Init+0x98>)
 800186a:	2201      	movs	r2, #1
 800186c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800186e:	480e      	ldr	r0, [pc, #56]	; (80018a8 <MX_ADC1_Init+0x98>)
 8001870:	f002 fabe 	bl	8003df0 <HAL_ADC_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800187a:	f000 fa7d 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800187e:	2305      	movs	r3, #5
 8001880:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001882:	2301      	movs	r3, #1
 8001884:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800188a:	463b      	mov	r3, r7
 800188c:	4619      	mov	r1, r3
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <MX_ADC1_Init+0x98>)
 8001890:	f002 fc34 	bl	80040fc <HAL_ADC_ConfigChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800189a:	f000 fa6d 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200001a4 	.word	0x200001a4
 80018ac:	40012000 	.word	0x40012000
 80018b0:	0f000001 	.word	0x0f000001

080018b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b092      	sub	sp, #72	; 0x48
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	615a      	str	r2, [r3, #20]
 80018d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2220      	movs	r2, #32
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 ffea 	bl	80068b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018e4:	4b45      	ldr	r3, [pc, #276]	; (80019fc <MX_TIM1_Init+0x148>)
 80018e6:	4a46      	ldr	r2, [pc, #280]	; (8001a00 <MX_TIM1_Init+0x14c>)
 80018e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018ea:	4b44      	ldr	r3, [pc, #272]	; (80019fc <MX_TIM1_Init+0x148>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <MX_TIM1_Init+0x148>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <MX_TIM1_Init+0x148>)
 80018f8:	f640 427f 	movw	r2, #3199	; 0xc7f
 80018fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fe:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <MX_TIM1_Init+0x148>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001904:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <MX_TIM1_Init+0x148>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <MX_TIM1_Init+0x148>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001910:	483a      	ldr	r0, [pc, #232]	; (80019fc <MX_TIM1_Init+0x148>)
 8001912:	f004 f953 	bl	8005bbc <HAL_TIM_PWM_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800191c:	f000 fa2c 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001928:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800192c:	4619      	mov	r1, r3
 800192e:	4833      	ldr	r0, [pc, #204]	; (80019fc <MX_TIM1_Init+0x148>)
 8001930:	f004 febc 	bl	80066ac <HAL_TIMEx_MasterConfigSynchronization>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800193a:	f000 fa1d 	bl	8001d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800193e:	2360      	movs	r3, #96	; 0x60
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800194a:	2300      	movs	r3, #0
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	4826      	ldr	r0, [pc, #152]	; (80019fc <MX_TIM1_Init+0x148>)
 8001964:	f004 fb76 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800196e:	f000 fa03 	bl	8001d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	2204      	movs	r2, #4
 8001978:	4619      	mov	r1, r3
 800197a:	4820      	ldr	r0, [pc, #128]	; (80019fc <MX_TIM1_Init+0x148>)
 800197c:	f004 fb6a 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001986:	f000 f9f7 	bl	8001d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	2208      	movs	r2, #8
 8001990:	4619      	mov	r1, r3
 8001992:	481a      	ldr	r0, [pc, #104]	; (80019fc <MX_TIM1_Init+0x148>)
 8001994:	f004 fb5e 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800199e:	f000 f9eb 	bl	8001d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a6:	220c      	movs	r2, #12
 80019a8:	4619      	mov	r1, r3
 80019aa:	4814      	ldr	r0, [pc, #80]	; (80019fc <MX_TIM1_Init+0x148>)
 80019ac:	f004 fb52 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80019b6:	f000 f9df 	bl	8001d78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4619      	mov	r1, r3
 80019dc:	4807      	ldr	r0, [pc, #28]	; (80019fc <MX_TIM1_Init+0x148>)
 80019de:	f004 fedf 	bl	80067a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80019e8:	f000 f9c6 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <MX_TIM1_Init+0x148>)
 80019ee:	f002 f80f 	bl	8003a10 <HAL_TIM_MspPostInit>

}
 80019f2:	bf00      	nop
 80019f4:	3748      	adds	r7, #72	; 0x48
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000024c 	.word	0x2000024c
 8001a00:	40010000 	.word	0x40010000

08001a04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	; 0x30
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	2224      	movs	r2, #36	; 0x24
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f004 ff50 	bl	80068b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a20:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <MX_TIM3_Init+0xa0>)
 8001a22:	4a21      	ldr	r2, [pc, #132]	; (8001aa8 <MX_TIM3_Init+0xa4>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <MX_TIM3_Init+0xa0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_TIM3_Init+0xa0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <MX_TIM3_Init+0xa0>)
 8001a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_TIM3_Init+0xa0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_TIM3_Init+0xa0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a46:	2303      	movs	r3, #3
 8001a48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <MX_TIM3_Init+0xa0>)
 8001a72:	f004 f9bb 	bl	8005dec <HAL_TIM_Encoder_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a7c:	f000 f97c 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM3_Init+0xa0>)
 8001a8e:	f004 fe0d 	bl	80066ac <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a98:	f000 f96e 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3730      	adds	r7, #48	; 0x30
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000294 	.word	0x20000294
 8001aa8:	40000400 	.word	0x40000400

08001aac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	2224      	movs	r2, #36	; 0x24
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 fefc 	bl	80068b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ac8:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <MX_TIM8_Init+0xa8>)
 8001aca:	4a23      	ldr	r2, [pc, #140]	; (8001b58 <MX_TIM8_Init+0xac>)
 8001acc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <MX_TIM8_Init+0xa8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <MX_TIM8_Init+0xa8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <MX_TIM8_Init+0xa8>)
 8001adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MX_TIM8_Init+0xa8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_TIM8_Init+0xa8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <MX_TIM8_Init+0xa8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001af4:	2303      	movs	r3, #3
 8001af6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001afc:	2301      	movs	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480d      	ldr	r0, [pc, #52]	; (8001b54 <MX_TIM8_Init+0xa8>)
 8001b20:	f004 f964 	bl	8005dec <HAL_TIM_Encoder_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001b2a:	f000 f925 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4806      	ldr	r0, [pc, #24]	; (8001b54 <MX_TIM8_Init+0xa8>)
 8001b3c:	f004 fdb6 	bl	80066ac <HAL_TIMEx_MasterConfigSynchronization>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001b46:	f000 f917 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	3730      	adds	r7, #48	; 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200002dc 	.word	0x200002dc
 8001b58:	40010400 	.word	0x40010400

08001b5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_DMA_Init+0x3c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <MX_DMA_Init+0x3c>)
 8001b6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_DMA_Init+0x3c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	2038      	movs	r0, #56	; 0x38
 8001b84:	f002 fe39 	bl	80047fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b88:	2038      	movs	r0, #56	; 0x38
 8001b8a:	f002 fe52 	bl	8004832 <HAL_NVIC_EnableIRQ>

}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800

08001b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a65      	ldr	r2, [pc, #404]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b5f      	ldr	r3, [pc, #380]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a5e      	ldr	r2, [pc, #376]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a57      	ldr	r2, [pc, #348]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b55      	ldr	r3, [pc, #340]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a50      	ldr	r2, [pc, #320]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <MX_GPIO_Init+0x1b4>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_LED_Pin|Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001c28:	484a      	ldr	r0, [pc, #296]	; (8001d54 <MX_GPIO_Init+0x1b8>)
 8001c2a:	f003 fbae 	bl	800538a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2194      	movs	r1, #148	; 0x94
 8001c32:	4849      	ldr	r0, [pc, #292]	; (8001d58 <MX_GPIO_Init+0x1bc>)
 8001c34:	f003 fba9 	bl	800538a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c3e:	4847      	ldr	r0, [pc, #284]	; (8001d5c <MX_GPIO_Init+0x1c0>)
 8001c40:	f003 fba3 	bl	800538a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_LED_Pin Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|Y_LED_Pin|G_LED_Pin;
 8001c44:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	483d      	ldr	r0, [pc, #244]	; (8001d54 <MX_GPIO_Init+0x1b8>)
 8001c5e:	f003 f9df 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 8001c62:	2394      	movs	r3, #148	; 0x94
 8001c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	4837      	ldr	r0, [pc, #220]	; (8001d58 <MX_GPIO_Init+0x1bc>)
 8001c7a:	f003 f9d1 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	482f      	ldr	r0, [pc, #188]	; (8001d58 <MX_GPIO_Init+0x1bc>)
 8001c9a:	f003 f9c1 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftButton_Pin Switch3_Pin */
  GPIO_InitStruct.Pin = LeftButton_Pin|Switch3_Pin;
 8001c9e:	2309      	movs	r3, #9
 8001ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	482a      	ldr	r0, [pc, #168]	; (8001d5c <MX_GPIO_Init+0x1c0>)
 8001cb2:	f003 f9b5 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4822      	ldr	r0, [pc, #136]	; (8001d5c <MX_GPIO_Init+0x1c0>)
 8001cd4:	f003 f9a4 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightButton_Pin Switch1_Pin */
  GPIO_InitStruct.Pin = RightButton_Pin|Switch1_Pin;
 8001cd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4819      	ldr	r0, [pc, #100]	; (8001d54 <MX_GPIO_Init+0x1b8>)
 8001cee:	f003 f997 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4816      	ldr	r0, [pc, #88]	; (8001d60 <MX_GPIO_Init+0x1c4>)
 8001d06:	f003 f98b 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0e:	2312      	movs	r3, #18
 8001d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	480d      	ldr	r0, [pc, #52]	; (8001d5c <MX_GPIO_Init+0x1c0>)
 8001d26:	f003 f97b 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8001d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	4806      	ldr	r0, [pc, #24]	; (8001d5c <MX_GPIO_Init+0x1c0>)
 8001d44:	f003 f96c 	bl	8005020 <HAL_GPIO_Init>

}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020c00 	.word	0x40020c00

08001d64 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */

ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
	return &hadc1;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <Get_HADC1_Ptr+0x10>)
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	200001a4 	.word	0x200001a4

08001d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d7c:	b672      	cpsid	i
}
 8001d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <Error_Handler+0x8>
 8001d82:	0000      	movs	r0, r0
 8001d84:	0000      	movs	r0, r0
	...

08001d88 <limitPWM>:
#include "pid.h"

extern float velocity_left;
extern float velocity_right;

float limitPWM(float pwm) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7fe fca7 	bl	80006e4 <__aeabi_f2d>
 8001d96:	a30e      	add	r3, pc, #56	; (adr r3, 8001dd0 <limitPWM+0x48>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fd78 	bl	8000890 <__aeabi_dcmpgt>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <limitPWM+0x22>
		return PWM_MAX;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <limitPWM+0x58>)
 8001da8:	e00d      	b.n	8001dc6 <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe fc9a 	bl	80006e4 <__aeabi_f2d>
 8001db0:	a309      	add	r3, pc, #36	; (adr r3, 8001dd8 <limitPWM+0x50>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fd4d 	bl	8000854 <__aeabi_dcmplt>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <limitPWM+0x3c>
		return -PWM_MAX;
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <limitPWM+0x5c>)
 8001dc2:	e000      	b.n	8001dc6 <limitPWM+0x3e>
	else
		return pwm;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	9999999a 	.word	0x9999999a
 8001dd4:	3fe99999 	.word	0x3fe99999
 8001dd8:	9999999a 	.word	0x9999999a
 8001ddc:	bfe99999 	.word	0xbfe99999
 8001de0:	3f4ccccd 	.word	0x3f4ccccd
 8001de4:	bf4ccccd 	.word	0xbf4ccccd

08001de8 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8001df0:	f04f 0100 	mov.w	r1, #0
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff f865 	bl	8000ec4 <__aeabi_fcmpge>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <setMotorLPWM+0x70>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffbe 	bl	8001d88 <limitPWM>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4913      	ldr	r1, [pc, #76]	; (8001e5c <setMotorLPWM+0x74>)
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fea5 	bl	8000b60 <__aeabi_fmul>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4c0f      	ldr	r4, [pc, #60]	; (8001e58 <setMotorLPWM+0x70>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f866 	bl	8000eec <__aeabi_f2uiz>
 8001e20:	4603      	mov	r3, r0
 8001e22:	63a3      	str	r3, [r4, #56]	; 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 8001e24:	e013      	b.n	8001e4e <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <setMotorLPWM+0x70>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ffab 	bl	8001d88 <limitPWM>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4909      	ldr	r1, [pc, #36]	; (8001e5c <setMotorLPWM+0x74>)
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fe92 	bl	8000b60 <__aeabi_fmul>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e42:	4c05      	ldr	r4, [pc, #20]	; (8001e58 <setMotorLPWM+0x70>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f851 	bl	8000eec <__aeabi_f2uiz>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	4547f000 	.word	0x4547f000

08001e60 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff f829 	bl	8000ec4 <__aeabi_fcmpge>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d012      	beq.n	8001e9e <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <setMotorRPWM+0x70>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff82 	bl	8001d88 <limitPWM>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4913      	ldr	r1, [pc, #76]	; (8001ed4 <setMotorRPWM+0x74>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fe69 	bl	8000b60 <__aeabi_fmul>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4c0f      	ldr	r4, [pc, #60]	; (8001ed0 <setMotorRPWM+0x70>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f82a 	bl	8000eec <__aeabi_f2uiz>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	63e3      	str	r3, [r4, #60]	; 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8001e9c:	e013      	b.n	8001ec6 <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <setMotorRPWM+0x70>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff6f 	bl	8001d88 <limitPWM>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4909      	ldr	r1, [pc, #36]	; (8001ed4 <setMotorRPWM+0x74>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fe56 	bl	8000b60 <__aeabi_fmul>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001eba:	4c05      	ldr	r4, [pc, #20]	; (8001ed0 <setMotorRPWM+0x70>)
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f815 	bl	8000eec <__aeabi_f2uiz>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd90      	pop	{r4, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	4547f000 	.word	0x4547f000

08001ed8 <resetMotors>:

void resetMotors() {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 8001edc:	f04f 0000 	mov.w	r0, #0
 8001ee0:	f7ff ff82 	bl	8001de8 <setMotorLPWM>
	setMotorRPWM(0);
 8001ee4:	f04f 0000 	mov.w	r0, #0
 8001ee8:	f7ff ffba 	bl	8001e60 <setMotorRPWM>
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <setPIDGoalD>:
STATE state = REST;
float left_PWM_value = 0;
float right_PWM_value = 0;
int goal_reached_timer = 0;

void setPIDGoalD(int16_t distance) { goal_distance = distance; }
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
 8001efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fdda 	bl	8000ab8 <__aeabi_i2f>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4a03      	ldr	r2, [pc, #12]	; (8001f14 <setPIDGoalD+0x24>)
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000033c 	.word	0x2000033c

08001f18 <setPIDGoalA>:
void setPIDGoalA(int16_t angle) { goal_angle = angle; }
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
 8001f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fdc6 	bl	8000ab8 <__aeabi_i2f>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <setPIDGoalA+0x24>)
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000340 	.word	0x20000340

08001f40 <setState>:
void setState(STATE curr_state) { state = curr_state; }
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <setState+0x1c>)
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	7013      	strb	r3, [r2, #0]
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000420 	.word	0x20000420

08001f60 <setIRGoals>:

void setIRGoals(int16_t frontLeftGoal, int16_t frontRightGoal, int16_t leftGoal, int16_t rightGoal) {
 8001f60:	b490      	push	{r4, r7}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4604      	mov	r4, r0
 8001f68:	4608      	mov	r0, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4623      	mov	r3, r4
 8001f70:	80fb      	strh	r3, [r7, #6]
 8001f72:	4603      	mov	r3, r0
 8001f74:	80bb      	strh	r3, [r7, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	807b      	strh	r3, [r7, #2]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = leftGoal - rightGoal;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	883b      	ldrh	r3, [r7, #0]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <setIRGoals+0x50>)
 8001f8a:	801a      	strh	r2, [r3, #0]
	goal_forward_left = frontLeftGoal;
 8001f8c:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <setIRGoals+0x54>)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	8013      	strh	r3, [r2, #0]
	goal_forward_right = frontRightGoal;
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <setIRGoals+0x58>)
 8001f94:	88bb      	ldrh	r3, [r7, #4]
 8001f96:	8013      	strh	r3, [r2, #0]
	goal_left = leftGoal;
 8001f98:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <setIRGoals+0x5c>)
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	8013      	strh	r3, [r2, #0]
	goal_right = rightGoal;
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <setIRGoals+0x60>)
 8001fa0:	883b      	ldrh	r3, [r7, #0]
 8001fa2:	8013      	strh	r3, [r2, #0]

}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc90      	pop	{r4, r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000344 	.word	0x20000344
 8001fb4:	20000334 	.word	0x20000334
 8001fb8:	20000336 	.word	0x20000336
 8001fbc:	20000338 	.word	0x20000338
 8001fc0:	2000033a 	.word	0x2000033a
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <setIRAngle>:
	setPIDGoalD(front_kPx * ((goal_forward_left - curr_forward_left + goal_forward_right - curr_forward_left)/2));

}

// TODO: CHANGE TO USE WALL CHECK FUNCTIONS
void setIRAngle(float left, float right){
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]

	if (left > 600 && right > 600 && goal_angle == 0)
 8001fd2:	4955      	ldr	r1, [pc, #340]	; (8002128 <setIRAngle+0x160>)
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7fe ff7f 	bl	8000ed8 <__aeabi_fcmpgt>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d034      	beq.n	800204a <setIRAngle+0x82>
 8001fe0:	4951      	ldr	r1, [pc, #324]	; (8002128 <setIRAngle+0x160>)
 8001fe2:	6838      	ldr	r0, [r7, #0]
 8001fe4:	f7fe ff78 	bl	8000ed8 <__aeabi_fcmpgt>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d02d      	beq.n	800204a <setIRAngle+0x82>
 8001fee:	4b4f      	ldr	r3, [pc, #316]	; (800212c <setIRAngle+0x164>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe ff46 	bl	8000e88 <__aeabi_fcmpeq>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d023      	beq.n	800204a <setIRAngle+0x82>
	{
		IRadjustment = (kPir * ((left - right) - IRAngleOffset));
 8002002:	6839      	ldr	r1, [r7, #0]
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7fe fca1 	bl	800094c <__aeabi_fsub>
 800200a:	4603      	mov	r3, r0
 800200c:	461c      	mov	r4, r3
 800200e:	4b48      	ldr	r3, [pc, #288]	; (8002130 <setIRAngle+0x168>)
 8002010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fd4f 	bl	8000ab8 <__aeabi_i2f>
 800201a:	4603      	mov	r3, r0
 800201c:	4619      	mov	r1, r3
 800201e:	4620      	mov	r0, r4
 8002020:	f7fe fc94 	bl	800094c <__aeabi_fsub>
 8002024:	4603      	mov	r3, r0
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fb5c 	bl	80006e4 <__aeabi_f2d>
 800202c:	a33a      	add	r3, pc, #232	; (adr r3, 8002118 <setIRAngle+0x150>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe f8c9 	bl	80001c8 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fc31 	bl	80008a4 <__aeabi_d2f>
 8002042:	4603      	mov	r3, r0
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <setIRAngle+0x16c>)
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e062      	b.n	8002110 <setIRAngle+0x148>
	}
	else if (left > 600 && goal_angle == 0)
 800204a:	4937      	ldr	r1, [pc, #220]	; (8002128 <setIRAngle+0x160>)
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7fe ff43 	bl	8000ed8 <__aeabi_fcmpgt>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d027      	beq.n	80020a8 <setIRAngle+0xe0>
 8002058:	4b34      	ldr	r3, [pc, #208]	; (800212c <setIRAngle+0x164>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f04f 0100 	mov.w	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe ff11 	bl	8000e88 <__aeabi_fcmpeq>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01d      	beq.n	80020a8 <setIRAngle+0xe0>
	{
		IRadjustment = (kPir2 * (left - goal_left));
 800206c:	4b32      	ldr	r3, [pc, #200]	; (8002138 <setIRAngle+0x170>)
 800206e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fd20 	bl	8000ab8 <__aeabi_i2f>
 8002078:	4603      	mov	r3, r0
 800207a:	4619      	mov	r1, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7fe fc65 	bl	800094c <__aeabi_fsub>
 8002082:	4603      	mov	r3, r0
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fb2d 	bl	80006e4 <__aeabi_f2d>
 800208a:	a325      	add	r3, pc, #148	; (adr r3, 8002120 <setIRAngle+0x158>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe f89a 	bl	80001c8 <__aeabi_dmul>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fc02 	bl	80008a4 <__aeabi_d2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <setIRAngle+0x16c>)
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e033      	b.n	8002110 <setIRAngle+0x148>
	}
	else if (right > 600 && goal_angle == 0)
 80020a8:	491f      	ldr	r1, [pc, #124]	; (8002128 <setIRAngle+0x160>)
 80020aa:	6838      	ldr	r0, [r7, #0]
 80020ac:	f7fe ff14 	bl	8000ed8 <__aeabi_fcmpgt>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d027      	beq.n	8002106 <setIRAngle+0x13e>
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <setIRAngle+0x164>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fee2 	bl	8000e88 <__aeabi_fcmpeq>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01d      	beq.n	8002106 <setIRAngle+0x13e>
	{
		IRadjustment = (kPir2 * (goal_right - right));
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <setIRAngle+0x174>)
 80020cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fcf1 	bl	8000ab8 <__aeabi_i2f>
 80020d6:	4603      	mov	r3, r0
 80020d8:	6839      	ldr	r1, [r7, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fc36 	bl	800094c <__aeabi_fsub>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fafe 	bl	80006e4 <__aeabi_f2d>
 80020e8:	a30d      	add	r3, pc, #52	; (adr r3, 8002120 <setIRAngle+0x158>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f7fe f86b 	bl	80001c8 <__aeabi_dmul>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fbd3 	bl	80008a4 <__aeabi_d2f>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <setIRAngle+0x16c>)
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e004      	b.n	8002110 <setIRAngle+0x148>
	}
	else
		IRadjustment = 0;
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <setIRAngle+0x16c>)
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bd90      	pop	{r4, r7, pc}
 8002118:	f06f6944 	.word	0xf06f6944
 800211c:	3f94c985 	.word	0x3f94c985
 8002120:	9930be0e 	.word	0x9930be0e
 8002124:	3f85182a 	.word	0x3f85182a
 8002128:	44160000 	.word	0x44160000
 800212c:	20000340 	.word	0x20000340
 8002130:	20000344 	.word	0x20000344
 8002134:	20000414 	.word	0x20000414
 8002138:	20000338 	.word	0x20000338
 800213c:	2000033a 	.word	0x2000033a

08002140 <accelerateLeftPWM>:

float accelerateLeftPWM() {
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0

	float derivative = left_distance - old_left_distance; // ticks per ms
 8002146:	4b36      	ldr	r3, [pc, #216]	; (8002220 <accelerateLeftPWM+0xe0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a36      	ldr	r2, [pc, #216]	; (8002224 <accelerateLeftPWM+0xe4>)
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fbfb 	bl	800094c <__aeabi_fsub>
 8002156:	4603      	mov	r3, r0
 8002158:	607b      	str	r3, [r7, #4]

	test1 = derivative;
 800215a:	4a33      	ldr	r2, [pc, #204]	; (8002228 <accelerateLeftPWM+0xe8>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6013      	str	r3, [r2, #0]
	if (derivative < velocity_left * 34.0)
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7fe fabf 	bl	80006e4 <__aeabi_f2d>
 8002166:	4604      	mov	r4, r0
 8002168:	460d      	mov	r5, r1
 800216a:	4b30      	ldr	r3, [pc, #192]	; (800222c <accelerateLeftPWM+0xec>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe fab8 	bl	80006e4 <__aeabi_f2d>
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <accelerateLeftPWM+0xf0>)
 800217a:	f7fe f825 	bl	80001c8 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	f7fe fb65 	bl	8000854 <__aeabi_dcmplt>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d011      	beq.n	80021b4 <accelerateLeftPWM+0x74>
		return left_PWM_value + xacceleration;
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <accelerateLeftPWM+0xf4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe faa5 	bl	80006e4 <__aeabi_f2d>
 800219a:	a31f      	add	r3, pc, #124	; (adr r3, 8002218 <accelerateLeftPWM+0xd8>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	f7fe f942 	bl	8000428 <__adddf3>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fb7a 	bl	80008a4 <__aeabi_d2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	e02b      	b.n	800220c <accelerateLeftPWM+0xcc>

	if (derivative > velocity_left * 34.0)
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7fe fa95 	bl	80006e4 <__aeabi_f2d>
 80021ba:	4604      	mov	r4, r0
 80021bc:	460d      	mov	r5, r1
 80021be:	4b1b      	ldr	r3, [pc, #108]	; (800222c <accelerateLeftPWM+0xec>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fa8e 	bl	80006e4 <__aeabi_f2d>
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <accelerateLeftPWM+0xf0>)
 80021ce:	f7fd fffb 	bl	80001c8 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4620      	mov	r0, r4
 80021d8:	4629      	mov	r1, r5
 80021da:	f7fe fb59 	bl	8000890 <__aeabi_dcmpgt>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d011      	beq.n	8002208 <accelerateLeftPWM+0xc8>
		return left_PWM_value - xacceleration;
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <accelerateLeftPWM+0xf4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fa7b 	bl	80006e4 <__aeabi_f2d>
 80021ee:	a30a      	add	r3, pc, #40	; (adr r3, 8002218 <accelerateLeftPWM+0xd8>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe f916 	bl	8000424 <__aeabi_dsub>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fb50 	bl	80008a4 <__aeabi_d2f>
 8002204:	4603      	mov	r3, r0
 8002206:	e001      	b.n	800220c <accelerateLeftPWM+0xcc>

	return left_PWM_value;
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <accelerateLeftPWM+0xf4>)
 800220a:	681b      	ldr	r3, [r3, #0]

}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bdb0      	pop	{r4, r5, r7, pc}
 8002214:	f3af 8000 	nop.w
 8002218:	bc6a7efa 	.word	0xbc6a7efa
 800221c:	3f689374 	.word	0x3f689374
 8002220:	200003b4 	.word	0x200003b4
 8002224:	200003b8 	.word	0x200003b8
 8002228:	20000418 	.word	0x20000418
 800222c:	20000004 	.word	0x20000004
 8002230:	40410000 	.word	0x40410000
 8002234:	20000424 	.word	0x20000424

08002238 <accelerateRightPWM>:

float accelerateRightPWM() {
 8002238:	b5b0      	push	{r4, r5, r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0

	float derivative = right_distance - old_right_distance;
 800223e:	4b36      	ldr	r3, [pc, #216]	; (8002318 <accelerateRightPWM+0xe0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a36      	ldr	r2, [pc, #216]	; (800231c <accelerateRightPWM+0xe4>)
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fb7f 	bl	800094c <__aeabi_fsub>
 800224e:	4603      	mov	r3, r0
 8002250:	607b      	str	r3, [r7, #4]

	test2 = derivative;
 8002252:	4a33      	ldr	r2, [pc, #204]	; (8002320 <accelerateRightPWM+0xe8>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6013      	str	r3, [r2, #0]
	if (derivative < velocity_right * 34.0)
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7fe fa43 	bl	80006e4 <__aeabi_f2d>
 800225e:	4604      	mov	r4, r0
 8002260:	460d      	mov	r5, r1
 8002262:	4b30      	ldr	r3, [pc, #192]	; (8002324 <accelerateRightPWM+0xec>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fa3c 	bl	80006e4 <__aeabi_f2d>
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <accelerateRightPWM+0xf0>)
 8002272:	f7fd ffa9 	bl	80001c8 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4620      	mov	r0, r4
 800227c:	4629      	mov	r1, r5
 800227e:	f7fe fae9 	bl	8000854 <__aeabi_dcmplt>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d011      	beq.n	80022ac <accelerateRightPWM+0x74>
		return right_PWM_value + xaccelerationTEST;
 8002288:	4b28      	ldr	r3, [pc, #160]	; (800232c <accelerateRightPWM+0xf4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fa29 	bl	80006e4 <__aeabi_f2d>
 8002292:	a31f      	add	r3, pc, #124	; (adr r3, 8002310 <accelerateRightPWM+0xd8>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe f8c6 	bl	8000428 <__adddf3>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fafe 	bl	80008a4 <__aeabi_d2f>
 80022a8:	4603      	mov	r3, r0
 80022aa:	e02b      	b.n	8002304 <accelerateRightPWM+0xcc>

	if (derivative > velocity_right * 34.0)
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7fe fa19 	bl	80006e4 <__aeabi_f2d>
 80022b2:	4604      	mov	r4, r0
 80022b4:	460d      	mov	r5, r1
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <accelerateRightPWM+0xec>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fa12 	bl	80006e4 <__aeabi_f2d>
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	4b18      	ldr	r3, [pc, #96]	; (8002328 <accelerateRightPWM+0xf0>)
 80022c6:	f7fd ff7f 	bl	80001c8 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4620      	mov	r0, r4
 80022d0:	4629      	mov	r1, r5
 80022d2:	f7fe fadd 	bl	8000890 <__aeabi_dcmpgt>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d011      	beq.n	8002300 <accelerateRightPWM+0xc8>
		return right_PWM_value - xaccelerationTEST;
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <accelerateRightPWM+0xf4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f9ff 	bl	80006e4 <__aeabi_f2d>
 80022e6:	a30a      	add	r3, pc, #40	; (adr r3, 8002310 <accelerateRightPWM+0xd8>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fe f89a 	bl	8000424 <__aeabi_dsub>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe fad4 	bl	80008a4 <__aeabi_d2f>
 80022fc:	4603      	mov	r3, r0
 80022fe:	e001      	b.n	8002304 <accelerateRightPWM+0xcc>

	return right_PWM_value;
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <accelerateRightPWM+0xf4>)
 8002302:	681b      	ldr	r3, [r3, #0]

}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bdb0      	pop	{r4, r5, r7, pc}
 800230c:	f3af 8000 	nop.w
 8002310:	47ae147b 	.word	0x47ae147b
 8002314:	3f747ae1 	.word	0x3f747ae1
 8002318:	200003e4 	.word	0x200003e4
 800231c:	200003e8 	.word	0x200003e8
 8002320:	2000041c 	.word	0x2000041c
 8002324:	20000008 	.word	0x20000008
 8002328:	40410000 	.word	0x40410000
 800232c:	20000428 	.word	0x20000428

08002330 <PDController>:

void PDController() {
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0

//////////////////////////	CALCULATE DISTANCE AND ANGLE CORRECTION /////////////////////////

	float adjustedAngle = goal_angle + IRadjustment;
 8002336:	4bb0      	ldr	r3, [pc, #704]	; (80025f8 <PDController+0x2c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4ab0      	ldr	r2, [pc, #704]	; (80025fc <PDController+0x2cc>)
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fb05 	bl	8000950 <__addsf3>
 8002346:	4603      	mov	r3, r0
 8002348:	607b      	str	r3, [r7, #4]

	angleError = adjustedAngle - (getLeftEncoderCounts() - getRightEncoderCounts());
 800234a:	f7ff f869 	bl	8001420 <getLeftEncoderCounts>
 800234e:	4603      	mov	r3, r0
 8002350:	461c      	mov	r4, r3
 8002352:	f7ff f857 	bl	8001404 <getRightEncoderCounts>
 8002356:	4603      	mov	r3, r0
 8002358:	1ae3      	subs	r3, r4, r3
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fbac 	bl	8000ab8 <__aeabi_i2f>
 8002360:	4603      	mov	r3, r0
 8002362:	4619      	mov	r1, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fe faf1 	bl	800094c <__aeabi_fsub>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	4ba4      	ldr	r3, [pc, #656]	; (8002600 <PDController+0x2d0>)
 8002370:	601a      	str	r2, [r3, #0]
	angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 8002372:	4ba3      	ldr	r3, [pc, #652]	; (8002600 <PDController+0x2d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f9b4 	bl	80006e4 <__aeabi_f2d>
 800237c:	a396      	add	r3, pc, #600	; (adr r3, 80025d8 <PDController+0x2a8>)
 800237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002382:	f7fd ff21 	bl	80001c8 <__aeabi_dmul>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4614      	mov	r4, r2
 800238c:	461d      	mov	r5, r3
 800238e:	4b9c      	ldr	r3, [pc, #624]	; (8002600 <PDController+0x2d0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a9c      	ldr	r2, [pc, #624]	; (8002604 <PDController+0x2d4>)
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fad7 	bl	800094c <__aeabi_fsub>
 800239e:	4603      	mov	r3, r0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f99f 	bl	80006e4 <__aeabi_f2d>
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	f7fd ff0b 	bl	80001c8 <__aeabi_dmul>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4620      	mov	r0, r4
 80023b8:	4629      	mov	r1, r5
 80023ba:	f7fe f835 	bl	8000428 <__adddf3>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f7fe fa6d 	bl	80008a4 <__aeabi_d2f>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4a8e      	ldr	r2, [pc, #568]	; (8002608 <PDController+0x2d8>)
 80023ce:	6013      	str	r3, [r2, #0]

	distanceError = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts())/2);
 80023d0:	4b8e      	ldr	r3, [pc, #568]	; (800260c <PDController+0x2dc>)
 80023d2:	681c      	ldr	r4, [r3, #0]
 80023d4:	f7ff f824 	bl	8001420 <getLeftEncoderCounts>
 80023d8:	4603      	mov	r3, r0
 80023da:	461d      	mov	r5, r3
 80023dc:	f7ff f812 	bl	8001404 <getRightEncoderCounts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	442b      	add	r3, r5
 80023e4:	0fda      	lsrs	r2, r3, #31
 80023e6:	4413      	add	r3, r2
 80023e8:	105b      	asrs	r3, r3, #1
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fb64 	bl	8000ab8 <__aeabi_i2f>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4619      	mov	r1, r3
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7fe faa9 	bl	800094c <__aeabi_fsub>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b84      	ldr	r3, [pc, #528]	; (8002610 <PDController+0x2e0>)
 8002400:	601a      	str	r2, [r3, #0]

	distanceCorrection = kPx * distanceError + kDx * (distanceError - oldDistanceError);
 8002402:	4b83      	ldr	r3, [pc, #524]	; (8002610 <PDController+0x2e0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f96c 	bl	80006e4 <__aeabi_f2d>
 800240c:	a372      	add	r3, pc, #456	; (adr r3, 80025d8 <PDController+0x2a8>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fd fed9 	bl	80001c8 <__aeabi_dmul>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4614      	mov	r4, r2
 800241c:	461d      	mov	r5, r3
 800241e:	4b7c      	ldr	r3, [pc, #496]	; (8002610 <PDController+0x2e0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7c      	ldr	r2, [pc, #496]	; (8002614 <PDController+0x2e4>)
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fa8f 	bl	800094c <__aeabi_fsub>
 800242e:	4603      	mov	r3, r0
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f957 	bl	80006e4 <__aeabi_f2d>
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	f7fd fec3 	bl	80001c8 <__aeabi_dmul>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4620      	mov	r0, r4
 8002448:	4629      	mov	r1, r5
 800244a:	f7fd ffed 	bl	8000428 <__adddf3>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f7fe fa25 	bl	80008a4 <__aeabi_d2f>
 800245a:	4603      	mov	r3, r0
 800245c:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <PDController+0x2e8>)
 800245e:	6013      	str	r3, [r2, #0]

	left_distance = getLeftEncoderCounts();
 8002460:	f7fe ffde 	bl	8001420 <getLeftEncoderCounts>
 8002464:	4603      	mov	r3, r0
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fb26 	bl	8000ab8 <__aeabi_i2f>
 800246c:	4603      	mov	r3, r0
 800246e:	4a6b      	ldr	r2, [pc, #428]	; (800261c <PDController+0x2ec>)
 8002470:	6013      	str	r3, [r2, #0]
	right_distance = getRightEncoderCounts();
 8002472:	f7fe ffc7 	bl	8001404 <getRightEncoderCounts>
 8002476:	4603      	mov	r3, r0
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fb1d 	bl	8000ab8 <__aeabi_i2f>
 800247e:	4603      	mov	r3, r0
 8002480:	4a67      	ldr	r2, [pc, #412]	; (8002620 <PDController+0x2f0>)
 8002482:	6013      	str	r3, [r2, #0]

	if (state == MOVING && fabs(distanceError) > 100)
 8002484:	4b67      	ldr	r3, [pc, #412]	; (8002624 <PDController+0x2f4>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d14b      	bne.n	8002524 <PDController+0x1f4>
 800248c:	4b60      	ldr	r3, [pc, #384]	; (8002610 <PDController+0x2e0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002494:	4964      	ldr	r1, [pc, #400]	; (8002628 <PDController+0x2f8>)
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fd1e 	bl	8000ed8 <__aeabi_fcmpgt>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d040      	beq.n	8002524 <PDController+0x1f4>
	{		// If we're going straight and not at the end, apply acceleration

		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 80024a2:	4b5d      	ldr	r3, [pc, #372]	; (8002618 <PDController+0x2e8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a61      	ldr	r2, [pc, #388]	; (800262c <PDController+0x2fc>)
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fa4d 	bl	800094c <__aeabi_fsub>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f913 	bl	80006e4 <__aeabi_f2d>
 80024be:	a348      	add	r3, pc, #288	; (adr r3, 80025e0 <PDController+0x2b0>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fe f9e4 	bl	8000890 <__aeabi_dcmpgt>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d02a      	beq.n	8002524 <PDController+0x1f4>
			distanceCorrection = oldDistanceCorrection + (xacceleration * sign(distanceCorrection - oldDistanceCorrection));
 80024ce:	4b57      	ldr	r3, [pc, #348]	; (800262c <PDController+0x2fc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f906 	bl	80006e4 <__aeabi_f2d>
 80024d8:	4604      	mov	r4, r0
 80024da:	460d      	mov	r5, r1
 80024dc:	4b4e      	ldr	r3, [pc, #312]	; (8002618 <PDController+0x2e8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a52      	ldr	r2, [pc, #328]	; (800262c <PDController+0x2fc>)
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fa30 	bl	800094c <__aeabi_fsub>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 fbc8 	bl	8003c84 <sign>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f8e2 	bl	80006c0 <__aeabi_i2d>
 80024fc:	a338      	add	r3, pc, #224	; (adr r3, 80025e0 <PDController+0x2b0>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fd fe61 	bl	80001c8 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4620      	mov	r0, r4
 800250c:	4629      	mov	r1, r5
 800250e:	f7fd ff8b 	bl	8000428 <__adddf3>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7fe f9c3 	bl	80008a4 <__aeabi_d2f>
 800251e:	4603      	mov	r3, r0
 8002520:	4a3d      	ldr	r2, [pc, #244]	; (8002618 <PDController+0x2e8>)
 8002522:	6013      	str	r3, [r2, #0]
	}

////////////////////// ROUND DISTANCE OR ANGLE CORRECTION	//////////////////////////

	switch(state) {		// Apply lower limits of PWM for various states
 8002524:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <PDController+0x2f4>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d007      	beq.n	800253c <PDController+0x20c>
 800252c:	2b03      	cmp	r3, #3
 800252e:	f300 80b7 	bgt.w	80026a0 <PDController+0x370>
 8002532:	2b01      	cmp	r3, #1
 8002534:	d016      	beq.n	8002564 <PDController+0x234>
 8002536:	2b02      	cmp	r3, #2
 8002538:	d07a      	beq.n	8002630 <PDController+0x300>
		case TURNING:
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWM_min_w)
				angleCorrection = sign(angleCorrection) * PWM_min_w;
			break;
		default:
			break;
 800253a:	e0b1      	b.n	80026a0 <PDController+0x370>
			distanceCorrection = (accelerateLeftPWM() + accelerateRightPWM())/2;
 800253c:	f7ff fe00 	bl	8002140 <accelerateLeftPWM>
 8002540:	4604      	mov	r4, r0
 8002542:	f7ff fe79 	bl	8002238 <accelerateRightPWM>
 8002546:	4603      	mov	r3, r0
 8002548:	4619      	mov	r1, r3
 800254a:	4620      	mov	r0, r4
 800254c:	f7fe fa00 	bl	8000950 <__addsf3>
 8002550:	4603      	mov	r3, r0
 8002552:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fbb6 	bl	8000cc8 <__aeabi_fdiv>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <PDController+0x2e8>)
 8002562:	601a      	str	r2, [r3, #0]
			if (fabs(distanceCorrection) > 0.01 && fabs(distanceCorrection) < PWM_min_x)
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <PDController+0x2e8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe f8b9 	bl	80006e4 <__aeabi_f2d>
 8002572:	a31d      	add	r3, pc, #116	; (adr r3, 80025e8 <PDController+0x2b8>)
 8002574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002578:	f7fe f98a 	bl	8000890 <__aeabi_dcmpgt>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d100      	bne.n	8002584 <PDController+0x254>
			break;
 8002582:	e08e      	b.n	80026a2 <PDController+0x372>
			if (fabs(distanceCorrection) > 0.01 && fabs(distanceCorrection) < PWM_min_x)
 8002584:	4b24      	ldr	r3, [pc, #144]	; (8002618 <PDController+0x2e8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe f8a9 	bl	80006e4 <__aeabi_f2d>
 8002592:	a317      	add	r3, pc, #92	; (adr r3, 80025f0 <PDController+0x2c0>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	f7fe f95c 	bl	8000854 <__aeabi_dcmplt>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d100      	bne.n	80025a4 <PDController+0x274>
			break;
 80025a2:	e07e      	b.n	80026a2 <PDController+0x372>
				distanceCorrection = sign(distanceCorrection) * PWM_min_x;
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <PDController+0x2e8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f001 fb6b 	bl	8003c84 <sign>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe f885 	bl	80006c0 <__aeabi_i2d>
 80025b6:	a30e      	add	r3, pc, #56	; (adr r3, 80025f0 <PDController+0x2c0>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f7fd fe04 	bl	80001c8 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe f96c 	bl	80008a4 <__aeabi_d2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <PDController+0x2e8>)
 80025d0:	6013      	str	r3, [r2, #0]
			break;
 80025d2:	e066      	b.n	80026a2 <PDController+0x372>
 80025d4:	f3af 8000 	nop.w
 80025d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025dc:	3f50624d 	.word	0x3f50624d
 80025e0:	bc6a7efa 	.word	0xbc6a7efa
 80025e4:	3f689374 	.word	0x3f689374
 80025e8:	47ae147b 	.word	0x47ae147b
 80025ec:	3f847ae1 	.word	0x3f847ae1
 80025f0:	66666666 	.word	0x66666666
 80025f4:	3fd66666 	.word	0x3fd66666
 80025f8:	20000340 	.word	0x20000340
 80025fc:	20000414 	.word	0x20000414
 8002600:	20000348 	.word	0x20000348
 8002604:	2000034c 	.word	0x2000034c
 8002608:	20000378 	.word	0x20000378
 800260c:	2000033c 	.word	0x2000033c
 8002610:	2000037c 	.word	0x2000037c
 8002614:	20000380 	.word	0x20000380
 8002618:	200003ac 	.word	0x200003ac
 800261c:	200003b4 	.word	0x200003b4
 8002620:	200003e4 	.word	0x200003e4
 8002624:	20000420 	.word	0x20000420
 8002628:	42c80000 	.word	0x42c80000
 800262c:	200003b0 	.word	0x200003b0
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWM_min_w)
 8002630:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <PDController+0x480>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe f853 	bl	80006e4 <__aeabi_f2d>
 800263e:	a354      	add	r3, pc, #336	; (adr r3, 8002790 <PDController+0x460>)
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f7fe f924 	bl	8000890 <__aeabi_dcmpgt>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d100      	bne.n	8002650 <PDController+0x320>
			break;
 800264e:	e028      	b.n	80026a2 <PDController+0x372>
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWM_min_w)
 8002650:	4b57      	ldr	r3, [pc, #348]	; (80027b0 <PDController+0x480>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe f843 	bl	80006e4 <__aeabi_f2d>
 800265e:	a34e      	add	r3, pc, #312	; (adr r3, 8002798 <PDController+0x468>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f7fe f8f6 	bl	8000854 <__aeabi_dcmplt>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d100      	bne.n	8002670 <PDController+0x340>
			break;
 800266e:	e018      	b.n	80026a2 <PDController+0x372>
				angleCorrection = sign(angleCorrection) * PWM_min_w;
 8002670:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <PDController+0x480>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f001 fb05 	bl	8003c84 <sign>
 800267a:	4603      	mov	r3, r0
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe f81f 	bl	80006c0 <__aeabi_i2d>
 8002682:	a345      	add	r3, pc, #276	; (adr r3, 8002798 <PDController+0x468>)
 8002684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002688:	f7fd fd9e 	bl	80001c8 <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f7fe f906 	bl	80008a4 <__aeabi_d2f>
 8002698:	4603      	mov	r3, r0
 800269a:	4a45      	ldr	r2, [pc, #276]	; (80027b0 <PDController+0x480>)
 800269c:	6013      	str	r3, [r2, #0]
			break;
 800269e:	e000      	b.n	80026a2 <PDController+0x372>
			break;
 80026a0:	bf00      	nop
	}

	if (fabs(distanceCorrection) > PWM_max_x)		// Upper Limit for PWM
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <PDController+0x484>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe f81a 	bl	80006e4 <__aeabi_f2d>
 80026b0:	a33b      	add	r3, pc, #236	; (adr r3, 80027a0 <PDController+0x470>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	f7fe f8eb 	bl	8000890 <__aeabi_dcmpgt>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d016      	beq.n	80026ee <PDController+0x3be>
		distanceCorrection = sign(distanceCorrection) * PWM_max_x;
 80026c0:	4b3c      	ldr	r3, [pc, #240]	; (80027b4 <PDController+0x484>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f001 fadd 	bl	8003c84 <sign>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd fff7 	bl	80006c0 <__aeabi_i2d>
 80026d2:	a333      	add	r3, pc, #204	; (adr r3, 80027a0 <PDController+0x470>)
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	f7fd fd76 	bl	80001c8 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe f8de 	bl	80008a4 <__aeabi_d2f>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a32      	ldr	r2, [pc, #200]	; (80027b4 <PDController+0x484>)
 80026ec:	6013      	str	r3, [r2, #0]

	if (fabs(angleCorrection) > PWM_max_w)
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <PDController+0x480>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fff4 	bl	80006e4 <__aeabi_f2d>
 80026fc:	a32a      	add	r3, pc, #168	; (adr r3, 80027a8 <PDController+0x478>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fe f8c5 	bl	8000890 <__aeabi_dcmpgt>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d016      	beq.n	800273a <PDController+0x40a>
		angleCorrection = sign(angleCorrection) * PWM_max_w;
 800270c:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <PDController+0x480>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f001 fab7 	bl	8003c84 <sign>
 8002716:	4603      	mov	r3, r0
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd ffd1 	bl	80006c0 <__aeabi_i2d>
 800271e:	a322      	add	r3, pc, #136	; (adr r3, 80027a8 <PDController+0x478>)
 8002720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002724:	f7fd fd50 	bl	80001c8 <__aeabi_dmul>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	f7fe f8b8 	bl	80008a4 <__aeabi_d2f>
 8002734:	4603      	mov	r3, r0
 8002736:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <PDController+0x480>)
 8002738:	6013      	str	r3, [r2, #0]

	if (state == ACCELERATING)
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <PDController+0x488>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d10a      	bne.n	8002758 <PDController+0x428>
	{
		left_PWM_value = accelerateLeftPWM();
 8002742:	f7ff fcfd 	bl	8002140 <accelerateLeftPWM>
 8002746:	4603      	mov	r3, r0
 8002748:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <PDController+0x48c>)
 800274a:	6013      	str	r3, [r2, #0]
		right_PWM_value = accelerateRightPWM();
 800274c:	f7ff fd74 	bl	8002238 <accelerateRightPWM>
 8002750:	4603      	mov	r3, r0
 8002752:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <PDController+0x490>)
 8002754:	6013      	str	r3, [r2, #0]
		return;
 8002756:	e017      	b.n	8002788 <PDController+0x458>
	}

	left_PWM_value = (distanceCorrection + angleCorrection);
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <PDController+0x484>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <PDController+0x480>)
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe f8f4 	bl	8000950 <__addsf3>
 8002768:	4603      	mov	r3, r0
 800276a:	461a      	mov	r2, r3
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <PDController+0x48c>)
 800276e:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distanceCorrection - angleCorrection);
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <PDController+0x484>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <PDController+0x480>)
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe f8e6 	bl	800094c <__aeabi_fsub>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <PDController+0x490>)
 8002786:	601a      	str	r2, [r3, #0]

}
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bdb0      	pop	{r4, r5, r7, pc}
 800278e:	bf00      	nop
 8002790:	47ae147b 	.word	0x47ae147b
 8002794:	3f847ae1 	.word	0x3f847ae1
 8002798:	66666666 	.word	0x66666666
 800279c:	3fd66666 	.word	0x3fd66666
 80027a0:	66666666 	.word	0x66666666
 80027a4:	3fe66666 	.word	0x3fe66666
 80027a8:	9999999a 	.word	0x9999999a
 80027ac:	3fd99999 	.word	0x3fd99999
 80027b0:	20000378 	.word	0x20000378
 80027b4:	200003ac 	.word	0x200003ac
 80027b8:	20000420 	.word	0x20000420
 80027bc:	20000424 	.word	0x20000424
 80027c0:	20000428 	.word	0x20000428
 80027c4:	00000000 	.word	0x00000000

080027c8 <updatePID>:

void updatePID() {
 80027c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0

///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldAngleError = oldAngleErrors[9];
 80027d0:	4b53      	ldr	r3, [pc, #332]	; (8002920 <updatePID+0x158>)
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	4a53      	ldr	r2, [pc, #332]	; (8002924 <updatePID+0x15c>)
 80027d6:	6013      	str	r3, [r2, #0]
	oldDistanceError = oldDistanceErrors[9];
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <updatePID+0x160>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	4a53      	ldr	r2, [pc, #332]	; (800292c <updatePID+0x164>)
 80027de:	6013      	str	r3, [r2, #0]
	old_left_distance = old_left_distances[9];
 80027e0:	4b53      	ldr	r3, [pc, #332]	; (8002930 <updatePID+0x168>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	4a53      	ldr	r2, [pc, #332]	; (8002934 <updatePID+0x16c>)
 80027e6:	6013      	str	r3, [r2, #0]
	old_right_distance = old_right_distances[9];
 80027e8:	4b53      	ldr	r3, [pc, #332]	; (8002938 <updatePID+0x170>)
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	4a53      	ldr	r2, [pc, #332]	; (800293c <updatePID+0x174>)
 80027ee:	6013      	str	r3, [r2, #0]

//////////////////////	CALCULATE MOTOR PWM VALUES	/////////////////////

	PDController();
 80027f0:	f7ff fd9e 	bl	8002330 <PDController>

////////////////////	NORMALIZE LEFT AND RIGHT PWM VALUES ////////////////

	// Apply lower PWM limits for small adjustments
	if (state == REST || state == ACCELERATING || fabs(distanceError) < 60 || fabs (angleError) < 60)
 80027f4:	4b52      	ldr	r3, [pc, #328]	; (8002940 <updatePID+0x178>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01a      	beq.n	8002832 <updatePID+0x6a>
 80027fc:	4b50      	ldr	r3, [pc, #320]	; (8002940 <updatePID+0x178>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d016      	beq.n	8002832 <updatePID+0x6a>
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <updatePID+0x17c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800280c:	494e      	ldr	r1, [pc, #312]	; (8002948 <updatePID+0x180>)
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fb44 	bl	8000e9c <__aeabi_fcmplt>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <updatePID+0x6a>
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <updatePID+0x184>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002822:	4949      	ldr	r1, [pc, #292]	; (8002948 <updatePID+0x180>)
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fb39 	bl	8000e9c <__aeabi_fcmplt>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8093 	beq.w	8002958 <updatePID+0x190>
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWM_min)
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <updatePID+0x188>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd ff52 	bl	80006e4 <__aeabi_f2d>
 8002840:	a333      	add	r3, pc, #204	; (adr r3, 8002910 <updatePID+0x148>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	f7fe f823 	bl	8000890 <__aeabi_dcmpgt>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d025      	beq.n	800289c <updatePID+0xd4>
 8002850:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <updatePID+0x188>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd ff43 	bl	80006e4 <__aeabi_f2d>
 800285e:	a32e      	add	r3, pc, #184	; (adr r3, 8002918 <updatePID+0x150>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fd fff6 	bl	8000854 <__aeabi_dcmplt>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <updatePID+0xd4>
		{
			left_PWM_value = sign(left_PWM_value) * PWM_min;
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <updatePID+0x188>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fa06 	bl	8003c84 <sign>
 8002878:	4603      	mov	r3, r0
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd ff20 	bl	80006c0 <__aeabi_i2d>
 8002880:	a325      	add	r3, pc, #148	; (adr r3, 8002918 <updatePID+0x150>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f7fd fc9f 	bl	80001c8 <__aeabi_dmul>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	f7fe f807 	bl	80008a4 <__aeabi_d2f>
 8002896:	4603      	mov	r3, r0
 8002898:	4a2d      	ldr	r2, [pc, #180]	; (8002950 <updatePID+0x188>)
 800289a:	6013      	str	r3, [r2, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWM_min)
 800289c:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <updatePID+0x18c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd ff1d 	bl	80006e4 <__aeabi_f2d>
 80028aa:	a319      	add	r3, pc, #100	; (adr r3, 8002910 <updatePID+0x148>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd ffee 	bl	8000890 <__aeabi_dcmpgt>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8122 	beq.w	8002b00 <updatePID+0x338>
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <updatePID+0x18c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fd ff0d 	bl	80006e4 <__aeabi_f2d>
 80028ca:	a313      	add	r3, pc, #76	; (adr r3, 8002918 <updatePID+0x150>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	f7fd ffc0 	bl	8000854 <__aeabi_dcmplt>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d100      	bne.n	80028dc <updatePID+0x114>
 80028da:	e111      	b.n	8002b00 <updatePID+0x338>
		{
			right_PWM_value = sign(right_PWM_value) * PWM_min;
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <updatePID+0x18c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 f9cf 	bl	8003c84 <sign>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fee9 	bl	80006c0 <__aeabi_i2d>
 80028ee:	a30a      	add	r3, pc, #40	; (adr r3, 8002918 <updatePID+0x150>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fc68 	bl	80001c8 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f7fd ffd0 	bl	80008a4 <__aeabi_d2f>
 8002904:	4603      	mov	r3, r0
 8002906:	4a13      	ldr	r2, [pc, #76]	; (8002954 <updatePID+0x18c>)
 8002908:	6013      	str	r3, [r2, #0]
		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWM_min)
 800290a:	e0f9      	b.n	8002b00 <updatePID+0x338>
 800290c:	f3af 8000 	nop.w
 8002910:	47ae147b 	.word	0x47ae147b
 8002914:	3f847ae1 	.word	0x3f847ae1
 8002918:	33333333 	.word	0x33333333
 800291c:	3fd33333 	.word	0x3fd33333
 8002920:	20000350 	.word	0x20000350
 8002924:	2000034c 	.word	0x2000034c
 8002928:	20000384 	.word	0x20000384
 800292c:	20000380 	.word	0x20000380
 8002930:	200003bc 	.word	0x200003bc
 8002934:	200003b8 	.word	0x200003b8
 8002938:	200003ec 	.word	0x200003ec
 800293c:	200003e8 	.word	0x200003e8
 8002940:	20000420 	.word	0x20000420
 8002944:	2000037c 	.word	0x2000037c
 8002948:	42700000 	.word	0x42700000
 800294c:	20000348 	.word	0x20000348
 8002950:	20000424 	.word	0x20000424
 8002954:	20000428 	.word	0x20000428
		}
	}
	else	// If under PWM limits, normalize values
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWM_min)
 8002958:	4bad      	ldr	r3, [pc, #692]	; (8002c10 <updatePID+0x448>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd febf 	bl	80006e4 <__aeabi_f2d>
 8002966:	a3a6      	add	r3, pc, #664	; (adr r3, 8002c00 <updatePID+0x438>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd ff90 	bl	8000890 <__aeabi_dcmpgt>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d05a      	beq.n	8002a2c <updatePID+0x264>
 8002976:	4ba6      	ldr	r3, [pc, #664]	; (8002c10 <updatePID+0x448>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd feb0 	bl	80006e4 <__aeabi_f2d>
 8002984:	a3a0      	add	r3, pc, #640	; (adr r3, 8002c08 <updatePID+0x440>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	f7fd ff63 	bl	8000854 <__aeabi_dcmplt>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d04b      	beq.n	8002a2c <updatePID+0x264>
		{
			right_PWM_value = right_PWM_value - (sign(right_PWM_value) * (PWM_min - fabs(left_PWM_value)));
 8002994:	4b9f      	ldr	r3, [pc, #636]	; (8002c14 <updatePID+0x44c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fea3 	bl	80006e4 <__aeabi_f2d>
 800299e:	4604      	mov	r4, r0
 80029a0:	460d      	mov	r5, r1
 80029a2:	4b9c      	ldr	r3, [pc, #624]	; (8002c14 <updatePID+0x44c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 f96c 	bl	8003c84 <sign>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fe86 	bl	80006c0 <__aeabi_i2d>
 80029b4:	4680      	mov	r8, r0
 80029b6:	4689      	mov	r9, r1
 80029b8:	4b95      	ldr	r3, [pc, #596]	; (8002c10 <updatePID+0x448>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fe8f 	bl	80006e4 <__aeabi_f2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	a18f      	add	r1, pc, #572	; (adr r1, 8002c08 <updatePID+0x440>)
 80029cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029d0:	f7fd fd28 	bl	8000424 <__aeabi_dsub>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4640      	mov	r0, r8
 80029da:	4649      	mov	r1, r9
 80029dc:	f7fd fbf4 	bl	80001c8 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4620      	mov	r0, r4
 80029e6:	4629      	mov	r1, r5
 80029e8:	f7fd fd1c 	bl	8000424 <__aeabi_dsub>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7fd ff56 	bl	80008a4 <__aeabi_d2f>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a86      	ldr	r2, [pc, #536]	; (8002c14 <updatePID+0x44c>)
 80029fc:	6013      	str	r3, [r2, #0]
			left_PWM_value = sign(left_PWM_value) * PWM_min;
 80029fe:	4b84      	ldr	r3, [pc, #528]	; (8002c10 <updatePID+0x448>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 f93e 	bl	8003c84 <sign>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fe58 	bl	80006c0 <__aeabi_i2d>
 8002a10:	a37d      	add	r3, pc, #500	; (adr r3, 8002c08 <updatePID+0x440>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	f7fd fbd7 	bl	80001c8 <__aeabi_dmul>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	f7fd ff3f 	bl	80008a4 <__aeabi_d2f>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4a79      	ldr	r2, [pc, #484]	; (8002c10 <updatePID+0x448>)
 8002a2a:	6013      	str	r3, [r2, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWM_min)
 8002a2c:	4b79      	ldr	r3, [pc, #484]	; (8002c14 <updatePID+0x44c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fe55 	bl	80006e4 <__aeabi_f2d>
 8002a3a:	a371      	add	r3, pc, #452	; (adr r3, 8002c00 <updatePID+0x438>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd ff26 	bl	8000890 <__aeabi_dcmpgt>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d05a      	beq.n	8002b00 <updatePID+0x338>
 8002a4a:	4b72      	ldr	r3, [pc, #456]	; (8002c14 <updatePID+0x44c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fe46 	bl	80006e4 <__aeabi_f2d>
 8002a58:	a36b      	add	r3, pc, #428	; (adr r3, 8002c08 <updatePID+0x440>)
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f7fd fef9 	bl	8000854 <__aeabi_dcmplt>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d04b      	beq.n	8002b00 <updatePID+0x338>
		{
			left_PWM_value = left_PWM_value - (sign(left_PWM_value) * (PWM_min - fabs(right_PWM_value)));
 8002a68:	4b69      	ldr	r3, [pc, #420]	; (8002c10 <updatePID+0x448>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fe39 	bl	80006e4 <__aeabi_f2d>
 8002a72:	4604      	mov	r4, r0
 8002a74:	460d      	mov	r5, r1
 8002a76:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <updatePID+0x448>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 f902 	bl	8003c84 <sign>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fe1c 	bl	80006c0 <__aeabi_i2d>
 8002a88:	4680      	mov	r8, r0
 8002a8a:	4689      	mov	r9, r1
 8002a8c:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <updatePID+0x44c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fe25 	bl	80006e4 <__aeabi_f2d>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	a15a      	add	r1, pc, #360	; (adr r1, 8002c08 <updatePID+0x440>)
 8002aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002aa4:	f7fd fcbe 	bl	8000424 <__aeabi_dsub>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4640      	mov	r0, r8
 8002aae:	4649      	mov	r1, r9
 8002ab0:	f7fd fb8a 	bl	80001c8 <__aeabi_dmul>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4620      	mov	r0, r4
 8002aba:	4629      	mov	r1, r5
 8002abc:	f7fd fcb2 	bl	8000424 <__aeabi_dsub>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fd feec 	bl	80008a4 <__aeabi_d2f>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4a50      	ldr	r2, [pc, #320]	; (8002c10 <updatePID+0x448>)
 8002ad0:	6013      	str	r3, [r2, #0]
			right_PWM_value = sign(right_PWM_value) * PWM_min;
 8002ad2:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <updatePID+0x44c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f001 f8d4 	bl	8003c84 <sign>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fdee 	bl	80006c0 <__aeabi_i2d>
 8002ae4:	a348      	add	r3, pc, #288	; (adr r3, 8002c08 <updatePID+0x440>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fb6d 	bl	80001c8 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fd fed5 	bl	80008a4 <__aeabi_d2f>
 8002afa:	4603      	mov	r3, r0
 8002afc:	4a45      	ldr	r2, [pc, #276]	; (8002c14 <updatePID+0x44c>)
 8002afe:	6013      	str	r3, [r2, #0]
		}
	}

//////////////////	SET PWM VALUES AND CHECK FOR GOAL REACHED ////////////////////////

	setMotorLPWM(left_PWM_value);
 8002b00:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <updatePID+0x448>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff f96f 	bl	8001de8 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 8002b0a:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <updatePID+0x44c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff f9a6 	bl	8001e60 <setMotorRPWM>

	if(angleError < 30 && angleError > -30 && distanceError < 30 && distanceError > -30)
 8002b14:	4b40      	ldr	r3, [pc, #256]	; (8002c18 <updatePID+0x450>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4940      	ldr	r1, [pc, #256]	; (8002c1c <updatePID+0x454>)
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe f9be 	bl	8000e9c <__aeabi_fcmplt>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d020      	beq.n	8002b68 <updatePID+0x3a0>
 8002b26:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <updatePID+0x450>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	493d      	ldr	r1, [pc, #244]	; (8002c20 <updatePID+0x458>)
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe f9d3 	bl	8000ed8 <__aeabi_fcmpgt>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d017      	beq.n	8002b68 <updatePID+0x3a0>
 8002b38:	4b3a      	ldr	r3, [pc, #232]	; (8002c24 <updatePID+0x45c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4937      	ldr	r1, [pc, #220]	; (8002c1c <updatePID+0x454>)
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe f9ac 	bl	8000e9c <__aeabi_fcmplt>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <updatePID+0x3a0>
 8002b4a:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <updatePID+0x45c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4934      	ldr	r1, [pc, #208]	; (8002c20 <updatePID+0x458>)
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe f9c1 	bl	8000ed8 <__aeabi_fcmpgt>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <updatePID+0x3a0>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8002b5c:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <updatePID+0x460>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a31      	ldr	r2, [pc, #196]	; (8002c28 <updatePID+0x460>)
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e002      	b.n	8002b6e <updatePID+0x3a6>

	else
		goal_reached_timer = 0;
 8002b68:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <updatePID+0x460>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]

///////////////////// UPDATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldDistanceCorrection = distanceCorrection;
 8002b6e:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <updatePID+0x464>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2f      	ldr	r2, [pc, #188]	; (8002c30 <updatePID+0x468>)
 8002b74:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002b76:	2309      	movs	r3, #9
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e00b      	b.n	8002b94 <updatePID+0x3cc>
		oldAngleErrors[i] = oldAngleErrors[i-1];	// Adds the newest angleError to array and shifts everything to the right
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	4a2c      	ldr	r2, [pc, #176]	; (8002c34 <updatePID+0x46c>)
 8002b82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b86:	492b      	ldr	r1, [pc, #172]	; (8002c34 <updatePID+0x46c>)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	dcf0      	bgt.n	8002b7c <updatePID+0x3b4>
	oldAngleErrors[0] = angleError;
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <updatePID+0x450>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a25      	ldr	r2, [pc, #148]	; (8002c34 <updatePID+0x46c>)
 8002ba0:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002ba2:	2309      	movs	r3, #9
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	e00b      	b.n	8002bc0 <updatePID+0x3f8>
		oldDistanceErrors[i] = oldDistanceErrors[i-1];	// Adds the newest distanceError to array and shifts everything right
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	4a22      	ldr	r2, [pc, #136]	; (8002c38 <updatePID+0x470>)
 8002bae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002bb2:	4921      	ldr	r1, [pc, #132]	; (8002c38 <updatePID+0x470>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	dcf0      	bgt.n	8002ba8 <updatePID+0x3e0>
	oldDistanceErrors[0] = distanceError;
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <updatePID+0x45c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1b      	ldr	r2, [pc, #108]	; (8002c38 <updatePID+0x470>)
 8002bcc:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002bce:	2309      	movs	r3, #9
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	e00b      	b.n	8002bec <updatePID+0x424>
		old_left_distances[i] = old_left_distances[i-1];
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <updatePID+0x474>)
 8002bda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002bde:	4917      	ldr	r1, [pc, #92]	; (8002c3c <updatePID+0x474>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	dcf0      	bgt.n	8002bd4 <updatePID+0x40c>
	old_left_distances[0] = left_distance;
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <updatePID+0x478>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <updatePID+0x474>)
 8002bf8:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002bfa:	2309      	movs	r3, #9
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	e02d      	b.n	8002c5c <updatePID+0x494>
 8002c00:	47ae147b 	.word	0x47ae147b
 8002c04:	3f847ae1 	.word	0x3f847ae1
 8002c08:	33333333 	.word	0x33333333
 8002c0c:	3fd33333 	.word	0x3fd33333
 8002c10:	20000424 	.word	0x20000424
 8002c14:	20000428 	.word	0x20000428
 8002c18:	20000348 	.word	0x20000348
 8002c1c:	41f00000 	.word	0x41f00000
 8002c20:	c1f00000 	.word	0xc1f00000
 8002c24:	2000037c 	.word	0x2000037c
 8002c28:	2000042c 	.word	0x2000042c
 8002c2c:	200003ac 	.word	0x200003ac
 8002c30:	200003b0 	.word	0x200003b0
 8002c34:	20000350 	.word	0x20000350
 8002c38:	20000384 	.word	0x20000384
 8002c3c:	200003bc 	.word	0x200003bc
 8002c40:	200003b4 	.word	0x200003b4
		old_right_distances[i] = old_right_distances[i-1];
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <updatePID+0x4ac>)
 8002c4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c4e:	4909      	ldr	r1, [pc, #36]	; (8002c74 <updatePID+0x4ac>)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	dcf0      	bgt.n	8002c44 <updatePID+0x47c>
	old_right_distances[0] = right_distance;
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <updatePID+0x4b0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a03      	ldr	r2, [pc, #12]	; (8002c74 <updatePID+0x4ac>)
 8002c68:	6013      	str	r3, [r2, #0]

}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c74:	200003ec 	.word	0x200003ec
 8002c78:	200003e4 	.word	0x200003e4

08002c7c <PIDdone>:

int8_t PIDdone(){ // There is no bool type in C. True/False values are represented as 1 or 0.
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0

	if (goal_reached_timer >= 50)
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <PIDdone+0x20>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b31      	cmp	r3, #49	; 0x31
 8002c86:	dd06      	ble.n	8002c96 <PIDdone+0x1a>
	{
		resetPID();
 8002c88:	f000 f80a 	bl	8002ca0 <resetPID>
		setState(REST);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7ff f957 	bl	8001f40 <setState>
		return 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <PIDdone+0x1c>
	}
	else
		return 0;
 8002c96:	2300      	movs	r3, #0

}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	2000042c 	.word	0x2000042c

08002ca0 <resetPID>:

void resetPID() {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0

//////////////	RESET ALL ANGLE AND DISTANCE ERRORS TO 0	////////////////
	angleError = 0;
 8002ca6:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <resetPID+0x104>)
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
	oldAngleError = 0;
 8002cae:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <resetPID+0x108>)
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
	angleCorrection = 0;
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <resetPID+0x10c>)
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e008      	b.n	8002cd6 <resetPID+0x36>
		oldAngleErrors[i] = 0;
 8002cc4:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <resetPID+0x110>)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f04f 0100 	mov.w	r1, #0
 8002ccc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b09      	cmp	r3, #9
 8002cda:	ddf3      	ble.n	8002cc4 <resetPID+0x24>

	distanceError = 0;
 8002cdc:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <resetPID+0x114>)
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
	oldDistanceError = 0;
 8002ce4:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <resetPID+0x118>)
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
	distanceCorrection = 0;
 8002cec:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <resetPID+0x11c>)
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	e008      	b.n	8002d0c <resetPID+0x6c>
		oldDistanceErrors[i] = 0;
 8002cfa:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <resetPID+0x120>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b09      	cmp	r3, #9
 8002d10:	ddf3      	ble.n	8002cfa <resetPID+0x5a>

	left_distance = 0;
 8002d12:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <resetPID+0x124>)
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
	old_left_distance = 0;
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <resetPID+0x128>)
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	e008      	b.n	8002d3a <resetPID+0x9a>
		old_left_distances[i] = 0;
 8002d28:	4a28      	ldr	r2, [pc, #160]	; (8002dcc <resetPID+0x12c>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3301      	adds	r3, #1
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b09      	cmp	r3, #9
 8002d3e:	ddf3      	ble.n	8002d28 <resetPID+0x88>

	right_distance = 0;
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <resetPID+0x130>)
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
	old_right_distance = 0;
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <resetPID+0x134>)
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	e008      	b.n	8002d68 <resetPID+0xc8>
		old_right_distances[i] = 0;
 8002d56:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <resetPID+0x138>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f04f 0100 	mov.w	r1, #0
 8002d5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	3301      	adds	r3, #1
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b09      	cmp	r3, #9
 8002d6c:	ddf3      	ble.n	8002d56 <resetPID+0xb6>

	IRadjustment = 0;
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <resetPID+0x13c>)
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

////////////// 	RESET ALL GOALS AND ENCODER COUNTS TO 0 	///////////////////
	goal_angle = 0;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <resetPID+0x140>)
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
	goal_distance = 0;
 8002d7e:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <resetPID+0x144>)
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
	goal_reached_timer = 0;
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <resetPID+0x148>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

	resetEncoders();
 8002d8c:	f7fe fb56 	bl	800143c <resetEncoders>
	resetMotors();
 8002d90:	f7ff f8a2 	bl	8001ed8 <resetMotors>

	setState(REST);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff f8d3 	bl	8001f40 <setState>

}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000348 	.word	0x20000348
 8002da8:	2000034c 	.word	0x2000034c
 8002dac:	20000378 	.word	0x20000378
 8002db0:	20000350 	.word	0x20000350
 8002db4:	2000037c 	.word	0x2000037c
 8002db8:	20000380 	.word	0x20000380
 8002dbc:	200003ac 	.word	0x200003ac
 8002dc0:	20000384 	.word	0x20000384
 8002dc4:	200003b4 	.word	0x200003b4
 8002dc8:	200003b8 	.word	0x200003b8
 8002dcc:	200003bc 	.word	0x200003bc
 8002dd0:	200003e4 	.word	0x200003e4
 8002dd4:	200003e8 	.word	0x200003e8
 8002dd8:	200003ec 	.word	0x200003ec
 8002ddc:	20000414 	.word	0x20000414
 8002de0:	20000340 	.word	0x20000340
 8002de4:	2000033c 	.word	0x2000033c
 8002de8:	2000042c 	.word	0x2000042c

08002dec <newCell>:
extern int16_t rightIRvalue;
extern int16_t frontLeftIRvalue;
extern int16_t frontRightIRvalue; // TODO: IS THIS NECESSARY?

struct Cell* newCell(int r, int c)           // Acts as a constructor for a cell cuz C is annoying
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
    struct Cell* p = malloc(sizeof(struct Cell));
 8002df6:	2008      	movs	r0, #8
 8002df8:	f003 fd4e 	bl	8006898 <malloc>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60fb      	str	r3, [r7, #12]
    p->row = r;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
    p->col = c;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
}
 8002e0c:	bf00      	nop
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <insertQueue>:

void insertQueue(struct Cell* input) {
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
    queue[queueEnd] = input;
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <insertQueue+0x38>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	490b      	ldr	r1, [pc, #44]	; (8002e54 <insertQueue+0x3c>)
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    queueEnd++;
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <insertQueue+0x38>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <insertQueue+0x38>)
 8002e34:	6013      	str	r3, [r2, #0]

    if (queueEnd == 512) {
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <insertQueue+0x38>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e3e:	d102      	bne.n	8002e46 <insertQueue+0x2e>
        queueEnd = 0;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <insertQueue+0x38>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
        //reset cause circular queue
    }
    //check me on this i might've messed up on pointers, i'm doing this right off of github and not from a compiler lol
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	20001040 	.word	0x20001040
 8002e54:	2000083c 	.word	0x2000083c

08002e58 <popQueueFront>:

void popQueueFront()
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
    free(queueFront());
 8002e5c:	f000 f816 	bl	8002e8c <queueFront>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 fd20 	bl	80068a8 <free>

    queueStart++;
 8002e68:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <popQueueFront+0x30>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <popQueueFront+0x30>)
 8002e70:	6013      	str	r3, [r2, #0]
    if (queueStart == 512) {
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <popQueueFront+0x30>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7a:	d102      	bne.n	8002e82 <popQueueFront+0x2a>
        queueStart = 0;
 8002e7c:	4b02      	ldr	r3, [pc, #8]	; (8002e88 <popQueueFront+0x30>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	2000103c 	.word	0x2000103c

08002e8c <queueFront>:

struct Cell* queueFront()
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
    return queue[queueStart];
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <queueFront+0x18>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <queueFront+0x1c>)
 8002e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	2000103c 	.word	0x2000103c
 8002ea8:	2000083c 	.word	0x2000083c

08002eac <initElements>:

void initElements()
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
    currPos = newCell(15, 0);           // Sets current position to row 15, column 0
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	200f      	movs	r0, #15
 8002eb6:	f7ff ff99 	bl	8002dec <newCell>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4a47      	ldr	r2, [pc, #284]	; (8002fdc <initElements+0x130>)
 8002ebe:	6013      	str	r3, [r2, #0]
    currHead = NORTH;                    // Sets current heading to north
 8002ec0:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <initElements+0x134>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 8; j++)                // Initializes default Manhattan distances for empty maze
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e043      	b.n	8002f54 <initElements+0xa8>
    {
        for (int i = 0; i < 8; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	e03a      	b.n	8002f48 <initElements+0x9c>
        {
            Manhattans[i][j] = 14 - i - j;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f1c3 020e 	rsb	r2, r3, #14
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	1ad2      	subs	r2, r2, r3
 8002edc:	4841      	ldr	r0, [pc, #260]	; (8002fe4 <initElements+0x138>)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	0119      	lsls	r1, r3, #4
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	440b      	add	r3, r1
 8002ee6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            Manhattans[15 - i][j] = 14 - i - j;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f1c3 010e 	rsb	r1, r3, #14
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f1c3 030f 	rsb	r3, r3, #15
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	1a8a      	subs	r2, r1, r2
 8002efa:	483a      	ldr	r0, [pc, #232]	; (8002fe4 <initElements+0x138>)
 8002efc:	0119      	lsls	r1, r3, #4
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	440b      	add	r3, r1
 8002f02:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            Manhattans[i][15 - j] = 14 - i - j;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f1c3 010e 	rsb	r1, r3, #14
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f1c3 030f 	rsb	r3, r3, #15
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	1a8a      	subs	r2, r1, r2
 8002f16:	4833      	ldr	r0, [pc, #204]	; (8002fe4 <initElements+0x138>)
 8002f18:	6939      	ldr	r1, [r7, #16]
 8002f1a:	0109      	lsls	r1, r1, #4
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            Manhattans[15 - i][15 - j] = 14 - i - j;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f1c3 000e 	rsb	r0, r3, #14
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f1c3 010f 	rsb	r1, r3, #15
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f1c3 030f 	rsb	r3, r3, #15
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	1a82      	subs	r2, r0, r2
 8002f38:	482a      	ldr	r0, [pc, #168]	; (8002fe4 <initElements+0x138>)
 8002f3a:	0109      	lsls	r1, r1, #4
 8002f3c:	440b      	add	r3, r1
 8002f3e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (int i = 0; i < 8; i++)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	3301      	adds	r3, #1
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b07      	cmp	r3, #7
 8002f4c:	ddc1      	ble.n	8002ed2 <initElements+0x26>
    for (int j = 0; j < 8; j++)                // Initializes default Manhattan distances for empty maze
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	3301      	adds	r3, #1
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b07      	cmp	r3, #7
 8002f58:	ddb8      	ble.n	8002ecc <initElements+0x20>
        }
    }

    for (int i = 0; i < 17; i++) {
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	e013      	b.n	8002f88 <initElements+0xdc>
        for (int j = 0; j < 16; j++) {
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	e00a      	b.n	8002f7c <initElements+0xd0>
            horzWall[i][j] = 0;
 8002f66:	4920      	ldr	r1, [pc, #128]	; (8002fe8 <initElements+0x13c>)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	011a      	lsls	r2, r3, #4
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4413      	add	r3, r2
 8002f70:	2200      	movs	r2, #0
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < 16; j++) {
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	ddf1      	ble.n	8002f66 <initElements+0xba>
    for (int i = 0; i < 17; i++) {
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3301      	adds	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	dde8      	ble.n	8002f60 <initElements+0xb4>
        }
    }

    for (int i = 0; i < 16; i++) {
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	e015      	b.n	8002fc0 <initElements+0x114>
        for (int j = 0; j < 17; j++) {
 8002f94:	2300      	movs	r3, #0
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	e00c      	b.n	8002fb4 <initElements+0x108>
            vertWall[i][j] = 0;
 8002f9a:	4914      	ldr	r1, [pc, #80]	; (8002fec <initElements+0x140>)
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	4413      	add	r3, r2
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < 17; j++) {
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	ddef      	ble.n	8002f9a <initElements+0xee>
    for (int i = 0; i < 16; i++) {
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b0f      	cmp	r3, #15
 8002fc4:	dde6      	ble.n	8002f94 <initElements+0xe8>
        }
    }

    queueStart = 0;
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <initElements+0x144>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
    queueEnd = 0;
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <initElements+0x148>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000434 	.word	0x20000434
 8002fe0:	20000438 	.word	0x20000438
 8002fe4:	2000043c 	.word	0x2000043c
 8002fe8:	20001044 	.word	0x20001044
 8002fec:	20001484 	.word	0x20001484
 8002ff0:	2000103c 	.word	0x2000103c
 8002ff4:	20001040 	.word	0x20001040

08002ff8 <displayManhatttans>:
//	running = 0;
//
//}

void displayManhatttans()       // Displays all current manhattan distances in grid
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
//        {
//            char str[4];
//            sprintf(str, "%d", Manhattans[row][col]);
//            API_setText(col, 15 - row, str);
//        }
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <setWall>:

void setWall(int dir)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    int currX = currPos->col;
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <setWall+0xb8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	60fb      	str	r3, [r7, #12]
    int currY = 15 - currPos->row;
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <setWall+0xb8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1c3 030f 	rsb	r3, r3, #15
 800301e:	60bb      	str	r3, [r7, #8]

    switch (dir)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d844      	bhi.n	80030b0 <setWall+0xac>
 8003026:	a201      	add	r2, pc, #4	; (adr r2, 800302c <setWall+0x28>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	0800303d 	.word	0x0800303d
 8003030:	08003057 	.word	0x08003057
 8003034:	08003077 	.word	0x08003077
 8003038:	08003093 	.word	0x08003093
    {
    case NORTH:
        horzWall[currPos->row][currPos->col] = 1;   // Sets the 2D array value to 1 to represent true (there's no bool type in C)
 800303c:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <setWall+0xb8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <setWall+0xb8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	491d      	ldr	r1, [pc, #116]	; (80030c0 <setWall+0xbc>)
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	4413      	add	r3, r2
 800304e:	2201      	movs	r2, #1
 8003050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        //API_setWall(currX, currY, 'n');             // Light up the discovered wall in the simulator
        break;
 8003054:	e02c      	b.n	80030b0 <setWall+0xac>
    case EAST:
        vertWall[currPos->row][currPos->col + 1] = 1;   // May need to check 2D array logic my head hurts lol
 8003056:	4b19      	ldr	r3, [pc, #100]	; (80030bc <setWall+0xb8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b17      	ldr	r3, [pc, #92]	; (80030bc <setWall+0xb8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	1c59      	adds	r1, r3, #1
 8003064:	4817      	ldr	r0, [pc, #92]	; (80030c4 <setWall+0xc0>)
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	4413      	add	r3, r2
 800306c:	440b      	add	r3, r1
 800306e:	2201      	movs	r2, #1
 8003070:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        //API_setWall(currX, currY, 'e');
        break;
 8003074:	e01c      	b.n	80030b0 <setWall+0xac>
    case SOUTH:
        horzWall[currPos->row + 1][currPos->col] = 1;
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <setWall+0xb8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <setWall+0xb8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	490e      	ldr	r1, [pc, #56]	; (80030c0 <setWall+0xbc>)
 8003086:	0112      	lsls	r2, r2, #4
 8003088:	4413      	add	r3, r2
 800308a:	2201      	movs	r2, #1
 800308c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        //API_setWall(currX, currY, 's');
        break;
 8003090:	e00e      	b.n	80030b0 <setWall+0xac>
    case WEST:
        vertWall[currPos->row][currPos->col] = 1;
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <setWall+0xb8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <setWall+0xb8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	4809      	ldr	r0, [pc, #36]	; (80030c4 <setWall+0xc0>)
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	4413      	add	r3, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	2201      	movs	r2, #1
 80030aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        //API_setWall(currX, currY, 'w');
        break;
 80030ae:	bf00      	nop
    }
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000434 	.word	0x20000434
 80030c0:	20001044 	.word	0x20001044
 80030c4:	20001484 	.word	0x20001484

080030c8 <detectWalls>:

void detectWalls()
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
    switch (currHead)
 80030cc:	4b3e      	ldr	r3, [pc, #248]	; (80031c8 <detectWalls+0x100>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d876      	bhi.n	80031c2 <detectWalls+0xfa>
 80030d4:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <detectWalls+0x14>)
 80030d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030da:	bf00      	nop
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	0800311f 	.word	0x0800311f
 80030e4:	08003151 	.word	0x08003151
 80030e8:	08003183 	.word	0x08003183
    {
    case NORTH:
        if (frontWallCheck())
 80030ec:	f000 fdae 	bl	8003c4c <frontWallCheck>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <detectWalls+0x34>
        {
            setWall(NORTH);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7ff ff84 	bl	8003004 <setWall>
        }
        if (leftWallCheck())
 80030fc:	f000 fd6e 	bl	8003bdc <leftWallCheck>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <detectWalls+0x44>
        {
            setWall(WEST);
 8003106:	2003      	movs	r0, #3
 8003108:	f7ff ff7c 	bl	8003004 <setWall>
        }
        if (rightWallCheck())
 800310c:	f000 fd82 	bl	8003c14 <rightWallCheck>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d04e      	beq.n	80031b4 <detectWalls+0xec>
        {
            setWall(EAST);
 8003116:	2001      	movs	r0, #1
 8003118:	f7ff ff74 	bl	8003004 <setWall>
        }
        break;
 800311c:	e04a      	b.n	80031b4 <detectWalls+0xec>
    case EAST:
        if (frontWallCheck())
 800311e:	f000 fd95 	bl	8003c4c <frontWallCheck>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <detectWalls+0x66>
        {
            setWall(EAST);
 8003128:	2001      	movs	r0, #1
 800312a:	f7ff ff6b 	bl	8003004 <setWall>
        }
        if (leftWallCheck())
 800312e:	f000 fd55 	bl	8003bdc <leftWallCheck>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <detectWalls+0x76>
        {
            setWall(NORTH);
 8003138:	2000      	movs	r0, #0
 800313a:	f7ff ff63 	bl	8003004 <setWall>
        }
        if (rightWallCheck())
 800313e:	f000 fd69 	bl	8003c14 <rightWallCheck>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d037      	beq.n	80031b8 <detectWalls+0xf0>
        {
            setWall(SOUTH);
 8003148:	2002      	movs	r0, #2
 800314a:	f7ff ff5b 	bl	8003004 <setWall>
        }
        break;
 800314e:	e033      	b.n	80031b8 <detectWalls+0xf0>
    case SOUTH:
        if (frontWallCheck())
 8003150:	f000 fd7c 	bl	8003c4c <frontWallCheck>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <detectWalls+0x98>
        {
            setWall(SOUTH);
 800315a:	2002      	movs	r0, #2
 800315c:	f7ff ff52 	bl	8003004 <setWall>
        }
        if (leftWallCheck())
 8003160:	f000 fd3c 	bl	8003bdc <leftWallCheck>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <detectWalls+0xa8>
        {
            setWall(EAST);
 800316a:	2001      	movs	r0, #1
 800316c:	f7ff ff4a 	bl	8003004 <setWall>
        }
        if (rightWallCheck())
 8003170:	f000 fd50 	bl	8003c14 <rightWallCheck>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d020      	beq.n	80031bc <detectWalls+0xf4>
        {
            setWall(WEST);
 800317a:	2003      	movs	r0, #3
 800317c:	f7ff ff42 	bl	8003004 <setWall>
        }
        break;
 8003180:	e01c      	b.n	80031bc <detectWalls+0xf4>
    case WEST:
        if (frontWallCheck())
 8003182:	f000 fd63 	bl	8003c4c <frontWallCheck>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <detectWalls+0xca>
        {
            setWall(WEST);
 800318c:	2003      	movs	r0, #3
 800318e:	f7ff ff39 	bl	8003004 <setWall>
        }
        if (leftWallCheck())
 8003192:	f000 fd23 	bl	8003bdc <leftWallCheck>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <detectWalls+0xda>
        {
            setWall(SOUTH);
 800319c:	2002      	movs	r0, #2
 800319e:	f7ff ff31 	bl	8003004 <setWall>
        }
        if (rightWallCheck())
 80031a2:	f000 fd37 	bl	8003c14 <rightWallCheck>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d009      	beq.n	80031c0 <detectWalls+0xf8>
        {
            setWall(NORTH);
 80031ac:	2000      	movs	r0, #0
 80031ae:	f7ff ff29 	bl	8003004 <setWall>
        }
        break;
 80031b2:	e005      	b.n	80031c0 <detectWalls+0xf8>
        break;
 80031b4:	bf00      	nop
 80031b6:	e004      	b.n	80031c2 <detectWalls+0xfa>
        break;
 80031b8:	bf00      	nop
 80031ba:	e002      	b.n	80031c2 <detectWalls+0xfa>
        break;
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <detectWalls+0xfa>
        break;
 80031c0:	bf00      	nop
    }
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000438 	.word	0x20000438

080031cc <recalculate>:

void recalculate()
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0

    insertQueue(newCell(currPos->row, currPos->col));
 80031d2:	4b9f      	ldr	r3, [pc, #636]	; (8003450 <recalculate+0x284>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4b9d      	ldr	r3, [pc, #628]	; (8003450 <recalculate+0x284>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4619      	mov	r1, r3
 80031e0:	4610      	mov	r0, r2
 80031e2:	f7ff fe03 	bl	8002dec <newCell>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fe15 	bl	8002e18 <insertQueue>

    //while queue is not empty
    while (queueStart != queueEnd) {
 80031ee:	e122      	b.n	8003436 <recalculate+0x26a>

        //Take front cell in queue “out of line” for consideration

        struct Cell* currElement = queueFront(); //has the current compared
 80031f0:	f7ff fe4c 	bl	8002e8c <queueFront>
 80031f4:	6038      	str	r0, [r7, #0]
//        sprintf(str, "Calculating distances at row %d, column %d", currElement->row, currElement->col);
//        debug_log(str);

        //Get the front cell’s minimum value amongst accessible neighbors.

        int neighborMinimum = -1;       //uninitialized or uncompared state when less than 0
 80031f6:	f04f 33ff 	mov.w	r3, #4294967295
 80031fa:	607b      	str	r3, [r7, #4]
        if (horzWall[currElement->row][currElement->col] != 1) {        //north wall
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4993      	ldr	r1, [pc, #588]	; (8003454 <recalculate+0x288>)
 8003206:	0112      	lsls	r2, r2, #4
 8003208:	4413      	add	r3, r2
 800320a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d01a      	beq.n	8003248 <recalculate+0x7c>
            if (neighborMinimum < 0 || neighborMinimum > Manhattans[currElement->row - 1][currElement->col]) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	db0c      	blt.n	8003232 <recalculate+0x66>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	1e5a      	subs	r2, r3, #1
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	498d      	ldr	r1, [pc, #564]	; (8003458 <recalculate+0x28c>)
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	4413      	add	r3, r2
 8003228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	dd0a      	ble.n	8003248 <recalculate+0x7c>
                neighborMinimum = Manhattans[currElement->row - 1][currElement->col];
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	1e5a      	subs	r2, r3, #1
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4986      	ldr	r1, [pc, #536]	; (8003458 <recalculate+0x28c>)
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	4413      	add	r3, r2
 8003242:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003246:	607b      	str	r3, [r7, #4]
            }
        }
        if (vertWall[currElement->row][currElement->col + 1] != 1) {        //east wall
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	1c59      	adds	r1, r3, #1
 8003252:	4882      	ldr	r0, [pc, #520]	; (800345c <recalculate+0x290>)
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	4413      	add	r3, r2
 800325a:	440b      	add	r3, r1
 800325c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d01a      	beq.n	800329a <recalculate+0xce>
            if (neighborMinimum < 0 || neighborMinimum > Manhattans[currElement->row][currElement->col + 1]) {
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	db0c      	blt.n	8003284 <recalculate+0xb8>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	3301      	adds	r3, #1
 8003274:	4978      	ldr	r1, [pc, #480]	; (8003458 <recalculate+0x28c>)
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	4413      	add	r3, r2
 800327a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	dd0a      	ble.n	800329a <recalculate+0xce>
                neighborMinimum = Manhattans[currElement->row][currElement->col + 1];
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	3301      	adds	r3, #1
 800328e:	4972      	ldr	r1, [pc, #456]	; (8003458 <recalculate+0x28c>)
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	4413      	add	r3, r2
 8003294:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003298:	607b      	str	r3, [r7, #4]
            }
        }
        if (horzWall[currElement->row + 1][currElement->col] != 1) {        //south wall
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	496b      	ldr	r1, [pc, #428]	; (8003454 <recalculate+0x288>)
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	4413      	add	r3, r2
 80032aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d01a      	beq.n	80032e8 <recalculate+0x11c>
            if (neighborMinimum < 0 || neighborMinimum > Manhattans[currElement->row + 1][currElement->col]) {
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0c      	blt.n	80032d2 <recalculate+0x106>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4965      	ldr	r1, [pc, #404]	; (8003458 <recalculate+0x28c>)
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	4413      	add	r3, r2
 80032c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	dd0a      	ble.n	80032e8 <recalculate+0x11c>
                neighborMinimum = Manhattans[currElement->row + 1][currElement->col];
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	495e      	ldr	r1, [pc, #376]	; (8003458 <recalculate+0x28c>)
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	4413      	add	r3, r2
 80032e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032e6:	607b      	str	r3, [r7, #4]
            }
        }
        if (vertWall[currElement->row][currElement->col] != 1) {        //west wall
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	485a      	ldr	r0, [pc, #360]	; (800345c <recalculate+0x290>)
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4413      	add	r3, r2
 80032f8:	440b      	add	r3, r1
 80032fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d01a      	beq.n	8003338 <recalculate+0x16c>
            if (neighborMinimum < 0 || neighborMinimum > Manhattans[currElement->row][currElement->col - 1]) {
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	db0c      	blt.n	8003322 <recalculate+0x156>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	3b01      	subs	r3, #1
 8003312:	4951      	ldr	r1, [pc, #324]	; (8003458 <recalculate+0x28c>)
 8003314:	0112      	lsls	r2, r2, #4
 8003316:	4413      	add	r3, r2
 8003318:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	dd0a      	ble.n	8003338 <recalculate+0x16c>
                neighborMinimum = Manhattans[currElement->row][currElement->col - 1];
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	494a      	ldr	r1, [pc, #296]	; (8003458 <recalculate+0x28c>)
 800332e:	0112      	lsls	r2, r2, #4
 8003330:	4413      	add	r3, r2
 8003332:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003336:	607b      	str	r3, [r7, #4]
            }
        }
        //If the front cell’s value ≤ minimum of its neighbors,
        //set the front cell’s value to minimum + 1 and add all accessible neighbors to the queue.
        if (Manhattans[currElement->row][currElement->col] <= neighborMinimum) {
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4945      	ldr	r1, [pc, #276]	; (8003458 <recalculate+0x28c>)
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	4413      	add	r3, r2
 8003346:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	db70      	blt.n	8003432 <recalculate+0x266>
            Manhattans[currElement->row][currElement->col] = neighborMinimum + 1;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6819      	ldr	r1, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	3201      	adds	r2, #1
 800335c:	483e      	ldr	r0, [pc, #248]	; (8003458 <recalculate+0x28c>)
 800335e:	0109      	lsls	r1, r1, #4
 8003360:	440b      	add	r3, r1
 8003362:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

            //again set through the accessible ones and add to queue
            if (horzWall[currElement->row][currElement->col] != 1) {        //north wall
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4939      	ldr	r1, [pc, #228]	; (8003454 <recalculate+0x288>)
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	4413      	add	r3, r2
 8003374:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d00c      	beq.n	8003396 <recalculate+0x1ca>
                insertQueue(newCell(currElement->row - 1, currElement->col));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1e5a      	subs	r2, r3, #1
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4619      	mov	r1, r3
 8003388:	4610      	mov	r0, r2
 800338a:	f7ff fd2f 	bl	8002dec <newCell>
 800338e:	4603      	mov	r3, r0
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fd41 	bl	8002e18 <insertQueue>
                //char str[50];
                //sprintf(str, "Added row %d, column %d to the queue", currElement->row - 1, currElement->col);
                //debug_log(str);
            }
            if (vertWall[currElement->row][currElement->col + 1] != 1) {        //east wall
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	1c59      	adds	r1, r3, #1
 80033a0:	482e      	ldr	r0, [pc, #184]	; (800345c <recalculate+0x290>)
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	4413      	add	r3, r2
 80033a8:	440b      	add	r3, r1
 80033aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d00c      	beq.n	80033cc <recalculate+0x200>
                insertQueue(newCell(currElement->row, currElement->col + 1));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	3301      	adds	r3, #1
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7ff fd14 	bl	8002dec <newCell>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fd26 	bl	8002e18 <insertQueue>
                //char str[50];
                //sprintf(str, "Added row %d, column %d to the queue", currElement->row, currElement->col + 1);
                //debug_log(str);
            }
            if (horzWall[currElement->row + 1][currElement->col] != 1) {        //south wall
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	491f      	ldr	r1, [pc, #124]	; (8003454 <recalculate+0x288>)
 80033d8:	0112      	lsls	r2, r2, #4
 80033da:	4413      	add	r3, r2
 80033dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d00c      	beq.n	80033fe <recalculate+0x232>
                insertQueue(newCell(currElement->row + 1, currElement->col));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4619      	mov	r1, r3
 80033f0:	4610      	mov	r0, r2
 80033f2:	f7ff fcfb 	bl	8002dec <newCell>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fd0d 	bl	8002e18 <insertQueue>
                //char str[50];
                //sprintf(str, "Added row %d, column %d to the queue", currElement->row + 1, currElement->col);
                //debug_log(str);
            }
            if (vertWall[currElement->row][currElement->col] != 1) {        //west wall
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	4815      	ldr	r0, [pc, #84]	; (800345c <recalculate+0x290>)
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	4413      	add	r3, r2
 800340e:	440b      	add	r3, r1
 8003410:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d00c      	beq.n	8003432 <recalculate+0x266>
                insertQueue(newCell(currElement->row, currElement->col - 1));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	3b01      	subs	r3, #1
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f7ff fce1 	bl	8002dec <newCell>
 800342a:	4603      	mov	r3, r0
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fcf3 	bl	8002e18 <insertQueue>
                //debug_log(str);
            }
            //we might have to check edge conditions (i.e. checking that we don't access -1 rows or something)
        }

        popQueueFront();      // Deletes cell from queue and frees memory
 8003432:	f7ff fd11 	bl	8002e58 <popQueueFront>
    while (queueStart != queueEnd) {
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <recalculate+0x294>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <recalculate+0x298>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	f47f aed6 	bne.w	80031f0 <recalculate+0x24>

        //Else, continue!
    }
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000434 	.word	0x20000434
 8003454:	20001044 	.word	0x20001044
 8003458:	2000043c 	.word	0x2000043c
 800345c:	20001484 	.word	0x20001484
 8003460:	2000103c 	.word	0x2000103c
 8003464:	20001040 	.word	0x20001040

08003468 <solver>:

Action solver(Algorithm alg) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
    switch (alg)
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <solver+0x16>
 8003478:	2b01      	cmp	r3, #1
 800347a:	d004      	beq.n	8003486 <solver+0x1e>
 800347c:	e007      	b.n	800348e <solver+0x26>
    {
    case DEAD:
    	return deadReckoning();
 800347e:	f000 f80a 	bl	8003496 <deadReckoning>
 8003482:	4603      	mov	r3, r0
 8003484:	e003      	b.n	800348e <solver+0x26>
    	break;
    case FLOODFILL:
    	return floodFill();
 8003486:	f000 f819 	bl	80034bc <floodFill>
 800348a:	4603      	mov	r3, r0
 800348c:	e7ff      	b.n	800348e <solver+0x26>
    	break;
    }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <deadReckoning>:

Action deadReckoning() {       // The simple left wall following algorithm that they provided
 8003496:	b580      	push	{r7, lr}
 8003498:	af00      	add	r7, sp, #0
	if (!frontWallCheck())
 800349a:	f000 fbd7 	bl	8003c4c <frontWallCheck>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <deadReckoning+0x12>
	{
		return FORWARD;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e007      	b.n	80034b8 <deadReckoning+0x22>
	}
	else if (!rightWallCheck())
 80034a8:	f000 fbb4 	bl	8003c14 <rightWallCheck>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <deadReckoning+0x20>
	{
		return RIGHT;
 80034b2:	2302      	movs	r3, #2
 80034b4:	e000      	b.n	80034b8 <deadReckoning+0x22>
	}
	else
	{
		return LEFT;
 80034b6:	2300      	movs	r3, #0
	}
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}

080034bc <floodFill>:

Action floodFill() {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
    if (!initialized)           // Initializes all the elements once (there might be a better way to do this idk)
 80034c2:	4b9a      	ldr	r3, [pc, #616]	; (800372c <floodFill+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d104      	bne.n	80034d4 <floodFill+0x18>
    {
        initElements();
 80034ca:	f7ff fcef 	bl	8002eac <initElements>
        initialized = 1;
 80034ce:	4b97      	ldr	r3, [pc, #604]	; (800372c <floodFill+0x270>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
    }

    detectWalls();  // Lights up detected walls and adds them to the 2D wall arrays
 80034d4:	f7ff fdf8 	bl	80030c8 <detectWalls>
    displayManhatttans();
 80034d8:	f7ff fd8e 	bl	8002ff8 <displayManhatttans>

    int nextHead = -1;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	61fb      	str	r3, [r7, #28]
    int row = currPos->row;
 80034e2:	4b93      	ldr	r3, [pc, #588]	; (8003730 <floodFill+0x274>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	61bb      	str	r3, [r7, #24]
    int col = currPos->col;
 80034ea:	4b91      	ldr	r3, [pc, #580]	; (8003730 <floodFill+0x274>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	617b      	str	r3, [r7, #20]

    if (Manhattans[row][col] == 0)
 80034f2:	4990      	ldr	r1, [pc, #576]	; (8003734 <floodFill+0x278>)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	011a      	lsls	r2, r3, #4
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	4413      	add	r3, r2
 80034fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <floodFill+0x4c>
    {
//		restart();
    	return IDLE;
 8003504:	2303      	movs	r3, #3
 8003506:	e124      	b.n	8003752 <floodFill+0x296>
    }


    int northBlocked = horzWall[currPos->row][currPos->col];
 8003508:	4b89      	ldr	r3, [pc, #548]	; (8003730 <floodFill+0x274>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b88      	ldr	r3, [pc, #544]	; (8003730 <floodFill+0x274>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4988      	ldr	r1, [pc, #544]	; (8003738 <floodFill+0x27c>)
 8003516:	0112      	lsls	r2, r2, #4
 8003518:	4413      	add	r3, r2
 800351a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800351e:	613b      	str	r3, [r7, #16]
    int eastBlocked = vertWall[currPos->row][currPos->col + 1];
 8003520:	4b83      	ldr	r3, [pc, #524]	; (8003730 <floodFill+0x274>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b82      	ldr	r3, [pc, #520]	; (8003730 <floodFill+0x274>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	1c59      	adds	r1, r3, #1
 800352e:	4883      	ldr	r0, [pc, #524]	; (800373c <floodFill+0x280>)
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	4413      	add	r3, r2
 8003536:	440b      	add	r3, r1
 8003538:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800353c:	60fb      	str	r3, [r7, #12]
    int southBlocked = horzWall[currPos->row + 1][currPos->col];
 800353e:	4b7c      	ldr	r3, [pc, #496]	; (8003730 <floodFill+0x274>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	4b7a      	ldr	r3, [pc, #488]	; (8003730 <floodFill+0x274>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	497a      	ldr	r1, [pc, #488]	; (8003738 <floodFill+0x27c>)
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	4413      	add	r3, r2
 8003552:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003556:	60bb      	str	r3, [r7, #8]
    int westBlocked = vertWall[currPos->row][currPos->col];
 8003558:	4b75      	ldr	r3, [pc, #468]	; (8003730 <floodFill+0x274>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b74      	ldr	r3, [pc, #464]	; (8003730 <floodFill+0x274>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	4875      	ldr	r0, [pc, #468]	; (800373c <floodFill+0x280>)
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	4413      	add	r3, r2
 800356c:	440b      	add	r3, r1
 800356e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003572:	607b      	str	r3, [r7, #4]

    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d015      	beq.n	80035a6 <floodFill+0xea>
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	3b01      	subs	r3, #1
 800357e:	496d      	ldr	r1, [pc, #436]	; (8003734 <floodFill+0x278>)
 8003580:	011a      	lsls	r2, r3, #4
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	4413      	add	r3, r2
 8003586:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800358a:	486a      	ldr	r0, [pc, #424]	; (8003734 <floodFill+0x278>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	0119      	lsls	r1, r3, #4
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	440b      	add	r3, r1
 8003594:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003598:	429a      	cmp	r2, r3
 800359a:	da04      	bge.n	80035a6 <floodFill+0xea>
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <floodFill+0xea>
        nextHead = NORTH;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
    if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b0f      	cmp	r3, #15
 80035aa:	d015      	beq.n	80035d8 <floodFill+0x11c>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3301      	adds	r3, #1
 80035b0:	4960      	ldr	r1, [pc, #384]	; (8003734 <floodFill+0x278>)
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	4413      	add	r3, r2
 80035b8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80035bc:	485d      	ldr	r0, [pc, #372]	; (8003734 <floodFill+0x278>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	0119      	lsls	r1, r3, #4
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	440b      	add	r3, r1
 80035c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	da04      	bge.n	80035d8 <floodFill+0x11c>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <floodFill+0x11c>
        nextHead = EAST;
 80035d4:	2301      	movs	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
    if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0f      	cmp	r3, #15
 80035dc:	d015      	beq.n	800360a <floodFill+0x14e>
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	3301      	adds	r3, #1
 80035e2:	4954      	ldr	r1, [pc, #336]	; (8003734 <floodFill+0x278>)
 80035e4:	011a      	lsls	r2, r3, #4
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	4413      	add	r3, r2
 80035ea:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80035ee:	4851      	ldr	r0, [pc, #324]	; (8003734 <floodFill+0x278>)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	0119      	lsls	r1, r3, #4
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	440b      	add	r3, r1
 80035f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	da04      	bge.n	800360a <floodFill+0x14e>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <floodFill+0x14e>
        nextHead = SOUTH;
 8003606:	2302      	movs	r3, #2
 8003608:	61fb      	str	r3, [r7, #28]
    if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)       // Find next heading
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <floodFill+0x180>
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3b01      	subs	r3, #1
 8003614:	4947      	ldr	r1, [pc, #284]	; (8003734 <floodFill+0x278>)
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	0112      	lsls	r2, r2, #4
 800361a:	4413      	add	r3, r2
 800361c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003620:	4844      	ldr	r0, [pc, #272]	; (8003734 <floodFill+0x278>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	0119      	lsls	r1, r3, #4
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	440b      	add	r3, r1
 800362a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800362e:	429a      	cmp	r2, r3
 8003630:	da04      	bge.n	800363c <floodFill+0x180>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <floodFill+0x180>
        nextHead = WEST;
 8003638:	2303      	movs	r3, #3
 800363a:	61fb      	str	r3, [r7, #28]

    if (nextHead == -1)                     // If no path available, then recalculta
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003642:	d103      	bne.n	800364c <floodFill+0x190>
    {
        recalculate();
 8003644:	f7ff fdc2 	bl	80031cc <recalculate>
        return IDLE;
 8003648:	2303      	movs	r3, #3
 800364a:	e082      	b.n	8003752 <floodFill+0x296>
    }

    if (nextHead == currHead)               // If next heading is in same direction, move forward
 800364c:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <floodFill+0x284>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4293      	cmp	r3, r2
 8003656:	d129      	bne.n	80036ac <floodFill+0x1f0>
    {
        switch (currHead)
 8003658:	4b39      	ldr	r3, [pc, #228]	; (8003740 <floodFill+0x284>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d823      	bhi.n	80036a8 <floodFill+0x1ec>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <floodFill+0x1ac>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	08003679 	.word	0x08003679
 800366c:	08003685 	.word	0x08003685
 8003670:	08003691 	.word	0x08003691
 8003674:	0800369d 	.word	0x0800369d
        {
        case NORTH:
            currPos->row--;
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <floodFill+0x274>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	3a01      	subs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]
            break;
 8003682:	e011      	b.n	80036a8 <floodFill+0x1ec>
        case EAST:
            currPos->col++;
 8003684:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <floodFill+0x274>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	3201      	adds	r2, #1
 800368c:	605a      	str	r2, [r3, #4]
            break;
 800368e:	e00b      	b.n	80036a8 <floodFill+0x1ec>
        case SOUTH:
            currPos->row++;
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <floodFill+0x274>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	3201      	adds	r2, #1
 8003698:	601a      	str	r2, [r3, #0]
            break;
 800369a:	e005      	b.n	80036a8 <floodFill+0x1ec>
        case WEST:
            currPos->col--;
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <floodFill+0x274>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	3a01      	subs	r2, #1
 80036a4:	605a      	str	r2, [r3, #4]
            break;
 80036a6:	bf00      	nop
        }
        return FORWARD;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e052      	b.n	8003752 <floodFill+0x296>
    }

    if ((nextHead - currHead) % 2 == 0)         // If next heading is in opposite direction, turn right
 80036ac:	4b24      	ldr	r3, [pc, #144]	; (8003740 <floodFill+0x284>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10f      	bne.n	80036de <floodFill+0x222>
    {
        if (currHead == WEST)
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <floodFill+0x284>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d103      	bne.n	80036ce <floodFill+0x212>
            currHead = NORTH;
 80036c6:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <floodFill+0x284>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e005      	b.n	80036da <floodFill+0x21e>
        else
            currHead++;
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <floodFill+0x284>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	3301      	adds	r3, #1
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <floodFill+0x284>)
 80036d8:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 80036da:	2302      	movs	r3, #2
 80036dc:	e039      	b.n	8003752 <floodFill+0x296>
    }

    if ((nextHead - currHead) == 1 || nextHead - currHead == -3)  // If next heading is right, turn right
 80036de:	4b18      	ldr	r3, [pc, #96]	; (8003740 <floodFill+0x284>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d007      	beq.n	80036fc <floodFill+0x240>
 80036ec:	4b14      	ldr	r3, [pc, #80]	; (8003740 <floodFill+0x284>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	f113 0f03 	cmn.w	r3, #3
 80036fa:	d10f      	bne.n	800371c <floodFill+0x260>
    {
        if (currHead == WEST)
 80036fc:	4b10      	ldr	r3, [pc, #64]	; (8003740 <floodFill+0x284>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d103      	bne.n	800370c <floodFill+0x250>
            currHead = NORTH;
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <floodFill+0x284>)
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e005      	b.n	8003718 <floodFill+0x25c>
        else
            currHead++;
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <floodFill+0x284>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	b2da      	uxtb	r2, r3
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <floodFill+0x284>)
 8003716:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 8003718:	2302      	movs	r3, #2
 800371a:	e01a      	b.n	8003752 <floodFill+0x296>
    }

    if (currHead == NORTH)  // else, turn left
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <floodFill+0x284>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10f      	bne.n	8003744 <floodFill+0x288>
        currHead = WEST;
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <floodFill+0x284>)
 8003726:	2203      	movs	r2, #3
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e011      	b.n	8003750 <floodFill+0x294>
 800372c:	20000430 	.word	0x20000430
 8003730:	20000434 	.word	0x20000434
 8003734:	2000043c 	.word	0x2000043c
 8003738:	20001044 	.word	0x20001044
 800373c:	20001484 	.word	0x20001484
 8003740:	20000438 	.word	0x20000438
    else
        currHead--;
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <floodFill+0x2a0>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	3b01      	subs	r3, #1
 800374a:	b2da      	uxtb	r2, r3
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <floodFill+0x2a0>)
 800374e:	701a      	strb	r2, [r3, #0]
    return LEFT;
 8003750:	2300      	movs	r3, #0
    //while (queueStart != queueEnd)
    //{
    //    API_setColor(queueFront()->row, queueFront()->col, 'g');
    //    popQueueFront();
    //}
}
 8003752:	4618      	mov	r0, r3
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000438 	.word	0x20000438

08003760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_MspInit+0x48>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <HAL_MspInit+0x48>)
 8003770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_MspInit+0x48>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <HAL_MspInit+0x48>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <HAL_MspInit+0x48>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_MspInit+0x48>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	40023800 	.word	0x40023800

080037ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a3c      	ldr	r2, [pc, #240]	; (80038bc <HAL_ADC_MspInit+0x110>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d171      	bne.n	80038b2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_ADC_MspInit+0x114>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	4a3a      	ldr	r2, [pc, #232]	; (80038c0 <HAL_ADC_MspInit+0x114>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037dc:	6453      	str	r3, [r2, #68]	; 0x44
 80037de:	4b38      	ldr	r3, [pc, #224]	; (80038c0 <HAL_ADC_MspInit+0x114>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <HAL_ADC_MspInit+0x114>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a33      	ldr	r2, [pc, #204]	; (80038c0 <HAL_ADC_MspInit+0x114>)
 80037f4:	f043 0304 	orr.w	r3, r3, #4
 80037f8:	6313      	str	r3, [r2, #48]	; 0x30
 80037fa:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <HAL_ADC_MspInit+0x114>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_ADC_MspInit+0x114>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a2c      	ldr	r2, [pc, #176]	; (80038c0 <HAL_ADC_MspInit+0x114>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_ADC_MspInit+0x114>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 8003822:	2303      	movs	r3, #3
 8003824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003826:	2303      	movs	r3, #3
 8003828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800382e:	f107 0314 	add.w	r3, r7, #20
 8003832:	4619      	mov	r1, r3
 8003834:	4823      	ldr	r0, [pc, #140]	; (80038c4 <HAL_ADC_MspInit+0x118>)
 8003836:	f001 fbf3 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 800383a:	2360      	movs	r3, #96	; 0x60
 800383c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800383e:	2303      	movs	r3, #3
 8003840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003846:	f107 0314 	add.w	r3, r7, #20
 800384a:	4619      	mov	r1, r3
 800384c:	481e      	ldr	r0, [pc, #120]	; (80038c8 <HAL_ADC_MspInit+0x11c>)
 800384e:	f001 fbe7 	bl	8005020 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <HAL_ADC_MspInit+0x120>)
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_ADC_MspInit+0x124>)
 8003856:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003858:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <HAL_ADC_MspInit+0x120>)
 800385a:	2200      	movs	r2, #0
 800385c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_ADC_MspInit+0x120>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_ADC_MspInit+0x120>)
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <HAL_ADC_MspInit+0x120>)
 800386c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003870:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <HAL_ADC_MspInit+0x120>)
 8003874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003878:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800387a:	4b14      	ldr	r3, [pc, #80]	; (80038cc <HAL_ADC_MspInit+0x120>)
 800387c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003880:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_ADC_MspInit+0x120>)
 8003884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003888:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_ADC_MspInit+0x120>)
 800388c:	2200      	movs	r2, #0
 800388e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_ADC_MspInit+0x120>)
 8003892:	2200      	movs	r2, #0
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003896:	480d      	ldr	r0, [pc, #52]	; (80038cc <HAL_ADC_MspInit+0x120>)
 8003898:	f000 ffe6 	bl	8004868 <HAL_DMA_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80038a2:	f7fe fa69 	bl	8001d78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a08      	ldr	r2, [pc, #32]	; (80038cc <HAL_ADC_MspInit+0x120>)
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
 80038ac:	4a07      	ldr	r2, [pc, #28]	; (80038cc <HAL_ADC_MspInit+0x120>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038b2:	bf00      	nop
 80038b4:	3728      	adds	r7, #40	; 0x28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40012000 	.word	0x40012000
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40020800 	.word	0x40020800
 80038c8:	40020000 	.word	0x40020000
 80038cc:	200001ec 	.word	0x200001ec
 80038d0:	40026410 	.word	0x40026410

080038d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0a      	ldr	r2, [pc, #40]	; (800390c <HAL_TIM_PWM_MspInit+0x38>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10d      	bne.n	8003902 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_TIM_PWM_MspInit+0x3c>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	4a08      	ldr	r2, [pc, #32]	; (8003910 <HAL_TIM_PWM_MspInit+0x3c>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6453      	str	r3, [r2, #68]	; 0x44
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_TIM_PWM_MspInit+0x3c>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003902:	bf00      	nop
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	40010000 	.word	0x40010000
 8003910:	40023800 	.word	0x40023800

08003914 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08c      	sub	sp, #48	; 0x30
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	f107 031c 	add.w	r3, r7, #28
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a32      	ldr	r2, [pc, #200]	; (80039fc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d12c      	bne.n	8003990 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	4a30      	ldr	r2, [pc, #192]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 8003940:	f043 0302 	orr.w	r3, r3, #2
 8003944:	6413      	str	r3, [r2, #64]	; 0x40
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a29      	ldr	r2, [pc, #164]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 800396e:	2330      	movs	r3, #48	; 0x30
 8003970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003972:	2302      	movs	r3, #2
 8003974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397a:	2300      	movs	r3, #0
 800397c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800397e:	2302      	movs	r3, #2
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003982:	f107 031c 	add.w	r3, r7, #28
 8003986:	4619      	mov	r1, r3
 8003988:	481e      	ldr	r0, [pc, #120]	; (8003a04 <HAL_TIM_Encoder_MspInit+0xf0>)
 800398a:	f001 fb49 	bl	8005020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800398e:	e030      	b.n	80039f2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d12b      	bne.n	80039f2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	4a17      	ldr	r2, [pc, #92]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	6453      	str	r3, [r2, #68]	; 0x44
 80039aa:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	4a10      	ldr	r2, [pc, #64]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 80039c0:	f043 0304 	orr.w	r3, r3, #4
 80039c4:	6313      	str	r3, [r2, #48]	; 0x30
 80039c6:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xec>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 80039d2:	23c0      	movs	r3, #192	; 0xc0
 80039d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039de:	2300      	movs	r3, #0
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80039e2:	2303      	movs	r3, #3
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e6:	f107 031c 	add.w	r3, r7, #28
 80039ea:	4619      	mov	r1, r3
 80039ec:	4807      	ldr	r0, [pc, #28]	; (8003a0c <HAL_TIM_Encoder_MspInit+0xf8>)
 80039ee:	f001 fb17 	bl	8005020 <HAL_GPIO_Init>
}
 80039f2:	bf00      	nop
 80039f4:	3730      	adds	r7, #48	; 0x30
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40020400 	.word	0x40020400
 8003a08:	40010400 	.word	0x40010400
 8003a0c:	40020800 	.word	0x40020800

08003a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a18:	f107 030c 	add.w	r3, r7, #12
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <HAL_TIM_MspPostInit+0x68>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d11e      	bne.n	8003a70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_TIM_MspPostInit+0x6c>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4a10      	ldr	r2, [pc, #64]	; (8003a7c <HAL_TIM_MspPostInit+0x6c>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6313      	str	r3, [r2, #48]	; 0x30
 8003a42:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <HAL_TIM_MspPostInit+0x6c>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8003a4e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003a52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	2302      	movs	r3, #2
 8003a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4805      	ldr	r0, [pc, #20]	; (8003a80 <HAL_TIM_MspPostInit+0x70>)
 8003a6c:	f001 fad8 	bl	8005020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a70:	bf00      	nop
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40020000 	.word	0x40020000

08003a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a88:	e7fe      	b.n	8003a88 <NMI_Handler+0x4>

08003a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a8e:	e7fe      	b.n	8003a8e <HardFault_Handler+0x4>

08003a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a94:	e7fe      	b.n	8003a94 <MemManage_Handler+0x4>

08003a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a9a:	e7fe      	b.n	8003a9a <BusFault_Handler+0x4>

08003a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa0:	e7fe      	b.n	8003aa0 <UsageFault_Handler+0x4>

08003aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aca:	f000 f975 	bl	8003db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  SysTickFunction();
 8003ace:	f000 f849 	bl	8003b64 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <DMA2_Stream0_IRQHandler+0x10>)
 8003ade:	f001 f839 	bl	8004b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200001ec 	.word	0x200001ec

08003aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003af4:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <_sbrk+0x5c>)
 8003af6:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <_sbrk+0x60>)
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b00:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <_sbrk+0x64>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <_sbrk+0x64>)
 8003b0a:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <_sbrk+0x68>)
 8003b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <_sbrk+0x64>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d207      	bcs.n	8003b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b1c:	f002 fe92 	bl	8006844 <__errno>
 8003b20:	4603      	mov	r3, r0
 8003b22:	220c      	movs	r2, #12
 8003b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	e009      	b.n	8003b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <_sbrk+0x64>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <_sbrk+0x64>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <_sbrk+0x64>)
 8003b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20020000 	.word	0x20020000
 8003b4c:	00000400 	.word	0x00000400
 8003b50:	200018c4 	.word	0x200018c4
 8003b54:	200018e8 	.word	0x200018e8

08003b58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <SysTickFunction>:

#include "main.h"
#include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 8003b6a:	f7fe fe2d 	bl	80027c8 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8003b6e:	f7fd fc49 	bl	8001404 <getRightEncoderCounts>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	f647 1318 	movw	r3, #31000	; 0x7918
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	dc15      	bgt.n	8003baa <SysTickFunction+0x46>
 8003b7e:	f7fd fc4f 	bl	8001420 <getLeftEncoderCounts>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	f647 1318 	movw	r3, #31000	; 0x7918
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	dc0d      	bgt.n	8003baa <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8003b8e:	f7fd fc39 	bl	8001404 <getRightEncoderCounts>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <SysTickFunction+0x74>)
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	db06      	blt.n	8003baa <SysTickFunction+0x46>
 8003b9c:	f7fd fc40 	bl	8001420 <getLeftEncoderCounts>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <SysTickFunction+0x74>)
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	da11      	bge.n	8003bce <SysTickFunction+0x6a>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8003baa:	f7fd fc2b 	bl	8001404 <getRightEncoderCounts>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	b29c      	uxth	r4, r3
 8003bb2:	f7fd fc35 	bl	8001420 <getLeftEncoderCounts>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	1ae3      	subs	r3, r4, r3
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 8003bc0:	f7fd fc3c 	bl	800143c <resetEncoders>
		TIM2->CNT = (int16_t) difference;
 8003bc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bcc:	6253      	str	r3, [r2, #36]	; 0x24
	}
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd90      	pop	{r4, r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	ffff86e8 	.word	0xffff86e8

08003bdc <leftWallCheck>:

void setLeftWall(int wall) { left_wall_threshold = wall; }
void setRightWall(int wall) { right_wall_threshold = wall; }
void setFrontWall(int wall) { front_wall_threshold = wall; }

int16_t leftWallCheck() {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
	if (readIR(IR_LEFT) > left_wall_threshold) {
 8003be0:	2001      	movs	r0, #1
 8003be2:	f7fd fc3b 	bl	800145c <readIR>
 8003be6:	4603      	mov	r3, r0
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <leftWallCheck+0x30>)
 8003bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	dd03      	ble.n	8003bfc <leftWallCheck+0x20>
		left_wall = 1;
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <leftWallCheck+0x34>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	e002      	b.n	8003c02 <leftWallCheck+0x26>
	}
	else {
		left_wall = 0;
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <leftWallCheck+0x34>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	801a      	strh	r2, [r3, #0]
	}
	return left_wall;
 8003c02:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <leftWallCheck+0x34>)
 8003c04:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000010 	.word	0x20000010
 8003c10:	200018c8 	.word	0x200018c8

08003c14 <rightWallCheck>:

int16_t rightWallCheck() {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
	if (readIR(IR_RIGHT) > right_wall_threshold) {
 8003c18:	2002      	movs	r0, #2
 8003c1a:	f7fd fc1f 	bl	800145c <readIR>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <rightWallCheck+0x30>)
 8003c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	dd03      	ble.n	8003c34 <rightWallCheck+0x20>
		right_wall = 1;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <rightWallCheck+0x34>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	801a      	strh	r2, [r3, #0]
 8003c32:	e002      	b.n	8003c3a <rightWallCheck+0x26>
	}
	else {
		right_wall = 0;
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <rightWallCheck+0x34>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	801a      	strh	r2, [r3, #0]
	}
	return right_wall;
 8003c3a:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <rightWallCheck+0x34>)
 8003c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000012 	.word	0x20000012
 8003c48:	200018ca 	.word	0x200018ca

08003c4c <frontWallCheck>:

int16_t frontWallCheck() {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
	if (readIR(IR_FORWARD_LEFT) > front_wall_threshold) {
 8003c50:	2000      	movs	r0, #0
 8003c52:	f7fd fc03 	bl	800145c <readIR>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <frontWallCheck+0x30>)
 8003c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	dd03      	ble.n	8003c6c <frontWallCheck+0x20>
		front_wall = 1;
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <frontWallCheck+0x34>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	e002      	b.n	8003c72 <frontWallCheck+0x26>
	}
	else {
		front_wall = 0;
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <frontWallCheck+0x34>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	801a      	strh	r2, [r3, #0]
	}
	return front_wall;
 8003c72:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <frontWallCheck+0x34>)
 8003c74:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000014 	.word	0x20000014
 8003c80:	200018cc 	.word	0x200018cc

08003c84 <sign>:

int16_t sign(float x) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	if (x > 0)
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7fd f921 	bl	8000ed8 <__aeabi_fcmpgt>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <sign+0x1c>
	{
		return 1;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e00b      	b.n	8003cb8 <sign+0x34>
	}
	else if (x < 0)
 8003ca0:	f04f 0100 	mov.w	r1, #0
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7fd f8f9 	bl	8000e9c <__aeabi_fcmplt>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <sign+0x32>
	{
		return -1;
 8003cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb4:	e000      	b.n	8003cb8 <sign+0x34>
	}
	else
	{
		return 0;
 8003cb6:	2300      	movs	r3, #0
	}
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cc4:	480d      	ldr	r0, [pc, #52]	; (8003cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cc6:	490e      	ldr	r1, [pc, #56]	; (8003d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cc8:	4a0e      	ldr	r2, [pc, #56]	; (8003d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ccc:	e002      	b.n	8003cd4 <LoopCopyDataInit>

08003cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cd2:	3304      	adds	r3, #4

08003cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cd8:	d3f9      	bcc.n	8003cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cda:	4a0b      	ldr	r2, [pc, #44]	; (8003d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cdc:	4c0b      	ldr	r4, [pc, #44]	; (8003d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ce0:	e001      	b.n	8003ce6 <LoopFillZerobss>

08003ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ce4:	3204      	adds	r2, #4

08003ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ce8:	d3fb      	bcc.n	8003ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cea:	f7ff ff35 	bl	8003b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cee:	f002 fdaf 	bl	8006850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cf2:	f7fd fca9 	bl	8001648 <main>
  bx  lr    
 8003cf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d00:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003d04:	08006afc 	.word	0x08006afc
  ldr r2, =_sbss
 8003d08:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003d0c:	200018e4 	.word	0x200018e4

08003d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d10:	e7fe      	b.n	8003d10 <ADC_IRQHandler>
	...

08003d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <HAL_Init+0x40>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <HAL_Init+0x40>)
 8003d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_Init+0x40>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <HAL_Init+0x40>)
 8003d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <HAL_Init+0x40>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a07      	ldr	r2, [pc, #28]	; (8003d54 <HAL_Init+0x40>)
 8003d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d3c:	2003      	movs	r0, #3
 8003d3e:	f000 fd51 	bl	80047e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d42:	200f      	movs	r0, #15
 8003d44:	f000 f808 	bl	8003d58 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003d48:	f7ff fd0a 	bl	8003760 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023c00 	.word	0x40023c00

08003d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_InitTick+0x54>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_InitTick+0x58>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fd69 	bl	800484e <HAL_SYSTICK_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e00e      	b.n	8003da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b0f      	cmp	r3, #15
 8003d8a:	d80a      	bhi.n	8003da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	f000 fd31 	bl	80047fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d98:	4a06      	ldr	r2, [pc, #24]	; (8003db4 <HAL_InitTick+0x5c>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	2000000c 	.word	0x2000000c
 8003db0:	2000001c 	.word	0x2000001c
 8003db4:	20000018 	.word	0x20000018

08003db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_IncTick+0x1c>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_IncTick+0x20>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	4a03      	ldr	r2, [pc, #12]	; (8003dd8 <HAL_IncTick+0x20>)
 8003dca:	6013      	str	r3, [r2, #0]
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	2000001c 	.word	0x2000001c
 8003dd8:	200018d0 	.word	0x200018d0

08003ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return uwTick;
 8003de0:	4b02      	ldr	r3, [pc, #8]	; (8003dec <HAL_GetTick+0x10>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	200018d0 	.word	0x200018d0

08003df0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e033      	b.n	8003e6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fccc 	bl	80037ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e36:	f023 0302 	bic.w	r3, r3, #2
 8003e3a:	f043 0202 	orr.w	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa7a 	bl	800433c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
 8003e5e:	e001      	b.n	8003e64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_Start_DMA+0x1e>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e0bc      	b.n	8004010 <HAL_ADC_Start_DMA+0x198>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d018      	beq.n	8003ede <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ebc:	4b56      	ldr	r3, [pc, #344]	; (8004018 <HAL_ADC_Start_DMA+0x1a0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a56      	ldr	r2, [pc, #344]	; (800401c <HAL_ADC_Start_DMA+0x1a4>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	0c9a      	lsrs	r2, r3, #18
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003ed0:	e002      	b.n	8003ed8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f9      	bne.n	8003ed2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	f040 8084 	bne.w	8003ff6 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d106      	bne.n	8003f3c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f023 0206 	bic.w	r2, r3, #6
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
 8003f3a:	e002      	b.n	8003f42 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	4a34      	ldr	r2, [pc, #208]	; (8004020 <HAL_ADC_Start_DMA+0x1a8>)
 8003f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	4a33      	ldr	r2, [pc, #204]	; (8004024 <HAL_ADC_Start_DMA+0x1ac>)
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	4a32      	ldr	r2, [pc, #200]	; (8004028 <HAL_ADC_Start_DMA+0x1b0>)
 8003f60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f7a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	334c      	adds	r3, #76	; 0x4c
 8003f96:	4619      	mov	r1, r3
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f000 fd12 	bl	80049c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003fa0:	4b22      	ldr	r3, [pc, #136]	; (800402c <HAL_ADC_Start_DMA+0x1b4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10f      	bne.n	8003fcc <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d129      	bne.n	800400e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	e020      	b.n	800400e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a17      	ldr	r2, [pc, #92]	; (8004030 <HAL_ADC_Start_DMA+0x1b8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d11b      	bne.n	800400e <HAL_ADC_Start_DMA+0x196>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d114      	bne.n	800400e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	e00b      	b.n	800400e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f043 0210 	orr.w	r2, r3, #16
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	2000000c 	.word	0x2000000c
 800401c:	431bde83 	.word	0x431bde83
 8004020:	08004549 	.word	0x08004549
 8004024:	08004603 	.word	0x08004603
 8004028:	0800461f 	.word	0x0800461f
 800402c:	40012300 	.word	0x40012300
 8004030:	40012000 	.word	0x40012000

08004034 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_ADC_Stop_DMA+0x1a>
 800404a:	2302      	movs	r3, #2
 800404c:	e03f      	b.n	80040ce <HAL_ADC_Stop_DMA+0x9a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0201 	bic.w	r2, r2, #1
 8004064:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d127      	bne.n	80040c4 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004082:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d118      	bne.n	80040c4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fcec 	bl	8004a74 <HAL_DMA_Abort>
 800409c:	4603      	mov	r3, r0
 800409e:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80040ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	f043 0201 	orr.w	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x1c>
 8004114:	2302      	movs	r3, #2
 8004116:	e103      	b.n	8004320 <HAL_ADC_ConfigChannel+0x224>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b09      	cmp	r3, #9
 8004126:	d925      	bls.n	8004174 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68d9      	ldr	r1, [r3, #12]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	3b1e      	subs	r3, #30
 800413e:	2207      	movs	r2, #7
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43da      	mvns	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	400a      	ands	r2, r1
 800414c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68d9      	ldr	r1, [r3, #12]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	4618      	mov	r0, r3
 8004160:	4603      	mov	r3, r0
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4403      	add	r3, r0
 8004166:	3b1e      	subs	r3, #30
 8004168:	409a      	lsls	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	e022      	b.n	80041ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6919      	ldr	r1, [r3, #16]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	4613      	mov	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	2207      	movs	r2, #7
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	400a      	ands	r2, r1
 8004196:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6919      	ldr	r1, [r3, #16]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4618      	mov	r0, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	4403      	add	r3, r0
 80041b0:	409a      	lsls	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d824      	bhi.n	800420c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	3b05      	subs	r3, #5
 80041d4:	221f      	movs	r2, #31
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	400a      	ands	r2, r1
 80041e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	4618      	mov	r0, r3
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	3b05      	subs	r3, #5
 80041fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	635a      	str	r2, [r3, #52]	; 0x34
 800420a:	e04c      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b0c      	cmp	r3, #12
 8004212:	d824      	bhi.n	800425e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	3b23      	subs	r3, #35	; 0x23
 8004226:	221f      	movs	r2, #31
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43da      	mvns	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	400a      	ands	r2, r1
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	4618      	mov	r0, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	3b23      	subs	r3, #35	; 0x23
 8004250:	fa00 f203 	lsl.w	r2, r0, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
 800425c:	e023      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	3b41      	subs	r3, #65	; 0x41
 8004270:	221f      	movs	r2, #31
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43da      	mvns	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	400a      	ands	r2, r1
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	b29b      	uxth	r3, r3
 800428c:	4618      	mov	r0, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	3b41      	subs	r3, #65	; 0x41
 800429a:	fa00 f203 	lsl.w	r2, r0, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a20      	ldr	r2, [pc, #128]	; (800432c <HAL_ADC_ConfigChannel+0x230>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d109      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x1c8>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b12      	cmp	r3, #18
 80042b6:	d105      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80042b8:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <HAL_ADC_ConfigChannel+0x234>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <HAL_ADC_ConfigChannel+0x234>)
 80042be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042c2:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a18      	ldr	r2, [pc, #96]	; (800432c <HAL_ADC_ConfigChannel+0x230>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d123      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x21a>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d003      	beq.n	80042de <HAL_ADC_ConfigChannel+0x1e2>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b11      	cmp	r3, #17
 80042dc:	d11b      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80042de:	4b14      	ldr	r3, [pc, #80]	; (8004330 <HAL_ADC_ConfigChannel+0x234>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4a13      	ldr	r2, [pc, #76]	; (8004330 <HAL_ADC_ConfigChannel+0x234>)
 80042e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042e8:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d111      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <HAL_ADC_ConfigChannel+0x238>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a10      	ldr	r2, [pc, #64]	; (8004338 <HAL_ADC_ConfigChannel+0x23c>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	0c9a      	lsrs	r2, r3, #18
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004308:	e002      	b.n	8004310 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3b01      	subs	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f9      	bne.n	800430a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40012000 	.word	0x40012000
 8004330:	40012300 	.word	0x40012300
 8004334:	2000000c 	.word	0x2000000c
 8004338:	431bde83 	.word	0x431bde83

0800433c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004344:	4b7e      	ldr	r3, [pc, #504]	; (8004540 <ADC_Init+0x204>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4a7d      	ldr	r2, [pc, #500]	; (8004540 <ADC_Init+0x204>)
 800434a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800434e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004350:	4b7b      	ldr	r3, [pc, #492]	; (8004540 <ADC_Init+0x204>)
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4979      	ldr	r1, [pc, #484]	; (8004540 <ADC_Init+0x204>)
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800436c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	021a      	lsls	r2, r3, #8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	4a5e      	ldr	r2, [pc, #376]	; (8004544 <ADC_Init+0x208>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6899      	ldr	r1, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6899      	ldr	r1, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	e00f      	b.n	8004436 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004434:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0202 	bic.w	r2, r2, #2
 8004444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6899      	ldr	r1, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	7e1b      	ldrb	r3, [r3, #24]
 8004450:	005a      	lsls	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d027      	beq.n	80044b4 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004472:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	3b01      	subs	r3, #1
 800448a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800448e:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	fa92 f2a2 	rbit	r2, r2
 8004496:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	fab2 f282 	clz	r2, r2
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	fa03 f102 	lsl.w	r1, r3, r2
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	e007      	b.n	80044c4 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	3b01      	subs	r3, #1
 80044e0:	051a      	lsls	r2, r3, #20
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6899      	ldr	r1, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004506:	025a      	lsls	r2, r3, #9
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6899      	ldr	r1, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	029a      	lsls	r2, r3, #10
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	609a      	str	r2, [r3, #8]
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40012300 	.word	0x40012300
 8004544:	0f000001 	.word	0x0f000001

08004548 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800455e:	2b00      	cmp	r3, #0
 8004560:	d13c      	bne.n	80045dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d12b      	bne.n	80045d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004580:	2b00      	cmp	r3, #0
 8004582:	d127      	bne.n	80045d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800459c:	2b00      	cmp	r3, #0
 800459e:	d119      	bne.n	80045d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0220 	bic.w	r2, r2, #32
 80045ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f043 0201 	orr.w	r2, r3, #1
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7fd f827 	bl	8001628 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045da:	e00e      	b.n	80045fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff fd7d 	bl	80040e8 <HAL_ADC_ErrorCallback>
}
 80045ee:	e004      	b.n	80045fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	4798      	blx	r3
}
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff fd60 	bl	80040d6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2240      	movs	r2, #64	; 0x40
 8004630:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	f043 0204 	orr.w	r2, r3, #4
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff fd52 	bl	80040e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <__NVIC_SetPriorityGrouping+0x44>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004668:	4013      	ands	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800467e:	4a04      	ldr	r2, [pc, #16]	; (8004690 <__NVIC_SetPriorityGrouping+0x44>)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	60d3      	str	r3, [r2, #12]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <__NVIC_GetPriorityGrouping+0x18>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	0a1b      	lsrs	r3, r3, #8
 800469e:	f003 0307 	and.w	r3, r3, #7
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000ed00 	.word	0xe000ed00

080046b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	db0b      	blt.n	80046da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	f003 021f 	and.w	r2, r3, #31
 80046c8:	4906      	ldr	r1, [pc, #24]	; (80046e4 <__NVIC_EnableIRQ+0x34>)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	2001      	movs	r0, #1
 80046d2:	fa00 f202 	lsl.w	r2, r0, r2
 80046d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	e000e100 	.word	0xe000e100

080046e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	6039      	str	r1, [r7, #0]
 80046f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db0a      	blt.n	8004712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	490c      	ldr	r1, [pc, #48]	; (8004734 <__NVIC_SetPriority+0x4c>)
 8004702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004706:	0112      	lsls	r2, r2, #4
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	440b      	add	r3, r1
 800470c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004710:	e00a      	b.n	8004728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	4908      	ldr	r1, [pc, #32]	; (8004738 <__NVIC_SetPriority+0x50>)
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	3b04      	subs	r3, #4
 8004720:	0112      	lsls	r2, r2, #4
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	440b      	add	r3, r1
 8004726:	761a      	strb	r2, [r3, #24]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	e000e100 	.word	0xe000e100
 8004738:	e000ed00 	.word	0xe000ed00

0800473c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800473c:	b480      	push	{r7}
 800473e:	b089      	sub	sp, #36	; 0x24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f1c3 0307 	rsb	r3, r3, #7
 8004756:	2b04      	cmp	r3, #4
 8004758:	bf28      	it	cs
 800475a:	2304      	movcs	r3, #4
 800475c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3304      	adds	r3, #4
 8004762:	2b06      	cmp	r3, #6
 8004764:	d902      	bls.n	800476c <NVIC_EncodePriority+0x30>
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3b03      	subs	r3, #3
 800476a:	e000      	b.n	800476e <NVIC_EncodePriority+0x32>
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004770:	f04f 32ff 	mov.w	r2, #4294967295
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43da      	mvns	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	401a      	ands	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004784:	f04f 31ff 	mov.w	r1, #4294967295
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	fa01 f303 	lsl.w	r3, r1, r3
 800478e:	43d9      	mvns	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004794:	4313      	orrs	r3, r2
         );
}
 8004796:	4618      	mov	r0, r3
 8004798:	3724      	adds	r7, #36	; 0x24
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047b0:	d301      	bcc.n	80047b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047b2:	2301      	movs	r3, #1
 80047b4:	e00f      	b.n	80047d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047b6:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <SysTick_Config+0x40>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047be:	210f      	movs	r1, #15
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	f7ff ff90 	bl	80046e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <SysTick_Config+0x40>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ce:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <SysTick_Config+0x40>)
 80047d0:	2207      	movs	r2, #7
 80047d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	e000e010 	.word	0xe000e010

080047e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ff2d 	bl	800464c <__NVIC_SetPriorityGrouping>
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b086      	sub	sp, #24
 80047fe:	af00      	add	r7, sp, #0
 8004800:	4603      	mov	r3, r0
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800480c:	f7ff ff42 	bl	8004694 <__NVIC_GetPriorityGrouping>
 8004810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	6978      	ldr	r0, [r7, #20]
 8004818:	f7ff ff90 	bl	800473c <NVIC_EncodePriority>
 800481c:	4602      	mov	r2, r0
 800481e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004822:	4611      	mov	r1, r2
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff ff5f 	bl	80046e8 <__NVIC_SetPriority>
}
 800482a:	bf00      	nop
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	4603      	mov	r3, r0
 800483a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800483c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ff35 	bl	80046b0 <__NVIC_EnableIRQ>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff ffa2 	bl	80047a0 <SysTick_Config>
 800485c:	4603      	mov	r3, r0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004874:	f7ff fab2 	bl	8003ddc <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e099      	b.n	80049b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0201 	bic.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048a4:	e00f      	b.n	80048c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048a6:	f7ff fa99 	bl	8003ddc <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	d908      	bls.n	80048c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2203      	movs	r2, #3
 80048be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e078      	b.n	80049b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e8      	bne.n	80048a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4b38      	ldr	r3, [pc, #224]	; (80049c0 <HAL_DMA_Init+0x158>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800490a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	2b04      	cmp	r3, #4
 800491e:	d107      	bne.n	8004930 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	4313      	orrs	r3, r2
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 0307 	bic.w	r3, r3, #7
 8004946:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	2b04      	cmp	r3, #4
 8004958:	d117      	bne.n	800498a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00e      	beq.n	800498a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fadd 	bl	8004f2c <DMA_CheckFifoParam>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2240      	movs	r2, #64	; 0x40
 800497c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004986:	2301      	movs	r3, #1
 8004988:	e016      	b.n	80049b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fa96 	bl	8004ec4 <DMA_CalcBaseAndBitshift>
 8004998:	4603      	mov	r3, r0
 800499a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a0:	223f      	movs	r2, #63	; 0x3f
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	f010803f 	.word	0xf010803f

080049c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_DMA_Start_IT+0x26>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e040      	b.n	8004a6c <HAL_DMA_Start_IT+0xa8>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d12f      	bne.n	8004a5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2202      	movs	r2, #2
 8004a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 fa28 	bl	8004e68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1c:	223f      	movs	r2, #63	; 0x3f
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0216 	orr.w	r2, r2, #22
 8004a32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0208 	orr.w	r2, r2, #8
 8004a4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	e005      	b.n	8004a6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
 8004a68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a82:	f7ff f9ab 	bl	8003ddc <HAL_GetTick>
 8004a86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d008      	beq.n	8004aa6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2280      	movs	r2, #128	; 0x80
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e052      	b.n	8004b4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0216 	bic.w	r2, r2, #22
 8004ab4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <HAL_DMA_Abort+0x62>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0208 	bic.w	r2, r2, #8
 8004ae4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af6:	e013      	b.n	8004b20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004af8:	f7ff f970 	bl	8003ddc <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b05      	cmp	r3, #5
 8004b04:	d90c      	bls.n	8004b20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2203      	movs	r2, #3
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e015      	b.n	8004b4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e4      	bne.n	8004af8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b32:	223f      	movs	r2, #63	; 0x3f
 8004b34:	409a      	lsls	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b60:	4b8e      	ldr	r3, [pc, #568]	; (8004d9c <HAL_DMA_IRQHandler+0x248>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a8e      	ldr	r2, [pc, #568]	; (8004da0 <HAL_DMA_IRQHandler+0x24c>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	0a9b      	lsrs	r3, r3, #10
 8004b6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7e:	2208      	movs	r2, #8
 8004b80:	409a      	lsls	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01a      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d013      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0204 	bic.w	r2, r2, #4
 8004ba6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	2208      	movs	r2, #8
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	f043 0201 	orr.w	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d012      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be2:	2201      	movs	r2, #1
 8004be4:	409a      	lsls	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	f043 0202 	orr.w	r2, r3, #2
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	409a      	lsls	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d012      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00b      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c18:	2204      	movs	r2, #4
 8004c1a:	409a      	lsls	r2, r3
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c24:	f043 0204 	orr.w	r2, r3, #4
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c30:	2210      	movs	r2, #16
 8004c32:	409a      	lsls	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d043      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03c      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4e:	2210      	movs	r2, #16
 8004c50:	409a      	lsls	r2, r3
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d018      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d108      	bne.n	8004c84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d024      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	4798      	blx	r3
 8004c82:	e01f      	b.n	8004cc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01b      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4798      	blx	r3
 8004c94:	e016      	b.n	8004cc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d107      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0208 	bic.w	r2, r2, #8
 8004cb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc8:	2220      	movs	r2, #32
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 808f 	beq.w	8004df4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8087 	beq.w	8004df4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	2220      	movs	r2, #32
 8004cec:	409a      	lsls	r2, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	d136      	bne.n	8004d6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0216 	bic.w	r2, r2, #22
 8004d0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <HAL_DMA_IRQHandler+0x1da>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0208 	bic.w	r2, r2, #8
 8004d3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d42:	223f      	movs	r2, #63	; 0x3f
 8004d44:	409a      	lsls	r2, r3
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d07e      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
        }
        return;
 8004d6a:	e079      	b.n	8004e60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01d      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10d      	bne.n	8004da4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d031      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4798      	blx	r3
 8004d98:	e02c      	b.n	8004df4 <HAL_DMA_IRQHandler+0x2a0>
 8004d9a:	bf00      	nop
 8004d9c:	2000000c 	.word	0x2000000c
 8004da0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d023      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
 8004db4:	e01e      	b.n	8004df4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10f      	bne.n	8004de4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0210 	bic.w	r2, r2, #16
 8004dd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d032      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d022      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2205      	movs	r2, #5
 8004e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3301      	adds	r3, #1
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d307      	bcc.n	8004e3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f2      	bne.n	8004e20 <HAL_DMA_IRQHandler+0x2cc>
 8004e3a:	e000      	b.n	8004e3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	4798      	blx	r3
 8004e5e:	e000      	b.n	8004e62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e60:	bf00      	nop
    }
  }
}
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d108      	bne.n	8004ea8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ea6:	e007      	b.n	8004eb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr
	...

08004ec4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	3b10      	subs	r3, #16
 8004ed4:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <DMA_CalcBaseAndBitshift+0x60>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	091b      	lsrs	r3, r3, #4
 8004edc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ede:	4a12      	ldr	r2, [pc, #72]	; (8004f28 <DMA_CalcBaseAndBitshift+0x64>)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d909      	bls.n	8004f06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	1d1a      	adds	r2, r3, #4
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	659a      	str	r2, [r3, #88]	; 0x58
 8004f04:	e007      	b.n	8004f16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr
 8004f24:	aaaaaaab 	.word	0xaaaaaaab
 8004f28:	08006ae4 	.word	0x08006ae4

08004f2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d11f      	bne.n	8004f86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d856      	bhi.n	8004ffa <DMA_CheckFifoParam+0xce>
 8004f4c:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <DMA_CheckFifoParam+0x28>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f65 	.word	0x08004f65
 8004f58:	08004f77 	.word	0x08004f77
 8004f5c:	08004f65 	.word	0x08004f65
 8004f60:	08004ffb 	.word	0x08004ffb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d046      	beq.n	8004ffe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f74:	e043      	b.n	8004ffe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f7e:	d140      	bne.n	8005002 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f84:	e03d      	b.n	8005002 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8e:	d121      	bne.n	8004fd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d837      	bhi.n	8005006 <DMA_CheckFifoParam+0xda>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <DMA_CheckFifoParam+0x70>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fad 	.word	0x08004fad
 8004fa0:	08004fb3 	.word	0x08004fb3
 8004fa4:	08004fad 	.word	0x08004fad
 8004fa8:	08004fc5 	.word	0x08004fc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb0:	e030      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d025      	beq.n	800500a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc2:	e022      	b.n	800500a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fcc:	d11f      	bne.n	800500e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fd2:	e01c      	b.n	800500e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d903      	bls.n	8004fe2 <DMA_CheckFifoParam+0xb6>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d003      	beq.n	8004fe8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fe0:	e018      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe6:	e015      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00e      	beq.n	8005012 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff8:	e00b      	b.n	8005012 <DMA_CheckFifoParam+0xe6>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e00a      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
      break;
 8004ffe:	bf00      	nop
 8005000:	e008      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
      break;
 8005002:	bf00      	nop
 8005004:	e006      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
      break;
 8005006:	bf00      	nop
 8005008:	e004      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
      break;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
      break;   
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
      break;
 8005012:	bf00      	nop
    }
  } 
  
  return status; 
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800502e:	e16f      	b.n	8005310 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	2101      	movs	r1, #1
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	4013      	ands	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8161 	beq.w	800530a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d005      	beq.n	8005060 <HAL_GPIO_Init+0x40>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d130      	bne.n	80050c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	2203      	movs	r2, #3
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4013      	ands	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005096:	2201      	movs	r2, #1
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4013      	ands	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	091b      	lsrs	r3, r3, #4
 80050ac:	f003 0201 	and.w	r2, r3, #1
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d017      	beq.n	80050fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	2203      	movs	r2, #3
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43db      	mvns	r3, r3
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4013      	ands	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d123      	bne.n	8005152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	08da      	lsrs	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3208      	adds	r2, #8
 8005112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	220f      	movs	r2, #15
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43db      	mvns	r3, r3
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4013      	ands	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	08da      	lsrs	r2, r3, #3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3208      	adds	r2, #8
 800514c:	6939      	ldr	r1, [r7, #16]
 800514e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	2203      	movs	r2, #3
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4013      	ands	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 0203 	and.w	r2, r3, #3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 80bb 	beq.w	800530a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005194:	2300      	movs	r3, #0
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	4b64      	ldr	r3, [pc, #400]	; (800532c <HAL_GPIO_Init+0x30c>)
 800519a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519c:	4a63      	ldr	r2, [pc, #396]	; (800532c <HAL_GPIO_Init+0x30c>)
 800519e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051a2:	6453      	str	r3, [r2, #68]	; 0x44
 80051a4:	4b61      	ldr	r3, [pc, #388]	; (800532c <HAL_GPIO_Init+0x30c>)
 80051a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80051b0:	4a5f      	ldr	r2, [pc, #380]	; (8005330 <HAL_GPIO_Init+0x310>)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	089b      	lsrs	r3, r3, #2
 80051b6:	3302      	adds	r3, #2
 80051b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	220f      	movs	r2, #15
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4013      	ands	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a57      	ldr	r2, [pc, #348]	; (8005334 <HAL_GPIO_Init+0x314>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d031      	beq.n	8005240 <HAL_GPIO_Init+0x220>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a56      	ldr	r2, [pc, #344]	; (8005338 <HAL_GPIO_Init+0x318>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d02b      	beq.n	800523c <HAL_GPIO_Init+0x21c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a55      	ldr	r2, [pc, #340]	; (800533c <HAL_GPIO_Init+0x31c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d025      	beq.n	8005238 <HAL_GPIO_Init+0x218>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a54      	ldr	r2, [pc, #336]	; (8005340 <HAL_GPIO_Init+0x320>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d01f      	beq.n	8005234 <HAL_GPIO_Init+0x214>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a53      	ldr	r2, [pc, #332]	; (8005344 <HAL_GPIO_Init+0x324>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d019      	beq.n	8005230 <HAL_GPIO_Init+0x210>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a52      	ldr	r2, [pc, #328]	; (8005348 <HAL_GPIO_Init+0x328>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <HAL_GPIO_Init+0x20c>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a51      	ldr	r2, [pc, #324]	; (800534c <HAL_GPIO_Init+0x32c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00d      	beq.n	8005228 <HAL_GPIO_Init+0x208>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a50      	ldr	r2, [pc, #320]	; (8005350 <HAL_GPIO_Init+0x330>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d007      	beq.n	8005224 <HAL_GPIO_Init+0x204>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a4f      	ldr	r2, [pc, #316]	; (8005354 <HAL_GPIO_Init+0x334>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <HAL_GPIO_Init+0x200>
 800521c:	2308      	movs	r3, #8
 800521e:	e010      	b.n	8005242 <HAL_GPIO_Init+0x222>
 8005220:	2309      	movs	r3, #9
 8005222:	e00e      	b.n	8005242 <HAL_GPIO_Init+0x222>
 8005224:	2307      	movs	r3, #7
 8005226:	e00c      	b.n	8005242 <HAL_GPIO_Init+0x222>
 8005228:	2306      	movs	r3, #6
 800522a:	e00a      	b.n	8005242 <HAL_GPIO_Init+0x222>
 800522c:	2305      	movs	r3, #5
 800522e:	e008      	b.n	8005242 <HAL_GPIO_Init+0x222>
 8005230:	2304      	movs	r3, #4
 8005232:	e006      	b.n	8005242 <HAL_GPIO_Init+0x222>
 8005234:	2303      	movs	r3, #3
 8005236:	e004      	b.n	8005242 <HAL_GPIO_Init+0x222>
 8005238:	2302      	movs	r3, #2
 800523a:	e002      	b.n	8005242 <HAL_GPIO_Init+0x222>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_GPIO_Init+0x222>
 8005240:	2300      	movs	r3, #0
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	f002 0203 	and.w	r2, r2, #3
 8005248:	0092      	lsls	r2, r2, #2
 800524a:	4093      	lsls	r3, r2
 800524c:	461a      	mov	r2, r3
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005254:	4936      	ldr	r1, [pc, #216]	; (8005330 <HAL_GPIO_Init+0x310>)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	089b      	lsrs	r3, r3, #2
 800525a:	3302      	adds	r3, #2
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005262:	4b3d      	ldr	r3, [pc, #244]	; (8005358 <HAL_GPIO_Init+0x338>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	43db      	mvns	r3, r3
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4013      	ands	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005286:	4a34      	ldr	r2, [pc, #208]	; (8005358 <HAL_GPIO_Init+0x338>)
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800528c:	4b32      	ldr	r3, [pc, #200]	; (8005358 <HAL_GPIO_Init+0x338>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	43db      	mvns	r3, r3
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4013      	ands	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80052b0:	4a29      	ldr	r2, [pc, #164]	; (8005358 <HAL_GPIO_Init+0x338>)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052b6:	4b28      	ldr	r3, [pc, #160]	; (8005358 <HAL_GPIO_Init+0x338>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	43db      	mvns	r3, r3
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052da:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <HAL_GPIO_Init+0x338>)
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052e0:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <HAL_GPIO_Init+0x338>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4013      	ands	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005304:	4a14      	ldr	r2, [pc, #80]	; (8005358 <HAL_GPIO_Init+0x338>)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	3301      	adds	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	f47f ae88 	bne.w	8005030 <HAL_GPIO_Init+0x10>
  }
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr
 800532c:	40023800 	.word	0x40023800
 8005330:	40013800 	.word	0x40013800
 8005334:	40020000 	.word	0x40020000
 8005338:	40020400 	.word	0x40020400
 800533c:	40020800 	.word	0x40020800
 8005340:	40020c00 	.word	0x40020c00
 8005344:	40021000 	.word	0x40021000
 8005348:	40021400 	.word	0x40021400
 800534c:	40021800 	.word	0x40021800
 8005350:	40021c00 	.word	0x40021c00
 8005354:	40022000 	.word	0x40022000
 8005358:	40013c00 	.word	0x40013c00

0800535c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	887b      	ldrh	r3, [r7, #2]
 800536e:	4013      	ands	r3, r2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
 8005378:	e001      	b.n	800537e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800537a:	2300      	movs	r3, #0
 800537c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr

0800538a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	460b      	mov	r3, r1
 8005394:	807b      	strh	r3, [r7, #2]
 8005396:	4613      	mov	r3, r2
 8005398:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800539a:	787b      	ldrb	r3, [r7, #1]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053a0:	887a      	ldrh	r2, [r7, #2]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053a6:	e003      	b.n	80053b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053a8:	887b      	ldrh	r3, [r7, #2]
 80053aa:	041a      	lsls	r2, r3, #16
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	619a      	str	r2, [r3, #24]
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr
	...

080053bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08a      	sub	sp, #40	; 0x28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e236      	b.n	800583c <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d050      	beq.n	800547c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053da:	4b9e      	ldr	r3, [pc, #632]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d00c      	beq.n	8005400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e6:	4b9b      	ldr	r3, [pc, #620]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d112      	bne.n	8005418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f2:	4b98      	ldr	r3, [pc, #608]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fe:	d10b      	bne.n	8005418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005400:	4b94      	ldr	r3, [pc, #592]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d036      	beq.n	800547a <HAL_RCC_OscConfig+0xbe>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d132      	bne.n	800547a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e211      	b.n	800583c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	4b8e      	ldr	r3, [pc, #568]	; (8005658 <HAL_RCC_OscConfig+0x29c>)
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d013      	beq.n	8005452 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542a:	f7fe fcd7 	bl	8003ddc <HAL_GetTick>
 800542e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005432:	f7fe fcd3 	bl	8003ddc <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b64      	cmp	r3, #100	; 0x64
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e1fb      	b.n	800583c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005444:	4b83      	ldr	r3, [pc, #524]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x76>
 8005450:	e014      	b.n	800547c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005452:	f7fe fcc3 	bl	8003ddc <HAL_GetTick>
 8005456:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800545a:	f7fe fcbf 	bl	8003ddc <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b64      	cmp	r3, #100	; 0x64
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e1e7      	b.n	800583c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546c:	4b79      	ldr	r3, [pc, #484]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f0      	bne.n	800545a <HAL_RCC_OscConfig+0x9e>
 8005478:	e000      	b.n	800547c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d077      	beq.n	8005578 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005488:	4b72      	ldr	r3, [pc, #456]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 030c 	and.w	r3, r3, #12
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00b      	beq.n	80054ac <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005494:	4b6f      	ldr	r3, [pc, #444]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800549c:	2b08      	cmp	r3, #8
 800549e:	d126      	bne.n	80054ee <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a0:	4b6c      	ldr	r3, [pc, #432]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d120      	bne.n	80054ee <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ac:	4b69      	ldr	r3, [pc, #420]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_OscConfig+0x108>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e1bb      	b.n	800583c <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c4:	4b63      	ldr	r3, [pc, #396]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	21f8      	movs	r1, #248	; 0xf8
 80054d2:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d4:	69b9      	ldr	r1, [r7, #24]
 80054d6:	fa91 f1a1 	rbit	r1, r1
 80054da:	6179      	str	r1, [r7, #20]
  return result;
 80054dc:	6979      	ldr	r1, [r7, #20]
 80054de:	fab1 f181 	clz	r1, r1
 80054e2:	b2c9      	uxtb	r1, r1
 80054e4:	408b      	lsls	r3, r1
 80054e6:	495b      	ldr	r1, [pc, #364]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ec:	e044      	b.n	8005578 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d02a      	beq.n	800554c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f6:	4b59      	ldr	r3, [pc, #356]	; (800565c <HAL_RCC_OscConfig+0x2a0>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fc:	f7fe fc6e 	bl	8003ddc <HAL_GetTick>
 8005500:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005504:	f7fe fc6a 	bl	8003ddc <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e192      	b.n	800583c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005516:	4b4f      	ldr	r3, [pc, #316]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005522:	4b4c      	ldr	r3, [pc, #304]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	21f8      	movs	r1, #248	; 0xf8
 8005530:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005532:	6939      	ldr	r1, [r7, #16]
 8005534:	fa91 f1a1 	rbit	r1, r1
 8005538:	60f9      	str	r1, [r7, #12]
  return result;
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	fab1 f181 	clz	r1, r1
 8005540:	b2c9      	uxtb	r1, r1
 8005542:	408b      	lsls	r3, r1
 8005544:	4943      	ldr	r1, [pc, #268]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 8005546:	4313      	orrs	r3, r2
 8005548:	600b      	str	r3, [r1, #0]
 800554a:	e015      	b.n	8005578 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800554c:	4b43      	ldr	r3, [pc, #268]	; (800565c <HAL_RCC_OscConfig+0x2a0>)
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005552:	f7fe fc43 	bl	8003ddc <HAL_GetTick>
 8005556:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800555a:	f7fe fc3f 	bl	8003ddc <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e167      	b.n	800583c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800556c:	4b39      	ldr	r3, [pc, #228]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f0      	bne.n	800555a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d030      	beq.n	80055e6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d016      	beq.n	80055ba <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800558c:	4b34      	ldr	r3, [pc, #208]	; (8005660 <HAL_RCC_OscConfig+0x2a4>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005592:	f7fe fc23 	bl	8003ddc <HAL_GetTick>
 8005596:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800559a:	f7fe fc1f 	bl	8003ddc <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e147      	b.n	800583c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ac:	4b29      	ldr	r3, [pc, #164]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 80055ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0f0      	beq.n	800559a <HAL_RCC_OscConfig+0x1de>
 80055b8:	e015      	b.n	80055e6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ba:	4b29      	ldr	r3, [pc, #164]	; (8005660 <HAL_RCC_OscConfig+0x2a4>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c0:	f7fe fc0c 	bl	8003ddc <HAL_GetTick>
 80055c4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c8:	f7fe fc08 	bl	8003ddc <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e130      	b.n	800583c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055da:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 80055dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f0      	bne.n	80055c8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8087 	beq.w	8005702 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fa:	4b16      	ldr	r3, [pc, #88]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d110      	bne.n	8005628 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	4b12      	ldr	r3, [pc, #72]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	4a11      	ldr	r2, [pc, #68]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 8005610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005614:	6413      	str	r3, [r2, #64]	; 0x40
 8005616:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <HAL_RCC_OscConfig+0x298>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561e:	60bb      	str	r3, [r7, #8]
 8005620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005628:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <HAL_RCC_OscConfig+0x2a8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <HAL_RCC_OscConfig+0x2a8>)
 800562e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005632:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_RCC_OscConfig+0x2a8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d122      	bne.n	8005686 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <HAL_RCC_OscConfig+0x2a8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a07      	ldr	r2, [pc, #28]	; (8005664 <HAL_RCC_OscConfig+0x2a8>)
 8005646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800564c:	f7fe fbc6 	bl	8003ddc <HAL_GetTick>
 8005650:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005652:	e012      	b.n	800567a <HAL_RCC_OscConfig+0x2be>
 8005654:	40023800 	.word	0x40023800
 8005658:	40023802 	.word	0x40023802
 800565c:	42470000 	.word	0x42470000
 8005660:	42470e80 	.word	0x42470e80
 8005664:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005668:	f7fe fbb8 	bl	8003ddc <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e0e0      	b.n	800583c <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567a:	4b72      	ldr	r3, [pc, #456]	; (8005844 <HAL_RCC_OscConfig+0x488>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	4b6f      	ldr	r3, [pc, #444]	; (8005848 <HAL_RCC_OscConfig+0x48c>)
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d015      	beq.n	80056c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005698:	f7fe fba0 	bl	8003ddc <HAL_GetTick>
 800569c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569e:	e00a      	b.n	80056b6 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a0:	f7fe fb9c 	bl	8003ddc <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e0c2      	b.n	800583c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b6:	4b65      	ldr	r3, [pc, #404]	; (800584c <HAL_RCC_OscConfig+0x490>)
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0ee      	beq.n	80056a0 <HAL_RCC_OscConfig+0x2e4>
 80056c2:	e014      	b.n	80056ee <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c4:	f7fe fb8a 	bl	8003ddc <HAL_GetTick>
 80056c8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ca:	e00a      	b.n	80056e2 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056cc:	f7fe fb86 	bl	8003ddc <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0ac      	b.n	800583c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e2:	4b5a      	ldr	r3, [pc, #360]	; (800584c <HAL_RCC_OscConfig+0x490>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1ee      	bne.n	80056cc <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d105      	bne.n	8005702 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f6:	4b55      	ldr	r3, [pc, #340]	; (800584c <HAL_RCC_OscConfig+0x490>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	4a54      	ldr	r2, [pc, #336]	; (800584c <HAL_RCC_OscConfig+0x490>)
 80056fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005700:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 8097 	beq.w	800583a <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800570c:	4b4f      	ldr	r3, [pc, #316]	; (800584c <HAL_RCC_OscConfig+0x490>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b08      	cmp	r3, #8
 8005716:	d061      	beq.n	80057dc <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d146      	bne.n	80057ae <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005720:	4b4b      	ldr	r3, [pc, #300]	; (8005850 <HAL_RCC_OscConfig+0x494>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005726:	f7fe fb59 	bl	8003ddc <HAL_GetTick>
 800572a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572e:	f7fe fb55 	bl	8003ddc <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	; 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e07d      	b.n	800583c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005740:	4b42      	ldr	r3, [pc, #264]	; (800584c <HAL_RCC_OscConfig+0x490>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800574c:	4b3f      	ldr	r3, [pc, #252]	; (800584c <HAL_RCC_OscConfig+0x490>)
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4b40      	ldr	r3, [pc, #256]	; (8005854 <HAL_RCC_OscConfig+0x498>)
 8005752:	4013      	ands	r3, r2
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	69d1      	ldr	r1, [r2, #28]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6a12      	ldr	r2, [r2, #32]
 800575c:	4311      	orrs	r1, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005762:	0192      	lsls	r2, r2, #6
 8005764:	4311      	orrs	r1, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800576a:	0612      	lsls	r2, r2, #24
 800576c:	4311      	orrs	r1, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005772:	0852      	lsrs	r2, r2, #1
 8005774:	3a01      	subs	r2, #1
 8005776:	0412      	lsls	r2, r2, #16
 8005778:	430a      	orrs	r2, r1
 800577a:	4934      	ldr	r1, [pc, #208]	; (800584c <HAL_RCC_OscConfig+0x490>)
 800577c:	4313      	orrs	r3, r2
 800577e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005780:	4b33      	ldr	r3, [pc, #204]	; (8005850 <HAL_RCC_OscConfig+0x494>)
 8005782:	2201      	movs	r2, #1
 8005784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005786:	f7fe fb29 	bl	8003ddc <HAL_GetTick>
 800578a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800578e:	f7fe fb25 	bl	8003ddc <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b64      	cmp	r3, #100	; 0x64
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e04d      	b.n	800583c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a0:	4b2a      	ldr	r3, [pc, #168]	; (800584c <HAL_RCC_OscConfig+0x490>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0f0      	beq.n	800578e <HAL_RCC_OscConfig+0x3d2>
 80057ac:	e045      	b.n	800583a <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ae:	4b28      	ldr	r3, [pc, #160]	; (8005850 <HAL_RCC_OscConfig+0x494>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b4:	f7fe fb12 	bl	8003ddc <HAL_GetTick>
 80057b8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057bc:	f7fe fb0e 	bl	8003ddc <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	; 0x64
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e036      	b.n	800583c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ce:	4b1f      	ldr	r3, [pc, #124]	; (800584c <HAL_RCC_OscConfig+0x490>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x400>
 80057da:	e02e      	b.n	800583a <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e029      	b.n	800583c <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80057e8:	4b18      	ldr	r3, [pc, #96]	; (800584c <HAL_RCC_OscConfig+0x490>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d11c      	bne.n	8005836 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005806:	429a      	cmp	r2, r3
 8005808:	d115      	bne.n	8005836 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	099b      	lsrs	r3, r3, #6
 800580e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005816:	429a      	cmp	r2, r3
 8005818:	d10d      	bne.n	8005836 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005824:	429a      	cmp	r2, r3
 8005826:	d106      	bne.n	8005836 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005832:	429a      	cmp	r2, r3
 8005834:	d001      	beq.n	800583a <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3728      	adds	r7, #40	; 0x28
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40007000 	.word	0x40007000
 8005848:	40023870 	.word	0x40023870
 800584c:	40023800 	.word	0x40023800
 8005850:	42470060 	.word	0x42470060
 8005854:	f0bc8000 	.word	0xf0bc8000

08005858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0d2      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800586c:	4b6b      	ldr	r3, [pc, #428]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d90c      	bls.n	8005894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b68      	ldr	r3, [pc, #416]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005882:	4b66      	ldr	r3, [pc, #408]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0be      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d020      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ac:	4b5c      	ldr	r3, [pc, #368]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4a5b      	ldr	r2, [pc, #364]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80058c4:	4b56      	ldr	r3, [pc, #344]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a55      	ldr	r2, [pc, #340]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d0:	4b53      	ldr	r3, [pc, #332]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4950      	ldr	r1, [pc, #320]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d040      	beq.n	8005970 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d107      	bne.n	8005906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f6:	4b4a      	ldr	r3, [pc, #296]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d115      	bne.n	800592e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e085      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d107      	bne.n	800591e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590e:	4b44      	ldr	r3, [pc, #272]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d109      	bne.n	800592e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e079      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591e:	4b40      	ldr	r3, [pc, #256]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e071      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800592e:	4b3c      	ldr	r3, [pc, #240]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f023 0203 	bic.w	r2, r3, #3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	4939      	ldr	r1, [pc, #228]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 800593c:	4313      	orrs	r3, r2
 800593e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005940:	f7fe fa4c 	bl	8003ddc <HAL_GetTick>
 8005944:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005946:	e00a      	b.n	800595e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005948:	f7fe fa48 	bl	8003ddc <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	; 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e059      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595e:	4b30      	ldr	r3, [pc, #192]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 020c 	and.w	r2, r3, #12
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	429a      	cmp	r2, r3
 800596e:	d1eb      	bne.n	8005948 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005970:	4b2a      	ldr	r3, [pc, #168]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d20c      	bcs.n	8005998 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597e:	4b27      	ldr	r3, [pc, #156]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005986:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d001      	beq.n	8005998 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e03c      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059a4:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	491b      	ldr	r1, [pc, #108]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d009      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059c2:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	4913      	ldr	r1, [pc, #76]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80059d6:	f000 f82b 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80059da:	4601      	mov	r1, r0
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e4:	22f0      	movs	r2, #240	; 0xf0
 80059e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	fa92 f2a2 	rbit	r2, r2
 80059ee:	60fa      	str	r2, [r7, #12]
  return result;
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	fab2 f282 	clz	r2, r2
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	40d3      	lsrs	r3, r2
 80059fa:	4a0a      	ldr	r2, [pc, #40]	; (8005a24 <HAL_RCC_ClockConfig+0x1cc>)
 80059fc:	5cd3      	ldrb	r3, [r2, r3]
 80059fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005a02:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <HAL_RCC_ClockConfig+0x1d0>)
 8005a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCC_ClockConfig+0x1d4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe f9a4 	bl	8003d58 <HAL_InitTick>

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40023c00 	.word	0x40023c00
 8005a20:	40023800 	.word	0x40023800
 8005a24:	08006ad4 	.word	0x08006ad4
 8005a28:	2000000c 	.word	0x2000000c
 8005a2c:	20000018 	.word	0x20000018

08005a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a34:	b090      	sub	sp, #64	; 0x40
 8005a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a40:	2300      	movs	r3, #0
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a48:	4b59      	ldr	r3, [pc, #356]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 030c 	and.w	r3, r3, #12
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d00d      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x40>
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	f200 80a2 	bhi.w	8005b9e <HAL_RCC_GetSysClockFreq+0x16e>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_RCC_GetSysClockFreq+0x34>
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d003      	beq.n	8005a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a62:	e09c      	b.n	8005b9e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a64:	4b53      	ldr	r3, [pc, #332]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005a68:	e09c      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a6a:	4b53      	ldr	r3, [pc, #332]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a6e:	e099      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a70:	4b4f      	ldr	r3, [pc, #316]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a7a:	4b4d      	ldr	r3, [pc, #308]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d027      	beq.n	8005ad6 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a86:	4b4a      	ldr	r3, [pc, #296]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	099b      	lsrs	r3, r3, #6
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	623b      	str	r3, [r7, #32]
 8005a90:	627a      	str	r2, [r7, #36]	; 0x24
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4b47      	ldr	r3, [pc, #284]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a9c:	fb03 f201 	mul.w	r2, r3, r1
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	fb00 f303 	mul.w	r3, r0, r3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	4a43      	ldr	r2, [pc, #268]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005aaa:	fba0 2102 	umull	r2, r1, r0, r2
 8005aae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ab0:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab4:	4413      	add	r3, r2
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	2200      	movs	r2, #0
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	61fa      	str	r2, [r7, #28]
 8005ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ac4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ac8:	f7fb fa30 	bl	8000f2c <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad4:	e055      	b.n	8005b82 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ad6:	4b36      	ldr	r3, [pc, #216]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	099b      	lsrs	r3, r3, #6
 8005adc:	2200      	movs	r2, #0
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	617a      	str	r2, [r7, #20]
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005ae8:	f04f 0b00 	mov.w	fp, #0
 8005aec:	4652      	mov	r2, sl
 8005aee:	465b      	mov	r3, fp
 8005af0:	f04f 0000 	mov.w	r0, #0
 8005af4:	f04f 0100 	mov.w	r1, #0
 8005af8:	0159      	lsls	r1, r3, #5
 8005afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005afe:	0150      	lsls	r0, r2, #5
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	ebb2 080a 	subs.w	r8, r2, sl
 8005b08:	eb63 090b 	sbc.w	r9, r3, fp
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b18:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b1c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b20:	ebb2 0408 	subs.w	r4, r2, r8
 8005b24:	eb63 0509 	sbc.w	r5, r3, r9
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	00eb      	lsls	r3, r5, #3
 8005b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b36:	00e2      	lsls	r2, r4, #3
 8005b38:	4614      	mov	r4, r2
 8005b3a:	461d      	mov	r5, r3
 8005b3c:	eb14 030a 	adds.w	r3, r4, sl
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	eb45 030b 	adc.w	r3, r5, fp
 8005b46:	607b      	str	r3, [r7, #4]
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b54:	4629      	mov	r1, r5
 8005b56:	028b      	lsls	r3, r1, #10
 8005b58:	4620      	mov	r0, r4
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005b62:	4601      	mov	r1, r0
 8005b64:	028a      	lsls	r2, r1, #10
 8005b66:	4610      	mov	r0, r2
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	60fa      	str	r2, [r7, #12]
 8005b72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b76:	f7fb f9d9 	bl	8000f2c <__aeabi_uldivmod>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4613      	mov	r3, r2
 8005b80:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b82:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	0c1b      	lsrs	r3, r3, #16
 8005b88:	f003 0303 	and.w	r3, r3, #3
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b9c:	e002      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ba2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3740      	adds	r7, #64	; 0x40
 8005baa:	46bd      	mov	sp, r7
 8005bac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	00f42400 	.word	0x00f42400
 8005bb8:	017d7840 	.word	0x017d7840

08005bbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e041      	b.n	8005c52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fd fe76 	bl	80038d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f000 fae8 	bl	80061d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <HAL_TIM_PWM_Start+0x24>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	bf14      	ite	ne
 8005c78:	2301      	movne	r3, #1
 8005c7a:	2300      	moveq	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	e022      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x6a>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d109      	bne.n	8005c9a <HAL_TIM_PWM_Start+0x3e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	e015      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x6a>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d109      	bne.n	8005cb4 <HAL_TIM_PWM_Start+0x58>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	e008      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x6a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e07c      	b.n	8005dc8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_PWM_Start+0x82>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cdc:	e013      	b.n	8005d06 <HAL_TIM_PWM_Start+0xaa>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Start+0x92>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cec:	e00b      	b.n	8005d06 <HAL_TIM_PWM_Start+0xaa>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d104      	bne.n	8005cfe <HAL_TIM_PWM_Start+0xa2>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cfc:	e003      	b.n	8005d06 <HAL_TIM_PWM_Start+0xaa>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fca8 	bl	8006664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2d      	ldr	r2, [pc, #180]	; (8005dd0 <HAL_TIM_PWM_Start+0x174>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <HAL_TIM_PWM_Start+0xcc>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2c      	ldr	r2, [pc, #176]	; (8005dd4 <HAL_TIM_PWM_Start+0x178>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_PWM_Start+0xd0>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <HAL_TIM_PWM_Start+0xd2>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a22      	ldr	r2, [pc, #136]	; (8005dd0 <HAL_TIM_PWM_Start+0x174>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d022      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d54:	d01d      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <HAL_TIM_PWM_Start+0x17c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d018      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1d      	ldr	r2, [pc, #116]	; (8005ddc <HAL_TIM_PWM_Start+0x180>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <HAL_TIM_PWM_Start+0x184>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00e      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <HAL_TIM_PWM_Start+0x178>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <HAL_TIM_PWM_Start+0x188>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <HAL_TIM_PWM_Start+0x18c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d111      	bne.n	8005db6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b06      	cmp	r3, #6
 8005da2:	d010      	beq.n	8005dc6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db4:	e007      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0201 	orr.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40010400 	.word	0x40010400
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40001800 	.word	0x40001800

08005dec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e097      	b.n	8005f30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7fd fd7d 	bl	8003914 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e30:	f023 0307 	bic.w	r3, r3, #7
 8005e34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f000 f9c5 	bl	80061d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6e:	f023 0303 	bic.w	r3, r3, #3
 8005e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e8c:	f023 030c 	bic.w	r3, r3, #12
 8005e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	011a      	lsls	r2, r3, #4
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	031b      	lsls	r3, r3, #12
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005eca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005ed2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d110      	bne.n	8005f8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d102      	bne.n	8005f74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f6e:	7b7b      	ldrb	r3, [r7, #13]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d001      	beq.n	8005f78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e069      	b.n	800604c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f88:	e031      	b.n	8005fee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d110      	bne.n	8005fb2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d102      	bne.n	8005f9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f96:	7b3b      	ldrb	r3, [r7, #12]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d001      	beq.n	8005fa0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e055      	b.n	800604c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fb0:	e01d      	b.n	8005fee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d108      	bne.n	8005fca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d105      	bne.n	8005fca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fbe:	7b7b      	ldrb	r3, [r7, #13]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d102      	bne.n	8005fca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fc4:	7b3b      	ldrb	r3, [r7, #12]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d001      	beq.n	8005fce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e03e      	b.n	800604c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_TIM_Encoder_Start+0xc4>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d008      	beq.n	800600c <HAL_TIM_Encoder_Start+0xd4>
 8005ffa:	e00f      	b.n	800601c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2201      	movs	r2, #1
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fb2d 	bl	8006664 <TIM_CCxChannelCmd>
      break;
 800600a:	e016      	b.n	800603a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2201      	movs	r2, #1
 8006012:	2104      	movs	r1, #4
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fb25 	bl	8006664 <TIM_CCxChannelCmd>
      break;
 800601a:	e00e      	b.n	800603a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2201      	movs	r2, #1
 8006022:	2100      	movs	r1, #0
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fb1d 	bl	8006664 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2201      	movs	r2, #1
 8006030:	2104      	movs	r1, #4
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fb16 	bl	8006664 <TIM_CCxChannelCmd>
      break;
 8006038:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0201 	orr.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800606a:	2302      	movs	r3, #2
 800606c:	e0ac      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	f200 809f 	bhi.w	80061bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	080060b9 	.word	0x080060b9
 8006088:	080061bd 	.word	0x080061bd
 800608c:	080061bd 	.word	0x080061bd
 8006090:	080061bd 	.word	0x080061bd
 8006094:	080060f9 	.word	0x080060f9
 8006098:	080061bd 	.word	0x080061bd
 800609c:	080061bd 	.word	0x080061bd
 80060a0:	080061bd 	.word	0x080061bd
 80060a4:	0800613b 	.word	0x0800613b
 80060a8:	080061bd 	.word	0x080061bd
 80060ac:	080061bd 	.word	0x080061bd
 80060b0:	080061bd 	.word	0x080061bd
 80060b4:	0800617b 	.word	0x0800617b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f924 	bl	800630c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0208 	orr.w	r2, r2, #8
 80060d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0204 	bic.w	r2, r2, #4
 80060e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6999      	ldr	r1, [r3, #24]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	619a      	str	r2, [r3, #24]
      break;
 80060f6:	e062      	b.n	80061be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 f974 	bl	80063ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6999      	ldr	r1, [r3, #24]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	021a      	lsls	r2, r3, #8
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	619a      	str	r2, [r3, #24]
      break;
 8006138:	e041      	b.n	80061be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	4618      	mov	r0, r3
 8006142:	f000 f9c7 	bl	80064d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0208 	orr.w	r2, r2, #8
 8006154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0204 	bic.w	r2, r2, #4
 8006164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69d9      	ldr	r1, [r3, #28]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	61da      	str	r2, [r3, #28]
      break;
 8006178:	e021      	b.n	80061be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fa1b 	bl	80065bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69d9      	ldr	r1, [r3, #28]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	021a      	lsls	r2, r3, #8
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	61da      	str	r2, [r3, #28]
      break;
 80061ba:	e000      	b.n	80061be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80061bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a3f      	ldr	r2, [pc, #252]	; (80062e0 <TIM_Base_SetConfig+0x110>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d013      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ee:	d00f      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a3c      	ldr	r2, [pc, #240]	; (80062e4 <TIM_Base_SetConfig+0x114>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00b      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a3b      	ldr	r2, [pc, #236]	; (80062e8 <TIM_Base_SetConfig+0x118>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a3a      	ldr	r2, [pc, #232]	; (80062ec <TIM_Base_SetConfig+0x11c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a39      	ldr	r2, [pc, #228]	; (80062f0 <TIM_Base_SetConfig+0x120>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d108      	bne.n	8006222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2e      	ldr	r2, [pc, #184]	; (80062e0 <TIM_Base_SetConfig+0x110>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d02b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006230:	d027      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2b      	ldr	r2, [pc, #172]	; (80062e4 <TIM_Base_SetConfig+0x114>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d023      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2a      	ldr	r2, [pc, #168]	; (80062e8 <TIM_Base_SetConfig+0x118>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01f      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a29      	ldr	r2, [pc, #164]	; (80062ec <TIM_Base_SetConfig+0x11c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a28      	ldr	r2, [pc, #160]	; (80062f0 <TIM_Base_SetConfig+0x120>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d017      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a27      	ldr	r2, [pc, #156]	; (80062f4 <TIM_Base_SetConfig+0x124>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a26      	ldr	r2, [pc, #152]	; (80062f8 <TIM_Base_SetConfig+0x128>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00f      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a25      	ldr	r2, [pc, #148]	; (80062fc <TIM_Base_SetConfig+0x12c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a24      	ldr	r2, [pc, #144]	; (8006300 <TIM_Base_SetConfig+0x130>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a23      	ldr	r2, [pc, #140]	; (8006304 <TIM_Base_SetConfig+0x134>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a22      	ldr	r2, [pc, #136]	; (8006308 <TIM_Base_SetConfig+0x138>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d108      	bne.n	8006294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <TIM_Base_SetConfig+0x110>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_Base_SetConfig+0xf8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a0b      	ldr	r2, [pc, #44]	; (80062f0 <TIM_Base_SetConfig+0x120>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d103      	bne.n	80062d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	615a      	str	r2, [r3, #20]
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr
 80062e0:	40010000 	.word	0x40010000
 80062e4:	40000400 	.word	0x40000400
 80062e8:	40000800 	.word	0x40000800
 80062ec:	40000c00 	.word	0x40000c00
 80062f0:	40010400 	.word	0x40010400
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400
 80062fc:	40014800 	.word	0x40014800
 8006300:	40001800 	.word	0x40001800
 8006304:	40001c00 	.word	0x40001c00
 8006308:	40002000 	.word	0x40002000

0800630c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f023 0201 	bic.w	r2, r3, #1
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0303 	bic.w	r3, r3, #3
 8006342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f023 0302 	bic.w	r3, r3, #2
 8006354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a20      	ldr	r2, [pc, #128]	; (80063e4 <TIM_OC1_SetConfig+0xd8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_OC1_SetConfig+0x64>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a1f      	ldr	r2, [pc, #124]	; (80063e8 <TIM_OC1_SetConfig+0xdc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10c      	bne.n	800638a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f023 0308 	bic.w	r3, r3, #8
 8006376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f023 0304 	bic.w	r3, r3, #4
 8006388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a15      	ldr	r2, [pc, #84]	; (80063e4 <TIM_OC1_SetConfig+0xd8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_OC1_SetConfig+0x8e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <TIM_OC1_SetConfig+0xdc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d111      	bne.n	80063be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40010400 	.word	0x40010400

080063ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f023 0210 	bic.w	r2, r3, #16
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f023 0320 	bic.w	r3, r3, #32
 8006436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a21      	ldr	r2, [pc, #132]	; (80064cc <TIM_OC2_SetConfig+0xe0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_OC2_SetConfig+0x68>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a20      	ldr	r2, [pc, #128]	; (80064d0 <TIM_OC2_SetConfig+0xe4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d10d      	bne.n	8006470 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800645a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a16      	ldr	r2, [pc, #88]	; (80064cc <TIM_OC2_SetConfig+0xe0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_OC2_SetConfig+0x94>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <TIM_OC2_SetConfig+0xe4>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d113      	bne.n	80064a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800648e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr
 80064cc:	40010000 	.word	0x40010000
 80064d0:	40010400 	.word	0x40010400

080064d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0303 	bic.w	r3, r3, #3
 800650a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800651c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <TIM_OC3_SetConfig+0xe0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d003      	beq.n	800653a <TIM_OC3_SetConfig+0x66>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a20      	ldr	r2, [pc, #128]	; (80065b8 <TIM_OC3_SetConfig+0xe4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d10d      	bne.n	8006556 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a16      	ldr	r2, [pc, #88]	; (80065b4 <TIM_OC3_SetConfig+0xe0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_OC3_SetConfig+0x92>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <TIM_OC3_SetConfig+0xe4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d113      	bne.n	800658e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800656c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	621a      	str	r2, [r3, #32]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40010400 	.word	0x40010400

080065bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	031b      	lsls	r3, r3, #12
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a11      	ldr	r2, [pc, #68]	; (800665c <TIM_OC4_SetConfig+0xa0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_OC4_SetConfig+0x68>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a10      	ldr	r2, [pc, #64]	; (8006660 <TIM_OC4_SetConfig+0xa4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d109      	bne.n	8006638 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800662a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	019b      	lsls	r3, r3, #6
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	bc80      	pop	{r7}
 800665a:	4770      	bx	lr
 800665c:	40010000 	.word	0x40010000
 8006660:	40010400 	.word	0x40010400

08006664 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	2201      	movs	r2, #1
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1a      	ldr	r2, [r3, #32]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	43db      	mvns	r3, r3
 8006686:	401a      	ands	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1a      	ldr	r2, [r3, #32]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f003 031f 	and.w	r3, r3, #31
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	fa01 f303 	lsl.w	r3, r1, r3
 800669c:	431a      	orrs	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e05a      	b.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a20      	ldr	r2, [pc, #128]	; (8006784 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d022      	beq.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006710:	d01d      	beq.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d018      	beq.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1a      	ldr	r2, [pc, #104]	; (800678c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d013      	beq.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a19      	ldr	r2, [pc, #100]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00e      	beq.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a17      	ldr	r2, [pc, #92]	; (8006794 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d009      	beq.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a16      	ldr	r2, [pc, #88]	; (8006798 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d004      	beq.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a14      	ldr	r2, [pc, #80]	; (800679c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d10c      	bne.n	8006768 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	4313      	orrs	r3, r2
 800675e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr
 8006784:	40010000 	.word	0x40010000
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40000c00 	.word	0x40000c00
 8006794:	40010400 	.word	0x40010400
 8006798:	40014000 	.word	0x40014000
 800679c:	40001800 	.word	0x40001800

080067a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e03d      	b.n	8006838 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	bc80      	pop	{r7}
 8006840:	4770      	bx	lr
	...

08006844 <__errno>:
 8006844:	4b01      	ldr	r3, [pc, #4]	; (800684c <__errno+0x8>)
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	20000020 	.word	0x20000020

08006850 <__libc_init_array>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	2600      	movs	r6, #0
 8006854:	4d0c      	ldr	r5, [pc, #48]	; (8006888 <__libc_init_array+0x38>)
 8006856:	4c0d      	ldr	r4, [pc, #52]	; (800688c <__libc_init_array+0x3c>)
 8006858:	1b64      	subs	r4, r4, r5
 800685a:	10a4      	asrs	r4, r4, #2
 800685c:	42a6      	cmp	r6, r4
 800685e:	d109      	bne.n	8006874 <__libc_init_array+0x24>
 8006860:	f000 f92c 	bl	8006abc <_init>
 8006864:	2600      	movs	r6, #0
 8006866:	4d0a      	ldr	r5, [pc, #40]	; (8006890 <__libc_init_array+0x40>)
 8006868:	4c0a      	ldr	r4, [pc, #40]	; (8006894 <__libc_init_array+0x44>)
 800686a:	1b64      	subs	r4, r4, r5
 800686c:	10a4      	asrs	r4, r4, #2
 800686e:	42a6      	cmp	r6, r4
 8006870:	d105      	bne.n	800687e <__libc_init_array+0x2e>
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	f855 3b04 	ldr.w	r3, [r5], #4
 8006878:	4798      	blx	r3
 800687a:	3601      	adds	r6, #1
 800687c:	e7ee      	b.n	800685c <__libc_init_array+0xc>
 800687e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006882:	4798      	blx	r3
 8006884:	3601      	adds	r6, #1
 8006886:	e7f2      	b.n	800686e <__libc_init_array+0x1e>
 8006888:	08006af4 	.word	0x08006af4
 800688c:	08006af4 	.word	0x08006af4
 8006890:	08006af4 	.word	0x08006af4
 8006894:	08006af8 	.word	0x08006af8

08006898 <malloc>:
 8006898:	4b02      	ldr	r3, [pc, #8]	; (80068a4 <malloc+0xc>)
 800689a:	4601      	mov	r1, r0
 800689c:	6818      	ldr	r0, [r3, #0]
 800689e:	f000 b87b 	b.w	8006998 <_malloc_r>
 80068a2:	bf00      	nop
 80068a4:	20000020 	.word	0x20000020

080068a8 <free>:
 80068a8:	4b02      	ldr	r3, [pc, #8]	; (80068b4 <free+0xc>)
 80068aa:	4601      	mov	r1, r0
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	f000 b80b 	b.w	80068c8 <_free_r>
 80068b2:	bf00      	nop
 80068b4:	20000020 	.word	0x20000020

080068b8 <memset>:
 80068b8:	4603      	mov	r3, r0
 80068ba:	4402      	add	r2, r0
 80068bc:	4293      	cmp	r3, r2
 80068be:	d100      	bne.n	80068c2 <memset+0xa>
 80068c0:	4770      	bx	lr
 80068c2:	f803 1b01 	strb.w	r1, [r3], #1
 80068c6:	e7f9      	b.n	80068bc <memset+0x4>

080068c8 <_free_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4605      	mov	r5, r0
 80068cc:	2900      	cmp	r1, #0
 80068ce:	d040      	beq.n	8006952 <_free_r+0x8a>
 80068d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068d4:	1f0c      	subs	r4, r1, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bfb8      	it	lt
 80068da:	18e4      	addlt	r4, r4, r3
 80068dc:	f000 f8e0 	bl	8006aa0 <__malloc_lock>
 80068e0:	4a1c      	ldr	r2, [pc, #112]	; (8006954 <_free_r+0x8c>)
 80068e2:	6813      	ldr	r3, [r2, #0]
 80068e4:	b933      	cbnz	r3, 80068f4 <_free_r+0x2c>
 80068e6:	6063      	str	r3, [r4, #4]
 80068e8:	6014      	str	r4, [r2, #0]
 80068ea:	4628      	mov	r0, r5
 80068ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068f0:	f000 b8dc 	b.w	8006aac <__malloc_unlock>
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	d908      	bls.n	800690a <_free_r+0x42>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	1821      	adds	r1, r4, r0
 80068fc:	428b      	cmp	r3, r1
 80068fe:	bf01      	itttt	eq
 8006900:	6819      	ldreq	r1, [r3, #0]
 8006902:	685b      	ldreq	r3, [r3, #4]
 8006904:	1809      	addeq	r1, r1, r0
 8006906:	6021      	streq	r1, [r4, #0]
 8006908:	e7ed      	b.n	80068e6 <_free_r+0x1e>
 800690a:	461a      	mov	r2, r3
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	b10b      	cbz	r3, 8006914 <_free_r+0x4c>
 8006910:	42a3      	cmp	r3, r4
 8006912:	d9fa      	bls.n	800690a <_free_r+0x42>
 8006914:	6811      	ldr	r1, [r2, #0]
 8006916:	1850      	adds	r0, r2, r1
 8006918:	42a0      	cmp	r0, r4
 800691a:	d10b      	bne.n	8006934 <_free_r+0x6c>
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	4401      	add	r1, r0
 8006920:	1850      	adds	r0, r2, r1
 8006922:	4283      	cmp	r3, r0
 8006924:	6011      	str	r1, [r2, #0]
 8006926:	d1e0      	bne.n	80068ea <_free_r+0x22>
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	4401      	add	r1, r0
 800692e:	6011      	str	r1, [r2, #0]
 8006930:	6053      	str	r3, [r2, #4]
 8006932:	e7da      	b.n	80068ea <_free_r+0x22>
 8006934:	d902      	bls.n	800693c <_free_r+0x74>
 8006936:	230c      	movs	r3, #12
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	e7d6      	b.n	80068ea <_free_r+0x22>
 800693c:	6820      	ldr	r0, [r4, #0]
 800693e:	1821      	adds	r1, r4, r0
 8006940:	428b      	cmp	r3, r1
 8006942:	bf01      	itttt	eq
 8006944:	6819      	ldreq	r1, [r3, #0]
 8006946:	685b      	ldreq	r3, [r3, #4]
 8006948:	1809      	addeq	r1, r1, r0
 800694a:	6021      	streq	r1, [r4, #0]
 800694c:	6063      	str	r3, [r4, #4]
 800694e:	6054      	str	r4, [r2, #4]
 8006950:	e7cb      	b.n	80068ea <_free_r+0x22>
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	200018d4 	.word	0x200018d4

08006958 <sbrk_aligned>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	4e0e      	ldr	r6, [pc, #56]	; (8006994 <sbrk_aligned+0x3c>)
 800695c:	460c      	mov	r4, r1
 800695e:	6831      	ldr	r1, [r6, #0]
 8006960:	4605      	mov	r5, r0
 8006962:	b911      	cbnz	r1, 800696a <sbrk_aligned+0x12>
 8006964:	f000 f88c 	bl	8006a80 <_sbrk_r>
 8006968:	6030      	str	r0, [r6, #0]
 800696a:	4621      	mov	r1, r4
 800696c:	4628      	mov	r0, r5
 800696e:	f000 f887 	bl	8006a80 <_sbrk_r>
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	d00a      	beq.n	800698c <sbrk_aligned+0x34>
 8006976:	1cc4      	adds	r4, r0, #3
 8006978:	f024 0403 	bic.w	r4, r4, #3
 800697c:	42a0      	cmp	r0, r4
 800697e:	d007      	beq.n	8006990 <sbrk_aligned+0x38>
 8006980:	1a21      	subs	r1, r4, r0
 8006982:	4628      	mov	r0, r5
 8006984:	f000 f87c 	bl	8006a80 <_sbrk_r>
 8006988:	3001      	adds	r0, #1
 800698a:	d101      	bne.n	8006990 <sbrk_aligned+0x38>
 800698c:	f04f 34ff 	mov.w	r4, #4294967295
 8006990:	4620      	mov	r0, r4
 8006992:	bd70      	pop	{r4, r5, r6, pc}
 8006994:	200018d8 	.word	0x200018d8

08006998 <_malloc_r>:
 8006998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699c:	1ccd      	adds	r5, r1, #3
 800699e:	f025 0503 	bic.w	r5, r5, #3
 80069a2:	3508      	adds	r5, #8
 80069a4:	2d0c      	cmp	r5, #12
 80069a6:	bf38      	it	cc
 80069a8:	250c      	movcc	r5, #12
 80069aa:	2d00      	cmp	r5, #0
 80069ac:	4607      	mov	r7, r0
 80069ae:	db01      	blt.n	80069b4 <_malloc_r+0x1c>
 80069b0:	42a9      	cmp	r1, r5
 80069b2:	d905      	bls.n	80069c0 <_malloc_r+0x28>
 80069b4:	230c      	movs	r3, #12
 80069b6:	2600      	movs	r6, #0
 80069b8:	603b      	str	r3, [r7, #0]
 80069ba:	4630      	mov	r0, r6
 80069bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c0:	4e2e      	ldr	r6, [pc, #184]	; (8006a7c <_malloc_r+0xe4>)
 80069c2:	f000 f86d 	bl	8006aa0 <__malloc_lock>
 80069c6:	6833      	ldr	r3, [r6, #0]
 80069c8:	461c      	mov	r4, r3
 80069ca:	bb34      	cbnz	r4, 8006a1a <_malloc_r+0x82>
 80069cc:	4629      	mov	r1, r5
 80069ce:	4638      	mov	r0, r7
 80069d0:	f7ff ffc2 	bl	8006958 <sbrk_aligned>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	4604      	mov	r4, r0
 80069d8:	d14d      	bne.n	8006a76 <_malloc_r+0xde>
 80069da:	6834      	ldr	r4, [r6, #0]
 80069dc:	4626      	mov	r6, r4
 80069de:	2e00      	cmp	r6, #0
 80069e0:	d140      	bne.n	8006a64 <_malloc_r+0xcc>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	4631      	mov	r1, r6
 80069e6:	4638      	mov	r0, r7
 80069e8:	eb04 0803 	add.w	r8, r4, r3
 80069ec:	f000 f848 	bl	8006a80 <_sbrk_r>
 80069f0:	4580      	cmp	r8, r0
 80069f2:	d13a      	bne.n	8006a6a <_malloc_r+0xd2>
 80069f4:	6821      	ldr	r1, [r4, #0]
 80069f6:	3503      	adds	r5, #3
 80069f8:	1a6d      	subs	r5, r5, r1
 80069fa:	f025 0503 	bic.w	r5, r5, #3
 80069fe:	3508      	adds	r5, #8
 8006a00:	2d0c      	cmp	r5, #12
 8006a02:	bf38      	it	cc
 8006a04:	250c      	movcc	r5, #12
 8006a06:	4638      	mov	r0, r7
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7ff ffa5 	bl	8006958 <sbrk_aligned>
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d02b      	beq.n	8006a6a <_malloc_r+0xd2>
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	442b      	add	r3, r5
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	e00e      	b.n	8006a38 <_malloc_r+0xa0>
 8006a1a:	6822      	ldr	r2, [r4, #0]
 8006a1c:	1b52      	subs	r2, r2, r5
 8006a1e:	d41e      	bmi.n	8006a5e <_malloc_r+0xc6>
 8006a20:	2a0b      	cmp	r2, #11
 8006a22:	d916      	bls.n	8006a52 <_malloc_r+0xba>
 8006a24:	1961      	adds	r1, r4, r5
 8006a26:	42a3      	cmp	r3, r4
 8006a28:	6025      	str	r5, [r4, #0]
 8006a2a:	bf18      	it	ne
 8006a2c:	6059      	strne	r1, [r3, #4]
 8006a2e:	6863      	ldr	r3, [r4, #4]
 8006a30:	bf08      	it	eq
 8006a32:	6031      	streq	r1, [r6, #0]
 8006a34:	5162      	str	r2, [r4, r5]
 8006a36:	604b      	str	r3, [r1, #4]
 8006a38:	4638      	mov	r0, r7
 8006a3a:	f104 060b 	add.w	r6, r4, #11
 8006a3e:	f000 f835 	bl	8006aac <__malloc_unlock>
 8006a42:	f026 0607 	bic.w	r6, r6, #7
 8006a46:	1d23      	adds	r3, r4, #4
 8006a48:	1af2      	subs	r2, r6, r3
 8006a4a:	d0b6      	beq.n	80069ba <_malloc_r+0x22>
 8006a4c:	1b9b      	subs	r3, r3, r6
 8006a4e:	50a3      	str	r3, [r4, r2]
 8006a50:	e7b3      	b.n	80069ba <_malloc_r+0x22>
 8006a52:	6862      	ldr	r2, [r4, #4]
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	bf0c      	ite	eq
 8006a58:	6032      	streq	r2, [r6, #0]
 8006a5a:	605a      	strne	r2, [r3, #4]
 8006a5c:	e7ec      	b.n	8006a38 <_malloc_r+0xa0>
 8006a5e:	4623      	mov	r3, r4
 8006a60:	6864      	ldr	r4, [r4, #4]
 8006a62:	e7b2      	b.n	80069ca <_malloc_r+0x32>
 8006a64:	4634      	mov	r4, r6
 8006a66:	6876      	ldr	r6, [r6, #4]
 8006a68:	e7b9      	b.n	80069de <_malloc_r+0x46>
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	f000 f81c 	bl	8006aac <__malloc_unlock>
 8006a74:	e7a1      	b.n	80069ba <_malloc_r+0x22>
 8006a76:	6025      	str	r5, [r4, #0]
 8006a78:	e7de      	b.n	8006a38 <_malloc_r+0xa0>
 8006a7a:	bf00      	nop
 8006a7c:	200018d4 	.word	0x200018d4

08006a80 <_sbrk_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	2300      	movs	r3, #0
 8006a84:	4d05      	ldr	r5, [pc, #20]	; (8006a9c <_sbrk_r+0x1c>)
 8006a86:	4604      	mov	r4, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	f7fd f82e 	bl	8003aec <_sbrk>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d102      	bne.n	8006a9a <_sbrk_r+0x1a>
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	b103      	cbz	r3, 8006a9a <_sbrk_r+0x1a>
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	200018dc 	.word	0x200018dc

08006aa0 <__malloc_lock>:
 8006aa0:	4801      	ldr	r0, [pc, #4]	; (8006aa8 <__malloc_lock+0x8>)
 8006aa2:	f000 b809 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 8006aa6:	bf00      	nop
 8006aa8:	200018e0 	.word	0x200018e0

08006aac <__malloc_unlock>:
 8006aac:	4801      	ldr	r0, [pc, #4]	; (8006ab4 <__malloc_unlock+0x8>)
 8006aae:	f000 b804 	b.w	8006aba <__retarget_lock_release_recursive>
 8006ab2:	bf00      	nop
 8006ab4:	200018e0 	.word	0x200018e0

08006ab8 <__retarget_lock_acquire_recursive>:
 8006ab8:	4770      	bx	lr

08006aba <__retarget_lock_release_recursive>:
 8006aba:	4770      	bx	lr

08006abc <_init>:
 8006abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abe:	bf00      	nop
 8006ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac2:	bc08      	pop	{r3}
 8006ac4:	469e      	mov	lr, r3
 8006ac6:	4770      	bx	lr

08006ac8 <_fini>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	bf00      	nop
 8006acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ace:	bc08      	pop	{r3}
 8006ad0:	469e      	mov	lr, r3
 8006ad2:	4770      	bx	lr
